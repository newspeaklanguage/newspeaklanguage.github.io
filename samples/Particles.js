"use strict";

let nil = "patch me with nil";

let currentActor;

let theGlobalObject = this;

function SM(n,am,m,s){this.name=n; this.accessModifier = am; this.isMutable=m; this.isSynthetic=s; };

function MM(n,am,sy,src){this.name=n; this.accessModifier = am; this.isSynthetic=sy; this.source=src; };

function dnuCatcher(s){ return function() {
return this.dnu(vmmirror.kernel.$Message().$mangledSelector$arguments$(s, Array.prototype.slice.call(arguments)));
} };

let mixins = new function () {
 this.$RuntimeForV8 = new function () {
  let $ = this;
  let $0 = this;
  this.debug = "Runtime mixin for RuntimeForV8";
  this.name = "RuntimeForV8";
  this.header = 1;
  this.slots = [
   new SM("Kernel", "protected", false, false),
   new SM("Actors", "protected", false, false),
   new SM("Aliens", "protected", false, false),
   new SM("Collections", "protected", false, false),
   new SM("Mirrors", "protected", false, false),
   new SM("MirrorGroups", "public", false, false),
   new SM("Streams", "protected", false, false),
   new SM("RuntimeForV8`Platform", "public", true, true)
  ];
  this.methods = [
   new MM("superInit`RuntimeForV8", "protected", true, 2),
   new MM("instance`initializer", "public", true, 3),
   new MM("using:", "public", false, 4),
   new MM("Platform", "protected", true, 0),
   new MM("init`Kernel:", "protected", true, 0),
   new MM("Kernel", "protected", true, 0),
   new MM("init`Actors:", "protected", true, 0),
   new MM("Actors", "protected", true, 0),
   new MM("init`Aliens:", "protected", true, 0),
   new MM("Aliens", "protected", true, 0),
   new MM("init`Collections:", "protected", true, 0),
   new MM("Collections", "protected", true, 0),
   new MM("init`Mirrors:", "protected", true, 0),
   new MM("Mirrors", "protected", true, 0),
   new MM("init`MirrorGroups:", "public", true, 0),
   new MM("MirrorGroups", "public", true, 0),
   new MM("init`Streams:", "protected", true, 0),
   new MM("Streams", "protected", true, 0),
   new MM("init`RuntimeForV8`Platform:", "public", true, 0),
   new MM("RuntimeForV8`Platform", "public", true, 0),
   new MM("RuntimeForV8`Platform:", "public", true, 0)
  ];
  this.nestedClasses = ["RuntimeForV8`Platform"];
  this.applications = [];
  this.$superInit$RuntimeForV8 = function ($manifest) {
   let self = this;
   self.$super$RuntimeForV8$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($manifest) {
   let self = this;
   self._$superInit$RuntimeForV8($manifest);
   self._$init$Kernel$($manifest.$KernelForV8());
   self._$init$Actors$($manifest.$ActorsForV8());
   self._$init$Aliens$($manifest.$AliensForV8());
   self._$init$Collections$($manifest.$Collections());
   self._$init$Mirrors$($manifest.$MirrorsForV8());
   self._$init$MirrorGroups$($manifest.$MirrorGroups());
   self._$init$Streams$($manifest.$Streams());
   return self;
  };
  this.$using$ = function ($vmmirror) {
   let self = this;
   self._$Object().$enclosingObject().$augmentPrototypes();
   return self._$Platform().$usingVmMirror$($vmmirror);
  };
  this.$Platform = function () {
   if (nil === this.$RuntimeForV8$Platform$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$RuntimeForV8);
    let mixin = $.$RuntimeForV8$Platform;
    this.$RuntimeForV8$Platform$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$RuntimeForV8$Platform$slot;
  };
  this.$init$Kernel$ = function (v) {
   this.$Kernel$slot = v;
   return this;
  };
  this.$Kernel = function () {
   return this.$Kernel$slot;
  };
  this.$init$Actors$ = function (v) {
   this.$Actors$slot = v;
   return this;
  };
  this.$Actors = function () {
   return this.$Actors$slot;
  };
  this.$init$Aliens$ = function (v) {
   this.$Aliens$slot = v;
   return this;
  };
  this.$Aliens = function () {
   return this.$Aliens$slot;
  };
  this.$init$Collections$ = function (v) {
   this.$Collections$slot = v;
   return this;
  };
  this.$Collections = function () {
   return this.$Collections$slot;
  };
  this.$init$Mirrors$ = function (v) {
   this.$Mirrors$slot = v;
   return this;
  };
  this.$Mirrors = function () {
   return this.$Mirrors$slot;
  };
  this.$init$MirrorGroups$ = function (v) {
   this.$MirrorGroups$slot = v;
   return this;
  };
  this.$MirrorGroups = function () {
   return this.$MirrorGroups$slot;
  };
  this.$init$Streams$ = function (v) {
   this.$Streams$slot = v;
   return this;
  };
  this.$Streams = function () {
   return this.$Streams$slot;
  };
  this.$init$RuntimeForV8$Platform$ = function (v) {
   this.$RuntimeForV8$Platform$slot = v;
   return this;
  };
  this.$RuntimeForV8$Platform = function () {
   return this.$RuntimeForV8$Platform$slot;
  };
  this.$RuntimeForV8$Platform$ = function (v) {
   this.$RuntimeForV8$Platform$slot = v;
   return this;
  };
  this.$RuntimeForV8$Platform = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for RuntimeForV8`Platform";
   this.name = "RuntimeForV8`Platform";
   this.header = 5;
   this.slots = [
    new SM("kernel", "public", false, false),
    new SM("actors", "public", false, false),
    new SM("js", "public", false, false),
    new SM("collections", "public", false, false),
    new SM("mirrors", "public", false, false),
    new SM("streams", "public", false, false)
   ];
   this.methods = [
    new MM("superInit`RuntimeForV8`Platform", "protected", true, 6),
    new MM("instance`initializer", "public", true, 7),
    new MM("Exception", "public", false, 8),
    new MM("Message", "public", false, 9),
    new MM("MessageNotUnderstood", "public", false, 10),
    new MM("UnhandledError", "public", false, 11),
    new MM("init`kernel:", "public", true, 0),
    new MM("kernel", "public", true, 0),
    new MM("init`actors:", "public", true, 0),
    new MM("actors", "public", true, 0),
    new MM("init`js:", "public", true, 0),
    new MM("js", "public", true, 0),
    new MM("init`collections:", "public", true, 0),
    new MM("collections", "public", true, 0),
    new MM("init`mirrors:", "public", true, 0),
    new MM("mirrors", "public", true, 0),
    new MM("init`streams:", "public", true, 0),
    new MM("streams", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$RuntimeForV8$Platform = function ($vmmirror) {
    let self = this;
    self.$super$RuntimeForV8$Platform$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($vmmirror) {
    let self = this;
    self._$superInit$RuntimeForV8$Platform($vmmirror);
    self._$init$kernel$(self._$Object().$enclosingObject());
    self._$init$actors$(self._$Future().$computing$(function () {
     return self.$enclosingObjects$RuntimeForV8$Platform[0]._$Actors().$usingPlatform$(self);
    }));
    self._$init$js$(self._$Future().$computing$(function () {
     return self.$enclosingObjects$RuntimeForV8$Platform[0]._$Aliens().$usingPlatform$(self);
    }));
    self._$init$collections$(self._$Future().$computing$(function () {
     return self.$enclosingObjects$RuntimeForV8$Platform[0]._$Collections().$usingPlatform$(self);
    }));
    self._$init$mirrors$(self._$Future().$computing$(function () {
     return self.$enclosingObjects$RuntimeForV8$Platform[0]._$Mirrors().$usingPlatform$runtime$vmMirror$(self, self.$enclosingObjects$RuntimeForV8$Platform[0], $vmmirror);
    }));
    self._$init$streams$(self._$Future().$computing$(function () {
     return self.$enclosingObjects$RuntimeForV8$Platform[0]._$Streams().$usingPlatform$(self);
    }));
    self._$kernel().$platform$(self);
    self._$actors().$yourself();
    return self;
   };
   this.$Exception = function () {
    let self = this;
    return self._$Error();
   };
   this.$Message = function () {
    let self = this;
    return self._$kernel().$Message();
   };
   this.$MessageNotUnderstood = function () {
    let self = this;
    return self._$kernel().$MessageNotUnderstood();
   };
   this.$UnhandledError = function () {
    let self = this;
    return self._$Error();
   };
   this.$init$kernel$ = function (v) {
    this.$kernel$slot = v;
    return this;
   };
   this.$kernel = function () {
    return this.$kernel$slot;
   };
   this.$init$actors$ = function (v) {
    this.$actors$slot = v;
    return this;
   };
   this.$actors = function () {
    return this.$actors$slot;
   };
   this.$init$js$ = function (v) {
    this.$js$slot = v;
    return this;
   };
   this.$js = function () {
    return this.$js$slot;
   };
   this.$init$collections$ = function (v) {
    this.$collections$slot = v;
    return this;
   };
   this.$collections = function () {
    return this.$collections$slot;
   };
   this.$init$mirrors$ = function (v) {
    this.$mirrors$slot = v;
    return this;
   };
   this.$mirrors = function () {
    return this.$mirrors$slot;
   };
   this.$init$streams$ = function (v) {
    this.$streams$slot = v;
    return this;
   };
   this.$streams = function () {
    return this.$streams$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for RuntimeForV8`Platform";
     this._$superInit$RuntimeForV8$Platform = $.$superInit$RuntimeForV8$Platform;
     this.$superInit$RuntimeForV8$Platform = dnuCatcher("$superInit$RuntimeForV8$Platform");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$Exception = this._$Exception = $.$Exception;
     this.$Message = this._$Message = $.$Message;
     this.$MessageNotUnderstood = this._$MessageNotUnderstood = $.$MessageNotUnderstood;
     this.$UnhandledError = this._$UnhandledError = $.$UnhandledError;
     this.$init$kernel$ = this._$init$kernel$ = $.$init$kernel$;
     this.$kernel = this._$kernel = $.$kernel;
     this.$init$actors$ = this._$init$actors$ = $.$init$actors$;
     this.$actors = this._$actors = $.$actors;
     this.$init$js$ = this._$init$js$ = $.$init$js$;
     this.$js = this._$js = $.$js;
     this.$init$collections$ = this._$init$collections$ = $.$init$collections$;
     this.$collections = this._$collections = $.$collections;
     this.$init$mirrors$ = this._$init$mirrors$ = $.$init$mirrors$;
     this.$mirrors = this._$mirrors = $.$mirrors;
     this.$init$streams$ = this._$init$streams$ = $.$init$streams$;
     this.$streams = this._$streams = $.$streams;
     this.$enclosingObjects$RuntimeForV8$Platform = enclosingObjects;
     this.$super$RuntimeForV8$Platform$slot = runtimeSuperclass;
     this["RuntimeForV8`Platform"] = function () {
      superBasicNew.call(this);
      this.$kernel$slot = nil;
      this.$actors$slot = nil;
      this.$js$slot = nil;
      this.$collections$slot = nil;
      this.$mirrors$slot = nil;
      this.$streams$slot = nil;
     };
     this.basicNew = this["RuntimeForV8`Platform"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for RuntimeForV8`Platform";
    this.slots = [];
    this.methods = [new MM("usingVmMirror:", "public", true, 0)];
    this.nestedClasses = [];
    this.$usingVmMirror$ = function ($vmmirror) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($vmmirror);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for RuntimeForV8`Platform";
      this.$usingVmMirror$ = this._$usingVmMirror$ = $.$usingVmMirror$;
      this.$enclosingObjects$RuntimeForV8$Platform = enclosingObjects;
      this.$super$RuntimeForV8$Platform$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$RuntimeForV8$Platform.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for RuntimeForV8";
    this._$superInit$RuntimeForV8 = $.$superInit$RuntimeForV8;
    this.$superInit$RuntimeForV8 = dnuCatcher("$superInit$RuntimeForV8");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this.$using$ = this._$using$ = $.$using$;
    this._$Platform = $.$Platform;
    this.$Platform = dnuCatcher("$Platform");
    this._$init$Kernel$ = $.$init$Kernel$;
    this.$init$Kernel$ = dnuCatcher("$init$Kernel$");
    this._$Kernel = $.$Kernel;
    this.$Kernel = dnuCatcher("$Kernel");
    this._$init$Actors$ = $.$init$Actors$;
    this.$init$Actors$ = dnuCatcher("$init$Actors$");
    this._$Actors = $.$Actors;
    this.$Actors = dnuCatcher("$Actors");
    this._$init$Aliens$ = $.$init$Aliens$;
    this.$init$Aliens$ = dnuCatcher("$init$Aliens$");
    this._$Aliens = $.$Aliens;
    this.$Aliens = dnuCatcher("$Aliens");
    this._$init$Collections$ = $.$init$Collections$;
    this.$init$Collections$ = dnuCatcher("$init$Collections$");
    this._$Collections = $.$Collections;
    this.$Collections = dnuCatcher("$Collections");
    this._$init$Mirrors$ = $.$init$Mirrors$;
    this.$init$Mirrors$ = dnuCatcher("$init$Mirrors$");
    this._$Mirrors = $.$Mirrors;
    this.$Mirrors = dnuCatcher("$Mirrors");
    this.$init$MirrorGroups$ = this._$init$MirrorGroups$ = $.$init$MirrorGroups$;
    this.$MirrorGroups = this._$MirrorGroups = $.$MirrorGroups;
    this._$init$Streams$ = $.$init$Streams$;
    this.$init$Streams$ = dnuCatcher("$init$Streams$");
    this._$Streams = $.$Streams;
    this.$Streams = dnuCatcher("$Streams");
    this.$init$RuntimeForV8$Platform$ = this._$init$RuntimeForV8$Platform$ = $.$init$RuntimeForV8$Platform$;
    this.$RuntimeForV8$Platform = this._$RuntimeForV8$Platform = $.$RuntimeForV8$Platform;
    this.$RuntimeForV8$Platform$ = this._$RuntimeForV8$Platform$ = $.$RuntimeForV8$Platform$;
    this.$enclosingObjects$RuntimeForV8 = enclosingObjects;
    this.$super$RuntimeForV8$slot = runtimeSuperclass;
    this.RuntimeForV8 = function () {
     superBasicNew.call(this);
     this.$Kernel$slot = nil;
     this.$Actors$slot = nil;
     this.$Aliens$slot = nil;
     this.$Collections$slot = nil;
     this.$Mirrors$slot = nil;
     this.$MirrorGroups$slot = nil;
     this.$Streams$slot = nil;
     this.$RuntimeForV8$Platform$slot = nil;
    };
    this.basicNew = this.RuntimeForV8;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   let $ = this;
   this.debug = "Runtime meta mixin for RuntimeForV8";
   this.slots = [];
   this.methods = [new MM("packageUsing:", "public", true, 0)];
   this.nestedClasses = [];
   this.$packageUsing$ = function ($manifest) {
    let t = new this.nonMeta.basicNew();
    t.$instance$initializer($manifest);
    return t;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for RuntimeForV8";
     this.$packageUsing$ = this._$packageUsing$ = $.$packageUsing$;
     this.$enclosingObjects$RuntimeForV8 = enclosingObjects;
     this.$super$RuntimeForV8$slot = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$KernelForV8 = new function () {
  let $ = this;
  let $0 = this;
  this.debug = "Runtime mixin for KernelForV8";
  this.name = "KernelForV8";
  this.header = 12;
  this.slots = [
   new SM("vmmirror", "protected", false, false),
   new SM("platform", "public", true, false),
   new SM("KernelForV8`Array", "public", true, true),
   new SM("KernelForV8`Boolean", "public", true, true),
   new SM("KernelForV8`ByteArray", "public", true, true),
   new SM("KernelForV8`Class", "public", true, true),
   new SM("KernelForV8`Closure", "public", true, true),
   new SM("KernelForV8`Exception", "public", true, true),
   new SM("KernelForV8`Future", "public", true, true),
   new SM("KernelForV8`Message", "public", true, true),
   new SM("KernelForV8`MessageNotUnderstood", "public", true, true),
   new SM("KernelForV8`Metaclass", "public", true, true),
   new SM("KernelForV8`Mixin", "public", true, true),
   new SM("KernelForV8`Number", "public", true, true),
   new SM("KernelForV8`Object", "public", true, true),
   new SM("KernelForV8`Stopwatch", "public", true, true),
   new SM("KernelForV8`String", "public", true, true),
   new SM("KernelForV8`StringBuilder", "public", true, true),
   new SM("KernelForV8`UndefinedObject", "public", true, true)
  ];
  this.methods = [
   new MM("superInit`KernelForV8", "protected", true, 13),
   new MM("instance`initializer", "public", true, 14),
   new MM("Error", "public", false, 15),
   new MM("UnhandledError", "public", false, 16),
   new MM("augment:withPropertiesOf:", "protected", false, 17),
   new MM("augmentPrototypes", "public", false, 18),
   new MM("classOf:", "private", false, 19),
   new MM("print:", "private", false, 20),
   new MM("Array", "public", true, 0),
   new MM("Boolean", "public", true, 0),
   new MM("ByteArray", "public", true, 0),
   new MM("Class", "public", true, 0),
   new MM("Closure", "public", true, 0),
   new MM("Exception", "public", true, 0),
   new MM("Future", "public", true, 0),
   new MM("Message", "public", true, 0),
   new MM("MessageNotUnderstood", "public", true, 0),
   new MM("Metaclass", "public", true, 0),
   new MM("Mixin", "public", true, 0),
   new MM("Number", "public", true, 0),
   new MM("Object", "public", true, 0),
   new MM("Stopwatch", "public", true, 0),
   new MM("String", "public", true, 0),
   new MM("StringBuilder", "public", true, 0),
   new MM("UndefinedObject", "public", true, 0),
   new MM("init`vmmirror:", "protected", true, 0),
   new MM("vmmirror", "protected", true, 0),
   new MM("init`platform:", "public", true, 0),
   new MM("platform", "public", true, 0),
   new MM("platform:", "public", true, 0),
   new MM("init`KernelForV8`Array:", "public", true, 0),
   new MM("KernelForV8`Array", "public", true, 0),
   new MM("KernelForV8`Array:", "public", true, 0),
   new MM("init`KernelForV8`Boolean:", "public", true, 0),
   new MM("KernelForV8`Boolean", "public", true, 0),
   new MM("KernelForV8`Boolean:", "public", true, 0),
   new MM("init`KernelForV8`ByteArray:", "public", true, 0),
   new MM("KernelForV8`ByteArray", "public", true, 0),
   new MM("KernelForV8`ByteArray:", "public", true, 0),
   new MM("init`KernelForV8`Class:", "public", true, 0),
   new MM("KernelForV8`Class", "public", true, 0),
   new MM("KernelForV8`Class:", "public", true, 0),
   new MM("init`KernelForV8`Closure:", "public", true, 0),
   new MM("KernelForV8`Closure", "public", true, 0),
   new MM("KernelForV8`Closure:", "public", true, 0),
   new MM("init`KernelForV8`Exception:", "public", true, 0),
   new MM("KernelForV8`Exception", "public", true, 0),
   new MM("KernelForV8`Exception:", "public", true, 0),
   new MM("init`KernelForV8`Future:", "public", true, 0),
   new MM("KernelForV8`Future", "public", true, 0),
   new MM("KernelForV8`Future:", "public", true, 0),
   new MM("init`KernelForV8`Message:", "public", true, 0),
   new MM("KernelForV8`Message", "public", true, 0),
   new MM("KernelForV8`Message:", "public", true, 0),
   new MM("init`KernelForV8`MessageNotUnderstood:", "public", true, 0),
   new MM("KernelForV8`MessageNotUnderstood", "public", true, 0),
   new MM("KernelForV8`MessageNotUnderstood:", "public", true, 0),
   new MM("init`KernelForV8`Metaclass:", "public", true, 0),
   new MM("KernelForV8`Metaclass", "public", true, 0),
   new MM("KernelForV8`Metaclass:", "public", true, 0),
   new MM("init`KernelForV8`Mixin:", "public", true, 0),
   new MM("KernelForV8`Mixin", "public", true, 0),
   new MM("KernelForV8`Mixin:", "public", true, 0),
   new MM("init`KernelForV8`Number:", "public", true, 0),
   new MM("KernelForV8`Number", "public", true, 0),
   new MM("KernelForV8`Number:", "public", true, 0),
   new MM("init`KernelForV8`Object:", "public", true, 0),
   new MM("KernelForV8`Object", "public", true, 0),
   new MM("KernelForV8`Object:", "public", true, 0),
   new MM("init`KernelForV8`Stopwatch:", "public", true, 0),
   new MM("KernelForV8`Stopwatch", "public", true, 0),
   new MM("KernelForV8`Stopwatch:", "public", true, 0),
   new MM("init`KernelForV8`String:", "public", true, 0),
   new MM("KernelForV8`String", "public", true, 0),
   new MM("KernelForV8`String:", "public", true, 0),
   new MM("init`KernelForV8`StringBuilder:", "public", true, 0),
   new MM("KernelForV8`StringBuilder", "public", true, 0),
   new MM("KernelForV8`StringBuilder:", "public", true, 0),
   new MM("init`KernelForV8`UndefinedObject:", "public", true, 0),
   new MM("KernelForV8`UndefinedObject", "public", true, 0),
   new MM("KernelForV8`UndefinedObject:", "public", true, 0)
  ];
  this.nestedClasses = [
   "KernelForV8`Array",
   "KernelForV8`Boolean",
   "KernelForV8`ByteArray",
   "KernelForV8`Class",
   "KernelForV8`Closure",
   "KernelForV8`Exception",
   "KernelForV8`Future",
   "KernelForV8`Message",
   "KernelForV8`MessageNotUnderstood",
   "KernelForV8`Metaclass",
   "KernelForV8`Mixin",
   "KernelForV8`Number",
   "KernelForV8`Object",
   "KernelForV8`Stopwatch",
   "KernelForV8`String",
   "KernelForV8`StringBuilder",
   "KernelForV8`UndefinedObject"
  ];
  this.applications = [];
  this.$superInit$KernelForV8 = function ($vmm) {
   let self = this;
   self.$super$KernelForV8$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($vmm) {
   let self = this;
   self._$superInit$KernelForV8($vmm);
   self._$init$vmmirror$($vmm);
   return self;
  };
  this.$Error = function () {
   let self = this;
   return self._$Exception();
  };
  this.$UnhandledError = function () {
   let self = this;
   return self._$Exception();
  };
  this.$augment$withPropertiesOf$ = function ($prototype, $runtimeClass) {
   let self = this;
   let $keys = nil;
   $keys = Object.keys($runtimeClass);
   $keys.forEach(function (key) {
    $prototype[key] = $runtimeClass[key];
   });
   return self;
  };
  this.$augmentPrototypes = function () {
   let self = this;
   installDnuHandlersOn(Object.prototype);
   self._$augment$withPropertiesOf$(Array.prototype, self._$Object().runtimeClass);
   self._$augment$withPropertiesOf$(Array.prototype, self._$Array().runtimeClass);
   self._$augment$withPropertiesOf$(Boolean.prototype, self._$Object().runtimeClass);
   self._$augment$withPropertiesOf$(Boolean.prototype, self._$Boolean().runtimeClass);
   self._$augment$withPropertiesOf$(Function.prototype, self._$Object().runtimeClass);
   self._$augment$withPropertiesOf$(Function.prototype, self._$Closure().runtimeClass);
   self._$augment$withPropertiesOf$(Number.prototype, self._$Object().runtimeClass);
   self._$augment$withPropertiesOf$(Number.prototype, self._$Number().runtimeClass);
   self._$augment$withPropertiesOf$(String.prototype, self._$Object().runtimeClass);
   self._$augment$withPropertiesOf$(String.prototype, self._$String().runtimeClass);
   self._$augment$withPropertiesOf$(Uint8Array.prototype, self._$Object().runtimeClass);
   self._$augment$withPropertiesOf$(Uint8Array.prototype, self._$ByteArray().runtimeClass);
   return self;
  };
  this.$classOf$ = function (self, $object) {
   if (typeof $object === "string") {
    return self._$String();
   };
   if (typeof $object === "number") {
    return self._$Number();
   };
   if (typeof $object === "boolean") {
    return self._$Boolean();
   };
   if (typeof $object === "function") {
    return self._$Closure();
   };
   if ($object instanceof Array) {
    return self._$Array();
   };
   if ($object instanceof Uint8Array) {
    return self._$ByteArray();
   };
   return $object.newspeakClass;
  };
  this.$print$ = function (self, $string) {
   (typeof console === "undefined" ? print($string) : console.log($string));
   return self;
  };
  this.$Array = function () {
   if (nil === this.$KernelForV8$Array$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    let mixin = $.$KernelForV8$Array;
    this.$KernelForV8$Array$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Array$slot;
  };
  this.$Boolean = function () {
   if (nil === this.$KernelForV8$Boolean$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    let mixin = $.$KernelForV8$Boolean;
    this.$KernelForV8$Boolean$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Boolean$slot;
  };
  this.$ByteArray = function () {
   if (nil === this.$KernelForV8$ByteArray$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    let mixin = $.$KernelForV8$ByteArray;
    this.$KernelForV8$ByteArray$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$ByteArray$slot;
  };
  this.$Class = function () {
   if (nil === this.$KernelForV8$Class$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    let mixin = $.$KernelForV8$Class;
    this.$KernelForV8$Class$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Class$slot;
  };
  this.$Closure = function () {
   if (nil === this.$KernelForV8$Closure$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    let mixin = $.$KernelForV8$Closure;
    this.$KernelForV8$Closure$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Closure$slot;
  };
  this.$Exception = function () {
   if (nil === this.$KernelForV8$Exception$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    let mixin = $.$KernelForV8$Exception;
    this.$KernelForV8$Exception$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Exception$slot;
  };
  this.$Future = function () {
   if (nil === this.$KernelForV8$Future$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    let mixin = $.$KernelForV8$Future;
    this.$KernelForV8$Future$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Future$slot;
  };
  this.$Message = function () {
   if (nil === this.$KernelForV8$Message$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    let mixin = $.$KernelForV8$Message;
    this.$KernelForV8$Message$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Message$slot;
  };
  this.$MessageNotUnderstood = function () {
   if (nil === this.$KernelForV8$MessageNotUnderstood$slot) {
    let self = this;
    let superclass = self._$Exception();
    let enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    let mixin = $.$KernelForV8$MessageNotUnderstood;
    this.$KernelForV8$MessageNotUnderstood$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$MessageNotUnderstood$slot;
  };
  this.$Metaclass = function () {
   if (nil === this.$KernelForV8$Metaclass$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    let mixin = $.$KernelForV8$Metaclass;
    this.$KernelForV8$Metaclass$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Metaclass$slot;
  };
  this.$Mixin = function () {
   if (nil === this.$KernelForV8$Mixin$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    let mixin = $.$KernelForV8$Mixin;
    this.$KernelForV8$Mixin$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Mixin$slot;
  };
  this.$Number = function () {
   if (nil === this.$KernelForV8$Number$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    let mixin = $.$KernelForV8$Number;
    this.$KernelForV8$Number$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Number$slot;
  };
  this.$Object = function () {
   if (nil === this.$KernelForV8$Object$slot) {
    let self = this;
    let superclass = self._$ImplementationBase();
    let enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    let mixin = $.$KernelForV8$Object;
    this.$KernelForV8$Object$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Object$slot;
  };
  this.$Stopwatch = function () {
   if (nil === this.$KernelForV8$Stopwatch$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    let mixin = $.$KernelForV8$Stopwatch;
    this.$KernelForV8$Stopwatch$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$Stopwatch$slot;
  };
  this.$String = function () {
   if (nil === this.$KernelForV8$String$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    let mixin = $.$KernelForV8$String;
    this.$KernelForV8$String$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$String$slot;
  };
  this.$StringBuilder = function () {
   if (nil === this.$KernelForV8$StringBuilder$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    let mixin = $.$KernelForV8$StringBuilder;
    this.$KernelForV8$StringBuilder$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$StringBuilder$slot;
  };
  this.$UndefinedObject = function () {
   if (nil === this.$KernelForV8$UndefinedObject$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$KernelForV8);
    let mixin = $.$KernelForV8$UndefinedObject;
    this.$KernelForV8$UndefinedObject$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$KernelForV8$UndefinedObject$slot;
  };
  this.$init$vmmirror$ = function (v) {
   this.$vmmirror$slot = v;
   return this;
  };
  this.$vmmirror = function () {
   return this.$vmmirror$slot;
  };
  this.$init$platform$ = function (v) {
   this.$platform$slot = v;
   return this;
  };
  this.$platform = function () {
   return this.$platform$slot;
  };
  this.$platform$ = function (v) {
   this.$platform$slot = v;
   return this;
  };
  this.$init$KernelForV8$Array$ = function (v) {
   this.$KernelForV8$Array$slot = v;
   return this;
  };
  this.$KernelForV8$Array = function () {
   return this.$KernelForV8$Array$slot;
  };
  this.$KernelForV8$Array$ = function (v) {
   this.$KernelForV8$Array$slot = v;
   return this;
  };
  this.$init$KernelForV8$Boolean$ = function (v) {
   this.$KernelForV8$Boolean$slot = v;
   return this;
  };
  this.$KernelForV8$Boolean = function () {
   return this.$KernelForV8$Boolean$slot;
  };
  this.$KernelForV8$Boolean$ = function (v) {
   this.$KernelForV8$Boolean$slot = v;
   return this;
  };
  this.$init$KernelForV8$ByteArray$ = function (v) {
   this.$KernelForV8$ByteArray$slot = v;
   return this;
  };
  this.$KernelForV8$ByteArray = function () {
   return this.$KernelForV8$ByteArray$slot;
  };
  this.$KernelForV8$ByteArray$ = function (v) {
   this.$KernelForV8$ByteArray$slot = v;
   return this;
  };
  this.$init$KernelForV8$Class$ = function (v) {
   this.$KernelForV8$Class$slot = v;
   return this;
  };
  this.$KernelForV8$Class = function () {
   return this.$KernelForV8$Class$slot;
  };
  this.$KernelForV8$Class$ = function (v) {
   this.$KernelForV8$Class$slot = v;
   return this;
  };
  this.$init$KernelForV8$Closure$ = function (v) {
   this.$KernelForV8$Closure$slot = v;
   return this;
  };
  this.$KernelForV8$Closure = function () {
   return this.$KernelForV8$Closure$slot;
  };
  this.$KernelForV8$Closure$ = function (v) {
   this.$KernelForV8$Closure$slot = v;
   return this;
  };
  this.$init$KernelForV8$Exception$ = function (v) {
   this.$KernelForV8$Exception$slot = v;
   return this;
  };
  this.$KernelForV8$Exception = function () {
   return this.$KernelForV8$Exception$slot;
  };
  this.$KernelForV8$Exception$ = function (v) {
   this.$KernelForV8$Exception$slot = v;
   return this;
  };
  this.$init$KernelForV8$Future$ = function (v) {
   this.$KernelForV8$Future$slot = v;
   return this;
  };
  this.$KernelForV8$Future = function () {
   return this.$KernelForV8$Future$slot;
  };
  this.$KernelForV8$Future$ = function (v) {
   this.$KernelForV8$Future$slot = v;
   return this;
  };
  this.$init$KernelForV8$Message$ = function (v) {
   this.$KernelForV8$Message$slot = v;
   return this;
  };
  this.$KernelForV8$Message = function () {
   return this.$KernelForV8$Message$slot;
  };
  this.$KernelForV8$Message$ = function (v) {
   this.$KernelForV8$Message$slot = v;
   return this;
  };
  this.$init$KernelForV8$MessageNotUnderstood$ = function (v) {
   this.$KernelForV8$MessageNotUnderstood$slot = v;
   return this;
  };
  this.$KernelForV8$MessageNotUnderstood = function () {
   return this.$KernelForV8$MessageNotUnderstood$slot;
  };
  this.$KernelForV8$MessageNotUnderstood$ = function (v) {
   this.$KernelForV8$MessageNotUnderstood$slot = v;
   return this;
  };
  this.$init$KernelForV8$Metaclass$ = function (v) {
   this.$KernelForV8$Metaclass$slot = v;
   return this;
  };
  this.$KernelForV8$Metaclass = function () {
   return this.$KernelForV8$Metaclass$slot;
  };
  this.$KernelForV8$Metaclass$ = function (v) {
   this.$KernelForV8$Metaclass$slot = v;
   return this;
  };
  this.$init$KernelForV8$Mixin$ = function (v) {
   this.$KernelForV8$Mixin$slot = v;
   return this;
  };
  this.$KernelForV8$Mixin = function () {
   return this.$KernelForV8$Mixin$slot;
  };
  this.$KernelForV8$Mixin$ = function (v) {
   this.$KernelForV8$Mixin$slot = v;
   return this;
  };
  this.$init$KernelForV8$Number$ = function (v) {
   this.$KernelForV8$Number$slot = v;
   return this;
  };
  this.$KernelForV8$Number = function () {
   return this.$KernelForV8$Number$slot;
  };
  this.$KernelForV8$Number$ = function (v) {
   this.$KernelForV8$Number$slot = v;
   return this;
  };
  this.$init$KernelForV8$Object$ = function (v) {
   this.$KernelForV8$Object$slot = v;
   return this;
  };
  this.$KernelForV8$Object = function () {
   return this.$KernelForV8$Object$slot;
  };
  this.$KernelForV8$Object$ = function (v) {
   this.$KernelForV8$Object$slot = v;
   return this;
  };
  this.$init$KernelForV8$Stopwatch$ = function (v) {
   this.$KernelForV8$Stopwatch$slot = v;
   return this;
  };
  this.$KernelForV8$Stopwatch = function () {
   return this.$KernelForV8$Stopwatch$slot;
  };
  this.$KernelForV8$Stopwatch$ = function (v) {
   this.$KernelForV8$Stopwatch$slot = v;
   return this;
  };
  this.$init$KernelForV8$String$ = function (v) {
   this.$KernelForV8$String$slot = v;
   return this;
  };
  this.$KernelForV8$String = function () {
   return this.$KernelForV8$String$slot;
  };
  this.$KernelForV8$String$ = function (v) {
   this.$KernelForV8$String$slot = v;
   return this;
  };
  this.$init$KernelForV8$StringBuilder$ = function (v) {
   this.$KernelForV8$StringBuilder$slot = v;
   return this;
  };
  this.$KernelForV8$StringBuilder = function () {
   return this.$KernelForV8$StringBuilder$slot;
  };
  this.$KernelForV8$StringBuilder$ = function (v) {
   this.$KernelForV8$StringBuilder$slot = v;
   return this;
  };
  this.$init$KernelForV8$UndefinedObject$ = function (v) {
   this.$KernelForV8$UndefinedObject$slot = v;
   return this;
  };
  this.$KernelForV8$UndefinedObject = function () {
   return this.$KernelForV8$UndefinedObject$slot;
  };
  this.$KernelForV8$UndefinedObject$ = function (v) {
   this.$KernelForV8$UndefinedObject$slot = v;
   return this;
  };
  this.$KernelForV8$Array = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Array";
   this.name = "KernelForV8`Array";
   this.header = 21;
   this.slots = [];
   this.methods = [
    new MM("superInit`KernelForV8`Array", "protected", true, 22),
    new MM("instance`initializer", "public", true, 23),
    new MM(",", "public", false, 24),
    new MM("asArray", "public", false, 25),
    new MM("asOrderedCollection", "public", false, 26),
    new MM("at:", "public", false, 27),
    new MM("at:put:", "public", false, 28),
    new MM("binarySearchFor:between:and:toCompare:", "public", false, 29),
    new MM("collect:", "public", false, 30),
    new MM("copyFrom:to:", "public", false, 31),
    new MM("copyWith:", "public", false, 32),
    new MM("copyWithSize:", "public", false, 33),
    new MM("defaultMedianOf:and:and:", "protected", false, 34),
    new MM("defaultSort:to:", "public", false, 35),
    new MM("do:", "public", false, 36),
    new MM("do:separatedBy:", "public", false, 37),
    new MM("first", "public", false, 38),
    new MM("flatMap:", "public", false, 39),
    new MM("flatten", "public", false, 40),
    new MM("includes:", "public", false, 41),
    new MM("indexOf:", "public", false, 42),
    new MM("inject:into:", "public", false, 43),
    new MM("isArray", "public", false, 44),
    new MM("isCollection", "public", false, 45),
    new MM("isEmpty", "public", false, 46),
    new MM("isKindOfArray", "public", false, 47),
    new MM("isKindOfCollection", "public", false, 48),
    new MM("keysAndValuesDo:", "public", false, 49),
    new MM("last", "public", false, 50),
    new MM("mergeSortFrom:to:by:", "public", false, 51),
    new MM("printString", "public", false, 52),
    new MM("replaceFrom:to:with:", "public", false, 53),
    new MM("replaceFrom:to:with:startingAt:", "public", false, 54),
    new MM("select:", "public", false, 55),
    new MM("size", "public", false, 56),
    new MM("sort:", "public", false, 57)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Array = function () {
    let self = this;
    self.$super$KernelForV8$Array$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$KernelForV8$Array();
    return self;
   };
   this.$$comma = function ($otherSequence) {
    let self = this;
    return self.concat($otherSequence.$asArray());
   };
   this.$asArray = function () {
    let self = this;
    return self;
   };
   this.$asOrderedCollection = function () {
    let self = this;
    return self.$enclosingObjects$KernelForV8$Array[0]._$platform().$collections().$List().$withAll$(self);
   };
   this.$at$ = function ($index) {
    let self = this;
    let $jsIndex = nil;
    if (!(typeof $index === "number")) {
     return self.$enclosingObjects$KernelForV8$Array[0]._$Error().$signal$("ArgumentError");
    };
    $jsIndex = $index - 1;
    if ($jsIndex < 0) {
     return self.$enclosingObjects$KernelForV8$Array[0]._$Error().$signal$("ArgumentError");
    };
    if ($jsIndex >= this.length) {
     return self.$enclosingObjects$KernelForV8$Array[0]._$Error().$signal$("ArgumentError");
    };
    return this[$jsIndex];
   };
   this.$at$put$ = function ($index, $value) {
    let self = this;
    let $jsIndex = nil;
    if (!(typeof $index === "number")) {
     return self.$enclosingObjects$KernelForV8$Array[0]._$Error().$signal$("ArgumentError");
    };
    $jsIndex = $index - 1;
    if ($jsIndex < 0) {
     return self.$enclosingObjects$KernelForV8$Array[0]._$Error().$signal$("ArgumentError");
    };
    if ($jsIndex >= this.length) {
     return self.$enclosingObjects$KernelForV8$Array[0]._$Error().$signal$("ArgumentError");
    };
    return this[$index - 1] = $value;
   };
   this.$binarySearchFor$between$and$toCompare$ = function ($el, $start, $end, $compare) {
    let self = this;
    let $low = nil;
    let $high = nil;
    $low = $start;
    $high = $end;
    {
     for (; $low.$$less$equal($high); ) {
      let $mid = nil;
      $mid = ($low + $high).$$over$over(2);
      if ($compare.$value$value$(self._$at$($mid), $el)) {
       $low = $mid + 1;
      } else {
       $high = $mid - 1;
      };
     };
    };
    return $low;
   };
   this.$collect$ = function ($block) {
    let self = this;
    return self.map($block);
   };
   this.$copyFrom$to$ = function ($start, $end) {
    let self = this;
    return self.slice($start - 1, $end);
   };
   this.$copyWith$ = function ($extraElement) {
    let self = this;
    let $newSize = nil;
    let $a = nil;
    $newSize = self._$size() + 1;
    $a = self.$enclosingObjects$KernelForV8$Array[0]._$Array().$new$($newSize).$replaceFrom$to$with$(1, self._$size(), self);
    $a.$at$put$($newSize, $extraElement);
    return $a;
   };
   this.$copyWithSize$ = function ($s) {
    let self = this;
    return self.$enclosingObjects$KernelForV8$Array[0]._$Array().$new$($s).$replaceFrom$to$with$(1, $s.$min$(self._$size()), self);
   };
   this.$defaultMedianOf$and$and$ = function ($a, $b, $c) {
    let self = this;
    let $atA = nil;
    let $atB = nil;
    let $atC = nil;
    $atA = self._$at$($a);
    $atB = self._$at$($b);
    $atC = self._$at$($c);
    return $atB.$$less$equal($atA).$ifFalse$ifTrue$(function () {
     return $atC.$$less$equal($atB).$ifFalse$ifTrue$(function () {
      return $b;
     }, function () {
      return $atC.$$less$equal($atA).$ifFalse$ifTrue$(function () {
       return $c;
      }, function () {
       return $a;
      });
     });
    }, function () {
     return $atB.$$less$equal($atC).$ifFalse$ifTrue$(function () {
      return $b;
     }, function () {
      return $atA.$$less$equal($atC).$ifFalse$ifTrue$(function () {
       return $c;
      }, function () {
       return $a;
      });
     });
    });
   };
   this.$defaultSort$to$ = function ($l, $r) {
    let self = this;
    let $i = nil;
    let $j = nil;
    let $x = nil;
    let $m = nil;
    let $n = nil;
    $i = $l;
    $j = $r;
    $n = ($r - $l) + 1;
    if ($n === 0) {
     return self;
    };
    $m = ($l + $r).$$over$over(2);
    if ($n > 7) {
     let $pl = nil;
     let $pn = nil;
     let $s = nil;
     $pl = $l;
     $pn = $r;
     if ($n > 40) {
      $s = $n.$$over$over(8);
      $pl = self._$defaultMedianOf$and$and$($pl, $pl + $s, ($pl + $s) + $s);
      $m = self._$defaultMedianOf$and$and$($m - $s, $m, $m + $s);
      $pn = self._$defaultMedianOf$and$and$(($pn - $s) - $s, $pn - $s, $pn);
     };
     $m = self._$defaultMedianOf$and$and$($pl, $m, $pn);
    };
    $x = self._$at$($m);
    {
     for (; $i.$$less$equal($j); ) {
      let $ati = nil;
      let $atj = nil;
      {
       for (; !$x.$$less$equal($ati = self._$at$($i)); ) {
        $i = $i + 1;
       };
      };
      {
       for (; !($atj = self._$at$($j)).$$less$equal($x); ) {
        $j = $j - 1;
       };
      };
      if ($i.$$less$equal($j)) {
       self._$at$put$($i, $atj);
       self._$at$put$($j, $ati);
       $i = $i + 1;
       $j = $j - 1;
      };
     };
    };
    if ($l.$$less($j)) {
     self._$defaultSort$to$($l, $j);
    };
    if ($i.$$less($r)) {
     self._$defaultSort$to$($i, $r);
    };
    return self;
   };
   this.$do$ = function ($block) {
    let self = this;
    self.forEach($block);
    return self;
   };
   this.$do$separatedBy$ = function ($block, $betweenBlock) {
    let self = this;
    let $firstTime = nil;
    $firstTime = true;
    self._$do$(function ($element) {
     if ($firstTime) {
      $firstTime = false;
     } else {
      $betweenBlock.$value();
     };
     return $block.$value$($element);
    });
    return self;
   };
   this.$first = function () {
    let self = this;
    return self._$at$(1);
   };
   this.$flatMap$ = function ($map) {
    let self = this;
    return self._$flatten().$collect$($map);
   };
   this.$flatten = function () {
    let self = this;
    let $totalSize = nil;
    let $c = nil;
    let $index = nil;
    $totalSize = 0;
    $index = 1;
    self._$do$(function ($e) {
     return $totalSize = $totalSize + $e.$isKindOfCollection().$ifTrue$ifFalse$(function () {
      return $e.$size();
     }, function () {
      return 1;
     });
    });
    $c = self.$enclosingObjects$KernelForV8$Array[0]._$Array().$new$($totalSize);
    self._$do$(function ($e) {
     return $e.$isKindOfCollection().$ifTrue$ifFalse$(function () {
      return $e.$do$(function ($x) {
       $c.$at$put$($index, $x);
       return $index = $index + 1;
      });
     }, function () {
      $c.$at$put$($index, $e);
      return $index = $index + 1;
     });
    });
    return $c;
   };
   this.$includes$ = function ($element) {
    let self = this;
    let NLR = new Object();
    try {
     self._$do$(function ($each) {
      return $each.$$equal($element).$ifTrue$(function () {
       {
        let t = true;
        if (NLR === null) {
         self.cannotReturn(self, t);
        };
        NLR.value = t;
        throw NLR;
       };
      });
     });
     {
      let t = false;
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$indexOf$ = function ($element) {
    let self = this;
    {
     let $index = nil;
     let $$limit = nil;
     nil;
     $index = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($index); ) {
      if (self._$at$($index).$$equal($element)) {
       return $index;
      };
      $index = (1).$$plus($index);
     };
    };
    return 0;
   };
   this.$inject$into$ = function ($initialValue, $accumulator) {
    let self = this;
    return self.reduce($accumulator, $initialValue);
   };
   this.$isArray = function () {
    let self = this;
    return true;
   };
   this.$isCollection = function () {
    let self = this;
    return true;
   };
   this.$isEmpty = function () {
    let self = this;
    return 0 === self._$size();
   };
   this.$isKindOfArray = function () {
    let self = this;
    return true;
   };
   this.$isKindOfCollection = function () {
    let self = this;
    return true;
   };
   this.$keysAndValuesDo$ = function ($binaryBlock) {
    let self = this;
    {
     let $index = nil;
     let $$limit = nil;
     nil;
     $index = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($index); ) {
      $binaryBlock.$value$value$($index, self._$at$($index));
      $index = (1).$$plus($index);
     };
    };
    return self;
   };
   this.$last = function () {
    let self = this;
    return self._$at$(self._$size());
   };
   this.$mergeSortFrom$to$by$ = function ($startIndex, $stopIndex, $aBlock) {
    let self = this;
    if (self._$size() <= 1) {
     return self;
    };
    if ($startIndex.$$equal($stopIndex)) {
     return self;
    };
    self._$assert$(function () {
     return ($startIndex >= 1) && $startIndex.$$less($stopIndex);
    });
    self._$assert$(function () {
     return $stopIndex.$$less$equal(self._$size());
    });
    self._$mergeSortFrom$to$src$dst$by$($startIndex, $stopIndex, self._$clone(), self, $aBlock);
    return self;
   };
   this.$printString = function () {
    let self = this;
    let $x = nil;
    $x = "{";
    "FLAG";
    self._$do$separatedBy$(function ($ea) {
     return $x = $x.$$comma($ea.$printString());
    }, function () {
     return $x = $x.$$comma(". ");
    });
    return $x.$$comma("}");
   };
   this.$replaceFrom$to$with$ = function ($start, $stop, $replacement) {
    let self = this;
    if (!$replacement.$size().$$equal(($stop - $start) + 1)) {
     self._$error$("Size of replacement doesnt match");
    };
    return self._$replaceFrom$to$with$startingAt$($start, $stop, $replacement, 1);
   };
   this.$replaceFrom$to$with$startingAt$ = function ($start, $stop, $replacement, $repStart) {
    let self = this;
    let $index = nil;
    let $repOff = nil;
    $repOff = $repStart - $start;
    $index = $start - 1;
    {
     for (; ($index = $index + 1).$$less$equal($stop); ) {
      self._$at$put$($index, $replacement.$at$($repOff + $index));
     };
    };
    return self;
   };
   this.$select$ = function ($block) {
    let self = this;
    return self.filter($block);
   };
   this.$size = function () {
    let self = this;
    return self.length;
   };
   this.$sort$ = function ($binaryBlock) {
    let self = this;
    self.sort(function (a, b) {
     return $binaryBlock.$value$value$(a, b).$ifTrue$ifFalse$(function () {
      return -1;
     }, function () {
      return 1;
     });
    });
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Array";
     this._$superInit$KernelForV8$Array = $.$superInit$KernelForV8$Array;
     this.$superInit$KernelForV8$Array = dnuCatcher("$superInit$KernelForV8$Array");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$$comma = this._$$comma = $.$$comma;
     this.$asArray = this._$asArray = $.$asArray;
     this.$asOrderedCollection = this._$asOrderedCollection = $.$asOrderedCollection;
     this.$at$ = this._$at$ = $.$at$;
     this.$at$put$ = this._$at$put$ = $.$at$put$;
     this.$binarySearchFor$between$and$toCompare$ = this._$binarySearchFor$between$and$toCompare$ = $.$binarySearchFor$between$and$toCompare$;
     this.$collect$ = this._$collect$ = $.$collect$;
     this.$copyFrom$to$ = this._$copyFrom$to$ = $.$copyFrom$to$;
     this.$copyWith$ = this._$copyWith$ = $.$copyWith$;
     this.$copyWithSize$ = this._$copyWithSize$ = $.$copyWithSize$;
     this._$defaultMedianOf$and$and$ = $.$defaultMedianOf$and$and$;
     this.$defaultMedianOf$and$and$ = dnuCatcher("$defaultMedianOf$and$and$");
     this.$defaultSort$to$ = this._$defaultSort$to$ = $.$defaultSort$to$;
     this.$do$ = this._$do$ = $.$do$;
     this.$do$separatedBy$ = this._$do$separatedBy$ = $.$do$separatedBy$;
     this.$first = this._$first = $.$first;
     this.$flatMap$ = this._$flatMap$ = $.$flatMap$;
     this.$flatten = this._$flatten = $.$flatten;
     this.$includes$ = this._$includes$ = $.$includes$;
     this.$indexOf$ = this._$indexOf$ = $.$indexOf$;
     this.$inject$into$ = this._$inject$into$ = $.$inject$into$;
     this.$isArray = this._$isArray = $.$isArray;
     this.$isCollection = this._$isCollection = $.$isCollection;
     this.$isEmpty = this._$isEmpty = $.$isEmpty;
     this.$isKindOfArray = this._$isKindOfArray = $.$isKindOfArray;
     this.$isKindOfCollection = this._$isKindOfCollection = $.$isKindOfCollection;
     this.$keysAndValuesDo$ = this._$keysAndValuesDo$ = $.$keysAndValuesDo$;
     this.$last = this._$last = $.$last;
     this.$mergeSortFrom$to$by$ = this._$mergeSortFrom$to$by$ = $.$mergeSortFrom$to$by$;
     this.$printString = this._$printString = $.$printString;
     this.$replaceFrom$to$with$ = this._$replaceFrom$to$with$ = $.$replaceFrom$to$with$;
     this.$replaceFrom$to$with$startingAt$ = this._$replaceFrom$to$with$startingAt$ = $.$replaceFrom$to$with$startingAt$;
     this.$select$ = this._$select$ = $.$select$;
     this.$size = this._$size = $.$size;
     this.$sort$ = this._$sort$ = $.$sort$;
     this.$enclosingObjects$KernelForV8$Array = enclosingObjects;
     this.$super$KernelForV8$Array$slot = runtimeSuperclass;
     this["KernelForV8`Array"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["KernelForV8`Array"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Array";
    this.slots = [];
    this.methods = [
     new MM("uninstantiable", "public", true, 0),
     new MM("new:", "public", false, 58),
     new MM("new:withAll:", "protected", false, 59),
     new MM("with:", "public", false, 60)
    ];
    this.nestedClasses = [];
    this.$uninstantiable = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.$new$ = function ($size) {
     let self = this;
     return self._$new$withAll$($size, nil);
    };
    this.$new$withAll$ = function ($size, $initialElement) {
     let self = this;
     let $array = nil;
     let $index = nil;
     if (!(typeof $size === "number")) {
      return self.$enclosingObjects$KernelForV8$Array[0]._$Error().$signal$("ArgumentError");
     };
     if ($size < 0) {
      return self.$enclosingObjects$KernelForV8$Array[0]._$Error().$signal$("ArgumentError");
     };
     $array = new Array($size);
     for ($index = 0; $index < $size; $index++) {
      $array[$index] = $initialElement;
     };
     return $array;
    };
    this.$with$ = function ($element) {
     let self = this;
     return [$element];
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Array";
      this.$uninstantiable = this._$uninstantiable = $.$uninstantiable;
      this.$new$ = this._$new$ = $.$new$;
      this._$new$withAll$ = $.$new$withAll$;
      this.$new$withAll$ = dnuCatcher("$new$withAll$");
      this.$with$ = this._$with$ = $.$with$;
      this.$enclosingObjects$KernelForV8$Array = enclosingObjects;
      this.$super$KernelForV8$Array$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Boolean = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Boolean";
   this.name = "KernelForV8`Boolean";
   this.header = 61;
   this.slots = [];
   this.methods = [
    new MM("superInit`KernelForV8`Boolean", "protected", true, 62),
    new MM("instance`initializer", "public", true, 63),
    new MM("&", "public", false, 64),
    new MM("and:", "public", false, 65),
    new MM("asString", "public", false, 66),
    new MM("ifFalse:", "public", false, 67),
    new MM("ifFalse:ifTrue:", "public", false, 68),
    new MM("ifTrue:", "public", false, 69),
    new MM("ifTrue:ifFalse:", "public", false, 70),
    new MM("isKindOfBoolean", "public", false, 71),
    new MM("not", "public", false, 72),
    new MM("or:", "public", false, 73),
    new MM("printString", "public", false, 74),
    new MM("value", "public", false, 75),
    new MM("|", "public", false, 76)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Boolean = function () {
    let self = this;
    self.$super$KernelForV8$Boolean$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$KernelForV8$Boolean();
    return self;
   };
   this.$$amp = function ($other) {
    let self = this;
    return self && $other;
   };
   this.$and$ = function ($alternative) {
    let self = this;
    return (self ? $alternative() : self);
   };
   this.$asString = function () {
    let self = this;
    return self._$ifTrue$ifFalse$(function () {
     return "true";
    }, function () {
     return "false";
    });
   };
   this.$ifFalse$ = function ($else) {
    let self = this;
    return (self ? nil : $else());
   };
   this.$ifFalse$ifTrue$ = function ($else, $then) {
    let self = this;
    return (self ? $then() : $else());
   };
   this.$ifTrue$ = function ($onTrue) {
    let self = this;
    return (self ? $onTrue() : nil);
   };
   this.$ifTrue$ifFalse$ = function ($then, $else) {
    let self = this;
    return (self ? $then() : $else());
   };
   this.$isKindOfBoolean = function () {
    let self = this;
    return true;
   };
   this.$not = function () {
    let self = this;
    return !self;
   };
   this.$or$ = function ($alternative) {
    let self = this;
    return (self ? self : $alternative());
   };
   this.$printString = function () {
    let self = this;
    return self._$ifTrue$ifFalse$(function () {
     return "true";
    }, function () {
     return "false";
    });
   };
   this.$value = function () {
    let self = this;
    return self;
   };
   this.$$pipe = function ($other) {
    let self = this;
    return self || $other;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Boolean";
     this._$superInit$KernelForV8$Boolean = $.$superInit$KernelForV8$Boolean;
     this.$superInit$KernelForV8$Boolean = dnuCatcher("$superInit$KernelForV8$Boolean");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$$amp = this._$$amp = $.$$amp;
     this.$and$ = this._$and$ = $.$and$;
     this.$asString = this._$asString = $.$asString;
     this.$ifFalse$ = this._$ifFalse$ = $.$ifFalse$;
     this.$ifFalse$ifTrue$ = this._$ifFalse$ifTrue$ = $.$ifFalse$ifTrue$;
     this.$ifTrue$ = this._$ifTrue$ = $.$ifTrue$;
     this.$ifTrue$ifFalse$ = this._$ifTrue$ifFalse$ = $.$ifTrue$ifFalse$;
     this.$isKindOfBoolean = this._$isKindOfBoolean = $.$isKindOfBoolean;
     this.$not = this._$not = $.$not;
     this.$or$ = this._$or$ = $.$or$;
     this.$printString = this._$printString = $.$printString;
     this.$value = this._$value = $.$value;
     this.$$pipe = this._$$pipe = $.$$pipe;
     this.$enclosingObjects$KernelForV8$Boolean = enclosingObjects;
     this.$super$KernelForV8$Boolean$slot = runtimeSuperclass;
     this["KernelForV8`Boolean"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["KernelForV8`Boolean"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Boolean";
    this.slots = [];
    this.methods = [new MM("uninstantiable", "public", true, 0)];
    this.nestedClasses = [];
    this.$uninstantiable = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Boolean";
      this.$uninstantiable = this._$uninstantiable = $.$uninstantiable;
      this.$enclosingObjects$KernelForV8$Boolean = enclosingObjects;
      this.$super$KernelForV8$Boolean$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$ByteArray = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for KernelForV8`ByteArray";
   this.name = "KernelForV8`ByteArray";
   this.header = 77;
   this.slots = [];
   this.methods = [
    new MM("superInit`KernelForV8`ByteArray", "protected", true, 78),
    new MM("instance`initializer", "public", true, 79),
    new MM("at:", "public", false, 80),
    new MM("at:put:", "public", false, 81),
    new MM("isEmpty", "public", false, 82),
    new MM("keysAndValuesDo:", "public", false, 83),
    new MM("size", "public", false, 84)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$ByteArray = function () {
    let self = this;
    self.$super$KernelForV8$ByteArray$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$KernelForV8$ByteArray();
    return self;
   };
   this.$at$ = function ($index) {
    let self = this;
    let $jsIndex = nil;
    if (!(typeof $index === "number")) {
     return self.$enclosingObjects$KernelForV8$ByteArray[0]._$Error().$signal$("ArgumentError");
    };
    $jsIndex = $index - 1;
    if ($jsIndex < 0) {
     return self.$enclosingObjects$KernelForV8$ByteArray[0]._$Error().$signal$("ArgumentError");
    };
    if ($jsIndex >= this.length) {
     return self.$enclosingObjects$KernelForV8$ByteArray[0]._$Error().$signal$("ArgumentError");
    };
    return this[$jsIndex];
   };
   this.$at$put$ = function ($index, $value) {
    let self = this;
    let $jsIndex = nil;
    if (!(typeof $index === "number")) {
     return self.$enclosingObjects$KernelForV8$ByteArray[0]._$Error().$signal$("ArgumentError");
    };
    $jsIndex = $index - 1;
    if ($jsIndex < 0) {
     return self.$enclosingObjects$KernelForV8$ByteArray[0]._$Error().$signal$("ArgumentError");
    };
    if ($jsIndex >= this.length) {
     return self.$enclosingObjects$KernelForV8$ByteArray[0]._$Error().$signal$("ArgumentError");
    };
    return this[$index - 1] = $value;
   };
   this.$isEmpty = function () {
    let self = this;
    return 0 === self._$size();
   };
   this.$keysAndValuesDo$ = function ($binaryBlock) {
    let self = this;
    {
     let $index = nil;
     let $$limit = nil;
     nil;
     $index = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($index); ) {
      $binaryBlock.$value$value$($index, self._$at$($index));
      $index = (1).$$plus($index);
     };
    };
    return self;
   };
   this.$size = function () {
    let self = this;
    return self.length;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`ByteArray";
     this._$superInit$KernelForV8$ByteArray = $.$superInit$KernelForV8$ByteArray;
     this.$superInit$KernelForV8$ByteArray = dnuCatcher("$superInit$KernelForV8$ByteArray");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$at$ = this._$at$ = $.$at$;
     this.$at$put$ = this._$at$put$ = $.$at$put$;
     this.$isEmpty = this._$isEmpty = $.$isEmpty;
     this.$keysAndValuesDo$ = this._$keysAndValuesDo$ = $.$keysAndValuesDo$;
     this.$size = this._$size = $.$size;
     this.$enclosingObjects$KernelForV8$ByteArray = enclosingObjects;
     this.$super$KernelForV8$ByteArray$slot = runtimeSuperclass;
     this["KernelForV8`ByteArray"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["KernelForV8`ByteArray"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`ByteArray";
    this.slots = [];
    this.methods = [
     new MM("uninstantiable", "public", true, 0),
     new MM("new:", "public", false, 85)
    ];
    this.nestedClasses = [];
    this.$uninstantiable = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.$new$ = function ($size) {
     let self = this;
     if (!(typeof $size === "number")) {
      return self.$enclosingObjects$KernelForV8$ByteArray[0]._$Error().$signal$("ArgumentError");
     };
     if ($size < 0) {
      return self.$enclosingObjects$KernelForV8$ByteArray[0]._$Error().$signal$("ArgumentError");
     };
     return new Uint8Array($size);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`ByteArray";
      this.$uninstantiable = this._$uninstantiable = $.$uninstantiable;
      this.$new$ = this._$new$ = $.$new$;
      this.$enclosingObjects$KernelForV8$ByteArray = enclosingObjects;
      this.$super$KernelForV8$ByteArray$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Class = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Class";
   this.name = "KernelForV8`Class";
   this.header = 86;
   this.slots = [
    new SM("superclass", "public", true, false),
    new SM("mixin", "public", true, false),
    new SM("enclosingObject", "public", true, false),
    new SM("enclosingObjects", "public", true, false),
    new SM("name", "public", true, false)
   ];
   this.methods = [
    new MM("superInit`KernelForV8`Class", "protected", true, 87),
    new MM("instance`initializer", "public", true, 88),
    new MM("isKindOfBehavior", "public", false, 89),
    new MM("isKindOfClass", "public", false, 90),
    new MM("isMeta", "public", false, 91),
    new MM("mixinApply:", "public", false, 92),
    new MM("simpleName", "public", false, 93),
    new MM("init`superclass:", "public", true, 0),
    new MM("superclass", "public", true, 0),
    new MM("superclass:", "public", true, 0),
    new MM("init`mixin:", "public", true, 0),
    new MM("mixin", "public", true, 0),
    new MM("mixin:", "public", true, 0),
    new MM("init`enclosingObject:", "public", true, 0),
    new MM("enclosingObject", "public", true, 0),
    new MM("enclosingObject:", "public", true, 0),
    new MM("init`enclosingObjects:", "public", true, 0),
    new MM("enclosingObjects", "public", true, 0),
    new MM("enclosingObjects:", "public", true, 0),
    new MM("init`name:", "public", true, 0),
    new MM("name", "public", true, 0),
    new MM("name:", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Class = function () {
    let self = this;
    self.$super$KernelForV8$Class$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$KernelForV8$Class();
    return self;
   };
   this.$isKindOfBehavior = function () {
    let self = this;
    return true;
   };
   this.$isKindOfClass = function () {
    let self = this;
    return true;
   };
   this.$isMeta = function () {
    let self = this;
    return true;
   };
   this.$mixinApply$ = function ($newSuperclass) {
    let self = this;
    return self.$enclosingObjects$KernelForV8$Class[0]._$vmmirror().$applyMixin$toSuperclass$withEnclosingObjects$(self._$mixin().runtimeMixin, $newSuperclass, self._$enclosingObjects());
   };
   this.$simpleName = function () {
    let self = this;
    return self._$mixin().$name();
   };
   this.$init$superclass$ = function (v) {
    this.$superclass$slot = v;
    return this;
   };
   this.$superclass = function () {
    return this.$superclass$slot;
   };
   this.$superclass$ = function (v) {
    this.$superclass$slot = v;
    return this;
   };
   this.$init$mixin$ = function (v) {
    this.$mixin$slot = v;
    return this;
   };
   this.$mixin = function () {
    return this.$mixin$slot;
   };
   this.$mixin$ = function (v) {
    this.$mixin$slot = v;
    return this;
   };
   this.$init$enclosingObject$ = function (v) {
    this.$enclosingObject$slot = v;
    return this;
   };
   this.$enclosingObject = function () {
    return this.$enclosingObject$slot;
   };
   this.$enclosingObject$ = function (v) {
    this.$enclosingObject$slot = v;
    return this;
   };
   this.$init$enclosingObjects$ = function (v) {
    this.$enclosingObjects$slot = v;
    return this;
   };
   this.$enclosingObjects = function () {
    return this.$enclosingObjects$slot;
   };
   this.$enclosingObjects$ = function (v) {
    this.$enclosingObjects$slot = v;
    return this;
   };
   this.$init$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$name = function () {
    return this.$name$slot;
   };
   this.$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Class";
     this._$superInit$KernelForV8$Class = $.$superInit$KernelForV8$Class;
     this.$superInit$KernelForV8$Class = dnuCatcher("$superInit$KernelForV8$Class");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isKindOfBehavior = this._$isKindOfBehavior = $.$isKindOfBehavior;
     this.$isKindOfClass = this._$isKindOfClass = $.$isKindOfClass;
     this.$isMeta = this._$isMeta = $.$isMeta;
     this.$mixinApply$ = this._$mixinApply$ = $.$mixinApply$;
     this.$simpleName = this._$simpleName = $.$simpleName;
     this.$init$superclass$ = this._$init$superclass$ = $.$init$superclass$;
     this.$superclass = this._$superclass = $.$superclass;
     this.$superclass$ = this._$superclass$ = $.$superclass$;
     this.$init$mixin$ = this._$init$mixin$ = $.$init$mixin$;
     this.$mixin = this._$mixin = $.$mixin;
     this.$mixin$ = this._$mixin$ = $.$mixin$;
     this.$init$enclosingObject$ = this._$init$enclosingObject$ = $.$init$enclosingObject$;
     this.$enclosingObject = this._$enclosingObject = $.$enclosingObject;
     this.$enclosingObject$ = this._$enclosingObject$ = $.$enclosingObject$;
     this.$init$enclosingObjects$ = this._$init$enclosingObjects$ = $.$init$enclosingObjects$;
     this.$enclosingObjects = this._$enclosingObjects = $.$enclosingObjects;
     this.$enclosingObjects$ = this._$enclosingObjects$ = $.$enclosingObjects$;
     this.$init$name$ = this._$init$name$ = $.$init$name$;
     this.$name = this._$name = $.$name;
     this.$name$ = this._$name$ = $.$name$;
     this.$enclosingObjects$KernelForV8$Class = enclosingObjects;
     this.$super$KernelForV8$Class$slot = runtimeSuperclass;
     this["KernelForV8`Class"] = function () {
      superBasicNew.call(this);
      this.$superclass$slot = nil;
      this.$mixin$slot = nil;
      this.$enclosingObject$slot = nil;
      this.$enclosingObjects$slot = nil;
      this.$name$slot = nil;
     };
     this.basicNew = this["KernelForV8`Class"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Class";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Class";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$KernelForV8$Class = enclosingObjects;
      this.$super$KernelForV8$Class$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Closure = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Closure";
   this.name = "KernelForV8`Closure";
   this.header = 94;
   this.slots = [];
   this.methods = [
    new MM("superInit`KernelForV8`Closure", "protected", true, 95),
    new MM("instance`initializer", "public", true, 96),
    new MM("cull:", "public", false, 97),
    new MM("cull:cull:", "public", false, 98),
    new MM("cull:cull:cull:", "public", false, 99),
    new MM("ensure:", "public", false, 100),
    new MM("isKindOfClosure", "public", false, 101),
    new MM("numArgs", "public", false, 102),
    new MM("on:do:", "public", false, 103),
    new MM("value", "public", false, 104),
    new MM("value:", "public", false, 105),
    new MM("value:value:", "public", false, 106),
    new MM("value:value:value:", "public", false, 107),
    new MM("valueWithArguments:", "public", false, 108),
    new MM("whileFalse:", "public", false, 109)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Closure = function () {
    let self = this;
    self.$super$KernelForV8$Closure$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$KernelForV8$Closure();
    return self;
   };
   this.$cull$ = function ($a1) {
    let self = this;
    return this($a1);
   };
   this.$cull$cull$ = function ($a1, $a2) {
    let self = this;
    return this($a1, $a2);
   };
   this.$cull$cull$cull$ = function ($a1, $a2, $a3) {
    let self = this;
    return this($a1, $a2, $a3);
   };
   this.$ensure$ = function ($onUnwind) {
    let self = this;
    let $result = nil;
    try {
     $result = self._$value();
    } catch (e) {
     $onUnwind.$value();
     throw e;
    };
    $onUnwind.$value();
    return $result;
   };
   this.$isKindOfClosure = function () {
    let self = this;
    return true;
   };
   this.$numArgs = function () {
    let self = this;
    return self.length;
   };
   this.$on$do$ = function ($errorClass, $handler) {
    let self = this;
    let $c = nil;
    try {
     return self._$value();
    } catch (e) {
     if (e.newspeakClass === undefined) {
      throw e;
     };
     for ($c = $0.$classOf$(self.$enclosingObjects$KernelForV8$Closure[0], e); $c !== nil; ) {
      if ($c === $errorClass) {
       return $handler.$value$(e);
      };
      $c = $c.$superclass();
     };
     throw e;
    };
    return self;
   };
   this.$value = function () {
    let self = this;
    return this();
   };
   this.$value$ = function ($a1) {
    let self = this;
    return this($a1);
   };
   this.$value$value$ = function ($a1, $a2) {
    let self = this;
    return this($a1, $a2);
   };
   this.$value$value$value$ = function ($a1, $a2, $a3) {
    let self = this;
    return this($a1, $a2, $a3);
   };
   this.$valueWithArguments$ = function ($args) {
    let self = this;
    return this.apply(this, $args);
   };
   this.$whileFalse$ = function ($aBlock) {
    let self = this;
    {
     for (; !self._$value(); ) {
      $aBlock.$value();
     };
    };
    return nil;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Closure";
     this._$superInit$KernelForV8$Closure = $.$superInit$KernelForV8$Closure;
     this.$superInit$KernelForV8$Closure = dnuCatcher("$superInit$KernelForV8$Closure");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$cull$ = this._$cull$ = $.$cull$;
     this.$cull$cull$ = this._$cull$cull$ = $.$cull$cull$;
     this.$cull$cull$cull$ = this._$cull$cull$cull$ = $.$cull$cull$cull$;
     this.$ensure$ = this._$ensure$ = $.$ensure$;
     this.$isKindOfClosure = this._$isKindOfClosure = $.$isKindOfClosure;
     this.$numArgs = this._$numArgs = $.$numArgs;
     this.$on$do$ = this._$on$do$ = $.$on$do$;
     this.$value = this._$value = $.$value;
     this.$value$ = this._$value$ = $.$value$;
     this.$value$value$ = this._$value$value$ = $.$value$value$;
     this.$value$value$value$ = this._$value$value$value$ = $.$value$value$value$;
     this.$valueWithArguments$ = this._$valueWithArguments$ = $.$valueWithArguments$;
     this.$whileFalse$ = this._$whileFalse$ = $.$whileFalse$;
     this.$enclosingObjects$KernelForV8$Closure = enclosingObjects;
     this.$super$KernelForV8$Closure$slot = runtimeSuperclass;
     this["KernelForV8`Closure"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["KernelForV8`Closure"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Closure";
    this.slots = [];
    this.methods = [new MM("uninstantiable", "public", true, 0)];
    this.nestedClasses = [];
    this.$uninstantiable = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Closure";
      this.$uninstantiable = this._$uninstantiable = $.$uninstantiable;
      this.$enclosingObjects$KernelForV8$Closure = enclosingObjects;
      this.$super$KernelForV8$Closure$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Exception = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Exception";
   this.name = "KernelForV8`Exception";
   this.header = 110;
   this.slots = [new SM("messageText", "public", true, false)];
   this.methods = [
    new MM("superInit`KernelForV8`Exception", "protected", true, 111),
    new MM("instance`initializer", "public", true, 112),
    new MM("isError", "public", false, 113),
    new MM("printString", "public", false, 114),
    new MM("signal", "public", false, 115),
    new MM("signal:", "public", false, 116),
    new MM("init`messageText:", "public", true, 0),
    new MM("messageText", "public", true, 0),
    new MM("messageText:", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Exception = function () {
    let self = this;
    self.$super$KernelForV8$Exception$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$KernelForV8$Exception();
    return self;
   };
   this.$isError = function () {
    let self = this;
    return true;
   };
   this.$printString = function () {
    let self = this;
    if (nil.$$equal(self._$messageText())) {
     return self.$super$KernelForV8$Exception$slot._$class.call(self).$name();
    };
    return self.$super$KernelForV8$Exception$slot._$class.call(self).$name().$$comma(": ").$$comma(self._$messageText());
   };
   this.$signal = function () {
    let self = this;
    this.trace = new Error().stack;
    throw self;
    return self;
   };
   this.$signal$ = function ($message) {
    let self = this;
    self._$messageText$($message);
    return self._$signal();
   };
   this.$init$messageText$ = function (v) {
    this.$messageText$slot = v;
    return this;
   };
   this.$messageText = function () {
    return this.$messageText$slot;
   };
   this.$messageText$ = function (v) {
    this.$messageText$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Exception";
     this._$superInit$KernelForV8$Exception = $.$superInit$KernelForV8$Exception;
     this.$superInit$KernelForV8$Exception = dnuCatcher("$superInit$KernelForV8$Exception");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isError = this._$isError = $.$isError;
     this.$printString = this._$printString = $.$printString;
     this.$signal = this._$signal = $.$signal;
     this.$signal$ = this._$signal$ = $.$signal$;
     this.$init$messageText$ = this._$init$messageText$ = $.$init$messageText$;
     this.$messageText = this._$messageText = $.$messageText;
     this.$messageText$ = this._$messageText$ = $.$messageText$;
     this.$enclosingObjects$KernelForV8$Exception = enclosingObjects;
     this.$super$KernelForV8$Exception$slot = runtimeSuperclass;
     this["KernelForV8`Exception"] = function () {
      superBasicNew.call(this);
      this.$messageText$slot = nil;
     };
     this.basicNew = this["KernelForV8`Exception"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Exception";
    this.slots = [];
    this.methods = [
     new MM("new", "public", true, 0),
     new MM("signal:", "public", false, 117)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.$signal$ = function ($message) {
     let self = this;
     return self._$new().$messageText$($message).$signal();
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Exception";
      this.$new = this._$new = $.$new;
      this.$signal$ = this._$signal$ = $.$signal$;
      this.$enclosingObjects$KernelForV8$Exception = enclosingObjects;
      this.$super$KernelForV8$Exception$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Future = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Future";
   this.name = "KernelForV8`Future";
   this.header = 118;
   this.slots = [
    new SM("blockOrValue000", "private", true, false),
    new SM("state000", "private", true, false)
   ];
   this.methods = [
    new MM("superInit`KernelForV8`Future", "protected", true, 119),
    new MM("instance`initializer", "public", true, 120),
    new MM("doesNotUnderstand:", "protected", false, 121),
    new MM("isKindOfFuture", "public", false, 122),
    new MM("resolve", "protected", false, 123),
    new MM("yourself", "public", false, 124),
    new MM("init`blockOrValue000:", "private", true, 0),
    new MM("blockOrValue000", "private", true, 0),
    new MM("blockOrValue000:", "private", true, 0),
    new MM("init`state000:", "private", true, 0),
    new MM("state000", "private", true, 0),
    new MM("state000:", "private", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Future = function ($block) {
    let self = this;
    self.$super$KernelForV8$Future$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($block) {
    let self = this;
    self._$superInit$KernelForV8$Future($block);
    $1.$init$blockOrValue000$(self, $block);
    $1.$init$state000$(self, "unresolved");
    return self;
   };
   this.$doesNotUnderstand$ = function ($message) {
    let self = this;
    return $message.$sendTo$(self._$resolve());
   };
   this.$isKindOfFuture = function () {
    let self = this;
    return true;
   };
   this.$resolve = function () {
    let self = this;
    if ($1.$state000(self).$$equal("resolving")) {
     self.$enclosingObjects$KernelForV8$Future[0]._$Error().$signal$("Divergent evaluation of ".$$comma($1.$blockOrValue000(self).$printString()));
    };
    if ($1.$state000(self).$$equal("unresolved")) {
     $1.$state000$(self, "resolving");
     $1.$blockOrValue000$(self, $1.$blockOrValue000(self).$value());
     {
      for (; $1.$blockOrValue000(self).$isKindOfFuture(); ) {
       $1.$blockOrValue000$(self, $1.$blockOrValue000(self).$resolve());
      };
     };
     $1.$state000$(self, "resolved");
    };
    return $1.$blockOrValue000(self);
   };
   this.$yourself = function () {
    let self = this;
    return self._$resolve();
   };
   this.$init$blockOrValue000$ = function (self, v) {
    self.$blockOrValue000$slot = v;
    return self;
   };
   this.$blockOrValue000 = function (self) {
    return self.$blockOrValue000$slot;
   };
   this.$blockOrValue000$ = function (self, v) {
    self.$blockOrValue000$slot = v;
    return self;
   };
   this.$init$state000$ = function (self, v) {
    self.$state000$slot = v;
    return self;
   };
   this.$state000 = function (self) {
    return self.$state000$slot;
   };
   this.$state000$ = function (self, v) {
    self.$state000$slot = v;
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Future";
     this._$superInit$KernelForV8$Future = $.$superInit$KernelForV8$Future;
     this.$superInit$KernelForV8$Future = dnuCatcher("$superInit$KernelForV8$Future");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$doesNotUnderstand$ = $.$doesNotUnderstand$;
     this.$doesNotUnderstand$ = dnuCatcher("$doesNotUnderstand$");
     this.dnu = $.$doesNotUnderstand$;
     this.$isKindOfFuture = this._$isKindOfFuture = $.$isKindOfFuture;
     this._$resolve = $.$resolve;
     this.$resolve = dnuCatcher("$resolve");
     this.$yourself = this._$yourself = $.$yourself;
     this.$enclosingObjects$KernelForV8$Future = enclosingObjects;
     this.$super$KernelForV8$Future$slot = runtimeSuperclass;
     this["KernelForV8`Future"] = function () {
      superBasicNew.call(this);
      this.$blockOrValue000$slot = nil;
      this.$state000$slot = nil;
     };
     this.basicNew = this["KernelForV8`Future"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Future";
    this.slots = [];
    this.methods = [new MM("computing:", "public", true, 0)];
    this.nestedClasses = [];
    this.$computing$ = function ($block) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($block);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Future";
      this.$computing$ = this._$computing$ = $.$computing$;
      this.$enclosingObjects$KernelForV8$Future = enclosingObjects;
      this.$super$KernelForV8$Future$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Message = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Message";
   this.name = "KernelForV8`Message";
   this.header = 125;
   this.slots = [
    new SM("mangledSelector", "public", false, false),
    new SM("arguments", "public", false, false)
   ];
   this.methods = [
    new MM("superInit`KernelForV8`Message", "protected", true, 126),
    new MM("instance`initializer", "public", true, 127),
    new MM("printString", "public", false, 128),
    new MM("selector", "public", false, 129),
    new MM("sendTo:", "public", false, 130),
    new MM("init`mangledSelector:", "public", true, 0),
    new MM("mangledSelector", "public", true, 0),
    new MM("init`arguments:", "public", true, 0),
    new MM("arguments", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Message = function ($s, $a) {
    let self = this;
    self.$super$KernelForV8$Message$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($s, $a) {
    let self = this;
    self._$superInit$KernelForV8$Message($s, $a);
    self._$init$mangledSelector$($s);
    self._$init$arguments$($a);
    return self;
   };
   this.$printString = function () {
    let self = this;
    return "#".$$comma(self._$selector());
   };
   this.$selector = function () {
    let self = this;
    return self.$enclosingObjects$KernelForV8$Message[0]._$vmmirror().$unmangleSelector$(self._$mangledSelector());
   };
   this.$sendTo$ = function ($receiver) {
    let self = this;
    return $receiver[self._$mangledSelector()].apply($receiver, self._$arguments());
   };
   this.$init$mangledSelector$ = function (v) {
    this.$mangledSelector$slot = v;
    return this;
   };
   this.$mangledSelector = function () {
    return this.$mangledSelector$slot;
   };
   this.$init$arguments$ = function (v) {
    this.$arguments$slot = v;
    return this;
   };
   this.$arguments = function () {
    return this.$arguments$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Message";
     this._$superInit$KernelForV8$Message = $.$superInit$KernelForV8$Message;
     this.$superInit$KernelForV8$Message = dnuCatcher("$superInit$KernelForV8$Message");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$printString = this._$printString = $.$printString;
     this.$selector = this._$selector = $.$selector;
     this.$sendTo$ = this._$sendTo$ = $.$sendTo$;
     this.$init$mangledSelector$ = this._$init$mangledSelector$ = $.$init$mangledSelector$;
     this.$mangledSelector = this._$mangledSelector = $.$mangledSelector;
     this.$init$arguments$ = this._$init$arguments$ = $.$init$arguments$;
     this.$arguments = this._$arguments = $.$arguments;
     this.$enclosingObjects$KernelForV8$Message = enclosingObjects;
     this.$super$KernelForV8$Message$slot = runtimeSuperclass;
     this["KernelForV8`Message"] = function () {
      superBasicNew.call(this);
      this.$mangledSelector$slot = nil;
      this.$arguments$slot = nil;
     };
     this.basicNew = this["KernelForV8`Message"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Message";
    this.slots = [];
    this.methods = [
     new MM("mangledSelector:arguments:", "public", true, 0),
     new MM("mangle:", "protected", false, 131),
     new MM("selector:", "public", false, 132),
     new MM("selector:arguments:", "public", false, 133)
    ];
    this.nestedClasses = [];
    this.$mangledSelector$arguments$ = function ($s, $a) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($s, $a);
     return t;
    };
    this.$mangle$ = function ($selector) {
     let self = this;
     return "$".$$comma($selector).$replaceAll$with$(":", "$").$replaceAll$with$("`", "$").$replaceAll$with$(".", "$");
    };
    this.$selector$ = function ($selector) {
     let self = this;
     return self._$mangledSelector$arguments$(self._$mangle$($selector), []);
    };
    this.$selector$arguments$ = function ($selector, $arguments) {
     let self = this;
     return self._$mangledSelector$arguments$(self._$mangle$($selector), $arguments);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Message";
      this.$mangledSelector$arguments$ = this._$mangledSelector$arguments$ = $.$mangledSelector$arguments$;
      this._$mangle$ = $.$mangle$;
      this.$mangle$ = dnuCatcher("$mangle$");
      this.$selector$ = this._$selector$ = $.$selector$;
      this.$selector$arguments$ = this._$selector$arguments$ = $.$selector$arguments$;
      this.$enclosingObjects$KernelForV8$Message = enclosingObjects;
      this.$super$KernelForV8$Message$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$MessageNotUnderstood = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for KernelForV8`MessageNotUnderstood";
   this.name = "KernelForV8`MessageNotUnderstood";
   this.header = 134;
   this.slots = [
    new SM("receiver", "public", false, false),
    new SM("message", "public", false, false)
   ];
   this.methods = [
    new MM("superInit`KernelForV8`MessageNotUnderstood", "protected", true, 135),
    new MM("instance`initializer", "public", true, 136),
    new MM("messageText", "public", false, 137),
    new MM("printString", "public", false, 138),
    new MM("init`receiver:", "public", true, 0),
    new MM("receiver", "public", true, 0),
    new MM("init`message:", "public", true, 0),
    new MM("message", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$MessageNotUnderstood = function ($r, $m) {
    let self = this;
    self.$super$KernelForV8$MessageNotUnderstood$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($r, $m) {
    let self = this;
    self._$superInit$KernelForV8$MessageNotUnderstood($r, $m);
    self._$init$receiver$($r);
    self._$init$message$($m);
    return self;
   };
   this.$messageText = function () {
    let self = this;
    return self._$printString();
   };
   this.$printString = function () {
    let self = this;
    return "MessageNotUnderstood: ".$$comma($0.$classOf$(self.$enclosingObjects$KernelForV8$MessageNotUnderstood[0], self._$receiver()).$name()).$$comma(" ").$$comma(self._$message().$selector());
   };
   this.$init$receiver$ = function (v) {
    this.$receiver$slot = v;
    return this;
   };
   this.$receiver = function () {
    return this.$receiver$slot;
   };
   this.$init$message$ = function (v) {
    this.$message$slot = v;
    return this;
   };
   this.$message = function () {
    return this.$message$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`MessageNotUnderstood";
     this._$superInit$KernelForV8$MessageNotUnderstood = $.$superInit$KernelForV8$MessageNotUnderstood;
     this.$superInit$KernelForV8$MessageNotUnderstood = dnuCatcher("$superInit$KernelForV8$MessageNotUnderstood");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$messageText = this._$messageText = $.$messageText;
     this.$printString = this._$printString = $.$printString;
     this.$init$receiver$ = this._$init$receiver$ = $.$init$receiver$;
     this.$receiver = this._$receiver = $.$receiver;
     this.$init$message$ = this._$init$message$ = $.$init$message$;
     this.$message = this._$message = $.$message;
     this.$enclosingObjects$KernelForV8$MessageNotUnderstood = enclosingObjects;
     this.$super$KernelForV8$MessageNotUnderstood$slot = runtimeSuperclass;
     this["KernelForV8`MessageNotUnderstood"] = function () {
      superBasicNew.call(this);
      this.$receiver$slot = nil;
      this.$message$slot = nil;
     };
     this.basicNew = this["KernelForV8`MessageNotUnderstood"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`MessageNotUnderstood";
    this.slots = [];
    this.methods = [new MM("receiver:message:", "public", true, 0)];
    this.nestedClasses = [];
    this.$receiver$message$ = function ($r, $m) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($r, $m);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`MessageNotUnderstood";
      this.$receiver$message$ = this._$receiver$message$ = $.$receiver$message$;
      this.$enclosingObjects$KernelForV8$MessageNotUnderstood = enclosingObjects;
      this.$super$KernelForV8$MessageNotUnderstood$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Metaclass = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Metaclass";
   this.name = "KernelForV8`Metaclass";
   this.header = 139;
   this.slots = [
    new SM("superclass", "public", true, false),
    new SM("mixin", "public", true, false),
    new SM("enclosingObject", "public", true, false),
    new SM("name", "public", true, false),
    new SM("thisClass", "public", true, false)
   ];
   this.methods = [
    new MM("superInit`KernelForV8`Metaclass", "protected", true, 140),
    new MM("instance`initializer", "public", true, 141),
    new MM("isKindOfBehavior", "public", false, 142),
    new MM("isMeta", "public", false, 143),
    new MM("init`superclass:", "public", true, 0),
    new MM("superclass", "public", true, 0),
    new MM("superclass:", "public", true, 0),
    new MM("init`mixin:", "public", true, 0),
    new MM("mixin", "public", true, 0),
    new MM("mixin:", "public", true, 0),
    new MM("init`enclosingObject:", "public", true, 0),
    new MM("enclosingObject", "public", true, 0),
    new MM("enclosingObject:", "public", true, 0),
    new MM("init`name:", "public", true, 0),
    new MM("name", "public", true, 0),
    new MM("name:", "public", true, 0),
    new MM("init`thisClass:", "public", true, 0),
    new MM("thisClass", "public", true, 0),
    new MM("thisClass:", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Metaclass = function () {
    let self = this;
    self.$super$KernelForV8$Metaclass$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$KernelForV8$Metaclass();
    return self;
   };
   this.$isKindOfBehavior = function () {
    let self = this;
    return true;
   };
   this.$isMeta = function () {
    let self = this;
    return true;
   };
   this.$init$superclass$ = function (v) {
    this.$superclass$slot = v;
    return this;
   };
   this.$superclass = function () {
    return this.$superclass$slot;
   };
   this.$superclass$ = function (v) {
    this.$superclass$slot = v;
    return this;
   };
   this.$init$mixin$ = function (v) {
    this.$mixin$slot = v;
    return this;
   };
   this.$mixin = function () {
    return this.$mixin$slot;
   };
   this.$mixin$ = function (v) {
    this.$mixin$slot = v;
    return this;
   };
   this.$init$enclosingObject$ = function (v) {
    this.$enclosingObject$slot = v;
    return this;
   };
   this.$enclosingObject = function () {
    return this.$enclosingObject$slot;
   };
   this.$enclosingObject$ = function (v) {
    this.$enclosingObject$slot = v;
    return this;
   };
   this.$init$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$name = function () {
    return this.$name$slot;
   };
   this.$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$init$thisClass$ = function (v) {
    this.$thisClass$slot = v;
    return this;
   };
   this.$thisClass = function () {
    return this.$thisClass$slot;
   };
   this.$thisClass$ = function (v) {
    this.$thisClass$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Metaclass";
     this._$superInit$KernelForV8$Metaclass = $.$superInit$KernelForV8$Metaclass;
     this.$superInit$KernelForV8$Metaclass = dnuCatcher("$superInit$KernelForV8$Metaclass");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isKindOfBehavior = this._$isKindOfBehavior = $.$isKindOfBehavior;
     this.$isMeta = this._$isMeta = $.$isMeta;
     this.$init$superclass$ = this._$init$superclass$ = $.$init$superclass$;
     this.$superclass = this._$superclass = $.$superclass;
     this.$superclass$ = this._$superclass$ = $.$superclass$;
     this.$init$mixin$ = this._$init$mixin$ = $.$init$mixin$;
     this.$mixin = this._$mixin = $.$mixin;
     this.$mixin$ = this._$mixin$ = $.$mixin$;
     this.$init$enclosingObject$ = this._$init$enclosingObject$ = $.$init$enclosingObject$;
     this.$enclosingObject = this._$enclosingObject = $.$enclosingObject;
     this.$enclosingObject$ = this._$enclosingObject$ = $.$enclosingObject$;
     this.$init$name$ = this._$init$name$ = $.$init$name$;
     this.$name = this._$name = $.$name;
     this.$name$ = this._$name$ = $.$name$;
     this.$init$thisClass$ = this._$init$thisClass$ = $.$init$thisClass$;
     this.$thisClass = this._$thisClass = $.$thisClass;
     this.$thisClass$ = this._$thisClass$ = $.$thisClass$;
     this.$enclosingObjects$KernelForV8$Metaclass = enclosingObjects;
     this.$super$KernelForV8$Metaclass$slot = runtimeSuperclass;
     this["KernelForV8`Metaclass"] = function () {
      superBasicNew.call(this);
      this.$superclass$slot = nil;
      this.$mixin$slot = nil;
      this.$enclosingObject$slot = nil;
      this.$name$slot = nil;
      this.$thisClass$slot = nil;
     };
     this.basicNew = this["KernelForV8`Metaclass"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Metaclass";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Metaclass";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$KernelForV8$Metaclass = enclosingObjects;
      this.$super$KernelForV8$Metaclass$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Mixin = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Mixin";
   this.name = "KernelForV8`Mixin";
   this.header = 144;
   this.slots = [];
   this.methods = [
    new MM("superInit`KernelForV8`Mixin", "protected", true, 145),
    new MM("instance`initializer", "public", true, 146),
    new MM("applyTo:", "public", false, 147),
    new MM("applyTo:withName:", "public", false, 148),
    new MM("isMeta", "public", false, 149),
    new MM("name", "public", false, 150),
    new MM("printString", "public", false, 151)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Mixin = function ($rm) {
    let self = this;
    self.$super$KernelForV8$Mixin$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($rm) {
    let self = this;
    self._$superInit$KernelForV8$Mixin($rm);
    self.runtimeMixin = $rm;
    return self;
   };
   this.$applyTo$ = function ($superclass) {
    let self = this;
    self._$assert$message$(function () {
     return self._$isMeta().$not();
    }, "Only instance-side mixins may be applied directly");
    return self._$applyTo$withName$($superclass, $superclass.$name().$$comma(" <: ").$$comma(self._$name()));
   };
   this.$applyTo$withName$ = function ($superclass, $name) {
    let self = this;
    return self.$enclosingObjects$KernelForV8$Mixin[0]._$vmmirror().$applyMixin$toSuperclass$withEnclosingObjects$(self.runtimeMixin, $superclass, [nil]);
   };
   this.$isMeta = function () {
    let self = this;
    return self.runtimeMixin.meta === undefined;
   };
   this.$name = function () {
    let self = this;
    return self._$isMeta().$ifTrue$ifFalse$(function () {
     return self.runtimeMixin.nonMeta.name.$$comma(" class");
    }, function () {
     return self.runtimeMixin.name;
    });
   };
   this.$printString = function () {
    let self = this;
    return self._$name().$$comma(" mixin");
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Mixin";
     this._$superInit$KernelForV8$Mixin = $.$superInit$KernelForV8$Mixin;
     this.$superInit$KernelForV8$Mixin = dnuCatcher("$superInit$KernelForV8$Mixin");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$applyTo$ = this._$applyTo$ = $.$applyTo$;
     this.$applyTo$withName$ = this._$applyTo$withName$ = $.$applyTo$withName$;
     this.$isMeta = this._$isMeta = $.$isMeta;
     this.$name = this._$name = $.$name;
     this.$printString = this._$printString = $.$printString;
     this.$enclosingObjects$KernelForV8$Mixin = enclosingObjects;
     this.$super$KernelForV8$Mixin$slot = runtimeSuperclass;
     this["KernelForV8`Mixin"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["KernelForV8`Mixin"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Mixin";
    this.slots = [];
    this.methods = [new MM("fromRuntimeMixin:", "public", true, 0)];
    this.nestedClasses = [];
    this.$fromRuntimeMixin$ = function ($rm) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($rm);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Mixin";
      this.$fromRuntimeMixin$ = this._$fromRuntimeMixin$ = $.$fromRuntimeMixin$;
      this.$enclosingObjects$KernelForV8$Mixin = enclosingObjects;
      this.$super$KernelForV8$Mixin$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Number = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Number";
   this.name = "KernelForV8`Number";
   this.header = 152;
   this.slots = [];
   this.methods = [
    new MM("superInit`KernelForV8`Number", "protected", true, 153),
    new MM("instance`initializer", "public", true, 154),
    new MM("*", "public", false, 155),
    new MM("**", "public", false, 156),
    new MM("+", "public", false, 157),
    new MM("-", "public", false, 158),
    new MM("/", "public", false, 159),
    new MM("//", "public", false, 160),
    new MM("<", "public", false, 161),
    new MM("<<", "public", false, 162),
    new MM("<=", "public", false, 163),
    new MM("=", "public", false, 164),
    new MM(">", "public", false, 165),
    new MM(">=", "public", false, 166),
    new MM(">>", "public", false, 167),
    new MM("\\\\", "public", false, 168),
    new MM("abs", "public", false, 169),
    new MM("asFloat", "public", false, 170),
    new MM("asInteger", "public", false, 171),
    new MM("asString", "public", false, 172),
    new MM("asStringExponential:", "public", false, 173),
    new MM("asStringFixed:", "public", false, 174),
    new MM("asStringPrecision:", "public", false, 175),
    new MM("asStringRadix:", "public", false, 176),
    new MM("between:and:", "public", false, 177),
    new MM("bitAnd:", "public", false, 178),
    new MM("bitInvert", "public", false, 179),
    new MM("bitOr:", "public", false, 180),
    new MM("bitXor:", "public", false, 181),
    new MM("ceiling", "public", false, 182),
    new MM("cos", "public", false, 183),
    new MM("exp", "public", false, 184),
    new MM("floor", "public", false, 185),
    new MM("hash", "public", false, 186),
    new MM("isKindOfFloat", "public", false, 187),
    new MM("isKindOfInteger", "public", false, 188),
    new MM("isKindOfNumber", "public", false, 189),
    new MM("isNumber", "public", false, 190),
    new MM("ln", "public", false, 191),
    new MM("max:", "public", false, 192),
    new MM("min:", "public", false, 193),
    new MM("printString", "public", false, 194),
    new MM("quo:", "public", false, 195),
    new MM("rem:", "public", false, 196),
    new MM("rounded", "public", false, 197),
    new MM("sign", "public", false, 198),
    new MM("sin", "public", false, 199),
    new MM("sqrt", "public", false, 200),
    new MM("tan", "public", false, 201),
    new MM("timesRepeat:", "public", false, 202),
    new MM("to:", "public", false, 203),
    new MM("to:do:", "public", false, 204),
    new MM("truncated", "public", false, 205)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Number = function () {
    let self = this;
    self.$super$KernelForV8$Number$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$KernelForV8$Number();
    return self;
   };
   this.$$times = function ($other) {
    let self = this;
    return self * $other;
   };
   this.$$times$times = function ($exponent) {
    let self = this;
    return Math.pow(self, $exponent);
   };
   this.$$plus = function ($other) {
    let self = this;
    return self + $other;
   };
   this.$$minus = function ($other) {
    let self = this;
    return self - $other;
   };
   this.$$over = function ($other) {
    let self = this;
    return self / $other;
   };
   this.$$over$over = function ($other) {
    let self = this;
    return (self / $other).$floor();
   };
   this.$$less = function ($other) {
    let self = this;
    return self < $other;
   };
   this.$$less$less = function ($other) {
    let self = this;
    return self << $other;
   };
   this.$$less$equal = function ($other) {
    let self = this;
    return self <= $other;
   };
   this.$$equal = function ($other) {
    let self = this;
    return self === $other;
   };
   this.$$greater = function ($other) {
    let self = this;
    return self > $other;
   };
   this.$$greater$equal = function ($other) {
    let self = this;
    return self >= $other;
   };
   this.$$greater$greater = function ($other) {
    let self = this;
    return self >> $other;
   };
   this.$$back$back = function ($other) {
    let self = this;
    return self - (self._$$over$over($other) * $other);
   };
   this.$abs = function () {
    let self = this;
    if (self >= 0) {
     return self;
    } else {
     return -1 * self;
    };
    return self;
   };
   this.$asFloat = function () {
    let self = this;
    return self * 1;
   };
   this.$asInteger = function () {
    let self = this;
    return self._$truncated();
   };
   this.$asString = function () {
    let self = this;
    return self.toString();
   };
   this.$asStringExponential$ = function ($fractionDigits) {
    let self = this;
    if ($fractionDigits < 0) {
     return self.$enclosingObjects$KernelForV8$Number[0]._$Error().$signal();
    };
    if ($fractionDigits > 20) {
     return self.$enclosingObjects$KernelForV8$Number[0]._$Error().$signal();
    };
    return self.toExponential($fractionDigits);
   };
   this.$asStringFixed$ = function ($fractionDigits) {
    let self = this;
    if ($fractionDigits < 0) {
     return self.$enclosingObjects$KernelForV8$Number[0]._$Error().$signal();
    };
    if ($fractionDigits > 100) {
     return self.$enclosingObjects$KernelForV8$Number[0]._$Error().$signal();
    };
    return self.toFixed($fractionDigits);
   };
   this.$asStringPrecision$ = function ($precision) {
    let self = this;
    if ($precision < 1) {
     return self.$enclosingObjects$KernelForV8$Number[0]._$Error().$signal();
    };
    if ($precision > 100) {
     return self.$enclosingObjects$KernelForV8$Number[0]._$Error().$signal();
    };
    return self.toPrecision($precision);
   };
   this.$asStringRadix$ = function ($radix) {
    let self = this;
    return self.toString($radix).toUpperCase();
   };
   this.$between$and$ = function ($min, $max) {
    let self = this;
    return self._$$less$equal($max) && self._$$greater$equal($min);
   };
   this.$bitAnd$ = function ($other) {
    let self = this;
    return self & $other;
   };
   this.$bitInvert = function () {
    let self = this;
    return -1 - self;
   };
   this.$bitOr$ = function ($other) {
    let self = this;
    return self | $other;
   };
   this.$bitXor$ = function ($other) {
    let self = this;
    return self ^ $other;
   };
   this.$ceiling = function () {
    let self = this;
    return Math.ceil(self);
   };
   this.$cos = function () {
    let self = this;
    return Math.cos(self);
   };
   this.$exp = function () {
    let self = this;
    return Math.exp(self);
   };
   this.$floor = function () {
    let self = this;
    return Math.floor(self);
   };
   this.$hash = function () {
    let self = this;
    return self | 0;
   };
   this.$isKindOfFloat = function () {
    let self = this;
    return true;
   };
   this.$isKindOfInteger = function () {
    let self = this;
    return self._$$equal(self._$asInteger());
   };
   this.$isKindOfNumber = function () {
    let self = this;
    return true;
   };
   this.$isNumber = function () {
    let self = this;
    return true;
   };
   this.$ln = function () {
    let self = this;
    return Math.log(self);
   };
   this.$max$ = function ($other) {
    let self = this;
    return self._$$greater($other).$ifTrue$ifFalse$(function () {
     return self;
    }, function () {
     return $other;
    });
   };
   this.$min$ = function ($other) {
    let self = this;
    return self._$$less($other).$ifTrue$ifFalse$(function () {
     return self;
    }, function () {
     return $other;
    });
   };
   this.$printString = function () {
    let self = this;
    return self.toString();
   };
   this.$quo$ = function ($other) {
    let self = this;
    return (self / $other).$truncated();
   };
   this.$rem$ = function ($other) {
    let self = this;
    return self - (self._$quo$($other) * $other);
   };
   this.$rounded = function () {
    let self = this;
    return Math.round(self);
   };
   this.$sign = function () {
    let self = this;
    if (self > 0) {
     return 1;
    };
    if (self < 0) {
     return -1;
    };
    return 0;
   };
   this.$sin = function () {
    let self = this;
    return Math.sin(self);
   };
   this.$sqrt = function () {
    let self = this;
    return Math.sqrt(self);
   };
   this.$tan = function () {
    let self = this;
    return Math.tan(self);
   };
   this.$timesRepeat$ = function ($block) {
    let self = this;
    let $i = nil;
    $i = 0;
    for (; $i < this; $i++) {
     $block();
    };
    return self;
   };
   this.$to$ = function ($stop) {
    let self = this;
    return self.$enclosingObjects$KernelForV8$Number[0]._$platform().$collections().$Interval().$from$to$(self, $stop);
   };
   this.$to$do$ = function ($limit, $block) {
    let self = this;
    let $i = nil;
    $i = self;
    for (; $i <= $limit; $i++) {
     $block($i);
    };
    return self;
   };
   this.$truncated = function () {
    let self = this;
    return (self > 0).$ifTrue$ifFalse$(function () {
     return self._$floor();
    }, function () {
     return self._$ceiling();
    });
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Number";
     this._$superInit$KernelForV8$Number = $.$superInit$KernelForV8$Number;
     this.$superInit$KernelForV8$Number = dnuCatcher("$superInit$KernelForV8$Number");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$$times = this._$$times = $.$$times;
     this.$$times$times = this._$$times$times = $.$$times$times;
     this.$$plus = this._$$plus = $.$$plus;
     this.$$minus = this._$$minus = $.$$minus;
     this.$$over = this._$$over = $.$$over;
     this.$$over$over = this._$$over$over = $.$$over$over;
     this.$$less = this._$$less = $.$$less;
     this.$$less$less = this._$$less$less = $.$$less$less;
     this.$$less$equal = this._$$less$equal = $.$$less$equal;
     this.$$equal = this._$$equal = $.$$equal;
     this.$$greater = this._$$greater = $.$$greater;
     this.$$greater$equal = this._$$greater$equal = $.$$greater$equal;
     this.$$greater$greater = this._$$greater$greater = $.$$greater$greater;
     this.$$back$back = this._$$back$back = $.$$back$back;
     this.$abs = this._$abs = $.$abs;
     this.$asFloat = this._$asFloat = $.$asFloat;
     this.$asInteger = this._$asInteger = $.$asInteger;
     this.$asString = this._$asString = $.$asString;
     this.$asStringExponential$ = this._$asStringExponential$ = $.$asStringExponential$;
     this.$asStringFixed$ = this._$asStringFixed$ = $.$asStringFixed$;
     this.$asStringPrecision$ = this._$asStringPrecision$ = $.$asStringPrecision$;
     this.$asStringRadix$ = this._$asStringRadix$ = $.$asStringRadix$;
     this.$between$and$ = this._$between$and$ = $.$between$and$;
     this.$bitAnd$ = this._$bitAnd$ = $.$bitAnd$;
     this.$bitInvert = this._$bitInvert = $.$bitInvert;
     this.$bitOr$ = this._$bitOr$ = $.$bitOr$;
     this.$bitXor$ = this._$bitXor$ = $.$bitXor$;
     this.$ceiling = this._$ceiling = $.$ceiling;
     this.$cos = this._$cos = $.$cos;
     this.$exp = this._$exp = $.$exp;
     this.$floor = this._$floor = $.$floor;
     this.$hash = this._$hash = $.$hash;
     this.$isKindOfFloat = this._$isKindOfFloat = $.$isKindOfFloat;
     this.$isKindOfInteger = this._$isKindOfInteger = $.$isKindOfInteger;
     this.$isKindOfNumber = this._$isKindOfNumber = $.$isKindOfNumber;
     this.$isNumber = this._$isNumber = $.$isNumber;
     this.$ln = this._$ln = $.$ln;
     this.$max$ = this._$max$ = $.$max$;
     this.$min$ = this._$min$ = $.$min$;
     this.$printString = this._$printString = $.$printString;
     this.$quo$ = this._$quo$ = $.$quo$;
     this.$rem$ = this._$rem$ = $.$rem$;
     this.$rounded = this._$rounded = $.$rounded;
     this.$sign = this._$sign = $.$sign;
     this.$sin = this._$sin = $.$sin;
     this.$sqrt = this._$sqrt = $.$sqrt;
     this.$tan = this._$tan = $.$tan;
     this.$timesRepeat$ = this._$timesRepeat$ = $.$timesRepeat$;
     this.$to$ = this._$to$ = $.$to$;
     this.$to$do$ = this._$to$do$ = $.$to$do$;
     this.$truncated = this._$truncated = $.$truncated;
     this.$enclosingObjects$KernelForV8$Number = enclosingObjects;
     this.$super$KernelForV8$Number$slot = runtimeSuperclass;
     this["KernelForV8`Number"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["KernelForV8`Number"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Number";
    this.slots = [];
    this.methods = [
     new MM("uninstantiable", "public", true, 0),
     new MM("parse:", "public", false, 206)
    ];
    this.nestedClasses = [];
    this.$uninstantiable = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.$parse$ = function ($str) {
     let self = this;
     return parseFloat($str);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Number";
      this.$uninstantiable = this._$uninstantiable = $.$uninstantiable;
      this.$parse$ = this._$parse$ = $.$parse$;
      this.$enclosingObjects$KernelForV8$Number = enclosingObjects;
      this.$super$KernelForV8$Number$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Object = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Object";
   this.name = "KernelForV8`Object";
   this.header = 207;
   this.slots = [];
   this.methods = [
    new MM("superInit`KernelForV8`Object", "protected", true, 208),
    new MM("instance`initializer", "public", true, 209),
    new MM("=", "public", false, 210),
    new MM("==", "public", false, 211),
    new MM("Array", "protected", false, 212),
    new MM("ByteArray", "protected", false, 213),
    new MM("Character", "protected", false, 214),
    new MM("Error", "protected", false, 215),
    new MM("Float", "protected", false, 216),
    new MM("Future", "protected", false, 217),
    new MM("Object", "protected", false, 218),
    new MM("String", "protected", false, 219),
    new MM("assert:message:", "protected", false, 220),
    new MM("cannotReturn:", "private", false, 221),
    new MM("class", "protected", false, 222),
    new MM("doesNotUnderstand:", "protected", false, 223),
    new MM("hash", "public", false, 224),
    new MM("ifNil:", "public", false, 225),
    new MM("ifNil:ifNotNil:", "public", false, 226),
    new MM("ifNotNil:", "public", false, 227),
    new MM("isAlien", "public", false, 228),
    new MM("isExpat", "public", false, 229),
    new MM("isKindOfFuture", "public", false, 230),
    new MM("isNil", "public", false, 231),
    new MM("notNil", "public", false, 232),
    new MM("out", "public", false, 233),
    new MM("printString", "public", false, 234),
    new MM("yourself", "public", false, 235),
    new MM("~=", "public", false, 236)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Object = function () {
    let self = this;
    self.$super$KernelForV8$Object$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$KernelForV8$Object();
    return self;
   };
   this.$$equal = function ($other) {
    let self = this;
    return self === $other;
   };
   this.$$equal$equal = function ($other) {
    let self = this;
    return self === $other;
   };
   this.$Array = function () {
    let self = this;
    return self.$enclosingObjects$KernelForV8$Object[0]._$Array();
   };
   this.$ByteArray = function () {
    let self = this;
    return self.$enclosingObjects$KernelForV8$Object[0]._$ByteArray();
   };
   this.$Character = function () {
    let self = this;
    return self.$enclosingObjects$KernelForV8$Object[0]._$String();
   };
   this.$Error = function () {
    let self = this;
    return self.$enclosingObjects$KernelForV8$Object[0]._$Error();
   };
   this.$Float = function () {
    let self = this;
    return self.$enclosingObjects$KernelForV8$Object[0]._$Number();
   };
   this.$Future = function () {
    let self = this;
    return self.$enclosingObjects$KernelForV8$Object[0]._$Future();
   };
   this.$Object = function () {
    let self = this;
    return self.$enclosingObjects$KernelForV8$Object[0]._$Object();
   };
   this.$String = function () {
    let self = this;
    return self.$enclosingObjects$KernelForV8$Object[0]._$String();
   };
   this.$assert$message$ = function ($condition, $message) {
    let self = this;
    if (!$condition.$isKindOfClosure()) {
     self._$Error().$signal$("Block required");
    };
    if (!$condition.$value()) {
     self._$Error().$signal$("Assertion failed: ".$$comma($message));
    };
    return self;
   };
   this.$cannotReturn$ = function (self, $value) {
    self.$enclosingObjects$KernelForV8$Object[0]._$Exception().$signal$("CannotReturn: ".$$comma($value.$printString()));
    return self;
   };
   this.$class = function () {
    let self = this;
    return $0.$classOf$(self.$enclosingObjects$KernelForV8$Object[0], self);
   };
   this.$doesNotUnderstand$ = function ($message) {
    let self = this;
    if ($message.$selector().$startsWith$("is") && $message.$arguments().$size().$$equal(0)) {
     return false;
    };
    return self.$enclosingObjects$KernelForV8$Object[0]._$MessageNotUnderstood().$receiver$message$(self, $message).$signal();
   };
   this.$hash = function () {
    let self = this;
    while(this.hashCode === 0) this.hashCode = Math.random() * 0x3FFFFFF | 0;
    return this.hashCode;
   };
   this.$ifNil$ = function ($nilBlock) {
    let self = this;
    return self;
   };
   this.$ifNil$ifNotNil$ = function ($nilBlock, $notNilBlock) {
    let self = this;
    return $notNilBlock.$value$(self);
   };
   this.$ifNotNil$ = function ($nonNilBlock) {
    let self = this;
    return $nonNilBlock.$value$(self);
   };
   this.$isAlien = function () {
    let self = this;
    return false;
   };
   this.$isExpat = function () {
    let self = this;
    return false;
   };
   this.$isKindOfFuture = function () {
    let self = this;
    return false;
   };
   this.$isNil = function () {
    let self = this;
    return false;
   };
   this.$notNil = function () {
    let self = this;
    return true;
   };
   this.$out = function () {
    let self = this;
    $0.$print$(self.$enclosingObjects$KernelForV8$Object[0], self._$printString());
    return self;
   };
   this.$printString = function () {
    let self = this;
    return "instance of ".$$comma(self._$class().$name());
   };
   this.$yourself = function () {
    let self = this;
    return self;
   };
   this.$$tilde$equal = function ($other) {
    let self = this;
    return self._$$equal($other).$not();
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Object";
     this._$superInit$KernelForV8$Object = $.$superInit$KernelForV8$Object;
     this.$superInit$KernelForV8$Object = dnuCatcher("$superInit$KernelForV8$Object");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$$equal = this._$$equal = $.$$equal;
     this.$$equal$equal = this._$$equal$equal = $.$$equal$equal;
     this._$Array = $.$Array;
     this.$Array = dnuCatcher("$Array");
     this._$ByteArray = $.$ByteArray;
     this.$ByteArray = dnuCatcher("$ByteArray");
     this._$Character = $.$Character;
     this.$Character = dnuCatcher("$Character");
     this._$Error = $.$Error;
     this.$Error = dnuCatcher("$Error");
     this._$Float = $.$Float;
     this.$Float = dnuCatcher("$Float");
     this._$Future = $.$Future;
     this.$Future = dnuCatcher("$Future");
     this._$Object = $.$Object;
     this.$Object = dnuCatcher("$Object");
     this._$String = $.$String;
     this.$String = dnuCatcher("$String");
     this._$assert$message$ = $.$assert$message$;
     this.$assert$message$ = dnuCatcher("$assert$message$");
     this.cannotReturn = $.$cannotReturn$;
     this._$class = $.$class;
     this.$class = dnuCatcher("$class");
     this._$doesNotUnderstand$ = $.$doesNotUnderstand$;
     this.$doesNotUnderstand$ = dnuCatcher("$doesNotUnderstand$");
     this.dnu = $.$doesNotUnderstand$;
     this.$hash = this._$hash = $.$hash;
     this.$ifNil$ = this._$ifNil$ = $.$ifNil$;
     this.$ifNil$ifNotNil$ = this._$ifNil$ifNotNil$ = $.$ifNil$ifNotNil$;
     this.$ifNotNil$ = this._$ifNotNil$ = $.$ifNotNil$;
     this.$isAlien = this._$isAlien = $.$isAlien;
     this.$isExpat = this._$isExpat = $.$isExpat;
     this.$isKindOfFuture = this._$isKindOfFuture = $.$isKindOfFuture;
     this.$isNil = this._$isNil = $.$isNil;
     this.$notNil = this._$notNil = $.$notNil;
     this.$out = this._$out = $.$out;
     this.$printString = this._$printString = $.$printString;
     this.$yourself = this._$yourself = $.$yourself;
     this.$$tilde$equal = this._$$tilde$equal = $.$$tilde$equal;
     this.$enclosingObjects$KernelForV8$Object = enclosingObjects;
     this.$super$KernelForV8$Object$slot = runtimeSuperclass;
     this["KernelForV8`Object"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["KernelForV8`Object"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Object";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Object";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$KernelForV8$Object = enclosingObjects;
      this.$super$KernelForV8$Object$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Stopwatch = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for KernelForV8`Stopwatch";
   this.name = "KernelForV8`Stopwatch";
   this.header = 237;
   this.slots = [
    new SM("cumulativeMillis", "private", true, false),
    new SM("startMillis", "private", true, false)
   ];
   this.methods = [
    new MM("superInit`KernelForV8`Stopwatch", "protected", true, 238),
    new MM("instance`initializer", "public", true, 239),
    new MM("currentMonotonicMillis", "private", false, 240),
    new MM("elapsedMicroseconds", "public", false, 241),
    new MM("elapsedMilliseconds", "public", false, 242),
    new MM("start", "public", false, 243),
    new MM("stop", "public", false, 244),
    new MM("init`cumulativeMillis:", "private", true, 0),
    new MM("cumulativeMillis", "private", true, 0),
    new MM("cumulativeMillis:", "private", true, 0),
    new MM("init`startMillis:", "private", true, 0),
    new MM("startMillis", "private", true, 0),
    new MM("startMillis:", "private", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$Stopwatch = function () {
    let self = this;
    self.$super$KernelForV8$Stopwatch$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$KernelForV8$Stopwatch();
    $1.$init$cumulativeMillis$(self, 0);
    return self;
   };
   this.$currentMonotonicMillis = function (self) {
    return performance.now();
   };
   this.$elapsedMicroseconds = function () {
    let self = this;
    return self._$elapsedMilliseconds() * 1000;
   };
   this.$elapsedMilliseconds = function () {
    let self = this;
    if (nil.$$equal($1.$startMillis(self))) {
     return $1.$cumulativeMillis(self);
    };
    return $1.$cumulativeMillis(self) + ($1.$currentMonotonicMillis(self) - $1.$startMillis(self));
   };
   this.$start = function () {
    let self = this;
    if (!nil.$$equal($1.$startMillis(self))) {
     return self;
    };
    $1.$startMillis$(self, $1.$currentMonotonicMillis(self));
    return self;
   };
   this.$stop = function () {
    let self = this;
    if (nil.$$equal($1.$startMillis(self))) {
     return self;
    };
    $1.$cumulativeMillis$(self, $1.$cumulativeMillis(self) + ($1.$currentMonotonicMillis(self) - $1.$startMillis(self)));
    $1.$startMillis$(self, nil);
    return self;
   };
   this.$init$cumulativeMillis$ = function (self, v) {
    self.$cumulativeMillis$slot = v;
    return self;
   };
   this.$cumulativeMillis = function (self) {
    return self.$cumulativeMillis$slot;
   };
   this.$cumulativeMillis$ = function (self, v) {
    self.$cumulativeMillis$slot = v;
    return self;
   };
   this.$init$startMillis$ = function (self, v) {
    self.$startMillis$slot = v;
    return self;
   };
   this.$startMillis = function (self) {
    return self.$startMillis$slot;
   };
   this.$startMillis$ = function (self, v) {
    self.$startMillis$slot = v;
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`Stopwatch";
     this._$superInit$KernelForV8$Stopwatch = $.$superInit$KernelForV8$Stopwatch;
     this.$superInit$KernelForV8$Stopwatch = dnuCatcher("$superInit$KernelForV8$Stopwatch");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$elapsedMicroseconds = this._$elapsedMicroseconds = $.$elapsedMicroseconds;
     this.$elapsedMilliseconds = this._$elapsedMilliseconds = $.$elapsedMilliseconds;
     this.$start = this._$start = $.$start;
     this.$stop = this._$stop = $.$stop;
     this.$enclosingObjects$KernelForV8$Stopwatch = enclosingObjects;
     this.$super$KernelForV8$Stopwatch$slot = runtimeSuperclass;
     this["KernelForV8`Stopwatch"] = function () {
      superBasicNew.call(this);
      this.$cumulativeMillis$slot = nil;
      this.$startMillis$slot = nil;
     };
     this.basicNew = this["KernelForV8`Stopwatch"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`Stopwatch";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`Stopwatch";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$KernelForV8$Stopwatch = enclosingObjects;
      this.$super$KernelForV8$Stopwatch$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$String = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for KernelForV8`String";
   this.name = "KernelForV8`String";
   this.header = 245;
   this.slots = [];
   this.methods = [
    new MM("superInit`KernelForV8`String", "protected", true, 246),
    new MM("instance`initializer", "public", true, 247),
    new MM(",", "public", false, 248),
    new MM("=", "public", false, 249),
    new MM("asString", "public", false, 250),
    new MM("asSymbol", "public", false, 251),
    new MM("at:", "public", false, 252),
    new MM("copyFrom:to:", "public", false, 253),
    new MM("do:", "public", false, 254),
    new MM("endsWith:", "public", false, 255),
    new MM("first", "public", false, 256),
    new MM("hash", "public", false, 257),
    new MM("includes:", "public", false, 258),
    new MM("indexOf:", "public", false, 259),
    new MM("indexOf:startingAt:", "public", false, 260),
    new MM("isEmpty", "public", false, 261),
    new MM("isKindOfString", "public", false, 262),
    new MM("isString", "public", false, 263),
    new MM("last", "public", false, 264),
    new MM("lastIndexOf:", "public", false, 265),
    new MM("out", "public", false, 266),
    new MM("printString", "public", false, 267),
    new MM("replaceAll:with:", "public", false, 268),
    new MM("runeAt:", "public", false, 269),
    new MM("size", "public", false, 270),
    new MM("splitBy:", "public", false, 271),
    new MM("startsWith:", "public", false, 272)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$String = function () {
    let self = this;
    self.$super$KernelForV8$String$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$KernelForV8$String();
    return self;
   };
   this.$$comma = function ($other) {
    let self = this;
    return self.concat($other);
   };
   this.$$equal = function ($other) {
    let self = this;
    return self === $other;
   };
   this.$asString = function () {
    let self = this;
    return self;
   };
   this.$asSymbol = function () {
    let self = this;
    return self;
   };
   this.$at$ = function ($index) {
    let self = this;
    return this[$index - 1];
   };
   this.$copyFrom$to$ = function ($start, $end) {
    let self = this;
    return self.substring($start - 1, $end);
   };
   this.$do$ = function ($action) {
    let self = this;
    let $i = nil;
    let $len = nil;
    $i = 0;
    $len = this.length;
    for (; $i < $len; $i++) {
     $action(self[$i]);
    };
    return self;
   };
   this.$endsWith$ = function ($substring) {
    let self = this;
    return self.endsWith($substring);
   };
   this.$first = function () {
    let self = this;
    return self._$at$(1);
   };
   this.$hash = function () {
    let self = this;
    let l = this.length;
    return (l == 0 ? 0 : (l * 32 ^ this.charCodeAt(0)) * 32 ^ this.charCodeAt(l - 1));
   };
   this.$includes$ = function ($object) {
    let self = this;
    let NLR = new Object();
    try {
     self._$do$(function ($element) {
      return $object.$$equal($element).$ifTrue$(function () {
       {
        let t = true;
        if (NLR === null) {
         self.cannotReturn(self, t);
        };
        NLR.value = t;
        throw NLR;
       };
      });
     });
     {
      let t = false;
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$indexOf$ = function ($substring) {
    let self = this;
    return 1 + self.indexOf($substring);
   };
   this.$indexOf$startingAt$ = function ($substring, $index) {
    let self = this;
    return 1 + self.indexOf($substring, $index - 1);
   };
   this.$isEmpty = function () {
    let self = this;
    return (0).$$equal(self._$size());
   };
   this.$isKindOfString = function () {
    let self = this;
    return true;
   };
   this.$isString = function () {
    let self = this;
    return true;
   };
   this.$last = function () {
    let self = this;
    return self._$at$(self._$size());
   };
   this.$lastIndexOf$ = function ($substring) {
    let self = this;
    return 1 + self.lastIndexOf($substring);
   };
   this.$out = function () {
    let self = this;
    $0.$print$(self.$enclosingObjects$KernelForV8$String[0], self);
    return self;
   };
   this.$printString = function () {
    let self = this;
    return "'"+this.toString()+"'";
   };
   this.$replaceAll$with$ = function ($substring, $newSubstring) {
    let self = this;
    "BOGUS";
    let target = $substring;
    let replacement = $newSubstring;
    return this.replace(new RegExp(target.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), replacement);
   };
   this.$runeAt$ = function ($index) {
    let self = this;
    return self.charCodeAt($index - 1);
   };
   this.$size = function () {
    let self = this;
    return this.length;
   };
   this.$splitBy$ = function ($str) {
    let self = this;
    return self.split($str);
   };
   this.$startsWith$ = function ($substring) {
    let self = this;
    return self.startsWith($substring);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`String";
     this._$superInit$KernelForV8$String = $.$superInit$KernelForV8$String;
     this.$superInit$KernelForV8$String = dnuCatcher("$superInit$KernelForV8$String");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$$comma = this._$$comma = $.$$comma;
     this.$$equal = this._$$equal = $.$$equal;
     this.$asString = this._$asString = $.$asString;
     this.$asSymbol = this._$asSymbol = $.$asSymbol;
     this.$at$ = this._$at$ = $.$at$;
     this.$copyFrom$to$ = this._$copyFrom$to$ = $.$copyFrom$to$;
     this.$do$ = this._$do$ = $.$do$;
     this.$endsWith$ = this._$endsWith$ = $.$endsWith$;
     this.$first = this._$first = $.$first;
     this.$hash = this._$hash = $.$hash;
     this.$includes$ = this._$includes$ = $.$includes$;
     this.$indexOf$ = this._$indexOf$ = $.$indexOf$;
     this.$indexOf$startingAt$ = this._$indexOf$startingAt$ = $.$indexOf$startingAt$;
     this.$isEmpty = this._$isEmpty = $.$isEmpty;
     this.$isKindOfString = this._$isKindOfString = $.$isKindOfString;
     this.$isString = this._$isString = $.$isString;
     this.$last = this._$last = $.$last;
     this.$lastIndexOf$ = this._$lastIndexOf$ = $.$lastIndexOf$;
     this.$out = this._$out = $.$out;
     this.$printString = this._$printString = $.$printString;
     this.$replaceAll$with$ = this._$replaceAll$with$ = $.$replaceAll$with$;
     this.$runeAt$ = this._$runeAt$ = $.$runeAt$;
     this.$size = this._$size = $.$size;
     this.$splitBy$ = this._$splitBy$ = $.$splitBy$;
     this.$startsWith$ = this._$startsWith$ = $.$startsWith$;
     this.$enclosingObjects$KernelForV8$String = enclosingObjects;
     this.$super$KernelForV8$String$slot = runtimeSuperclass;
     this["KernelForV8`String"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["KernelForV8`String"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`String";
    this.slots = [];
    this.methods = [
     new MM("uninstantiable", "public", true, 0),
     new MM("cr", "public", false, 273),
     new MM("fromRune:", "public", false, 274),
     new MM("fromRunes:", "public", false, 275),
     new MM("lf", "public", false, 276),
     new MM("space", "public", false, 277),
     new MM("tab", "public", false, 278),
     new MM("withAll:", "public", false, 279)
    ];
    this.nestedClasses = [];
    this.$uninstantiable = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.$cr = function () {
     let self = this;
     return "\r";
    };
    this.$fromRune$ = function ($rune) {
     let self = this;
     return String.fromCharCode($rune);
    };
    this.$fromRunes$ = function ($runes) {
     let self = this;
     return String.fromCharCode.apply(null, $runes.$asArray());
    };
    this.$lf = function () {
     let self = this;
     return "\n";
    };
    this.$space = function () {
     let self = this;
     return " ";
    };
    this.$tab = function () {
     let self = this;
     return "\t";
    };
    this.$withAll$ = function ($characters) {
     let self = this;
     return $characters.$asArray().join("");
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`String";
      this.$uninstantiable = this._$uninstantiable = $.$uninstantiable;
      this.$cr = this._$cr = $.$cr;
      this.$fromRune$ = this._$fromRune$ = $.$fromRune$;
      this.$fromRunes$ = this._$fromRunes$ = $.$fromRunes$;
      this.$lf = this._$lf = $.$lf;
      this.$space = this._$space = $.$space;
      this.$tab = this._$tab = $.$tab;
      this.$withAll$ = this._$withAll$ = $.$withAll$;
      this.$enclosingObjects$KernelForV8$String = enclosingObjects;
      this.$super$KernelForV8$String$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$StringBuilder = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for KernelForV8`StringBuilder";
   this.name = "KernelForV8`StringBuilder";
   this.header = 280;
   this.slots = [
    new SM("parts", "protected", false, false),
    new SM("sizeX", "protected", true, false)
   ];
   this.methods = [
    new MM("superInit`KernelForV8`StringBuilder", "protected", true, 281),
    new MM("instance`initializer", "public", true, 282),
    new MM("add:", "public", false, 283),
    new MM("asString", "public", false, 284),
    new MM("size", "public", false, 285),
    new MM("writeln:", "public", false, 286),
    new MM("init`parts:", "protected", true, 0),
    new MM("parts", "protected", true, 0),
    new MM("init`sizeX:", "protected", true, 0),
    new MM("sizeX", "protected", true, 0),
    new MM("sizeX:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$StringBuilder = function () {
    let self = this;
    self.$super$KernelForV8$StringBuilder$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$KernelForV8$StringBuilder();
    self._$init$parts$(self.$enclosingObjects$KernelForV8$StringBuilder[0]._$platform().$collections().$List().$new());
    self._$init$sizeX$(0);
    return self;
   };
   this.$add$ = function ($string) {
    let self = this;
    self._$sizeX$(self._$sizeX() + $string.$size());
    return self._$parts().$add$($string);
   };
   this.$asString = function () {
    let self = this;
    return self._$parts().$asArray().join("");
   };
   this.$size = function () {
    let self = this;
    return self._$sizeX();
   };
   this.$writeln$ = function ($line) {
    let self = this;
    self._$add$($line);
    self._$add$(self.$enclosingObjects$KernelForV8$StringBuilder[0]._$String().$lf());
    return self;
   };
   this.$init$parts$ = function (v) {
    this.$parts$slot = v;
    return this;
   };
   this.$parts = function () {
    return this.$parts$slot;
   };
   this.$init$sizeX$ = function (v) {
    this.$sizeX$slot = v;
    return this;
   };
   this.$sizeX = function () {
    return this.$sizeX$slot;
   };
   this.$sizeX$ = function (v) {
    this.$sizeX$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`StringBuilder";
     this._$superInit$KernelForV8$StringBuilder = $.$superInit$KernelForV8$StringBuilder;
     this.$superInit$KernelForV8$StringBuilder = dnuCatcher("$superInit$KernelForV8$StringBuilder");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$add$ = this._$add$ = $.$add$;
     this.$asString = this._$asString = $.$asString;
     this.$size = this._$size = $.$size;
     this.$writeln$ = this._$writeln$ = $.$writeln$;
     this._$init$parts$ = $.$init$parts$;
     this.$init$parts$ = dnuCatcher("$init$parts$");
     this._$parts = $.$parts;
     this.$parts = dnuCatcher("$parts");
     this._$init$sizeX$ = $.$init$sizeX$;
     this.$init$sizeX$ = dnuCatcher("$init$sizeX$");
     this._$sizeX = $.$sizeX;
     this.$sizeX = dnuCatcher("$sizeX");
     this._$sizeX$ = $.$sizeX$;
     this.$sizeX$ = dnuCatcher("$sizeX$");
     this.$enclosingObjects$KernelForV8$StringBuilder = enclosingObjects;
     this.$super$KernelForV8$StringBuilder$slot = runtimeSuperclass;
     this["KernelForV8`StringBuilder"] = function () {
      superBasicNew.call(this);
      this.$parts$slot = nil;
      this.$sizeX$slot = nil;
     };
     this.basicNew = this["KernelForV8`StringBuilder"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`StringBuilder";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`StringBuilder";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$KernelForV8$StringBuilder = enclosingObjects;
      this.$super$KernelForV8$StringBuilder$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$UndefinedObject = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for KernelForV8`UndefinedObject";
   this.name = "KernelForV8`UndefinedObject";
   this.header = 287;
   this.slots = [];
   this.methods = [
    new MM("superInit`KernelForV8`UndefinedObject", "protected", true, 288),
    new MM("instance`initializer", "public", true, 289),
    new MM("ifNil:", "public", false, 290),
    new MM("ifNil:ifNotNil:", "public", false, 291),
    new MM("ifNotNil:", "public", false, 292),
    new MM("isNil", "public", false, 293),
    new MM("notNil", "public", false, 294),
    new MM("printString", "public", false, 295)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$KernelForV8$UndefinedObject = function () {
    let self = this;
    self.$super$KernelForV8$UndefinedObject$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$KernelForV8$UndefinedObject();
    return self;
   };
   this.$ifNil$ = function ($nilBlock) {
    let self = this;
    return $nilBlock.$value();
   };
   this.$ifNil$ifNotNil$ = function ($nilBlock, $notNilBlock) {
    let self = this;
    return $nilBlock.$value();
   };
   this.$ifNotNil$ = function ($notNilBlock) {
    let self = this;
    return self;
   };
   this.$isNil = function () {
    let self = this;
    return true;
   };
   this.$notNil = function () {
    let self = this;
    return false;
   };
   this.$printString = function () {
    let self = this;
    return "nil";
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for KernelForV8`UndefinedObject";
     this._$superInit$KernelForV8$UndefinedObject = $.$superInit$KernelForV8$UndefinedObject;
     this.$superInit$KernelForV8$UndefinedObject = dnuCatcher("$superInit$KernelForV8$UndefinedObject");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$ifNil$ = this._$ifNil$ = $.$ifNil$;
     this.$ifNil$ifNotNil$ = this._$ifNil$ifNotNil$ = $.$ifNil$ifNotNil$;
     this.$ifNotNil$ = this._$ifNotNil$ = $.$ifNotNil$;
     this.$isNil = this._$isNil = $.$isNil;
     this.$notNil = this._$notNil = $.$notNil;
     this.$printString = this._$printString = $.$printString;
     this.$enclosingObjects$KernelForV8$UndefinedObject = enclosingObjects;
     this.$super$KernelForV8$UndefinedObject$slot = runtimeSuperclass;
     this["KernelForV8`UndefinedObject"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["KernelForV8`UndefinedObject"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for KernelForV8`UndefinedObject";
    this.slots = [];
    this.methods = [new MM("uninstantiable", "public", true, 0)];
    this.nestedClasses = [];
    this.$uninstantiable = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for KernelForV8`UndefinedObject";
      this.$uninstantiable = this._$uninstantiable = $.$uninstantiable;
      this.$enclosingObjects$KernelForV8$UndefinedObject = enclosingObjects;
      this.$super$KernelForV8$UndefinedObject$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$KernelForV8$Array.enclosingMixin = this;
  this.$KernelForV8$Boolean.enclosingMixin = this;
  this.$KernelForV8$ByteArray.enclosingMixin = this;
  this.$KernelForV8$Class.enclosingMixin = this;
  this.$KernelForV8$Closure.enclosingMixin = this;
  this.$KernelForV8$Exception.enclosingMixin = this;
  this.$KernelForV8$Future.enclosingMixin = this;
  this.$KernelForV8$Message.enclosingMixin = this;
  this.$KernelForV8$MessageNotUnderstood.enclosingMixin = this;
  this.$KernelForV8$Metaclass.enclosingMixin = this;
  this.$KernelForV8$Mixin.enclosingMixin = this;
  this.$KernelForV8$Number.enclosingMixin = this;
  this.$KernelForV8$Object.enclosingMixin = this;
  this.$KernelForV8$Stopwatch.enclosingMixin = this;
  this.$KernelForV8$String.enclosingMixin = this;
  this.$KernelForV8$StringBuilder.enclosingMixin = this;
  this.$KernelForV8$UndefinedObject.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for KernelForV8";
    this._$superInit$KernelForV8 = $.$superInit$KernelForV8;
    this.$superInit$KernelForV8 = dnuCatcher("$superInit$KernelForV8");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this.$Error = this._$Error = $.$Error;
    this.$UnhandledError = this._$UnhandledError = $.$UnhandledError;
    this._$augment$withPropertiesOf$ = $.$augment$withPropertiesOf$;
    this.$augment$withPropertiesOf$ = dnuCatcher("$augment$withPropertiesOf$");
    this.$augmentPrototypes = this._$augmentPrototypes = $.$augmentPrototypes;
    this.$Array = this._$Array = $.$Array;
    this.$Boolean = this._$Boolean = $.$Boolean;
    this.$ByteArray = this._$ByteArray = $.$ByteArray;
    this.$Class = this._$Class = $.$Class;
    this.$Closure = this._$Closure = $.$Closure;
    this.$Exception = this._$Exception = $.$Exception;
    this.$Future = this._$Future = $.$Future;
    this.$Message = this._$Message = $.$Message;
    this.$MessageNotUnderstood = this._$MessageNotUnderstood = $.$MessageNotUnderstood;
    this.$Metaclass = this._$Metaclass = $.$Metaclass;
    this.$Mixin = this._$Mixin = $.$Mixin;
    this.$Number = this._$Number = $.$Number;
    this.$Object = this._$Object = $.$Object;
    this.$Stopwatch = this._$Stopwatch = $.$Stopwatch;
    this.$String = this._$String = $.$String;
    this.$StringBuilder = this._$StringBuilder = $.$StringBuilder;
    this.$UndefinedObject = this._$UndefinedObject = $.$UndefinedObject;
    this._$init$vmmirror$ = $.$init$vmmirror$;
    this.$init$vmmirror$ = dnuCatcher("$init$vmmirror$");
    this._$vmmirror = $.$vmmirror;
    this.$vmmirror = dnuCatcher("$vmmirror");
    this.$init$platform$ = this._$init$platform$ = $.$init$platform$;
    this.$platform = this._$platform = $.$platform;
    this.$platform$ = this._$platform$ = $.$platform$;
    this.$init$KernelForV8$Array$ = this._$init$KernelForV8$Array$ = $.$init$KernelForV8$Array$;
    this.$KernelForV8$Array = this._$KernelForV8$Array = $.$KernelForV8$Array;
    this.$KernelForV8$Array$ = this._$KernelForV8$Array$ = $.$KernelForV8$Array$;
    this.$init$KernelForV8$Boolean$ = this._$init$KernelForV8$Boolean$ = $.$init$KernelForV8$Boolean$;
    this.$KernelForV8$Boolean = this._$KernelForV8$Boolean = $.$KernelForV8$Boolean;
    this.$KernelForV8$Boolean$ = this._$KernelForV8$Boolean$ = $.$KernelForV8$Boolean$;
    this.$init$KernelForV8$ByteArray$ = this._$init$KernelForV8$ByteArray$ = $.$init$KernelForV8$ByteArray$;
    this.$KernelForV8$ByteArray = this._$KernelForV8$ByteArray = $.$KernelForV8$ByteArray;
    this.$KernelForV8$ByteArray$ = this._$KernelForV8$ByteArray$ = $.$KernelForV8$ByteArray$;
    this.$init$KernelForV8$Class$ = this._$init$KernelForV8$Class$ = $.$init$KernelForV8$Class$;
    this.$KernelForV8$Class = this._$KernelForV8$Class = $.$KernelForV8$Class;
    this.$KernelForV8$Class$ = this._$KernelForV8$Class$ = $.$KernelForV8$Class$;
    this.$init$KernelForV8$Closure$ = this._$init$KernelForV8$Closure$ = $.$init$KernelForV8$Closure$;
    this.$KernelForV8$Closure = this._$KernelForV8$Closure = $.$KernelForV8$Closure;
    this.$KernelForV8$Closure$ = this._$KernelForV8$Closure$ = $.$KernelForV8$Closure$;
    this.$init$KernelForV8$Exception$ = this._$init$KernelForV8$Exception$ = $.$init$KernelForV8$Exception$;
    this.$KernelForV8$Exception = this._$KernelForV8$Exception = $.$KernelForV8$Exception;
    this.$KernelForV8$Exception$ = this._$KernelForV8$Exception$ = $.$KernelForV8$Exception$;
    this.$init$KernelForV8$Future$ = this._$init$KernelForV8$Future$ = $.$init$KernelForV8$Future$;
    this.$KernelForV8$Future = this._$KernelForV8$Future = $.$KernelForV8$Future;
    this.$KernelForV8$Future$ = this._$KernelForV8$Future$ = $.$KernelForV8$Future$;
    this.$init$KernelForV8$Message$ = this._$init$KernelForV8$Message$ = $.$init$KernelForV8$Message$;
    this.$KernelForV8$Message = this._$KernelForV8$Message = $.$KernelForV8$Message;
    this.$KernelForV8$Message$ = this._$KernelForV8$Message$ = $.$KernelForV8$Message$;
    this.$init$KernelForV8$MessageNotUnderstood$ = this._$init$KernelForV8$MessageNotUnderstood$ = $.$init$KernelForV8$MessageNotUnderstood$;
    this.$KernelForV8$MessageNotUnderstood = this._$KernelForV8$MessageNotUnderstood = $.$KernelForV8$MessageNotUnderstood;
    this.$KernelForV8$MessageNotUnderstood$ = this._$KernelForV8$MessageNotUnderstood$ = $.$KernelForV8$MessageNotUnderstood$;
    this.$init$KernelForV8$Metaclass$ = this._$init$KernelForV8$Metaclass$ = $.$init$KernelForV8$Metaclass$;
    this.$KernelForV8$Metaclass = this._$KernelForV8$Metaclass = $.$KernelForV8$Metaclass;
    this.$KernelForV8$Metaclass$ = this._$KernelForV8$Metaclass$ = $.$KernelForV8$Metaclass$;
    this.$init$KernelForV8$Mixin$ = this._$init$KernelForV8$Mixin$ = $.$init$KernelForV8$Mixin$;
    this.$KernelForV8$Mixin = this._$KernelForV8$Mixin = $.$KernelForV8$Mixin;
    this.$KernelForV8$Mixin$ = this._$KernelForV8$Mixin$ = $.$KernelForV8$Mixin$;
    this.$init$KernelForV8$Number$ = this._$init$KernelForV8$Number$ = $.$init$KernelForV8$Number$;
    this.$KernelForV8$Number = this._$KernelForV8$Number = $.$KernelForV8$Number;
    this.$KernelForV8$Number$ = this._$KernelForV8$Number$ = $.$KernelForV8$Number$;
    this.$init$KernelForV8$Object$ = this._$init$KernelForV8$Object$ = $.$init$KernelForV8$Object$;
    this.$KernelForV8$Object = this._$KernelForV8$Object = $.$KernelForV8$Object;
    this.$KernelForV8$Object$ = this._$KernelForV8$Object$ = $.$KernelForV8$Object$;
    this.$init$KernelForV8$Stopwatch$ = this._$init$KernelForV8$Stopwatch$ = $.$init$KernelForV8$Stopwatch$;
    this.$KernelForV8$Stopwatch = this._$KernelForV8$Stopwatch = $.$KernelForV8$Stopwatch;
    this.$KernelForV8$Stopwatch$ = this._$KernelForV8$Stopwatch$ = $.$KernelForV8$Stopwatch$;
    this.$init$KernelForV8$String$ = this._$init$KernelForV8$String$ = $.$init$KernelForV8$String$;
    this.$KernelForV8$String = this._$KernelForV8$String = $.$KernelForV8$String;
    this.$KernelForV8$String$ = this._$KernelForV8$String$ = $.$KernelForV8$String$;
    this.$init$KernelForV8$StringBuilder$ = this._$init$KernelForV8$StringBuilder$ = $.$init$KernelForV8$StringBuilder$;
    this.$KernelForV8$StringBuilder = this._$KernelForV8$StringBuilder = $.$KernelForV8$StringBuilder;
    this.$KernelForV8$StringBuilder$ = this._$KernelForV8$StringBuilder$ = $.$KernelForV8$StringBuilder$;
    this.$init$KernelForV8$UndefinedObject$ = this._$init$KernelForV8$UndefinedObject$ = $.$init$KernelForV8$UndefinedObject$;
    this.$KernelForV8$UndefinedObject = this._$KernelForV8$UndefinedObject = $.$KernelForV8$UndefinedObject;
    this.$KernelForV8$UndefinedObject$ = this._$KernelForV8$UndefinedObject$ = $.$KernelForV8$UndefinedObject$;
    this.$enclosingObjects$KernelForV8 = enclosingObjects;
    this.$super$KernelForV8$slot = runtimeSuperclass;
    this.KernelForV8 = function () {
     superBasicNew.call(this);
     this.$vmmirror$slot = nil;
     this.$platform$slot = nil;
     this.$KernelForV8$Array$slot = nil;
     this.$KernelForV8$Boolean$slot = nil;
     this.$KernelForV8$ByteArray$slot = nil;
     this.$KernelForV8$Class$slot = nil;
     this.$KernelForV8$Closure$slot = nil;
     this.$KernelForV8$Exception$slot = nil;
     this.$KernelForV8$Future$slot = nil;
     this.$KernelForV8$Message$slot = nil;
     this.$KernelForV8$MessageNotUnderstood$slot = nil;
     this.$KernelForV8$Metaclass$slot = nil;
     this.$KernelForV8$Mixin$slot = nil;
     this.$KernelForV8$Number$slot = nil;
     this.$KernelForV8$Object$slot = nil;
     this.$KernelForV8$Stopwatch$slot = nil;
     this.$KernelForV8$String$slot = nil;
     this.$KernelForV8$StringBuilder$slot = nil;
     this.$KernelForV8$UndefinedObject$slot = nil;
    };
    this.basicNew = this.KernelForV8;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   let $ = this;
   this.debug = "Runtime meta mixin for KernelForV8";
   this.slots = [];
   this.methods = [new MM("usingVmMirror:", "public", true, 0)];
   this.nestedClasses = [];
   this.$usingVmMirror$ = function ($vmm) {
    let t = new this.nonMeta.basicNew();
    t.$instance$initializer($vmm);
    return t;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for KernelForV8";
     this.$usingVmMirror$ = this._$usingVmMirror$ = $.$usingVmMirror$;
     this.$enclosingObjects$KernelForV8 = enclosingObjects;
     this.$super$KernelForV8$slot = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$ActorsForV8 = new function () {
  let $ = this;
  let $0 = this;
  this.debug = "Runtime mixin for ActorsForV8";
  this.name = "ActorsForV8";
  this.header = 296;
  this.slots = [
   new SM("WeakMap", "private", false, false),
   new SM("List", "private", false, false),
   new SM("Message", "private", false, false),
   new SM("internalRefs", "private", false, false),
   new SM("Promise", "public", false, false),
   new SM("defaultActor", "protected", false, false),
   new SM("ActorsForV8`Actor", "public", true, true),
   new SM("ActorsForV8`DOMActor", "public", true, true),
   new SM("ActorsForV8`EventualSendReactor", "public", true, true),
   new SM("ActorsForV8`InternalActor", "public", true, true),
   new SM("ActorsForV8`InternalBrokenRef", "public", true, true),
   new SM("ActorsForV8`InternalFarReference", "public", true, true),
   new SM("ActorsForV8`InternalLocalPromise", "public", true, true),
   new SM("ActorsForV8`InternalNearRef", "public", true, true),
   new SM("ActorsForV8`InternalRef", "public", true, true),
   new SM("ActorsForV8`InternalRemotePromise", "public", true, true),
   new SM("ActorsForV8`PendingDelivery", "public", true, true),
   new SM("ActorsForV8`PromiseUtils", "public", true, true),
   new SM("ActorsForV8`RedirectReactor", "public", true, true),
   new SM("ActorsForV8`Ref", "public", true, true),
   new SM("ActorsForV8`Resolver", "public", true, true),
   new SM("ActorsForV8`Scheduler", "public", true, true),
   new SM("ActorsForV8`Timer", "public", true, true),
   new SM("ActorsForV8`WhenReactor", "public", true, true)
  ];
  this.methods = [
   new MM("superInit`ActorsForV8", "protected", true, 297),
   new MM("instance`initializer", "public", true, 298),
   new MM("asInternalRef:", "private", false, 299),
   new MM("check:allowedIn:", "private", false, 300),
   new MM("createFarReferenceTo:in:for:", "private", false, 301),
   new MM("createRemotePromiseOf:in:for:", "private", false, 302),
   new MM("currentActor", "private", false, 303),
   new MM("isRef:", "private", false, 304),
   new MM("isValueObject:", "private", false, 305),
   new MM("wrapArgument:from:to:", "private", false, 306),
   new MM("wrapArguments:from:to:", "private", false, 307),
   new MM("Actor", "public", true, 0),
   new MM("DOMActor", "protected", true, 0),
   new MM("EventualSendReactor", "protected", true, 0),
   new MM("InternalActor", "protected", true, 0),
   new MM("InternalBrokenRef", "protected", true, 0),
   new MM("InternalFarReference", "protected", true, 0),
   new MM("InternalLocalPromise", "protected", true, 0),
   new MM("InternalNearRef", "protected", true, 0),
   new MM("InternalRef", "protected", true, 0),
   new MM("InternalRemotePromise", "protected", true, 0),
   new MM("PendingDelivery", "protected", true, 0),
   new MM("PromiseUtils", "protected", true, 0),
   new MM("RedirectReactor", "protected", true, 0),
   new MM("Ref", "protected", true, 0),
   new MM("Resolver", "public", true, 0),
   new MM("Scheduler", "protected", true, 0),
   new MM("Timer", "public", true, 0),
   new MM("WhenReactor", "protected", true, 0),
   new MM("init`WeakMap:", "private", true, 0),
   new MM("WeakMap", "private", true, 0),
   new MM("init`List:", "private", true, 0),
   new MM("List", "private", true, 0),
   new MM("init`Message:", "private", true, 0),
   new MM("Message", "private", true, 0),
   new MM("init`internalRefs:", "private", true, 0),
   new MM("internalRefs", "private", true, 0),
   new MM("init`Promise:", "public", true, 0),
   new MM("Promise", "public", true, 0),
   new MM("init`defaultActor:", "protected", true, 0),
   new MM("defaultActor", "protected", true, 0),
   new MM("init`ActorsForV8`Actor:", "public", true, 0),
   new MM("ActorsForV8`Actor", "public", true, 0),
   new MM("ActorsForV8`Actor:", "public", true, 0),
   new MM("init`ActorsForV8`DOMActor:", "public", true, 0),
   new MM("ActorsForV8`DOMActor", "public", true, 0),
   new MM("ActorsForV8`DOMActor:", "public", true, 0),
   new MM("init`ActorsForV8`EventualSendReactor:", "public", true, 0),
   new MM("ActorsForV8`EventualSendReactor", "public", true, 0),
   new MM("ActorsForV8`EventualSendReactor:", "public", true, 0),
   new MM("init`ActorsForV8`InternalActor:", "public", true, 0),
   new MM("ActorsForV8`InternalActor", "public", true, 0),
   new MM("ActorsForV8`InternalActor:", "public", true, 0),
   new MM("init`ActorsForV8`InternalBrokenRef:", "public", true, 0),
   new MM("ActorsForV8`InternalBrokenRef", "public", true, 0),
   new MM("ActorsForV8`InternalBrokenRef:", "public", true, 0),
   new MM("init`ActorsForV8`InternalFarReference:", "public", true, 0),
   new MM("ActorsForV8`InternalFarReference", "public", true, 0),
   new MM("ActorsForV8`InternalFarReference:", "public", true, 0),
   new MM("init`ActorsForV8`InternalLocalPromise:", "public", true, 0),
   new MM("ActorsForV8`InternalLocalPromise", "public", true, 0),
   new MM("ActorsForV8`InternalLocalPromise:", "public", true, 0),
   new MM("init`ActorsForV8`InternalNearRef:", "public", true, 0),
   new MM("ActorsForV8`InternalNearRef", "public", true, 0),
   new MM("ActorsForV8`InternalNearRef:", "public", true, 0),
   new MM("init`ActorsForV8`InternalRef:", "public", true, 0),
   new MM("ActorsForV8`InternalRef", "public", true, 0),
   new MM("ActorsForV8`InternalRef:", "public", true, 0),
   new MM("init`ActorsForV8`InternalRemotePromise:", "public", true, 0),
   new MM("ActorsForV8`InternalRemotePromise", "public", true, 0),
   new MM("ActorsForV8`InternalRemotePromise:", "public", true, 0),
   new MM("init`ActorsForV8`PendingDelivery:", "public", true, 0),
   new MM("ActorsForV8`PendingDelivery", "public", true, 0),
   new MM("ActorsForV8`PendingDelivery:", "public", true, 0),
   new MM("init`ActorsForV8`PromiseUtils:", "public", true, 0),
   new MM("ActorsForV8`PromiseUtils", "public", true, 0),
   new MM("ActorsForV8`PromiseUtils:", "public", true, 0),
   new MM("init`ActorsForV8`RedirectReactor:", "public", true, 0),
   new MM("ActorsForV8`RedirectReactor", "public", true, 0),
   new MM("ActorsForV8`RedirectReactor:", "public", true, 0),
   new MM("init`ActorsForV8`Ref:", "public", true, 0),
   new MM("ActorsForV8`Ref", "public", true, 0),
   new MM("ActorsForV8`Ref:", "public", true, 0),
   new MM("init`ActorsForV8`Resolver:", "public", true, 0),
   new MM("ActorsForV8`Resolver", "public", true, 0),
   new MM("ActorsForV8`Resolver:", "public", true, 0),
   new MM("init`ActorsForV8`Scheduler:", "public", true, 0),
   new MM("ActorsForV8`Scheduler", "public", true, 0),
   new MM("ActorsForV8`Scheduler:", "public", true, 0),
   new MM("init`ActorsForV8`Timer:", "public", true, 0),
   new MM("ActorsForV8`Timer", "public", true, 0),
   new MM("ActorsForV8`Timer:", "public", true, 0),
   new MM("init`ActorsForV8`WhenReactor:", "public", true, 0),
   new MM("ActorsForV8`WhenReactor", "public", true, 0),
   new MM("ActorsForV8`WhenReactor:", "public", true, 0)
  ];
  this.nestedClasses = [
   "ActorsForV8`Actor",
   "ActorsForV8`DOMActor",
   "ActorsForV8`EventualSendReactor",
   "ActorsForV8`InternalActor",
   "ActorsForV8`InternalBrokenRef",
   "ActorsForV8`InternalFarReference",
   "ActorsForV8`InternalLocalPromise",
   "ActorsForV8`InternalNearRef",
   "ActorsForV8`InternalRef",
   "ActorsForV8`InternalRemotePromise",
   "ActorsForV8`PendingDelivery",
   "ActorsForV8`PromiseUtils",
   "ActorsForV8`RedirectReactor",
   "ActorsForV8`Ref",
   "ActorsForV8`Resolver",
   "ActorsForV8`Scheduler",
   "ActorsForV8`Timer",
   "ActorsForV8`WhenReactor"
  ];
  this.applications = [];
  this.$superInit$ActorsForV8 = function ($p) {
   let self = this;
   self.$super$ActorsForV8$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($p) {
   let self = this;
   self._$superInit$ActorsForV8($p);
   $0.$init$WeakMap$(self, $p.$collections().$IdentityMap());
   $0.$init$List$(self, $p.$collections().$List());
   $0.$init$Message$(self, $p.$kernel().$Message());
   $0.$init$internalRefs$(self, $0.$WeakMap(self).$new());
   self._$init$Promise$(self._$PromiseUtils().$new());
   self._$init$defaultActor$(self._$DOMActor().$named$("Default actor"));
   currentActor = self._$defaultActor();
   return self;
  };
  this.$asInternalRef$ = function (self, $externalRefOrUnboxedNearRef) {
   return $0.$isRef$(self, $externalRefOrUnboxedNearRef).$ifTrue$ifFalse$(function () {
    return $0.$internalRefs(self).$at$ifAbsent$($externalRefOrUnboxedNearRef, function () {
     return self._$halt();
    });
   }, function () {
    return self._$InternalNearRef().$wrapping$__owner$($externalRefOrUnboxedNearRef, $0.$currentActor(self));
   });
  };
  this.$check$allowedIn$ = function (self, $object, $actor) {
   self._$assert$message$(function () {
    return nil.$$tilde$equal($actor);
   }, "Invalid actor");
   if ($0.$isRef$(self, $object)) {
    if (!($object.$__owner() === $actor)) {
     self._$halt();
    };
   };
   return self;
  };
  this.$createFarReferenceTo$in$for$ = function (self, $target, $targetActor, $sourceActor) {
   return self._$InternalFarReference().$target$targetsActor$__owner$($target, $targetActor, $sourceActor).$externalRef();
  };
  this.$createRemotePromiseOf$in$for$ = function (self, $resolverInTarget, $targetActor, $sourceActor) {
   let $sourceResolver = nil;
   let $redirector = nil;
   let $message = nil;
   let $remotePromise = nil;
   if ($sourceActor === $targetActor) {
    self._$halt();
   };
   $sourceResolver = self._$InternalLocalPromise().$__owner$($sourceActor);
   $sourceResolver.$state$("remote");
   $sourceResolver.$_targetPromise$($resolverInTarget);
   $sourceResolver.$_targetActor$($targetActor);
   $redirector = self._$RedirectReactor().$from$to$resolver$($targetActor, $sourceActor, $sourceResolver);
   $message = self._$PendingDelivery().$receiver$selector$arguments$resolver$($resolverInTarget, "addReactor:", [$redirector], nil);
   $targetActor.$enqueueMessage$($message);
   return self._$Ref().$wrapping$__owner$($sourceResolver, $sourceActor);
  };
  this.$currentActor = function (self) {
   return currentActor;
  };
  this.$isRef$ = function (self, $object) {
   return self._$Ref() === $object.newspeakClass;
  };
  this.$isValueObject$ = function (self, $object) {
   if (nil === $object) {
    return true;
   };
   if (true === $object) {
    return true;
   };
   if (false === $object) {
    return true;
   };
   if ($object.$isString()) {
    return true;
   };
   if ($object.$isNumber()) {
    return true;
   };
   if ($object.$isCharacter()) {
    return true;
   };
   if ($object.$isBehavior()) {
    return $0.$isValueObject$(self, $object.$enclosingClass());
   };
   if (self._$Promise() === $object) {
    return true;
   };
   return false;
  };
  this.$wrapArgument$from$to$ = function (self, $argument, $sourceActor, $targetActor) {
   if ($sourceActor === $targetActor) {
    self._$halt();
   };
   return $0.$asInternalRef$(self, $argument).$wrapFor$($targetActor);
  };
  this.$wrapArguments$from$to$ = function (self, $arguments, $sourceActor, $targetActor) {
   return $arguments.$collect$(function ($argument) {
    return $0.$wrapArgument$from$to$(self, $argument, $sourceActor, $targetActor);
   });
  };
  this.$Actor = function () {
   if (nil === this.$ActorsForV8$Actor$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    let mixin = $.$ActorsForV8$Actor;
    this.$ActorsForV8$Actor$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$Actor$slot;
  };
  this.$DOMActor = function () {
   if (nil === this.$ActorsForV8$DOMActor$slot) {
    let self = this;
    let superclass = self._$InternalActor();
    let enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    let mixin = $.$ActorsForV8$DOMActor;
    this.$ActorsForV8$DOMActor$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$DOMActor$slot;
  };
  this.$EventualSendReactor = function () {
   if (nil === this.$ActorsForV8$EventualSendReactor$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    let mixin = $.$ActorsForV8$EventualSendReactor;
    this.$ActorsForV8$EventualSendReactor$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$EventualSendReactor$slot;
  };
  this.$InternalActor = function () {
   if (nil === this.$ActorsForV8$InternalActor$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    let mixin = $.$ActorsForV8$InternalActor;
    this.$ActorsForV8$InternalActor$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$InternalActor$slot;
  };
  this.$InternalBrokenRef = function () {
   if (nil === this.$ActorsForV8$InternalBrokenRef$slot) {
    let self = this;
    let superclass = self._$InternalRef();
    let enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    let mixin = $.$ActorsForV8$InternalBrokenRef;
    this.$ActorsForV8$InternalBrokenRef$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$InternalBrokenRef$slot;
  };
  this.$InternalFarReference = function () {
   if (nil === this.$ActorsForV8$InternalFarReference$slot) {
    let self = this;
    let superclass = self._$InternalRef();
    let enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    let mixin = $.$ActorsForV8$InternalFarReference;
    this.$ActorsForV8$InternalFarReference$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$InternalFarReference$slot;
  };
  this.$InternalLocalPromise = function () {
   if (nil === this.$ActorsForV8$InternalLocalPromise$slot) {
    let self = this;
    let superclass = self._$InternalRef();
    let enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    let mixin = $.$ActorsForV8$InternalLocalPromise;
    this.$ActorsForV8$InternalLocalPromise$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$InternalLocalPromise$slot;
  };
  this.$InternalNearRef = function () {
   if (nil === this.$ActorsForV8$InternalNearRef$slot) {
    let self = this;
    let superclass = self._$InternalRef();
    let enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    let mixin = $.$ActorsForV8$InternalNearRef;
    this.$ActorsForV8$InternalNearRef$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$InternalNearRef$slot;
  };
  this.$InternalRef = function () {
   if (nil === this.$ActorsForV8$InternalRef$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    let mixin = $.$ActorsForV8$InternalRef;
    this.$ActorsForV8$InternalRef$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$InternalRef$slot;
  };
  this.$InternalRemotePromise = function () {
   if (nil === this.$ActorsForV8$InternalRemotePromise$slot) {
    let self = this;
    let superclass = self._$InternalRef();
    let enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    let mixin = $.$ActorsForV8$InternalRemotePromise;
    this.$ActorsForV8$InternalRemotePromise$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$InternalRemotePromise$slot;
  };
  this.$PendingDelivery = function () {
   if (nil === this.$ActorsForV8$PendingDelivery$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    let mixin = $.$ActorsForV8$PendingDelivery;
    this.$ActorsForV8$PendingDelivery$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$PendingDelivery$slot;
  };
  this.$PromiseUtils = function () {
   if (nil === this.$ActorsForV8$PromiseUtils$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    let mixin = $.$ActorsForV8$PromiseUtils;
    this.$ActorsForV8$PromiseUtils$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$PromiseUtils$slot;
  };
  this.$RedirectReactor = function () {
   if (nil === this.$ActorsForV8$RedirectReactor$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    let mixin = $.$ActorsForV8$RedirectReactor;
    this.$ActorsForV8$RedirectReactor$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$RedirectReactor$slot;
  };
  this.$Ref = function () {
   if (nil === this.$ActorsForV8$Ref$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    let mixin = $.$ActorsForV8$Ref;
    this.$ActorsForV8$Ref$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$Ref$slot;
  };
  this.$Resolver = function () {
   if (nil === this.$ActorsForV8$Resolver$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    let mixin = $.$ActorsForV8$Resolver;
    this.$ActorsForV8$Resolver$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$Resolver$slot;
  };
  this.$Scheduler = function () {
   if (nil === this.$ActorsForV8$Scheduler$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    let mixin = $.$ActorsForV8$Scheduler;
    this.$ActorsForV8$Scheduler$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$Scheduler$slot;
  };
  this.$Timer = function () {
   if (nil === this.$ActorsForV8$Timer$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    let mixin = $.$ActorsForV8$Timer;
    this.$ActorsForV8$Timer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$Timer$slot;
  };
  this.$WhenReactor = function () {
   if (nil === this.$ActorsForV8$WhenReactor$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$ActorsForV8);
    let mixin = $.$ActorsForV8$WhenReactor;
    this.$ActorsForV8$WhenReactor$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$ActorsForV8$WhenReactor$slot;
  };
  this.$init$WeakMap$ = function (self, v) {
   self.$WeakMap$slot = v;
   return self;
  };
  this.$WeakMap = function (self) {
   return self.$WeakMap$slot;
  };
  this.$init$List$ = function (self, v) {
   self.$List$slot = v;
   return self;
  };
  this.$List = function (self) {
   return self.$List$slot;
  };
  this.$init$Message$ = function (self, v) {
   self.$Message$slot = v;
   return self;
  };
  this.$Message = function (self) {
   return self.$Message$slot;
  };
  this.$init$internalRefs$ = function (self, v) {
   self.$internalRefs$slot = v;
   return self;
  };
  this.$internalRefs = function (self) {
   return self.$internalRefs$slot;
  };
  this.$init$Promise$ = function (v) {
   this.$Promise$slot = v;
   return this;
  };
  this.$Promise = function () {
   return this.$Promise$slot;
  };
  this.$init$defaultActor$ = function (v) {
   this.$defaultActor$slot = v;
   return this;
  };
  this.$defaultActor = function () {
   return this.$defaultActor$slot;
  };
  this.$init$ActorsForV8$Actor$ = function (v) {
   this.$ActorsForV8$Actor$slot = v;
   return this;
  };
  this.$ActorsForV8$Actor = function () {
   return this.$ActorsForV8$Actor$slot;
  };
  this.$ActorsForV8$Actor$ = function (v) {
   this.$ActorsForV8$Actor$slot = v;
   return this;
  };
  this.$init$ActorsForV8$DOMActor$ = function (v) {
   this.$ActorsForV8$DOMActor$slot = v;
   return this;
  };
  this.$ActorsForV8$DOMActor = function () {
   return this.$ActorsForV8$DOMActor$slot;
  };
  this.$ActorsForV8$DOMActor$ = function (v) {
   this.$ActorsForV8$DOMActor$slot = v;
   return this;
  };
  this.$init$ActorsForV8$EventualSendReactor$ = function (v) {
   this.$ActorsForV8$EventualSendReactor$slot = v;
   return this;
  };
  this.$ActorsForV8$EventualSendReactor = function () {
   return this.$ActorsForV8$EventualSendReactor$slot;
  };
  this.$ActorsForV8$EventualSendReactor$ = function (v) {
   this.$ActorsForV8$EventualSendReactor$slot = v;
   return this;
  };
  this.$init$ActorsForV8$InternalActor$ = function (v) {
   this.$ActorsForV8$InternalActor$slot = v;
   return this;
  };
  this.$ActorsForV8$InternalActor = function () {
   return this.$ActorsForV8$InternalActor$slot;
  };
  this.$ActorsForV8$InternalActor$ = function (v) {
   this.$ActorsForV8$InternalActor$slot = v;
   return this;
  };
  this.$init$ActorsForV8$InternalBrokenRef$ = function (v) {
   this.$ActorsForV8$InternalBrokenRef$slot = v;
   return this;
  };
  this.$ActorsForV8$InternalBrokenRef = function () {
   return this.$ActorsForV8$InternalBrokenRef$slot;
  };
  this.$ActorsForV8$InternalBrokenRef$ = function (v) {
   this.$ActorsForV8$InternalBrokenRef$slot = v;
   return this;
  };
  this.$init$ActorsForV8$InternalFarReference$ = function (v) {
   this.$ActorsForV8$InternalFarReference$slot = v;
   return this;
  };
  this.$ActorsForV8$InternalFarReference = function () {
   return this.$ActorsForV8$InternalFarReference$slot;
  };
  this.$ActorsForV8$InternalFarReference$ = function (v) {
   this.$ActorsForV8$InternalFarReference$slot = v;
   return this;
  };
  this.$init$ActorsForV8$InternalLocalPromise$ = function (v) {
   this.$ActorsForV8$InternalLocalPromise$slot = v;
   return this;
  };
  this.$ActorsForV8$InternalLocalPromise = function () {
   return this.$ActorsForV8$InternalLocalPromise$slot;
  };
  this.$ActorsForV8$InternalLocalPromise$ = function (v) {
   this.$ActorsForV8$InternalLocalPromise$slot = v;
   return this;
  };
  this.$init$ActorsForV8$InternalNearRef$ = function (v) {
   this.$ActorsForV8$InternalNearRef$slot = v;
   return this;
  };
  this.$ActorsForV8$InternalNearRef = function () {
   return this.$ActorsForV8$InternalNearRef$slot;
  };
  this.$ActorsForV8$InternalNearRef$ = function (v) {
   this.$ActorsForV8$InternalNearRef$slot = v;
   return this;
  };
  this.$init$ActorsForV8$InternalRef$ = function (v) {
   this.$ActorsForV8$InternalRef$slot = v;
   return this;
  };
  this.$ActorsForV8$InternalRef = function () {
   return this.$ActorsForV8$InternalRef$slot;
  };
  this.$ActorsForV8$InternalRef$ = function (v) {
   this.$ActorsForV8$InternalRef$slot = v;
   return this;
  };
  this.$init$ActorsForV8$InternalRemotePromise$ = function (v) {
   this.$ActorsForV8$InternalRemotePromise$slot = v;
   return this;
  };
  this.$ActorsForV8$InternalRemotePromise = function () {
   return this.$ActorsForV8$InternalRemotePromise$slot;
  };
  this.$ActorsForV8$InternalRemotePromise$ = function (v) {
   this.$ActorsForV8$InternalRemotePromise$slot = v;
   return this;
  };
  this.$init$ActorsForV8$PendingDelivery$ = function (v) {
   this.$ActorsForV8$PendingDelivery$slot = v;
   return this;
  };
  this.$ActorsForV8$PendingDelivery = function () {
   return this.$ActorsForV8$PendingDelivery$slot;
  };
  this.$ActorsForV8$PendingDelivery$ = function (v) {
   this.$ActorsForV8$PendingDelivery$slot = v;
   return this;
  };
  this.$init$ActorsForV8$PromiseUtils$ = function (v) {
   this.$ActorsForV8$PromiseUtils$slot = v;
   return this;
  };
  this.$ActorsForV8$PromiseUtils = function () {
   return this.$ActorsForV8$PromiseUtils$slot;
  };
  this.$ActorsForV8$PromiseUtils$ = function (v) {
   this.$ActorsForV8$PromiseUtils$slot = v;
   return this;
  };
  this.$init$ActorsForV8$RedirectReactor$ = function (v) {
   this.$ActorsForV8$RedirectReactor$slot = v;
   return this;
  };
  this.$ActorsForV8$RedirectReactor = function () {
   return this.$ActorsForV8$RedirectReactor$slot;
  };
  this.$ActorsForV8$RedirectReactor$ = function (v) {
   this.$ActorsForV8$RedirectReactor$slot = v;
   return this;
  };
  this.$init$ActorsForV8$Ref$ = function (v) {
   this.$ActorsForV8$Ref$slot = v;
   return this;
  };
  this.$ActorsForV8$Ref = function () {
   return this.$ActorsForV8$Ref$slot;
  };
  this.$ActorsForV8$Ref$ = function (v) {
   this.$ActorsForV8$Ref$slot = v;
   return this;
  };
  this.$init$ActorsForV8$Resolver$ = function (v) {
   this.$ActorsForV8$Resolver$slot = v;
   return this;
  };
  this.$ActorsForV8$Resolver = function () {
   return this.$ActorsForV8$Resolver$slot;
  };
  this.$ActorsForV8$Resolver$ = function (v) {
   this.$ActorsForV8$Resolver$slot = v;
   return this;
  };
  this.$init$ActorsForV8$Scheduler$ = function (v) {
   this.$ActorsForV8$Scheduler$slot = v;
   return this;
  };
  this.$ActorsForV8$Scheduler = function () {
   return this.$ActorsForV8$Scheduler$slot;
  };
  this.$ActorsForV8$Scheduler$ = function (v) {
   this.$ActorsForV8$Scheduler$slot = v;
   return this;
  };
  this.$init$ActorsForV8$Timer$ = function (v) {
   this.$ActorsForV8$Timer$slot = v;
   return this;
  };
  this.$ActorsForV8$Timer = function () {
   return this.$ActorsForV8$Timer$slot;
  };
  this.$ActorsForV8$Timer$ = function (v) {
   this.$ActorsForV8$Timer$slot = v;
   return this;
  };
  this.$init$ActorsForV8$WhenReactor$ = function (v) {
   this.$ActorsForV8$WhenReactor$slot = v;
   return this;
  };
  this.$ActorsForV8$WhenReactor = function () {
   return this.$ActorsForV8$WhenReactor$slot;
  };
  this.$ActorsForV8$WhenReactor$ = function (v) {
   this.$ActorsForV8$WhenReactor$slot = v;
   return this;
  };
  this.$ActorsForV8$Actor = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`Actor";
   this.name = "ActorsForV8`Actor";
   this.header = 308;
   this.slots = [new SM("internalActor", "private", false, false)];
   this.methods = [
    new MM("superInit`ActorsForV8`Actor", "protected", true, 309),
    new MM("instance`initializer", "public", true, 310),
    new MM("interrupt", "public", false, 311),
    new MM("onError:", "public", false, 312),
    new MM("seed:", "public", false, 313),
    new MM("terminate", "public", false, 314),
    new MM("init`internalActor:", "private", true, 0),
    new MM("internalActor", "private", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$Actor = function ($debugName) {
    let self = this;
    self.$super$ActorsForV8$Actor$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($debugName) {
    let self = this;
    self._$superInit$ActorsForV8$Actor($debugName);
    $1.$init$internalActor$(self, self.$enclosingObjects$ActorsForV8$Actor[0]._$DOMActor().$named$($debugName));
    return self;
   };
   this.$interrupt = function () {
    let self = this;
    self._$unimplemented();
    return self;
   };
   this.$onError$ = function ($onError) {
    let self = this;
    self._$unimplemented();
    return self;
   };
   this.$seed$ = function ($value) {
    let self = this;
    if (!$0.$isValueObject$(self.$enclosingObjects$ActorsForV8$Actor[0], $value)) {
     self._$Error().$signal$("Cannot seed an actor with a non-Value.");
    };
    return $0.$createFarReferenceTo$in$for$(self.$enclosingObjects$ActorsForV8$Actor[0], $value, $1.$internalActor(self), $0.$currentActor(self.$enclosingObjects$ActorsForV8$Actor[0]));
   };
   this.$terminate = function () {
    let self = this;
    self._$unimplemented();
    return self;
   };
   this.$init$internalActor$ = function (self, v) {
    self.$internalActor$slot = v;
    return self;
   };
   this.$internalActor = function (self) {
    return self.$internalActor$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`Actor";
     this._$superInit$ActorsForV8$Actor = $.$superInit$ActorsForV8$Actor;
     this.$superInit$ActorsForV8$Actor = dnuCatcher("$superInit$ActorsForV8$Actor");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$interrupt = this._$interrupt = $.$interrupt;
     this.$onError$ = this._$onError$ = $.$onError$;
     this.$seed$ = this._$seed$ = $.$seed$;
     this.$terminate = this._$terminate = $.$terminate;
     this.$enclosingObjects$ActorsForV8$Actor = enclosingObjects;
     this.$super$ActorsForV8$Actor$slot = runtimeSuperclass;
     this["ActorsForV8`Actor"] = function () {
      superBasicNew.call(this);
      this.$internalActor$slot = nil;
     };
     this.basicNew = this["ActorsForV8`Actor"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`Actor";
    this.slots = [];
    this.methods = [new MM("named:", "public", true, 0)];
    this.nestedClasses = [];
    this.$named$ = function ($debugName) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($debugName);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`Actor";
      this.$named$ = this._$named$ = $.$named$;
      this.$enclosingObjects$ActorsForV8$Actor = enclosingObjects;
      this.$super$ActorsForV8$Actor$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$DOMActor = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`DOMActor";
   this.name = "ActorsForV8`DOMActor";
   this.header = 315;
   this.slots = [new SM("name", "protected", false, false)];
   this.methods = [
    new MM("superInit`ActorsForV8`DOMActor", "protected", true, 316),
    new MM("instance`initializer", "public", true, 317),
    new MM("enqueueMessage:", "public", false, 318),
    new MM("init`name:", "protected", true, 0),
    new MM("name", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$DOMActor = function ($n) {
    let self = this;
    self.$super$ActorsForV8$DOMActor$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($n) {
    let self = this;
    self._$superInit$ActorsForV8$DOMActor($n);
    self._$init$name$($n);
    return self;
   };
   this.$enqueueMessage$ = function ($actorMessage) {
    let self = this;
    $actorMessage.$postedTo$(self);
    theGlobalObject.setTimeout(function () {
     currentActor = self;
     return $actorMessage.$deliverIn$(self);
    }, 0);
    return self;
   };
   this.$init$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$name = function () {
    return this.$name$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`DOMActor";
     this._$superInit$ActorsForV8$DOMActor = $.$superInit$ActorsForV8$DOMActor;
     this.$superInit$ActorsForV8$DOMActor = dnuCatcher("$superInit$ActorsForV8$DOMActor");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$enqueueMessage$ = this._$enqueueMessage$ = $.$enqueueMessage$;
     this._$init$name$ = $.$init$name$;
     this.$init$name$ = dnuCatcher("$init$name$");
     this._$name = $.$name;
     this.$name = dnuCatcher("$name");
     this.$enclosingObjects$ActorsForV8$DOMActor = enclosingObjects;
     this.$super$ActorsForV8$DOMActor$slot = runtimeSuperclass;
     this["ActorsForV8`DOMActor"] = function () {
      superBasicNew.call(this);
      this.$name$slot = nil;
     };
     this.basicNew = this["ActorsForV8`DOMActor"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`DOMActor";
    this.slots = [];
    this.methods = [new MM("named:", "public", true, 0)];
    this.nestedClasses = [];
    this.$named$ = function ($n) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($n);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`DOMActor";
      this.$named$ = this._$named$ = $.$named$;
      this.$enclosingObjects$ActorsForV8$DOMActor = enclosingObjects;
      this.$super$ActorsForV8$DOMActor$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$EventualSendReactor = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`EventualSendReactor";
   this.name = "ActorsForV8`EventualSendReactor";
   this.header = 319;
   this.slots = [
    new SM("selector", "protected", false, false),
    new SM("arguments", "protected", false, false),
    new SM("resolver", "protected", false, false)
   ];
   this.methods = [
    new MM("superInit`ActorsForV8`EventualSendReactor", "protected", true, 320),
    new MM("instance`initializer", "public", true, 321),
    new MM("reactBroken:", "public", false, 322),
    new MM("reactMoreResolved:", "public", false, 323),
    new MM("reactResolved:", "public", false, 324),
    new MM("init`selector:", "protected", true, 0),
    new MM("selector", "protected", true, 0),
    new MM("init`arguments:", "protected", true, 0),
    new MM("arguments", "protected", true, 0),
    new MM("init`resolver:", "protected", true, 0),
    new MM("resolver", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$EventualSendReactor = function ($s, $a, $r) {
    let self = this;
    self.$super$ActorsForV8$EventualSendReactor$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($s, $a, $r) {
    let self = this;
    self._$superInit$ActorsForV8$EventualSendReactor($s, $a, $r);
    self._$init$selector$($s);
    self._$init$arguments$($a);
    self._$init$resolver$($r);
    return self;
   };
   this.$reactBroken$ = function ($error) {
    let self = this;
    if (!(self._$resolver().$__owner() === $0.$currentActor(self.$enclosingObjects$ActorsForV8$EventualSendReactor[0]))) {
     self._$halt();
    };
    $0.$currentActor(self.$enclosingObjects$ActorsForV8$EventualSendReactor[0]).$enqueueMessage$(self.$enclosingObjects$ActorsForV8$EventualSendReactor[0]._$PendingDelivery().$receiver$selector$arguments$resolver$(self._$resolver(), "internalResolve:", [self.$enclosingObjects$ActorsForV8$EventualSendReactor[0]._$InternalBrokenRef().$problem$__owner$($error, self._$resolver().$__owner())], nil));
    return self;
   };
   this.$reactMoreResolved$ = function ($internalRef) {
    let self = this;
    self._$resolver().$internalResolve$($0.$asInternalRef$(self.$enclosingObjects$ActorsForV8$EventualSendReactor[0], $internalRef.$eventualSend$arguments$(self._$selector(), self._$arguments())));
    return self;
   };
   this.$reactResolved$ = function ($value) {
    let self = this;
    if (!(self._$resolver().$__owner() === $0.$currentActor(self.$enclosingObjects$ActorsForV8$EventualSendReactor[0]))) {
     self._$halt();
    };
    self._$resolver().$internalResolve$($0.$asInternalRef$(self.$enclosingObjects$ActorsForV8$EventualSendReactor[0], $0.$currentActor(self.$enclosingObjects$ActorsForV8$EventualSendReactor[0]).$eventualSendTo$selector$arguments$($value, self._$selector(), self._$arguments())));
    return self;
   };
   this.$init$selector$ = function (v) {
    this.$selector$slot = v;
    return this;
   };
   this.$selector = function () {
    return this.$selector$slot;
   };
   this.$init$arguments$ = function (v) {
    this.$arguments$slot = v;
    return this;
   };
   this.$arguments = function () {
    return this.$arguments$slot;
   };
   this.$init$resolver$ = function (v) {
    this.$resolver$slot = v;
    return this;
   };
   this.$resolver = function () {
    return this.$resolver$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`EventualSendReactor";
     this._$superInit$ActorsForV8$EventualSendReactor = $.$superInit$ActorsForV8$EventualSendReactor;
     this.$superInit$ActorsForV8$EventualSendReactor = dnuCatcher("$superInit$ActorsForV8$EventualSendReactor");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$reactBroken$ = this._$reactBroken$ = $.$reactBroken$;
     this.$reactMoreResolved$ = this._$reactMoreResolved$ = $.$reactMoreResolved$;
     this.$reactResolved$ = this._$reactResolved$ = $.$reactResolved$;
     this._$init$selector$ = $.$init$selector$;
     this.$init$selector$ = dnuCatcher("$init$selector$");
     this._$selector = $.$selector;
     this.$selector = dnuCatcher("$selector");
     this._$init$arguments$ = $.$init$arguments$;
     this.$init$arguments$ = dnuCatcher("$init$arguments$");
     this._$arguments = $.$arguments;
     this.$arguments = dnuCatcher("$arguments");
     this._$init$resolver$ = $.$init$resolver$;
     this.$init$resolver$ = dnuCatcher("$init$resolver$");
     this._$resolver = $.$resolver;
     this.$resolver = dnuCatcher("$resolver");
     this.$enclosingObjects$ActorsForV8$EventualSendReactor = enclosingObjects;
     this.$super$ActorsForV8$EventualSendReactor$slot = runtimeSuperclass;
     this["ActorsForV8`EventualSendReactor"] = function () {
      superBasicNew.call(this);
      this.$selector$slot = nil;
      this.$arguments$slot = nil;
      this.$resolver$slot = nil;
     };
     this.basicNew = this["ActorsForV8`EventualSendReactor"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`EventualSendReactor";
    this.slots = [];
    this.methods = [new MM("selector:arguments:resolver:", "public", true, 0)];
    this.nestedClasses = [];
    this.$selector$arguments$resolver$ = function ($s, $a, $r) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($s, $a, $r);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`EventualSendReactor";
      this.$selector$arguments$resolver$ = this._$selector$arguments$resolver$ = $.$selector$arguments$resolver$;
      this.$enclosingObjects$ActorsForV8$EventualSendReactor = enclosingObjects;
      this.$super$ActorsForV8$EventualSendReactor$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$InternalActor = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`InternalActor";
   this.name = "ActorsForV8`InternalActor";
   this.header = 325;
   this.slots = [];
   this.methods = [
    new MM("superInit`ActorsForV8`InternalActor", "protected", true, 326),
    new MM("instance`initializer", "public", true, 327),
    new MM("currentActor", "public", false, 328),
    new MM("eventualSendTo:selector:arguments:", "public", false, 329)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$InternalActor = function () {
    let self = this;
    self.$super$ActorsForV8$InternalActor$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$ActorsForV8$InternalActor();
    return self;
   };
   this.$currentActor = function () {
    let self = this;
    return self;
   };
   this.$eventualSendTo$selector$arguments$ = function ($receiver, $selector, $arguments) {
    let self = this;
    return $0.$asInternalRef$(self.$enclosingObjects$ActorsForV8$InternalActor[0], $receiver).$eventualSend$arguments$($selector, $arguments);
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`InternalActor";
     this._$superInit$ActorsForV8$InternalActor = $.$superInit$ActorsForV8$InternalActor;
     this.$superInit$ActorsForV8$InternalActor = dnuCatcher("$superInit$ActorsForV8$InternalActor");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$currentActor = this._$currentActor = $.$currentActor;
     this.$eventualSendTo$selector$arguments$ = this._$eventualSendTo$selector$arguments$ = $.$eventualSendTo$selector$arguments$;
     this.$enclosingObjects$ActorsForV8$InternalActor = enclosingObjects;
     this.$super$ActorsForV8$InternalActor$slot = runtimeSuperclass;
     this["ActorsForV8`InternalActor"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["ActorsForV8`InternalActor"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`InternalActor";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`InternalActor";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$ActorsForV8$InternalActor = enclosingObjects;
      this.$super$ActorsForV8$InternalActor$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$InternalBrokenRef = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`InternalBrokenRef";
   this.name = "ActorsForV8`InternalBrokenRef";
   this.header = 330;
   this.slots = [new SM("problem", "protected", false, false)];
   this.methods = [
    new MM("superInit`ActorsForV8`InternalBrokenRef", "protected", true, 331),
    new MM("instance`initializer", "public", true, 332),
    new MM("addReactor:", "public", false, 333),
    new MM("checkCycle", "public", false, 334),
    new MM("eventualSend:arguments:", "public", false, 335),
    new MM("immediateSend:", "public", false, 336),
    new MM("printOn:", "public", false, 337),
    new MM("refPrintOn:", "public", false, 338),
    new MM("shorten", "public", false, 339),
    new MM("whenFulfilled:whenBroken:", "public", false, 340),
    new MM("wrapFor:", "public", false, 341),
    new MM("init`problem:", "protected", true, 0),
    new MM("problem", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$InternalBrokenRef = function ($p, $o) {
    let self = this;
    self.$super$ActorsForV8$InternalBrokenRef$slot._$instance$initializer.call(self, $o);
    return self;
   };
   this.$instance$initializer = function ($p, $o) {
    let self = this;
    self._$superInit$ActorsForV8$InternalBrokenRef($p, $o);
    self._$init$problem$($p);
    return self;
   };
   this.$addReactor$ = function ($reactor) {
    let self = this;
    $reactor.$reactBroken$(self._$problem());
    return self;
   };
   this.$checkCycle = function () {
    let self = this;
    return false;
   };
   this.$eventualSend$arguments$ = function ($selector, $arguments) {
    let self = this;
    return self._$externalRef();
   };
   this.$immediateSend$ = function ($message) {
    let self = this;
    return self._$Error().$signal$("Cannot immediate-send to a broken ref: ".$$comma($message.$selector()));
   };
   this.$printOn$ = function ($stream) {
    let self = this;
    $stream.$nextPutAll$("InternalBrokenRef: ");
    self._$problem().$printOn$($stream);
    return self;
   };
   this.$refPrintOn$ = function ($stream) {
    let self = this;
    $stream.$nextPutAll$("<broken ref: ");
    self._$problem().$printOn$($stream);
    $stream.$nextPutAll$(">");
    return self;
   };
   this.$shorten = function () {
    let self = this;
    return self;
   };
   this.$whenFulfilled$whenBroken$ = function ($onValue, $onError) {
    let self = this;
    let $localPromise = nil;
    $localPromise = self.$enclosingObjects$ActorsForV8$InternalBrokenRef[0]._$InternalLocalPromise().$__owner$(self._$__owner());
    $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalBrokenRef[0]).$enqueueMessage$(self.$enclosingObjects$ActorsForV8$InternalBrokenRef[0]._$PendingDelivery().$receiver$selector$arguments$resolver$($onError, "cull:", [self._$problem()], $localPromise));
    return $localPromise.$externalRef();
   };
   this.$wrapFor$ = function ($targetActor) {
    let self = this;
    self._$checkCurrentActor();
    "BOGUS";
    return self.$enclosingObjects$ActorsForV8$InternalBrokenRef[0]._$InternalBrokenRef().$problem$__owner$(self._$problem(), $targetActor).$externalRef();
   };
   this.$init$problem$ = function (v) {
    this.$problem$slot = v;
    return this;
   };
   this.$problem = function () {
    return this.$problem$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`InternalBrokenRef";
     this._$superInit$ActorsForV8$InternalBrokenRef = $.$superInit$ActorsForV8$InternalBrokenRef;
     this.$superInit$ActorsForV8$InternalBrokenRef = dnuCatcher("$superInit$ActorsForV8$InternalBrokenRef");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$addReactor$ = this._$addReactor$ = $.$addReactor$;
     this.$checkCycle = this._$checkCycle = $.$checkCycle;
     this.$eventualSend$arguments$ = this._$eventualSend$arguments$ = $.$eventualSend$arguments$;
     this.$immediateSend$ = this._$immediateSend$ = $.$immediateSend$;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this.$refPrintOn$ = this._$refPrintOn$ = $.$refPrintOn$;
     this.$shorten = this._$shorten = $.$shorten;
     this.$whenFulfilled$whenBroken$ = this._$whenFulfilled$whenBroken$ = $.$whenFulfilled$whenBroken$;
     this.$wrapFor$ = this._$wrapFor$ = $.$wrapFor$;
     this._$init$problem$ = $.$init$problem$;
     this.$init$problem$ = dnuCatcher("$init$problem$");
     this._$problem = $.$problem;
     this.$problem = dnuCatcher("$problem");
     this.$enclosingObjects$ActorsForV8$InternalBrokenRef = enclosingObjects;
     this.$super$ActorsForV8$InternalBrokenRef$slot = runtimeSuperclass;
     this["ActorsForV8`InternalBrokenRef"] = function () {
      superBasicNew.call(this);
      this.$problem$slot = nil;
     };
     this.basicNew = this["ActorsForV8`InternalBrokenRef"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`InternalBrokenRef";
    this.slots = [];
    this.methods = [new MM("problem:__owner:", "public", true, 0)];
    this.nestedClasses = [];
    this.$problem$__owner$ = function ($p, $o) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($p, $o);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`InternalBrokenRef";
      this.$problem$__owner$ = this._$problem$__owner$ = $.$problem$__owner$;
      this.$enclosingObjects$ActorsForV8$InternalBrokenRef = enclosingObjects;
      this.$super$ActorsForV8$InternalBrokenRef$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$InternalFarReference = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`InternalFarReference";
   this.name = "ActorsForV8`InternalFarReference";
   this.header = 342;
   this.slots = [
    new SM("target", "protected", false, false),
    new SM("targetsActor", "protected", false, false)
   ];
   this.methods = [
    new MM("superInit`ActorsForV8`InternalFarReference", "protected", true, 343),
    new MM("instance`initializer", "public", true, 344),
    new MM("addReactor:", "public", false, 345),
    new MM("checkCycle", "public", false, 346),
    new MM("eventualSend:arguments:", "public", false, 347),
    new MM("immediateSend:", "public", false, 348),
    new MM("printOn:", "public", false, 349),
    new MM("refPrintOn:", "public", false, 350),
    new MM("shorten", "public", false, 351),
    new MM("whenFulfilled:whenBroken:", "public", false, 352),
    new MM("wrapFor:", "public", false, 353),
    new MM("init`target:", "protected", true, 0),
    new MM("target", "protected", true, 0),
    new MM("init`targetsActor:", "protected", true, 0),
    new MM("targetsActor", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$InternalFarReference = function ($t, $ta, $o) {
    let self = this;
    self.$super$ActorsForV8$InternalFarReference$slot._$instance$initializer.call(self, $o);
    return self;
   };
   this.$instance$initializer = function ($t, $ta, $o) {
    let self = this;
    self._$superInit$ActorsForV8$InternalFarReference($t, $ta, $o);
    self._$init$target$($t);
    self._$init$targetsActor$($ta);
    return self;
   };
   this.$addReactor$ = function ($reactor) {
    let self = this;
    $reactor.$reactResolved$(self._$externalRef());
    return self;
   };
   this.$checkCycle = function () {
    let self = this;
    return false;
   };
   this.$eventualSend$arguments$ = function ($selector, $arguments) {
    let self = this;
    let $resolverInTarget = nil;
    let $remotePromise = nil;
    let $redirector = nil;
    $resolverInTarget = self.$enclosingObjects$ActorsForV8$InternalFarReference[0]._$InternalLocalPromise().$__owner$(self._$targetsActor());
    self._$targetsActor().$enqueueMessage$(self.$enclosingObjects$ActorsForV8$InternalFarReference[0]._$PendingDelivery().$receiver$selector$arguments$resolver$(self._$target(), $selector, $0.$wrapArguments$from$to$(self.$enclosingObjects$ActorsForV8$InternalFarReference[0], $arguments, $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalFarReference[0]), self._$targetsActor()), $resolverInTarget));
    $remotePromise = self.$enclosingObjects$ActorsForV8$InternalFarReference[0]._$InternalRemotePromise().$target$targetsActor$__owner$($resolverInTarget, self._$targetsActor(), $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalFarReference[0]));
    $redirector = self.$enclosingObjects$ActorsForV8$InternalFarReference[0]._$RedirectReactor().$from$to$resolver$(self._$targetsActor(), $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalFarReference[0]), $remotePromise);
    self._$targetsActor().$enqueueMessage$(self.$enclosingObjects$ActorsForV8$InternalFarReference[0]._$PendingDelivery().$receiver$selector$arguments$resolver$($resolverInTarget, "addReactor:", [$redirector], nil));
    return $remotePromise.$externalRef();
   };
   this.$immediateSend$ = function ($message) {
    let self = this;
    return self._$Error().$signal$("Cannot immediate-send to an eventual ref: ".$$comma($message.$selector()));
   };
   this.$printOn$ = function ($stream) {
    let self = this;
    $stream.$nextPutAll$("InternalFarRef: ");
    self._$target().$printOn$($stream);
    return self;
   };
   this.$refPrintOn$ = function ($stream) {
    let self = this;
    $stream.$nextPutAll$("<far ref: ");
    self._$target().$printOn$($stream);
    $stream.$nextPutAll$(">");
    return self;
   };
   this.$shorten = function () {
    let self = this;
    return self;
   };
   this.$whenFulfilled$whenBroken$ = function ($onValue, $onError) {
    let self = this;
    let $localPromise = nil;
    $localPromise = self.$enclosingObjects$ActorsForV8$InternalFarReference[0]._$InternalLocalPromise().$__owner$(self._$__owner());
    $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalFarReference[0]).$enqueueMessage$(self.$enclosingObjects$ActorsForV8$InternalFarReference[0]._$PendingDelivery().$receiver$selector$arguments$resolver$($onValue, "cull:", [self._$externalRef()], $localPromise));
    return $localPromise.$externalRef();
   };
   this.$wrapFor$ = function ($targetActor) {
    let self = this;
    if (self._$targetsActor() === $targetActor) {
     return self._$target();
    };
    return self.$enclosingObjects$ActorsForV8$InternalFarReference[0]._$InternalFarReference().$target$targetsActor$__owner$(self._$target(), self._$targetsActor(), $targetActor).$externalRef();
   };
   this.$init$target$ = function (v) {
    this.$target$slot = v;
    return this;
   };
   this.$target = function () {
    return this.$target$slot;
   };
   this.$init$targetsActor$ = function (v) {
    this.$targetsActor$slot = v;
    return this;
   };
   this.$targetsActor = function () {
    return this.$targetsActor$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`InternalFarReference";
     this._$superInit$ActorsForV8$InternalFarReference = $.$superInit$ActorsForV8$InternalFarReference;
     this.$superInit$ActorsForV8$InternalFarReference = dnuCatcher("$superInit$ActorsForV8$InternalFarReference");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$addReactor$ = this._$addReactor$ = $.$addReactor$;
     this.$checkCycle = this._$checkCycle = $.$checkCycle;
     this.$eventualSend$arguments$ = this._$eventualSend$arguments$ = $.$eventualSend$arguments$;
     this.$immediateSend$ = this._$immediateSend$ = $.$immediateSend$;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this.$refPrintOn$ = this._$refPrintOn$ = $.$refPrintOn$;
     this.$shorten = this._$shorten = $.$shorten;
     this.$whenFulfilled$whenBroken$ = this._$whenFulfilled$whenBroken$ = $.$whenFulfilled$whenBroken$;
     this.$wrapFor$ = this._$wrapFor$ = $.$wrapFor$;
     this._$init$target$ = $.$init$target$;
     this.$init$target$ = dnuCatcher("$init$target$");
     this._$target = $.$target;
     this.$target = dnuCatcher("$target");
     this._$init$targetsActor$ = $.$init$targetsActor$;
     this.$init$targetsActor$ = dnuCatcher("$init$targetsActor$");
     this._$targetsActor = $.$targetsActor;
     this.$targetsActor = dnuCatcher("$targetsActor");
     this.$enclosingObjects$ActorsForV8$InternalFarReference = enclosingObjects;
     this.$super$ActorsForV8$InternalFarReference$slot = runtimeSuperclass;
     this["ActorsForV8`InternalFarReference"] = function () {
      superBasicNew.call(this);
      this.$target$slot = nil;
      this.$targetsActor$slot = nil;
     };
     this.basicNew = this["ActorsForV8`InternalFarReference"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`InternalFarReference";
    this.slots = [];
    this.methods = [new MM("target:targetsActor:__owner:", "public", true, 0)];
    this.nestedClasses = [];
    this.$target$targetsActor$__owner$ = function ($t, $ta, $o) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($t, $ta, $o);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`InternalFarReference";
      this.$target$targetsActor$__owner$ = this._$target$targetsActor$__owner$ = $.$target$targetsActor$__owner$;
      this.$enclosingObjects$ActorsForV8$InternalFarReference = enclosingObjects;
      this.$super$ActorsForV8$InternalFarReference$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$InternalLocalPromise = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`InternalLocalPromise";
   this.name = "ActorsForV8`InternalLocalPromise";
   this.header = 354;
   this.slots = [
    new SM("state", "protected", true, false),
    new SM("resolution", "protected", true, false),
    new SM("reactors", "protected", true, false)
   ];
   this.methods = [
    new MM("superInit`ActorsForV8`InternalLocalPromise", "protected", true, 355),
    new MM("instance`initializer", "public", true, 356),
    new MM("addReactor:", "public", false, 357),
    new MM("checkCycle", "public", false, 358),
    new MM("eventualSend:arguments:", "public", false, 359),
    new MM("immediateSend:", "public", false, 360),
    new MM("internalResolve:", "public", false, 361),
    new MM("printOn:", "public", false, 362),
    new MM("refPrintOn:", "public", false, 363),
    new MM("shorten", "public", false, 364),
    new MM("whenFulfilled:whenBroken:", "public", false, 365),
    new MM("wrapFor:", "public", false, 366),
    new MM("init`state:", "protected", true, 0),
    new MM("state", "protected", true, 0),
    new MM("state:", "protected", true, 0),
    new MM("init`resolution:", "protected", true, 0),
    new MM("resolution", "protected", true, 0),
    new MM("resolution:", "protected", true, 0),
    new MM("init`reactors:", "protected", true, 0),
    new MM("reactors", "protected", true, 0),
    new MM("reactors:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$InternalLocalPromise = function ($o) {
    let self = this;
    self.$super$ActorsForV8$InternalLocalPromise$slot._$instance$initializer.call(self, $o);
    return self;
   };
   this.$instance$initializer = function ($o) {
    let self = this;
    self._$superInit$ActorsForV8$InternalLocalPromise($o);
    self._$init$state$("unresolved");
    return self;
   };
   this.$addReactor$ = function ($reactor) {
    let self = this;
    if (self._$state() === "unresolved") {
     if (self._$reactors() === nil) {
      self._$reactors$($0.$List(self.$enclosingObjects$ActorsForV8$InternalLocalPromise[0]).$new());
     };
     self._$reactors().$add$($reactor);
     return self;
    };
    if (self._$state() === "resolved") {
     return self._$resolution().$addReactor$($reactor);
    };
    self._$halt();
    return self;
   };
   this.$checkCycle = function () {
    let self = this;
    if (self._$state() === "resolving") {
     return true;
    };
    if (self._$state() === "unresolved") {
     return false;
    };
    if (self._$state() === "resolved") {
     return self._$resolution().$checkCycle();
    };
    self._$halt();
    return self;
   };
   this.$eventualSend$arguments$ = function ($selector, $arguments) {
    let self = this;
    let $localPromise = nil;
    self._$checkCurrentActor();
    if (self._$state() === "resolved") {
     return self._$resolution().$eventualSend$arguments$($selector, $arguments);
    };
    $localPromise = self.$enclosingObjects$ActorsForV8$InternalLocalPromise[0]._$InternalLocalPromise().$__owner$(self._$__owner());
    self._$addReactor$(self.$enclosingObjects$ActorsForV8$InternalLocalPromise[0]._$EventualSendReactor().$selector$arguments$resolver$($selector, $arguments, $localPromise));
    return $localPromise.$externalRef();
   };
   this.$immediateSend$ = function ($message) {
    let self = this;
    if (self._$state() === "resolved") {
     return self._$resolution().$immediateSend$($message);
    };
    return self._$Error().$signal$("Cannot immediate-send to an eventual ref: ".$$comma($message.$selector()));
   };
   this.$internalResolve$ = function ($internalRef) {
    let self = this;
    if (!(self._$state() === "unresolved")) {
     return self._$Error().$signal$("Already resolved");
    };
    if (!$internalRef.$isInternalRef()) {
     self._$halt();
    };
    self._$state$("resolving");
    if ($internalRef.$checkCycle()) {
     self._$resolution$(self.$enclosingObjects$ActorsForV8$InternalLocalPromise[0]._$InternalBrokenRef().$problem$__owner$(self._$Error().$new().$messageText$("Cyclic resolution"), self._$__owner()));
    } else {
     self._$resolution$($internalRef);
    };
    self._$state$("resolved");
    if (!(nil === self._$reactors())) {
     self._$reactors().$do$(function ($reactor) {
      return self._$resolution().$addReactor$($reactor);
     });
     self._$reactors$(nil);
    };
    return self;
   };
   this.$printOn$ = function ($stream) {
    let self = this;
    $stream.$nextPutAll$("InternalLocalPromise: ");
    self._$state().$printOn$($stream);
    return self;
   };
   this.$refPrintOn$ = function ($stream) {
    let self = this;
    if (self._$state() === "resolved") {
     self._$resolution().$refPrintOn$($stream);
    } else {
     $stream.$nextPutAll$("<local promise>");
    };
    return self;
   };
   this.$shorten = function () {
    let self = this;
    if (self._$state() === "unresolved") {
     return self;
    };
    if (self._$state() === "resolved") {
     return self._$resolution();
    };
    self._$halt();
    return self;
   };
   this.$whenFulfilled$whenBroken$ = function ($onValue, $onError) {
    let self = this;
    let $localPromise = nil;
    self._$checkCurrentActor();
    if (self._$state() === "resolved") {
     return self._$resolution().$whenFulfilled$whenBroken$($onValue, $onError);
    };
    $localPromise = self.$enclosingObjects$ActorsForV8$InternalLocalPromise[0]._$InternalLocalPromise().$__owner$(self._$__owner());
    self._$addReactor$(self.$enclosingObjects$ActorsForV8$InternalLocalPromise[0]._$WhenReactor().$onValue$onError$resolver$($onValue, $onError, $localPromise));
    return $localPromise.$externalRef();
   };
   this.$wrapFor$ = function ($targetActor) {
    let self = this;
    if (self._$state() === "resolved") {
     return self._$resolution().$wrapFor$($targetActor);
    };
    self._$checkCurrentActor();
    if ($targetActor === self._$__owner()) {
     self._$halt();
    };
    return self.$enclosingObjects$ActorsForV8$InternalLocalPromise[0]._$InternalRemotePromise().$target$targetsActor$__owner$(self, $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalLocalPromise[0]), $targetActor).$externalRef();
   };
   this.$init$state$ = function (v) {
    this.$state$slot = v;
    return this;
   };
   this.$state = function () {
    return this.$state$slot;
   };
   this.$state$ = function (v) {
    this.$state$slot = v;
    return this;
   };
   this.$init$resolution$ = function (v) {
    this.$resolution$slot = v;
    return this;
   };
   this.$resolution = function () {
    return this.$resolution$slot;
   };
   this.$resolution$ = function (v) {
    this.$resolution$slot = v;
    return this;
   };
   this.$init$reactors$ = function (v) {
    this.$reactors$slot = v;
    return this;
   };
   this.$reactors = function () {
    return this.$reactors$slot;
   };
   this.$reactors$ = function (v) {
    this.$reactors$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`InternalLocalPromise";
     this._$superInit$ActorsForV8$InternalLocalPromise = $.$superInit$ActorsForV8$InternalLocalPromise;
     this.$superInit$ActorsForV8$InternalLocalPromise = dnuCatcher("$superInit$ActorsForV8$InternalLocalPromise");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$addReactor$ = this._$addReactor$ = $.$addReactor$;
     this.$checkCycle = this._$checkCycle = $.$checkCycle;
     this.$eventualSend$arguments$ = this._$eventualSend$arguments$ = $.$eventualSend$arguments$;
     this.$immediateSend$ = this._$immediateSend$ = $.$immediateSend$;
     this.$internalResolve$ = this._$internalResolve$ = $.$internalResolve$;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this.$refPrintOn$ = this._$refPrintOn$ = $.$refPrintOn$;
     this.$shorten = this._$shorten = $.$shorten;
     this.$whenFulfilled$whenBroken$ = this._$whenFulfilled$whenBroken$ = $.$whenFulfilled$whenBroken$;
     this.$wrapFor$ = this._$wrapFor$ = $.$wrapFor$;
     this._$init$state$ = $.$init$state$;
     this.$init$state$ = dnuCatcher("$init$state$");
     this._$state = $.$state;
     this.$state = dnuCatcher("$state");
     this._$state$ = $.$state$;
     this.$state$ = dnuCatcher("$state$");
     this._$init$resolution$ = $.$init$resolution$;
     this.$init$resolution$ = dnuCatcher("$init$resolution$");
     this._$resolution = $.$resolution;
     this.$resolution = dnuCatcher("$resolution");
     this._$resolution$ = $.$resolution$;
     this.$resolution$ = dnuCatcher("$resolution$");
     this._$init$reactors$ = $.$init$reactors$;
     this.$init$reactors$ = dnuCatcher("$init$reactors$");
     this._$reactors = $.$reactors;
     this.$reactors = dnuCatcher("$reactors");
     this._$reactors$ = $.$reactors$;
     this.$reactors$ = dnuCatcher("$reactors$");
     this.$enclosingObjects$ActorsForV8$InternalLocalPromise = enclosingObjects;
     this.$super$ActorsForV8$InternalLocalPromise$slot = runtimeSuperclass;
     this["ActorsForV8`InternalLocalPromise"] = function () {
      superBasicNew.call(this);
      this.$state$slot = nil;
      this.$resolution$slot = nil;
      this.$reactors$slot = nil;
     };
     this.basicNew = this["ActorsForV8`InternalLocalPromise"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`InternalLocalPromise";
    this.slots = [];
    this.methods = [new MM("__owner:", "public", true, 0)];
    this.nestedClasses = [];
    this.$__owner$ = function ($o) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($o);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`InternalLocalPromise";
      this.$__owner$ = this._$__owner$ = $.$__owner$;
      this.$enclosingObjects$ActorsForV8$InternalLocalPromise = enclosingObjects;
      this.$super$ActorsForV8$InternalLocalPromise$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$InternalNearRef = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`InternalNearRef";
   this.name = "ActorsForV8`InternalNearRef";
   this.header = 367;
   this.slots = [new SM("target", "protected", false, false)];
   this.methods = [
    new MM("superInit`ActorsForV8`InternalNearRef", "protected", true, 368),
    new MM("instance`initializer", "public", true, 369),
    new MM("addReactor:", "public", false, 370),
    new MM("checkCycle", "public", false, 371),
    new MM("eventualSend:arguments:", "public", false, 372),
    new MM("immediateSend:", "public", false, 373),
    new MM("printOn:", "public", false, 374),
    new MM("refPrintOn:", "public", false, 375),
    new MM("shorten", "public", false, 376),
    new MM("whenFulfilled:whenBroken:", "public", false, 377),
    new MM("wrapFor:", "public", false, 378),
    new MM("init`target:", "protected", true, 0),
    new MM("target", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$InternalNearRef = function ($t, $o) {
    let self = this;
    self.$super$ActorsForV8$InternalNearRef$slot._$instance$initializer.call(self, $o);
    return self;
   };
   this.$instance$initializer = function ($t, $o) {
    let self = this;
    self._$superInit$ActorsForV8$InternalNearRef($t, $o);
    self._$init$target$($t);
    return self;
   };
   this.$addReactor$ = function ($reactor) {
    let self = this;
    $reactor.$reactResolved$(self._$target());
    return self;
   };
   this.$checkCycle = function () {
    let self = this;
    return false;
   };
   this.$eventualSend$arguments$ = function ($selector, $arguments) {
    let self = this;
    let $localPromise = nil;
    $localPromise = self.$enclosingObjects$ActorsForV8$InternalNearRef[0]._$InternalLocalPromise().$__owner$(self._$__owner());
    $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalNearRef[0]).$enqueueMessage$(self.$enclosingObjects$ActorsForV8$InternalNearRef[0]._$PendingDelivery().$receiver$selector$arguments$resolver$(self._$target(), $selector, $arguments, $localPromise));
    return $localPromise.$externalRef();
   };
   this.$immediateSend$ = function ($message) {
    let self = this;
    return $message.$sendTo$(self._$target());
   };
   this.$printOn$ = function ($stream) {
    let self = this;
    $stream.$nextPutAll$("InternalNearRef: ");
    self._$target().$printOn$($stream);
    return self;
   };
   this.$refPrintOn$ = function ($stream) {
    let self = this;
    $stream.$nextPutAll$("<near ref: ");
    self._$target().$printOn$($stream);
    $stream.$nextPutAll$(">");
    return self;
   };
   this.$shorten = function () {
    let self = this;
    return self;
   };
   this.$whenFulfilled$whenBroken$ = function ($onValue, $onError) {
    let self = this;
    let $localPromise = nil;
    $localPromise = self.$enclosingObjects$ActorsForV8$InternalNearRef[0]._$InternalLocalPromise().$__owner$(self._$__owner());
    $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalNearRef[0]).$enqueueMessage$(self.$enclosingObjects$ActorsForV8$InternalNearRef[0]._$PendingDelivery().$receiver$selector$arguments$resolver$($onValue, "cull:", [self._$target()], $localPromise));
    return $localPromise.$externalRef();
   };
   this.$wrapFor$ = function ($targetActor) {
    let self = this;
    self._$checkCurrentActor();
    if ($0.$isValueObject$(self.$enclosingObjects$ActorsForV8$InternalNearRef[0], self._$target())) {
     return self._$target();
    };
    return $0.$createFarReferenceTo$in$for$(self.$enclosingObjects$ActorsForV8$InternalNearRef[0], self._$target(), $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalNearRef[0]), $targetActor);
   };
   this.$init$target$ = function (v) {
    this.$target$slot = v;
    return this;
   };
   this.$target = function () {
    return this.$target$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`InternalNearRef";
     this._$superInit$ActorsForV8$InternalNearRef = $.$superInit$ActorsForV8$InternalNearRef;
     this.$superInit$ActorsForV8$InternalNearRef = dnuCatcher("$superInit$ActorsForV8$InternalNearRef");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$addReactor$ = this._$addReactor$ = $.$addReactor$;
     this.$checkCycle = this._$checkCycle = $.$checkCycle;
     this.$eventualSend$arguments$ = this._$eventualSend$arguments$ = $.$eventualSend$arguments$;
     this.$immediateSend$ = this._$immediateSend$ = $.$immediateSend$;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this.$refPrintOn$ = this._$refPrintOn$ = $.$refPrintOn$;
     this.$shorten = this._$shorten = $.$shorten;
     this.$whenFulfilled$whenBroken$ = this._$whenFulfilled$whenBroken$ = $.$whenFulfilled$whenBroken$;
     this.$wrapFor$ = this._$wrapFor$ = $.$wrapFor$;
     this._$init$target$ = $.$init$target$;
     this.$init$target$ = dnuCatcher("$init$target$");
     this._$target = $.$target;
     this.$target = dnuCatcher("$target");
     this.$enclosingObjects$ActorsForV8$InternalNearRef = enclosingObjects;
     this.$super$ActorsForV8$InternalNearRef$slot = runtimeSuperclass;
     this["ActorsForV8`InternalNearRef"] = function () {
      superBasicNew.call(this);
      this.$target$slot = nil;
     };
     this.basicNew = this["ActorsForV8`InternalNearRef"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`InternalNearRef";
    this.slots = [];
    this.methods = [new MM("wrapping:__owner:", "public", true, 0)];
    this.nestedClasses = [];
    this.$wrapping$__owner$ = function ($t, $o) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($t, $o);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`InternalNearRef";
      this.$wrapping$__owner$ = this._$wrapping$__owner$ = $.$wrapping$__owner$;
      this.$enclosingObjects$ActorsForV8$InternalNearRef = enclosingObjects;
      this.$super$ActorsForV8$InternalNearRef$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$InternalRef = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`InternalRef";
   this.name = "ActorsForV8`InternalRef";
   this.header = 379;
   this.slots = [new SM("__owner", "public", false, false)];
   this.methods = [
    new MM("superInit`ActorsForV8`InternalRef", "protected", true, 380),
    new MM("instance`initializer", "public", true, 381),
    new MM("checkCurrentActor", "protected", false, 382),
    new MM("checkCycle", "public", false, 383),
    new MM("eventualSend:arguments:", "public", false, 384),
    new MM("externalRef", "public", false, 385),
    new MM("immediateSend:", "public", false, 386),
    new MM("isInternalRef", "public", false, 387),
    new MM("refPrintOn:", "public", false, 388),
    new MM("shorten", "public", false, 389),
    new MM("whenFulfilled:whenBroken:", "public", false, 390),
    new MM("wrapFor:", "public", false, 391),
    new MM("init`__owner:", "public", true, 0),
    new MM("__owner", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$InternalRef = function ($o) {
    let self = this;
    self.$super$ActorsForV8$InternalRef$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($o) {
    let self = this;
    self._$superInit$ActorsForV8$InternalRef($o);
    self._$init$__owner$($o);
    return self;
   };
   this.$checkCurrentActor = function () {
    let self = this;
    if (!($0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalRef[0]) === self._$__owner())) {
     self._$halt();
    };
    return self;
   };
   this.$checkCycle = function () {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$eventualSend$arguments$ = function ($selector, $arguments) {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$externalRef = function () {
    let self = this;
    return self.$enclosingObjects$ActorsForV8$InternalRef[0]._$Ref().$wrapping$(self);
   };
   this.$immediateSend$ = function ($message) {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$isInternalRef = function () {
    let self = this;
    return true;
   };
   this.$refPrintOn$ = function ($stream) {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$shorten = function () {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$whenFulfilled$whenBroken$ = function ($onValue, $onError) {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$wrapFor$ = function ($targetActor) {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$init$__owner$ = function (v) {
    this.$__owner$slot = v;
    return this;
   };
   this.$__owner = function () {
    return this.$__owner$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`InternalRef";
     this._$superInit$ActorsForV8$InternalRef = $.$superInit$ActorsForV8$InternalRef;
     this.$superInit$ActorsForV8$InternalRef = dnuCatcher("$superInit$ActorsForV8$InternalRef");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$checkCurrentActor = $.$checkCurrentActor;
     this.$checkCurrentActor = dnuCatcher("$checkCurrentActor");
     this.$checkCycle = this._$checkCycle = $.$checkCycle;
     this.$eventualSend$arguments$ = this._$eventualSend$arguments$ = $.$eventualSend$arguments$;
     this.$externalRef = this._$externalRef = $.$externalRef;
     this.$immediateSend$ = this._$immediateSend$ = $.$immediateSend$;
     this.$isInternalRef = this._$isInternalRef = $.$isInternalRef;
     this.$refPrintOn$ = this._$refPrintOn$ = $.$refPrintOn$;
     this.$shorten = this._$shorten = $.$shorten;
     this.$whenFulfilled$whenBroken$ = this._$whenFulfilled$whenBroken$ = $.$whenFulfilled$whenBroken$;
     this.$wrapFor$ = this._$wrapFor$ = $.$wrapFor$;
     this.$init$__owner$ = this._$init$__owner$ = $.$init$__owner$;
     this.$__owner = this._$__owner = $.$__owner;
     this.$enclosingObjects$ActorsForV8$InternalRef = enclosingObjects;
     this.$super$ActorsForV8$InternalRef$slot = runtimeSuperclass;
     this["ActorsForV8`InternalRef"] = function () {
      superBasicNew.call(this);
      this.$__owner$slot = nil;
     };
     this.basicNew = this["ActorsForV8`InternalRef"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`InternalRef";
    this.slots = [];
    this.methods = [new MM("__owner:", "public", true, 0)];
    this.nestedClasses = [];
    this.$__owner$ = function ($o) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($o);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`InternalRef";
      this.$__owner$ = this._$__owner$ = $.$__owner$;
      this.$enclosingObjects$ActorsForV8$InternalRef = enclosingObjects;
      this.$super$ActorsForV8$InternalRef$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$InternalRemotePromise = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`InternalRemotePromise";
   this.name = "ActorsForV8`InternalRemotePromise";
   this.header = 392;
   this.slots = [
    new SM("target", "protected", false, false),
    new SM("targetsActor", "protected", false, false),
    new SM("state", "protected", true, false),
    new SM("resolution", "protected", true, false)
   ];
   this.methods = [
    new MM("superInit`ActorsForV8`InternalRemotePromise", "protected", true, 393),
    new MM("instance`initializer", "public", true, 394),
    new MM("addReactor:", "public", false, 395),
    new MM("checkCycle", "public", false, 396),
    new MM("eventualSend:arguments:", "public", false, 397),
    new MM("immediateSend:", "public", false, 398),
    new MM("internalResolve:", "public", false, 399),
    new MM("printOn:", "public", false, 400),
    new MM("redirectFrom:to:resolving:", "public", false, 401),
    new MM("refPrintOn:", "public", false, 402),
    new MM("shorten", "public", false, 403),
    new MM("whenFulfilled:whenBroken:", "public", false, 404),
    new MM("wrapFor:", "public", false, 405),
    new MM("init`target:", "protected", true, 0),
    new MM("target", "protected", true, 0),
    new MM("init`targetsActor:", "protected", true, 0),
    new MM("targetsActor", "protected", true, 0),
    new MM("init`state:", "protected", true, 0),
    new MM("state", "protected", true, 0),
    new MM("state:", "protected", true, 0),
    new MM("init`resolution:", "protected", true, 0),
    new MM("resolution", "protected", true, 0),
    new MM("resolution:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$InternalRemotePromise = function ($t, $ta, $o) {
    let self = this;
    self.$super$ActorsForV8$InternalRemotePromise$slot._$instance$initializer.call(self, $o);
    return self;
   };
   this.$instance$initializer = function ($t, $ta, $o) {
    let self = this;
    self._$superInit$ActorsForV8$InternalRemotePromise($t, $ta, $o);
    self._$init$target$($t);
    self._$init$targetsActor$($ta);
    self._$init$state$("unresolved");
    return self;
   };
   this.$addReactor$ = function ($reactor) {
    let self = this;
    if (self._$state() === "resolved") {
     return self._$resolution().$addReactor$($reactor);
    };
    if (self._$state() === "unresolved") {
     return $reactor.$reactMoreResolved$(self);
    };
    self._$stop5();
    return self;
   };
   this.$checkCycle = function () {
    let self = this;
    if (self._$state() === "resolving") {
     return true;
    };
    if (self._$state() === "unresolved") {
     return false;
    };
    if (self._$state() === "resolved") {
     return self._$resolution().$checkCycle();
    };
    self._$halt();
    return self;
   };
   this.$eventualSend$arguments$ = function ($selector, $arguments) {
    let self = this;
    let $resolverInTarget = nil;
    let $remotePromise = nil;
    let $redirector = nil;
    $resolverInTarget = self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$InternalLocalPromise().$__owner$(self._$targetsActor());
    self._$targetsActor().$enqueueMessage$(self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$PendingDelivery().$receiver$selector$arguments$resolver$(self._$target(), "eventualSend:arguments:", [
     $selector,
     $0.$wrapArguments$from$to$(self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0], $arguments, $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]), self._$targetsActor())
    ], $resolverInTarget));
    $remotePromise = self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$InternalRemotePromise().$target$targetsActor$__owner$($resolverInTarget, self._$targetsActor(), $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]));
    $redirector = self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$RedirectReactor().$from$to$resolver$(self._$targetsActor(), $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]), $remotePromise);
    self._$targetsActor().$enqueueMessage$(self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$PendingDelivery().$receiver$selector$arguments$resolver$($resolverInTarget, "addReactor:", [$redirector], nil));
    return $remotePromise.$externalRef();
   };
   this.$immediateSend$ = function ($message) {
    let self = this;
    if (self._$state() === "resolved") {
     return self._$resolution().$immediateSend$($message);
    };
    return self._$Error().$signal$("Cannot immediate-send to an eventual ref: ".$$comma($message.$selector()));
   };
   this.$internalResolve$ = function ($internalRef) {
    let self = this;
    if (!(self._$state() === "unresolved")) {
     return self._$Error().$signal$("Already resolved");
    };
    if (!$internalRef.$isInternalRef()) {
     self._$halt();
    };
    self._$state$("resolving");
    if ($internalRef.$checkCycle()) {
     self._$resolution$(self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$InternalBrokenRef().$problem$__owner$(self._$Error().$new().$messageText$("Cyclic resolution"), self._$__owner()));
    } else {
     self._$resolution$($internalRef);
    };
    self._$state$("resolved");
    return self;
   };
   this.$printOn$ = function ($stream) {
    let self = this;
    $stream.$nextPutAll$("InternalRemotePromise: ");
    self._$state().$printOn$($stream);
    return self;
   };
   this.$redirectFrom$to$resolving$ = function ($sourceActor, $destinationActor, $resolver) {
    let self = this;
    let $redirector = nil;
    if ($destinationActor === self._$targetsActor()) {
     self._$targetsActor().$enqueueMessage$(self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$PendingDelivery().$receiver$selector$arguments$resolver$($resolver, "internalResolve:", [self._$target()], nil));
     return self;
    };
    $redirector = self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$RedirectReactor().$from$to$resolver$(self._$targetsActor(), $destinationActor, $resolver);
    self._$targetsActor().$enqueueMessage$(self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$PendingDelivery().$receiver$selector$arguments$resolver$(self._$target(), "addReactor:", [$redirector], nil));
    return self;
   };
   this.$refPrintOn$ = function ($stream) {
    let self = this;
    if (self._$state() === "resolved") {
     self._$resolution().$refPrintOn$($stream);
    } else {
     $stream.$nextPutAll$("<remote promise>");
    };
    return self;
   };
   this.$shorten = function () {
    let self = this;
    if (self._$state() === "unresolved") {
     return self;
    };
    if (self._$state() === "resolved") {
     return self._$resolution();
    };
    self._$halt();
    return self;
   };
   this.$whenFulfilled$whenBroken$ = function ($onValue, $onError) {
    let self = this;
    let $localPromise = nil;
    let $redirector = nil;
    self._$checkCurrentActor();
    if (self._$state() === "resolved") {
     return self._$resolution().$whenFulfilled$whenBroken$($onValue, $onError);
    };
    $localPromise = self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$InternalLocalPromise().$__owner$(self._$__owner());
    $redirector = self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$RedirectReactor().$from$to$resolver$(self._$targetsActor(), $0.$currentActor(self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]), $localPromise);
    self._$targetsActor().$enqueueMessage$(self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$PendingDelivery().$receiver$selector$arguments$resolver$(self._$target(), "addReactor:", [$redirector], nil));
    return $localPromise.$whenFulfilled$whenBroken$($onValue, $onError);
   };
   this.$wrapFor$ = function ($targetActor) {
    let self = this;
    if (self._$state() === "resolved") {
     return self._$resolution().$wrapFor$($targetActor);
    };
    if ($targetActor === self._$targetsActor()) {
     return self._$target().$externalRef();
    };
    return self.$enclosingObjects$ActorsForV8$InternalRemotePromise[0]._$InternalRemotePromise().$target$targetsActor$__owner$(self._$target(), self._$targetsActor(), $targetActor).$externalRef();
   };
   this.$init$target$ = function (v) {
    this.$target$slot = v;
    return this;
   };
   this.$target = function () {
    return this.$target$slot;
   };
   this.$init$targetsActor$ = function (v) {
    this.$targetsActor$slot = v;
    return this;
   };
   this.$targetsActor = function () {
    return this.$targetsActor$slot;
   };
   this.$init$state$ = function (v) {
    this.$state$slot = v;
    return this;
   };
   this.$state = function () {
    return this.$state$slot;
   };
   this.$state$ = function (v) {
    this.$state$slot = v;
    return this;
   };
   this.$init$resolution$ = function (v) {
    this.$resolution$slot = v;
    return this;
   };
   this.$resolution = function () {
    return this.$resolution$slot;
   };
   this.$resolution$ = function (v) {
    this.$resolution$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`InternalRemotePromise";
     this._$superInit$ActorsForV8$InternalRemotePromise = $.$superInit$ActorsForV8$InternalRemotePromise;
     this.$superInit$ActorsForV8$InternalRemotePromise = dnuCatcher("$superInit$ActorsForV8$InternalRemotePromise");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$addReactor$ = this._$addReactor$ = $.$addReactor$;
     this.$checkCycle = this._$checkCycle = $.$checkCycle;
     this.$eventualSend$arguments$ = this._$eventualSend$arguments$ = $.$eventualSend$arguments$;
     this.$immediateSend$ = this._$immediateSend$ = $.$immediateSend$;
     this.$internalResolve$ = this._$internalResolve$ = $.$internalResolve$;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this.$redirectFrom$to$resolving$ = this._$redirectFrom$to$resolving$ = $.$redirectFrom$to$resolving$;
     this.$refPrintOn$ = this._$refPrintOn$ = $.$refPrintOn$;
     this.$shorten = this._$shorten = $.$shorten;
     this.$whenFulfilled$whenBroken$ = this._$whenFulfilled$whenBroken$ = $.$whenFulfilled$whenBroken$;
     this.$wrapFor$ = this._$wrapFor$ = $.$wrapFor$;
     this._$init$target$ = $.$init$target$;
     this.$init$target$ = dnuCatcher("$init$target$");
     this._$target = $.$target;
     this.$target = dnuCatcher("$target");
     this._$init$targetsActor$ = $.$init$targetsActor$;
     this.$init$targetsActor$ = dnuCatcher("$init$targetsActor$");
     this._$targetsActor = $.$targetsActor;
     this.$targetsActor = dnuCatcher("$targetsActor");
     this._$init$state$ = $.$init$state$;
     this.$init$state$ = dnuCatcher("$init$state$");
     this._$state = $.$state;
     this.$state = dnuCatcher("$state");
     this._$state$ = $.$state$;
     this.$state$ = dnuCatcher("$state$");
     this._$init$resolution$ = $.$init$resolution$;
     this.$init$resolution$ = dnuCatcher("$init$resolution$");
     this._$resolution = $.$resolution;
     this.$resolution = dnuCatcher("$resolution");
     this._$resolution$ = $.$resolution$;
     this.$resolution$ = dnuCatcher("$resolution$");
     this.$enclosingObjects$ActorsForV8$InternalRemotePromise = enclosingObjects;
     this.$super$ActorsForV8$InternalRemotePromise$slot = runtimeSuperclass;
     this["ActorsForV8`InternalRemotePromise"] = function () {
      superBasicNew.call(this);
      this.$target$slot = nil;
      this.$targetsActor$slot = nil;
      this.$state$slot = nil;
      this.$resolution$slot = nil;
     };
     this.basicNew = this["ActorsForV8`InternalRemotePromise"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`InternalRemotePromise";
    this.slots = [];
    this.methods = [new MM("target:targetsActor:__owner:", "public", true, 0)];
    this.nestedClasses = [];
    this.$target$targetsActor$__owner$ = function ($t, $ta, $o) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($t, $ta, $o);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`InternalRemotePromise";
      this.$target$targetsActor$__owner$ = this._$target$targetsActor$__owner$ = $.$target$targetsActor$__owner$;
      this.$enclosingObjects$ActorsForV8$InternalRemotePromise = enclosingObjects;
      this.$super$ActorsForV8$InternalRemotePromise$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$PendingDelivery = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`PendingDelivery";
   this.name = "ActorsForV8`PendingDelivery";
   this.header = 406;
   this.slots = [
    new SM("receiver", "protected", false, false),
    new SM("selector", "protected", false, false),
    new SM("arguments", "protected", false, false),
    new SM("resolver", "protected", false, false)
   ];
   this.methods = [
    new MM("superInit`ActorsForV8`PendingDelivery", "protected", true, 407),
    new MM("instance`initializer", "public", true, 408),
    new MM("deliverIn:", "public", false, 409),
    new MM("postedTo:", "public", false, 410),
    new MM("printOn:", "public", false, 411),
    new MM("init`receiver:", "protected", true, 0),
    new MM("receiver", "protected", true, 0),
    new MM("init`selector:", "protected", true, 0),
    new MM("selector", "protected", true, 0),
    new MM("init`arguments:", "protected", true, 0),
    new MM("arguments", "protected", true, 0),
    new MM("init`resolver:", "protected", true, 0),
    new MM("resolver", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$PendingDelivery = function ($r, $s, $a, $y) {
    let self = this;
    self.$super$ActorsForV8$PendingDelivery$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($r, $s, $a, $y) {
    let self = this;
    self._$superInit$ActorsForV8$PendingDelivery($r, $s, $a, $y);
    self._$init$receiver$($r);
    self._$init$selector$($s);
    self._$init$arguments$($a);
    self._$init$resolver$($y);
    return self;
   };
   this.$deliverIn$ = function ($fastCurrentActor) {
    let self = this;
    let $resolution = nil;
    let $type = nil;
    let $msg = nil;
    $msg = $0.$Message(self.$enclosingObjects$ActorsForV8$PendingDelivery[0]).$selector$arguments$(self._$selector(), self._$arguments());
    (function () {
     $resolution = $msg.$sendTo$(self._$receiver());
     return $type = "internalResolve:";
    }).$on$do$(self._$Error(), function ($error) {
     $error.$out();
     if (self._$resolver() === nil) {
      $error.$pass();
     };
     $resolution = $error;
     return $type = "internalBreak:";
    });
    if (nil === self._$resolver()) {
     if ($type === "internalBreak:") {
      [
       "silent failure",
       $resolution
      ].$out();
     };
     return self;
    };
    self._$resolver().$internalResolve$(($type === "internalResolve:").$ifTrue$ifFalse$(function () {
     return $0.$asInternalRef$(self.$enclosingObjects$ActorsForV8$PendingDelivery[0], $resolution);
    }, function () {
     return self.$enclosingObjects$ActorsForV8$PendingDelivery[0]._$InternalBrokenRef().$problem$__owner$($resolution, self);
    }));
    return self;
   };
   this.$postedTo$ = function ($actor) {
    let self = this;
    if (!(self._$resolver() === nil)) {
     if (!(self._$resolver().$__owner() === $actor)) {
      self._$halt();
     };
    };
    return self;
   };
   this.$printOn$ = function ($stream) {
    let self = this;
    self._$receiver().$printOn$($stream);
    $stream.$nextPutAll$(" <-: ");
    $stream.$nextPutAll$(self._$selector());
    $stream.$space();
    if (!self._$arguments().$isEmpty()) {
     self._$arguments().$printOn$($stream);
    };
    return self;
   };
   this.$init$receiver$ = function (v) {
    this.$receiver$slot = v;
    return this;
   };
   this.$receiver = function () {
    return this.$receiver$slot;
   };
   this.$init$selector$ = function (v) {
    this.$selector$slot = v;
    return this;
   };
   this.$selector = function () {
    return this.$selector$slot;
   };
   this.$init$arguments$ = function (v) {
    this.$arguments$slot = v;
    return this;
   };
   this.$arguments = function () {
    return this.$arguments$slot;
   };
   this.$init$resolver$ = function (v) {
    this.$resolver$slot = v;
    return this;
   };
   this.$resolver = function () {
    return this.$resolver$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`PendingDelivery";
     this._$superInit$ActorsForV8$PendingDelivery = $.$superInit$ActorsForV8$PendingDelivery;
     this.$superInit$ActorsForV8$PendingDelivery = dnuCatcher("$superInit$ActorsForV8$PendingDelivery");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$deliverIn$ = this._$deliverIn$ = $.$deliverIn$;
     this.$postedTo$ = this._$postedTo$ = $.$postedTo$;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this._$init$receiver$ = $.$init$receiver$;
     this.$init$receiver$ = dnuCatcher("$init$receiver$");
     this._$receiver = $.$receiver;
     this.$receiver = dnuCatcher("$receiver");
     this._$init$selector$ = $.$init$selector$;
     this.$init$selector$ = dnuCatcher("$init$selector$");
     this._$selector = $.$selector;
     this.$selector = dnuCatcher("$selector");
     this._$init$arguments$ = $.$init$arguments$;
     this.$init$arguments$ = dnuCatcher("$init$arguments$");
     this._$arguments = $.$arguments;
     this.$arguments = dnuCatcher("$arguments");
     this._$init$resolver$ = $.$init$resolver$;
     this.$init$resolver$ = dnuCatcher("$init$resolver$");
     this._$resolver = $.$resolver;
     this.$resolver = dnuCatcher("$resolver");
     this.$enclosingObjects$ActorsForV8$PendingDelivery = enclosingObjects;
     this.$super$ActorsForV8$PendingDelivery$slot = runtimeSuperclass;
     this["ActorsForV8`PendingDelivery"] = function () {
      superBasicNew.call(this);
      this.$receiver$slot = nil;
      this.$selector$slot = nil;
      this.$arguments$slot = nil;
      this.$resolver$slot = nil;
     };
     this.basicNew = this["ActorsForV8`PendingDelivery"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`PendingDelivery";
    this.slots = [];
    this.methods = [new MM("receiver:selector:arguments:resolver:", "public", true, 0)];
    this.nestedClasses = [];
    this.$receiver$selector$arguments$resolver$ = function ($r, $s, $a, $y) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($r, $s, $a, $y);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`PendingDelivery";
      this.$receiver$selector$arguments$resolver$ = this._$receiver$selector$arguments$resolver$ = $.$receiver$selector$arguments$resolver$;
      this.$enclosingObjects$ActorsForV8$PendingDelivery = enclosingObjects;
      this.$super$ActorsForV8$PendingDelivery$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$PromiseUtils = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`PromiseUtils";
   this.name = "ActorsForV8`PromiseUtils";
   this.header = 412;
   this.slots = [];
   this.methods = [
    new MM("superInit`ActorsForV8`PromiseUtils", "protected", true, 413),
    new MM("instance`initializer", "public", true, 414),
    new MM("all:", "public", false, 415),
    new MM("broken:", "public", false, 416),
    new MM("fulfilled:", "public", false, 417),
    new MM("timeout:after:", "public", false, 418),
    new MM("when:fulfilled:", "public", false, 419),
    new MM("when:fulfilled:broken:", "public", false, 420),
    new MM("when:partitioned:", "public", false, 421)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$PromiseUtils = function () {
    let self = this;
    self.$super$ActorsForV8$PromiseUtils$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$ActorsForV8$PromiseUtils();
    return self;
   };
   this.$all$ = function ($refs) {
    let self = this;
    return self;
   };
   this.$broken$ = function ($problem) {
    let self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$break$($problem);
     return cascadeReceiver.$promise();
    })(self.$enclosingObjects$ActorsForV8$PromiseUtils[0]._$Resolver().$new());
   };
   this.$fulfilled$ = function ($resolution) {
    let self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$fulfill$($resolution);
     return cascadeReceiver.$promise();
    })(self.$enclosingObjects$ActorsForV8$PromiseUtils[0]._$Resolver().$new());
   };
   this.$timeout$after$ = function ($ref, $milliseconds) {
    let self = this;
    "BOGUS";
    return self;
   };
   this.$when$fulfilled$ = function ($ref, $onValue) {
    let self = this;
    return $0.$asInternalRef$(self.$enclosingObjects$ActorsForV8$PromiseUtils[0], $ref).$whenFulfilled$whenBroken$($onValue, function ($e) {
     return $e.$signal();
    });
   };
   this.$when$fulfilled$broken$ = function ($ref, $onValue, $onError) {
    let self = this;
    return $0.$asInternalRef$(self.$enclosingObjects$ActorsForV8$PromiseUtils[0], $ref).$whenFulfilled$whenBroken$($onValue, $onError);
   };
   this.$when$partitioned$ = function ($ref, $onPartition) {
    let self = this;
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`PromiseUtils";
     this._$superInit$ActorsForV8$PromiseUtils = $.$superInit$ActorsForV8$PromiseUtils;
     this.$superInit$ActorsForV8$PromiseUtils = dnuCatcher("$superInit$ActorsForV8$PromiseUtils");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$all$ = this._$all$ = $.$all$;
     this.$broken$ = this._$broken$ = $.$broken$;
     this.$fulfilled$ = this._$fulfilled$ = $.$fulfilled$;
     this.$timeout$after$ = this._$timeout$after$ = $.$timeout$after$;
     this.$when$fulfilled$ = this._$when$fulfilled$ = $.$when$fulfilled$;
     this.$when$fulfilled$broken$ = this._$when$fulfilled$broken$ = $.$when$fulfilled$broken$;
     this.$when$partitioned$ = this._$when$partitioned$ = $.$when$partitioned$;
     this.$enclosingObjects$ActorsForV8$PromiseUtils = enclosingObjects;
     this.$super$ActorsForV8$PromiseUtils$slot = runtimeSuperclass;
     this["ActorsForV8`PromiseUtils"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["ActorsForV8`PromiseUtils"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`PromiseUtils";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`PromiseUtils";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$ActorsForV8$PromiseUtils = enclosingObjects;
      this.$super$ActorsForV8$PromiseUtils$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$RedirectReactor = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`RedirectReactor";
   this.name = "ActorsForV8`RedirectReactor";
   this.header = 422;
   this.slots = [
    new SM("sourceActor", "protected", false, false),
    new SM("destinationActor", "protected", false, false),
    new SM("resolver", "protected", false, false)
   ];
   this.methods = [
    new MM("superInit`ActorsForV8`RedirectReactor", "protected", true, 423),
    new MM("instance`initializer", "public", true, 424),
    new MM("reactBroken:", "public", false, 425),
    new MM("reactMoreResolved:", "public", false, 426),
    new MM("reactResolved:", "public", false, 427),
    new MM("init`sourceActor:", "protected", true, 0),
    new MM("sourceActor", "protected", true, 0),
    new MM("init`destinationActor:", "protected", true, 0),
    new MM("destinationActor", "protected", true, 0),
    new MM("init`resolver:", "protected", true, 0),
    new MM("resolver", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$RedirectReactor = function ($s, $d, $r) {
    let self = this;
    self.$super$ActorsForV8$RedirectReactor$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($s, $d, $r) {
    let self = this;
    self._$superInit$ActorsForV8$RedirectReactor($s, $d, $r);
    self._$init$sourceActor$($s);
    self._$init$destinationActor$($d);
    self._$init$resolver$($r);
    return self;
   };
   this.$reactBroken$ = function ($r) {
    let self = this;
    let $msg = nil;
    if (!($0.$currentActor(self.$enclosingObjects$ActorsForV8$RedirectReactor[0]) === self._$sourceActor())) {
     self._$halt();
    };
    $msg = self.$enclosingObjects$ActorsForV8$RedirectReactor[0]._$PendingDelivery().$receiver$selector$arguments$resolver$(self._$resolver(), "internalResolve:", [self.$enclosingObjects$ActorsForV8$RedirectReactor[0]._$InternalBrokenRef().$problem$__owner$($r, self._$destinationActor())], nil);
    self._$destinationActor().$enqueueMessage$($msg);
    return self;
   };
   this.$reactMoreResolved$ = function ($internalRef) {
    let self = this;
    $internalRef.$redirectFrom$to$resolving$(self._$sourceActor(), self._$destinationActor(), self._$resolver());
    return self;
   };
   this.$reactResolved$ = function ($r) {
    let self = this;
    let $msg = nil;
    if (!($0.$currentActor(self.$enclosingObjects$ActorsForV8$RedirectReactor[0]) === self._$sourceActor())) {
     self._$halt();
    };
    $msg = self.$enclosingObjects$ActorsForV8$RedirectReactor[0]._$PendingDelivery().$receiver$selector$arguments$resolver$(self._$resolver(), "internalResolve:", [$0.$asInternalRef$(self.$enclosingObjects$ActorsForV8$RedirectReactor[0], $0.$wrapArgument$from$to$(self.$enclosingObjects$ActorsForV8$RedirectReactor[0], $r, self._$sourceActor(), self._$destinationActor()))], nil);
    self._$destinationActor().$enqueueMessage$($msg);
    return self;
   };
   this.$init$sourceActor$ = function (v) {
    this.$sourceActor$slot = v;
    return this;
   };
   this.$sourceActor = function () {
    return this.$sourceActor$slot;
   };
   this.$init$destinationActor$ = function (v) {
    this.$destinationActor$slot = v;
    return this;
   };
   this.$destinationActor = function () {
    return this.$destinationActor$slot;
   };
   this.$init$resolver$ = function (v) {
    this.$resolver$slot = v;
    return this;
   };
   this.$resolver = function () {
    return this.$resolver$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`RedirectReactor";
     this._$superInit$ActorsForV8$RedirectReactor = $.$superInit$ActorsForV8$RedirectReactor;
     this.$superInit$ActorsForV8$RedirectReactor = dnuCatcher("$superInit$ActorsForV8$RedirectReactor");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$reactBroken$ = this._$reactBroken$ = $.$reactBroken$;
     this.$reactMoreResolved$ = this._$reactMoreResolved$ = $.$reactMoreResolved$;
     this.$reactResolved$ = this._$reactResolved$ = $.$reactResolved$;
     this._$init$sourceActor$ = $.$init$sourceActor$;
     this.$init$sourceActor$ = dnuCatcher("$init$sourceActor$");
     this._$sourceActor = $.$sourceActor;
     this.$sourceActor = dnuCatcher("$sourceActor");
     this._$init$destinationActor$ = $.$init$destinationActor$;
     this.$init$destinationActor$ = dnuCatcher("$init$destinationActor$");
     this._$destinationActor = $.$destinationActor;
     this.$destinationActor = dnuCatcher("$destinationActor");
     this._$init$resolver$ = $.$init$resolver$;
     this.$init$resolver$ = dnuCatcher("$init$resolver$");
     this._$resolver = $.$resolver;
     this.$resolver = dnuCatcher("$resolver");
     this.$enclosingObjects$ActorsForV8$RedirectReactor = enclosingObjects;
     this.$super$ActorsForV8$RedirectReactor$slot = runtimeSuperclass;
     this["ActorsForV8`RedirectReactor"] = function () {
      superBasicNew.call(this);
      this.$sourceActor$slot = nil;
      this.$destinationActor$slot = nil;
      this.$resolver$slot = nil;
     };
     this.basicNew = this["ActorsForV8`RedirectReactor"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`RedirectReactor";
    this.slots = [];
    this.methods = [new MM("from:to:resolver:", "public", true, 0)];
    this.nestedClasses = [];
    this.$from$to$resolver$ = function ($s, $d, $r) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($s, $d, $r);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`RedirectReactor";
      this.$from$to$resolver$ = this._$from$to$resolver$ = $.$from$to$resolver$;
      this.$enclosingObjects$ActorsForV8$RedirectReactor = enclosingObjects;
      this.$super$ActorsForV8$RedirectReactor$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$Ref = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`Ref";
   this.name = "ActorsForV8`Ref";
   this.header = 428;
   this.slots = [new SM("internalRef", "protected", false, false)];
   this.methods = [
    new MM("superInit`ActorsForV8`Ref", "protected", true, 429),
    new MM("instance`initializer", "public", true, 430),
    new MM("doesNotUnderstand:", "protected", false, 431),
    new MM("identityHash", "public", false, 432),
    new MM("isPromise", "public", false, 433),
    new MM("printOn:", "public", false, 434),
    new MM("yourself", "protected", false, 435),
    new MM("init`internalRef:", "protected", true, 0),
    new MM("internalRef", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$Ref = function ($ref) {
    let self = this;
    self.$super$ActorsForV8$Ref$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($ref) {
    let self = this;
    self._$superInit$ActorsForV8$Ref($ref);
    self._$init$internalRef$($ref);
    $0.$internalRefs(self.$enclosingObjects$ActorsForV8$Ref[0]).$at$put$(self, $ref);
    return self;
   };
   this.$doesNotUnderstand$ = function ($message) {
    let self = this;
    if ((0).$$equal($message.$arguments().$size())) {
     if ($message.$selector().$startsWith$("is")) {
      return false;
     };
    };
    return self._$internalRef().$immediateSend$($message);
   };
   this.$identityHash = function () {
    let self = this;
    return self.$super$ActorsForV8$Ref$slot._$hash.call(self);
   };
   this.$isPromise = function () {
    let self = this;
    return true;
   };
   this.$printOn$ = function ($stream) {
    let self = this;
    self._$internalRef().$refPrintOn$($stream);
    return self;
   };
   this.$yourself = function () {
    let self = this;
    return self.$super$ActorsForV8$Ref$slot._$yourself.call(self);
   };
   this.$init$internalRef$ = function (v) {
    this.$internalRef$slot = v;
    return this;
   };
   this.$internalRef = function () {
    return this.$internalRef$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`Ref";
     this._$superInit$ActorsForV8$Ref = $.$superInit$ActorsForV8$Ref;
     this.$superInit$ActorsForV8$Ref = dnuCatcher("$superInit$ActorsForV8$Ref");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$doesNotUnderstand$ = $.$doesNotUnderstand$;
     this.$doesNotUnderstand$ = dnuCatcher("$doesNotUnderstand$");
     this.dnu = $.$doesNotUnderstand$;
     this.$identityHash = this._$identityHash = $.$identityHash;
     this.$isPromise = this._$isPromise = $.$isPromise;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this._$yourself = $.$yourself;
     this.$yourself = dnuCatcher("$yourself");
     this._$init$internalRef$ = $.$init$internalRef$;
     this.$init$internalRef$ = dnuCatcher("$init$internalRef$");
     this._$internalRef = $.$internalRef;
     this.$internalRef = dnuCatcher("$internalRef");
     this.$enclosingObjects$ActorsForV8$Ref = enclosingObjects;
     this.$super$ActorsForV8$Ref$slot = runtimeSuperclass;
     this["ActorsForV8`Ref"] = function () {
      superBasicNew.call(this);
      this.$internalRef$slot = nil;
     };
     this.basicNew = this["ActorsForV8`Ref"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`Ref";
    this.slots = [];
    this.methods = [new MM("wrapping:", "public", true, 0)];
    this.nestedClasses = [];
    this.$wrapping$ = function ($ref) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($ref);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`Ref";
      this.$wrapping$ = this._$wrapping$ = $.$wrapping$;
      this.$enclosingObjects$ActorsForV8$Ref = enclosingObjects;
      this.$super$ActorsForV8$Ref$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$Resolver = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`Resolver";
   this.name = "ActorsForV8`Resolver";
   this.header = 436;
   this.slots = [
    new SM("internalResolver", "private", false, false),
    new SM("promise", "public", false, false)
   ];
   this.methods = [
    new MM("superInit`ActorsForV8`Resolver", "protected", true, 437),
    new MM("instance`initializer", "public", true, 438),
    new MM("break:", "public", false, 439),
    new MM("fulfill:", "public", false, 440),
    new MM("isResolver", "public", false, 441),
    new MM("init`internalResolver:", "private", true, 0),
    new MM("internalResolver", "private", true, 0),
    new MM("init`promise:", "public", true, 0),
    new MM("promise", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$Resolver = function () {
    let self = this;
    self.$super$ActorsForV8$Resolver$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$ActorsForV8$Resolver();
    $1.$init$internalResolver$(self, self.$enclosingObjects$ActorsForV8$Resolver[0]._$InternalLocalPromise().$__owner$($0.$currentActor(self.$enclosingObjects$ActorsForV8$Resolver[0])));
    self._$init$promise$($1.$internalResolver(self).$externalRef());
    return self;
   };
   this.$break$ = function ($error) {
    let self = this;
    $1.$internalResolver(self).$internalResolve$(self.$enclosingObjects$ActorsForV8$Resolver[0]._$InternalBrokenRef().$problem$__owner$($error, $0.$currentActor(self.$enclosingObjects$ActorsForV8$Resolver[0])));
    return self;
   };
   this.$fulfill$ = function ($value) {
    let self = this;
    $1.$internalResolver(self).$internalResolve$($0.$asInternalRef$(self.$enclosingObjects$ActorsForV8$Resolver[0], $value));
    return self;
   };
   this.$isResolver = function () {
    let self = this;
    return true;
   };
   this.$init$internalResolver$ = function (self, v) {
    self.$internalResolver$slot = v;
    return self;
   };
   this.$internalResolver = function (self) {
    return self.$internalResolver$slot;
   };
   this.$init$promise$ = function (v) {
    this.$promise$slot = v;
    return this;
   };
   this.$promise = function () {
    return this.$promise$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`Resolver";
     this._$superInit$ActorsForV8$Resolver = $.$superInit$ActorsForV8$Resolver;
     this.$superInit$ActorsForV8$Resolver = dnuCatcher("$superInit$ActorsForV8$Resolver");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$break$ = this._$break$ = $.$break$;
     this.$fulfill$ = this._$fulfill$ = $.$fulfill$;
     this.$isResolver = this._$isResolver = $.$isResolver;
     this.$init$promise$ = this._$init$promise$ = $.$init$promise$;
     this.$promise = this._$promise = $.$promise;
     this.$enclosingObjects$ActorsForV8$Resolver = enclosingObjects;
     this.$super$ActorsForV8$Resolver$slot = runtimeSuperclass;
     this["ActorsForV8`Resolver"] = function () {
      superBasicNew.call(this);
      this.$internalResolver$slot = nil;
      this.$promise$slot = nil;
     };
     this.basicNew = this["ActorsForV8`Resolver"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`Resolver";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`Resolver";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$ActorsForV8$Resolver = enclosingObjects;
      this.$super$ActorsForV8$Resolver$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$Scheduler = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`Scheduler";
   this.name = "ActorsForV8`Scheduler";
   this.header = 442;
   this.slots = [];
   this.methods = [
    new MM("superInit`ActorsForV8`Scheduler", "protected", true, 443),
    new MM("instance`initializer", "public", true, 444),
    new MM("eventualSendTo:selector:arguments:", "public", false, 445)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$Scheduler = function () {
    let self = this;
    self.$super$ActorsForV8$Scheduler$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$ActorsForV8$Scheduler();
    return self;
   };
   this.$eventualSendTo$selector$arguments$ = function ($r, $s, $a) {
    let self = this;
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`Scheduler";
     this._$superInit$ActorsForV8$Scheduler = $.$superInit$ActorsForV8$Scheduler;
     this.$superInit$ActorsForV8$Scheduler = dnuCatcher("$superInit$ActorsForV8$Scheduler");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$eventualSendTo$selector$arguments$ = this._$eventualSendTo$selector$arguments$ = $.$eventualSendTo$selector$arguments$;
     this.$enclosingObjects$ActorsForV8$Scheduler = enclosingObjects;
     this.$super$ActorsForV8$Scheduler$slot = runtimeSuperclass;
     this["ActorsForV8`Scheduler"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["ActorsForV8`Scheduler"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`Scheduler";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`Scheduler";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$ActorsForV8$Scheduler = enclosingObjects;
      this.$super$ActorsForV8$Scheduler$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$Timer = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`Timer";
   this.name = "ActorsForV8`Timer";
   this.header = 446;
   this.slots = [new SM("cancelled", "protected", true, false)];
   this.methods = [
    new MM("superInit`ActorsForV8`Timer", "protected", true, 447),
    new MM("instance`initializer", "public", true, 448),
    new MM("cancel", "public", false, 449),
    new MM("isActive", "public", false, 450),
    new MM("isTimer", "public", false, 451),
    new MM("schedule:after:", "protected", false, 452),
    new MM("schedule:every:", "protected", false, 453),
    new MM("init`cancelled:", "protected", true, 0),
    new MM("cancelled", "protected", true, 0),
    new MM("cancelled:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$Timer = function ($milliseconds, $callback, $repeating) {
    let self = this;
    self.$super$ActorsForV8$Timer$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($milliseconds, $callback, $repeating) {
    let self = this;
    self._$superInit$ActorsForV8$Timer($milliseconds, $callback, $repeating);
    self._$init$cancelled$(false);
    if ($repeating) {
     self._$schedule$every$($callback, $milliseconds);
    } else {
     self._$schedule$after$($callback, $milliseconds);
    };
    return self;
   };
   this.$cancel = function () {
    let self = this;
    self._$cancelled$(true);
    if (!(nil === self._$process())) {
     self._$process().$terminate();
     self._$process$(nil);
    };
    return self;
   };
   this.$isActive = function () {
    let self = this;
    if (self._$cancelled()) {
     return false;
    };
    return nil.$$tilde$equal(self._$process());
   };
   this.$isTimer = function () {
    let self = this;
    return true;
   };
   this.$schedule$after$ = function ($callback, $ms) {
    let self = this;
    window.setTimeout($callback, $ms);
    return self;
   };
   this.$schedule$every$ = function ($callback, $ms) {
    let self = this;
    window.setInterval($callback, $ms);
    return self;
   };
   this.$init$cancelled$ = function (v) {
    this.$cancelled$slot = v;
    return this;
   };
   this.$cancelled = function () {
    return this.$cancelled$slot;
   };
   this.$cancelled$ = function (v) {
    this.$cancelled$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`Timer";
     this._$superInit$ActorsForV8$Timer = $.$superInit$ActorsForV8$Timer;
     this.$superInit$ActorsForV8$Timer = dnuCatcher("$superInit$ActorsForV8$Timer");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$cancel = this._$cancel = $.$cancel;
     this.$isActive = this._$isActive = $.$isActive;
     this.$isTimer = this._$isTimer = $.$isTimer;
     this._$schedule$after$ = $.$schedule$after$;
     this.$schedule$after$ = dnuCatcher("$schedule$after$");
     this._$schedule$every$ = $.$schedule$every$;
     this.$schedule$every$ = dnuCatcher("$schedule$every$");
     this._$init$cancelled$ = $.$init$cancelled$;
     this.$init$cancelled$ = dnuCatcher("$init$cancelled$");
     this._$cancelled = $.$cancelled;
     this.$cancelled = dnuCatcher("$cancelled");
     this._$cancelled$ = $.$cancelled$;
     this.$cancelled$ = dnuCatcher("$cancelled$");
     this.$enclosingObjects$ActorsForV8$Timer = enclosingObjects;
     this.$super$ActorsForV8$Timer$slot = runtimeSuperclass;
     this["ActorsForV8`Timer"] = function () {
      superBasicNew.call(this);
      this.$cancelled$slot = nil;
     };
     this.basicNew = this["ActorsForV8`Timer"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`Timer";
    this.slots = [];
    this.methods = [
     new MM("__duration:callback:repeating:", "public", true, 0),
     new MM("after:do:", "public", false, 454),
     new MM("every:do:", "public", false, 455)
    ];
    this.nestedClasses = [];
    this.$__duration$callback$repeating$ = function ($milliseconds, $callback, $repeating) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($milliseconds, $callback, $repeating);
     return t;
    };
    this.$after$do$ = function ($duration, $callback) {
     let self = this;
     return self._$__duration$callback$repeating$($duration, $callback, false);
    };
    this.$every$do$ = function ($duration, $callback) {
     let self = this;
     return self._$__duration$callback$repeating$($duration, $callback, true);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`Timer";
      this.$__duration$callback$repeating$ = this._$__duration$callback$repeating$ = $.$__duration$callback$repeating$;
      this.$after$do$ = this._$after$do$ = $.$after$do$;
      this.$every$do$ = this._$every$do$ = $.$every$do$;
      this.$enclosingObjects$ActorsForV8$Timer = enclosingObjects;
      this.$super$ActorsForV8$Timer$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$WhenReactor = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for ActorsForV8`WhenReactor";
   this.name = "ActorsForV8`WhenReactor";
   this.header = 456;
   this.slots = [
    new SM("onValue", "protected", false, false),
    new SM("onError", "protected", false, false),
    new SM("resolver", "protected", false, false)
   ];
   this.methods = [
    new MM("superInit`ActorsForV8`WhenReactor", "protected", true, 457),
    new MM("instance`initializer", "public", true, 458),
    new MM("reactBroken:", "public", false, 459),
    new MM("reactMoreResolved:", "public", false, 460),
    new MM("reactResolved:", "public", false, 461),
    new MM("init`onValue:", "protected", true, 0),
    new MM("onValue", "protected", true, 0),
    new MM("init`onError:", "protected", true, 0),
    new MM("onError", "protected", true, 0),
    new MM("init`resolver:", "protected", true, 0),
    new MM("resolver", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$ActorsForV8$WhenReactor = function ($v, $e, $r) {
    let self = this;
    self.$super$ActorsForV8$WhenReactor$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($v, $e, $r) {
    let self = this;
    self._$superInit$ActorsForV8$WhenReactor($v, $e, $r);
    self._$init$onValue$($v);
    self._$init$onError$($e);
    self._$init$resolver$($r);
    return self;
   };
   this.$reactBroken$ = function ($value) {
    let self = this;
    if (!(self._$resolver().$__owner() === $0.$currentActor(self.$enclosingObjects$ActorsForV8$WhenReactor[0]))) {
     self._$halt();
    };
    $0.$currentActor(self.$enclosingObjects$ActorsForV8$WhenReactor[0]).$enqueueMessage$(self.$enclosingObjects$ActorsForV8$WhenReactor[0]._$PendingDelivery().$receiver$selector$arguments$resolver$(self._$onError(), "cull:", [$value], self._$resolver()));
    return self;
   };
   this.$reactMoreResolved$ = function ($internalRef) {
    let self = this;
    self._$resolver().$internalResolve$($0.$asInternalRef$(self.$enclosingObjects$ActorsForV8$WhenReactor[0], $internalRef.$whenFulfilled$whenBroken$(self._$onValue(), self._$onError())));
    return self;
   };
   this.$reactResolved$ = function ($value) {
    let self = this;
    if (!(self._$resolver().$__owner() === $0.$currentActor(self.$enclosingObjects$ActorsForV8$WhenReactor[0]))) {
     self._$halt();
    };
    $0.$currentActor(self.$enclosingObjects$ActorsForV8$WhenReactor[0]).$enqueueMessage$(self.$enclosingObjects$ActorsForV8$WhenReactor[0]._$PendingDelivery().$receiver$selector$arguments$resolver$(self._$onValue(), "cull:", [$value], self._$resolver()));
    return self;
   };
   this.$init$onValue$ = function (v) {
    this.$onValue$slot = v;
    return this;
   };
   this.$onValue = function () {
    return this.$onValue$slot;
   };
   this.$init$onError$ = function (v) {
    this.$onError$slot = v;
    return this;
   };
   this.$onError = function () {
    return this.$onError$slot;
   };
   this.$init$resolver$ = function (v) {
    this.$resolver$slot = v;
    return this;
   };
   this.$resolver = function () {
    return this.$resolver$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for ActorsForV8`WhenReactor";
     this._$superInit$ActorsForV8$WhenReactor = $.$superInit$ActorsForV8$WhenReactor;
     this.$superInit$ActorsForV8$WhenReactor = dnuCatcher("$superInit$ActorsForV8$WhenReactor");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$reactBroken$ = this._$reactBroken$ = $.$reactBroken$;
     this.$reactMoreResolved$ = this._$reactMoreResolved$ = $.$reactMoreResolved$;
     this.$reactResolved$ = this._$reactResolved$ = $.$reactResolved$;
     this._$init$onValue$ = $.$init$onValue$;
     this.$init$onValue$ = dnuCatcher("$init$onValue$");
     this._$onValue = $.$onValue;
     this.$onValue = dnuCatcher("$onValue");
     this._$init$onError$ = $.$init$onError$;
     this.$init$onError$ = dnuCatcher("$init$onError$");
     this._$onError = $.$onError;
     this.$onError = dnuCatcher("$onError");
     this._$init$resolver$ = $.$init$resolver$;
     this.$init$resolver$ = dnuCatcher("$init$resolver$");
     this._$resolver = $.$resolver;
     this.$resolver = dnuCatcher("$resolver");
     this.$enclosingObjects$ActorsForV8$WhenReactor = enclosingObjects;
     this.$super$ActorsForV8$WhenReactor$slot = runtimeSuperclass;
     this["ActorsForV8`WhenReactor"] = function () {
      superBasicNew.call(this);
      this.$onValue$slot = nil;
      this.$onError$slot = nil;
      this.$resolver$slot = nil;
     };
     this.basicNew = this["ActorsForV8`WhenReactor"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for ActorsForV8`WhenReactor";
    this.slots = [];
    this.methods = [new MM("onValue:onError:resolver:", "public", true, 0)];
    this.nestedClasses = [];
    this.$onValue$onError$resolver$ = function ($v, $e, $r) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($v, $e, $r);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for ActorsForV8`WhenReactor";
      this.$onValue$onError$resolver$ = this._$onValue$onError$resolver$ = $.$onValue$onError$resolver$;
      this.$enclosingObjects$ActorsForV8$WhenReactor = enclosingObjects;
      this.$super$ActorsForV8$WhenReactor$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$ActorsForV8$Actor.enclosingMixin = this;
  this.$ActorsForV8$DOMActor.enclosingMixin = this;
  this.$ActorsForV8$EventualSendReactor.enclosingMixin = this;
  this.$ActorsForV8$InternalActor.enclosingMixin = this;
  this.$ActorsForV8$InternalBrokenRef.enclosingMixin = this;
  this.$ActorsForV8$InternalFarReference.enclosingMixin = this;
  this.$ActorsForV8$InternalLocalPromise.enclosingMixin = this;
  this.$ActorsForV8$InternalNearRef.enclosingMixin = this;
  this.$ActorsForV8$InternalRef.enclosingMixin = this;
  this.$ActorsForV8$InternalRemotePromise.enclosingMixin = this;
  this.$ActorsForV8$PendingDelivery.enclosingMixin = this;
  this.$ActorsForV8$PromiseUtils.enclosingMixin = this;
  this.$ActorsForV8$RedirectReactor.enclosingMixin = this;
  this.$ActorsForV8$Ref.enclosingMixin = this;
  this.$ActorsForV8$Resolver.enclosingMixin = this;
  this.$ActorsForV8$Scheduler.enclosingMixin = this;
  this.$ActorsForV8$Timer.enclosingMixin = this;
  this.$ActorsForV8$WhenReactor.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for ActorsForV8";
    this._$superInit$ActorsForV8 = $.$superInit$ActorsForV8;
    this.$superInit$ActorsForV8 = dnuCatcher("$superInit$ActorsForV8");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this.$Actor = this._$Actor = $.$Actor;
    this._$DOMActor = $.$DOMActor;
    this.$DOMActor = dnuCatcher("$DOMActor");
    this._$EventualSendReactor = $.$EventualSendReactor;
    this.$EventualSendReactor = dnuCatcher("$EventualSendReactor");
    this._$InternalActor = $.$InternalActor;
    this.$InternalActor = dnuCatcher("$InternalActor");
    this._$InternalBrokenRef = $.$InternalBrokenRef;
    this.$InternalBrokenRef = dnuCatcher("$InternalBrokenRef");
    this._$InternalFarReference = $.$InternalFarReference;
    this.$InternalFarReference = dnuCatcher("$InternalFarReference");
    this._$InternalLocalPromise = $.$InternalLocalPromise;
    this.$InternalLocalPromise = dnuCatcher("$InternalLocalPromise");
    this._$InternalNearRef = $.$InternalNearRef;
    this.$InternalNearRef = dnuCatcher("$InternalNearRef");
    this._$InternalRef = $.$InternalRef;
    this.$InternalRef = dnuCatcher("$InternalRef");
    this._$InternalRemotePromise = $.$InternalRemotePromise;
    this.$InternalRemotePromise = dnuCatcher("$InternalRemotePromise");
    this._$PendingDelivery = $.$PendingDelivery;
    this.$PendingDelivery = dnuCatcher("$PendingDelivery");
    this._$PromiseUtils = $.$PromiseUtils;
    this.$PromiseUtils = dnuCatcher("$PromiseUtils");
    this._$RedirectReactor = $.$RedirectReactor;
    this.$RedirectReactor = dnuCatcher("$RedirectReactor");
    this._$Ref = $.$Ref;
    this.$Ref = dnuCatcher("$Ref");
    this.$Resolver = this._$Resolver = $.$Resolver;
    this._$Scheduler = $.$Scheduler;
    this.$Scheduler = dnuCatcher("$Scheduler");
    this.$Timer = this._$Timer = $.$Timer;
    this._$WhenReactor = $.$WhenReactor;
    this.$WhenReactor = dnuCatcher("$WhenReactor");
    this.$init$Promise$ = this._$init$Promise$ = $.$init$Promise$;
    this.$Promise = this._$Promise = $.$Promise;
    this._$init$defaultActor$ = $.$init$defaultActor$;
    this.$init$defaultActor$ = dnuCatcher("$init$defaultActor$");
    this._$defaultActor = $.$defaultActor;
    this.$defaultActor = dnuCatcher("$defaultActor");
    this.$init$ActorsForV8$Actor$ = this._$init$ActorsForV8$Actor$ = $.$init$ActorsForV8$Actor$;
    this.$ActorsForV8$Actor = this._$ActorsForV8$Actor = $.$ActorsForV8$Actor;
    this.$ActorsForV8$Actor$ = this._$ActorsForV8$Actor$ = $.$ActorsForV8$Actor$;
    this.$init$ActorsForV8$DOMActor$ = this._$init$ActorsForV8$DOMActor$ = $.$init$ActorsForV8$DOMActor$;
    this.$ActorsForV8$DOMActor = this._$ActorsForV8$DOMActor = $.$ActorsForV8$DOMActor;
    this.$ActorsForV8$DOMActor$ = this._$ActorsForV8$DOMActor$ = $.$ActorsForV8$DOMActor$;
    this.$init$ActorsForV8$EventualSendReactor$ = this._$init$ActorsForV8$EventualSendReactor$ = $.$init$ActorsForV8$EventualSendReactor$;
    this.$ActorsForV8$EventualSendReactor = this._$ActorsForV8$EventualSendReactor = $.$ActorsForV8$EventualSendReactor;
    this.$ActorsForV8$EventualSendReactor$ = this._$ActorsForV8$EventualSendReactor$ = $.$ActorsForV8$EventualSendReactor$;
    this.$init$ActorsForV8$InternalActor$ = this._$init$ActorsForV8$InternalActor$ = $.$init$ActorsForV8$InternalActor$;
    this.$ActorsForV8$InternalActor = this._$ActorsForV8$InternalActor = $.$ActorsForV8$InternalActor;
    this.$ActorsForV8$InternalActor$ = this._$ActorsForV8$InternalActor$ = $.$ActorsForV8$InternalActor$;
    this.$init$ActorsForV8$InternalBrokenRef$ = this._$init$ActorsForV8$InternalBrokenRef$ = $.$init$ActorsForV8$InternalBrokenRef$;
    this.$ActorsForV8$InternalBrokenRef = this._$ActorsForV8$InternalBrokenRef = $.$ActorsForV8$InternalBrokenRef;
    this.$ActorsForV8$InternalBrokenRef$ = this._$ActorsForV8$InternalBrokenRef$ = $.$ActorsForV8$InternalBrokenRef$;
    this.$init$ActorsForV8$InternalFarReference$ = this._$init$ActorsForV8$InternalFarReference$ = $.$init$ActorsForV8$InternalFarReference$;
    this.$ActorsForV8$InternalFarReference = this._$ActorsForV8$InternalFarReference = $.$ActorsForV8$InternalFarReference;
    this.$ActorsForV8$InternalFarReference$ = this._$ActorsForV8$InternalFarReference$ = $.$ActorsForV8$InternalFarReference$;
    this.$init$ActorsForV8$InternalLocalPromise$ = this._$init$ActorsForV8$InternalLocalPromise$ = $.$init$ActorsForV8$InternalLocalPromise$;
    this.$ActorsForV8$InternalLocalPromise = this._$ActorsForV8$InternalLocalPromise = $.$ActorsForV8$InternalLocalPromise;
    this.$ActorsForV8$InternalLocalPromise$ = this._$ActorsForV8$InternalLocalPromise$ = $.$ActorsForV8$InternalLocalPromise$;
    this.$init$ActorsForV8$InternalNearRef$ = this._$init$ActorsForV8$InternalNearRef$ = $.$init$ActorsForV8$InternalNearRef$;
    this.$ActorsForV8$InternalNearRef = this._$ActorsForV8$InternalNearRef = $.$ActorsForV8$InternalNearRef;
    this.$ActorsForV8$InternalNearRef$ = this._$ActorsForV8$InternalNearRef$ = $.$ActorsForV8$InternalNearRef$;
    this.$init$ActorsForV8$InternalRef$ = this._$init$ActorsForV8$InternalRef$ = $.$init$ActorsForV8$InternalRef$;
    this.$ActorsForV8$InternalRef = this._$ActorsForV8$InternalRef = $.$ActorsForV8$InternalRef;
    this.$ActorsForV8$InternalRef$ = this._$ActorsForV8$InternalRef$ = $.$ActorsForV8$InternalRef$;
    this.$init$ActorsForV8$InternalRemotePromise$ = this._$init$ActorsForV8$InternalRemotePromise$ = $.$init$ActorsForV8$InternalRemotePromise$;
    this.$ActorsForV8$InternalRemotePromise = this._$ActorsForV8$InternalRemotePromise = $.$ActorsForV8$InternalRemotePromise;
    this.$ActorsForV8$InternalRemotePromise$ = this._$ActorsForV8$InternalRemotePromise$ = $.$ActorsForV8$InternalRemotePromise$;
    this.$init$ActorsForV8$PendingDelivery$ = this._$init$ActorsForV8$PendingDelivery$ = $.$init$ActorsForV8$PendingDelivery$;
    this.$ActorsForV8$PendingDelivery = this._$ActorsForV8$PendingDelivery = $.$ActorsForV8$PendingDelivery;
    this.$ActorsForV8$PendingDelivery$ = this._$ActorsForV8$PendingDelivery$ = $.$ActorsForV8$PendingDelivery$;
    this.$init$ActorsForV8$PromiseUtils$ = this._$init$ActorsForV8$PromiseUtils$ = $.$init$ActorsForV8$PromiseUtils$;
    this.$ActorsForV8$PromiseUtils = this._$ActorsForV8$PromiseUtils = $.$ActorsForV8$PromiseUtils;
    this.$ActorsForV8$PromiseUtils$ = this._$ActorsForV8$PromiseUtils$ = $.$ActorsForV8$PromiseUtils$;
    this.$init$ActorsForV8$RedirectReactor$ = this._$init$ActorsForV8$RedirectReactor$ = $.$init$ActorsForV8$RedirectReactor$;
    this.$ActorsForV8$RedirectReactor = this._$ActorsForV8$RedirectReactor = $.$ActorsForV8$RedirectReactor;
    this.$ActorsForV8$RedirectReactor$ = this._$ActorsForV8$RedirectReactor$ = $.$ActorsForV8$RedirectReactor$;
    this.$init$ActorsForV8$Ref$ = this._$init$ActorsForV8$Ref$ = $.$init$ActorsForV8$Ref$;
    this.$ActorsForV8$Ref = this._$ActorsForV8$Ref = $.$ActorsForV8$Ref;
    this.$ActorsForV8$Ref$ = this._$ActorsForV8$Ref$ = $.$ActorsForV8$Ref$;
    this.$init$ActorsForV8$Resolver$ = this._$init$ActorsForV8$Resolver$ = $.$init$ActorsForV8$Resolver$;
    this.$ActorsForV8$Resolver = this._$ActorsForV8$Resolver = $.$ActorsForV8$Resolver;
    this.$ActorsForV8$Resolver$ = this._$ActorsForV8$Resolver$ = $.$ActorsForV8$Resolver$;
    this.$init$ActorsForV8$Scheduler$ = this._$init$ActorsForV8$Scheduler$ = $.$init$ActorsForV8$Scheduler$;
    this.$ActorsForV8$Scheduler = this._$ActorsForV8$Scheduler = $.$ActorsForV8$Scheduler;
    this.$ActorsForV8$Scheduler$ = this._$ActorsForV8$Scheduler$ = $.$ActorsForV8$Scheduler$;
    this.$init$ActorsForV8$Timer$ = this._$init$ActorsForV8$Timer$ = $.$init$ActorsForV8$Timer$;
    this.$ActorsForV8$Timer = this._$ActorsForV8$Timer = $.$ActorsForV8$Timer;
    this.$ActorsForV8$Timer$ = this._$ActorsForV8$Timer$ = $.$ActorsForV8$Timer$;
    this.$init$ActorsForV8$WhenReactor$ = this._$init$ActorsForV8$WhenReactor$ = $.$init$ActorsForV8$WhenReactor$;
    this.$ActorsForV8$WhenReactor = this._$ActorsForV8$WhenReactor = $.$ActorsForV8$WhenReactor;
    this.$ActorsForV8$WhenReactor$ = this._$ActorsForV8$WhenReactor$ = $.$ActorsForV8$WhenReactor$;
    this.$enclosingObjects$ActorsForV8 = enclosingObjects;
    this.$super$ActorsForV8$slot = runtimeSuperclass;
    this.ActorsForV8 = function () {
     superBasicNew.call(this);
     this.$WeakMap$slot = nil;
     this.$List$slot = nil;
     this.$Message$slot = nil;
     this.$internalRefs$slot = nil;
     this.$Promise$slot = nil;
     this.$defaultActor$slot = nil;
     this.$ActorsForV8$Actor$slot = nil;
     this.$ActorsForV8$DOMActor$slot = nil;
     this.$ActorsForV8$EventualSendReactor$slot = nil;
     this.$ActorsForV8$InternalActor$slot = nil;
     this.$ActorsForV8$InternalBrokenRef$slot = nil;
     this.$ActorsForV8$InternalFarReference$slot = nil;
     this.$ActorsForV8$InternalLocalPromise$slot = nil;
     this.$ActorsForV8$InternalNearRef$slot = nil;
     this.$ActorsForV8$InternalRef$slot = nil;
     this.$ActorsForV8$InternalRemotePromise$slot = nil;
     this.$ActorsForV8$PendingDelivery$slot = nil;
     this.$ActorsForV8$PromiseUtils$slot = nil;
     this.$ActorsForV8$RedirectReactor$slot = nil;
     this.$ActorsForV8$Ref$slot = nil;
     this.$ActorsForV8$Resolver$slot = nil;
     this.$ActorsForV8$Scheduler$slot = nil;
     this.$ActorsForV8$Timer$slot = nil;
     this.$ActorsForV8$WhenReactor$slot = nil;
    };
    this.basicNew = this.ActorsForV8;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   let $ = this;
   this.debug = "Runtime meta mixin for ActorsForV8";
   this.slots = [];
   this.methods = [new MM("usingPlatform:", "public", true, 0)];
   this.nestedClasses = [];
   this.$usingPlatform$ = function ($p) {
    let t = new this.nonMeta.basicNew();
    t.$instance$initializer($p);
    return t;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for ActorsForV8";
     this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
     this.$enclosingObjects$ActorsForV8 = enclosingObjects;
     this.$super$ActorsForV8$slot = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$AliensForV8 = new function () {
  let $ = this;
  let $0 = this;
  this.debug = "Runtime mixin for AliensForV8";
  this.name = "AliensForV8";
  this.header = 462;
  this.slots = [
   new SM("global", "public", false, false),
   new SM("AliensForV8`Alien", "public", true, true),
   new SM("AliensForV8`Expat", "public", true, true)
  ];
  this.methods = [
   new MM("superInit`AliensForV8", "protected", true, 463),
   new MM("instance`initializer", "public", true, 464),
   new MM("alienate:", "protected", false, 465),
   new MM("copyUntilFirstColon:", "protected", false, 466),
   new MM("expatriate:", "protected", false, 467),
   new MM("expatriateBlock:", "protected", false, 468),
   new MM("Alien", "protected", true, 0),
   new MM("Expat", "protected", true, 0),
   new MM("init`global:", "public", true, 0),
   new MM("global", "public", true, 0),
   new MM("init`AliensForV8`Alien:", "public", true, 0),
   new MM("AliensForV8`Alien", "public", true, 0),
   new MM("AliensForV8`Alien:", "public", true, 0),
   new MM("init`AliensForV8`Expat:", "public", true, 0),
   new MM("AliensForV8`Expat", "public", true, 0),
   new MM("AliensForV8`Expat:", "public", true, 0)
  ];
  this.nestedClasses = [
   "AliensForV8`Alien",
   "AliensForV8`Expat"
  ];
  this.applications = [];
  this.$superInit$AliensForV8 = function ($p) {
   let self = this;
   self.$super$AliensForV8$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($p) {
   let self = this;
   self._$superInit$AliensForV8($p);
   self._$init$global$(self._$Alien().$wrapping$(theGlobalObject));
   return self;
  };
  this.$alienate$ = function ($jsObj) {
   let self = this;
   "TODO";
   if (null === $jsObj) {
    return nil;
   };
   if (typeof $jsObj === "string") {
    return $jsObj;
   };
   if (typeof $jsObj === "number") {
    return $jsObj;
   };
   if (typeof $jsObj === "boolean") {
    return $jsObj;
   };
   if (typeof $jsObj === "function") {
    return self._$Alien().$wrapping$($jsObj);
   };
   if ($jsObj instanceof self._$Object().runtimeClass.basicNew) {
    if ($jsObj.$isAlien()) {
     self._$Error().$signal$("Shouldnt be asked to double alienate...");
    };
    if ($jsObj.$isExpat()) {
     return $jsObj.nsTarget;
    };
    self._$Error().$signal$("Asked to alienate a raw Newspeak object...");
   };
   if ($jsObj instanceof Array) {
    return $jsObj.$collect$(function ($element) {
     return self._$alienate$($element);
    });
   };
   if ($jsObj instanceof Uint8Array) {
    return $jsObj;
   };
   return self._$Alien().$wrapping$($jsObj);
  };
  this.$copyUntilFirstColon$ = function ($sel) {
   let self = this;
   "BOGUS";
   {
    let $i = nil;
    let $$limit = nil;
    nil;
    $i = 2;
    $$limit = $sel.$size();
    for (; $$limit.$$greater$equal($i); ) {
     if ($sel.$at$($i).$$equal("$")) {
      return $sel.$copyFrom$to$(2, $i - 1);
     };
     $i = (1).$$plus($i);
    };
   };
   return $sel.$copyFrom$to$(2, $sel.$size());
  };
  this.$expatriate$ = function ($nsObj) {
   let self = this;
   "TODO";
   if (nil === $nsObj) {
    return null;
   };
   if (typeof $nsObj === "string") {
    return $nsObj;
   };
   if (typeof $nsObj === "number") {
    return $nsObj;
   };
   if (typeof $nsObj === "boolean") {
    return $nsObj;
   };
   if (typeof $nsObj === "function") {
    return self._$expatriateBlock$($nsObj);
   };
   if ($nsObj instanceof self._$Object().runtimeClass.basicNew) {
    if ($nsObj.$isAlien()) {
     return $nsObj.jsTarget;
    };
    if ($nsObj.$isExpat()) {
     self._$Error().$signal$("Shouldnt be asked to double expatriate...");
    };
    return self._$Expat().$wrapping$($nsObj);
   };
   if ($nsObj instanceof Array) {
    return $nsObj.$collect$(function ($element) {
     return self._$expatriate$($element);
    });
   };
   if ($nsObj instanceof Uint8Array) {
    return $nsObj;
   };
   self._$Error().$signal$("Asked to expatriate a raw JS object...");
   return self;
  };
  this.$expatriateBlock$ = function ($b) {
   let self = this;
   return function () {
    return self._$expatriate$($b.$valueWithArguments$(Array.prototype.slice.call(arguments, 0).$collect$(function ($ea) {
     return self._$alienate$($ea);
    })));
   };
  };
  this.$Alien = function () {
   if (nil === this.$AliensForV8$Alien$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$AliensForV8);
    let mixin = $.$AliensForV8$Alien;
    this.$AliensForV8$Alien$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$AliensForV8$Alien$slot;
  };
  this.$Expat = function () {
   if (nil === this.$AliensForV8$Expat$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$AliensForV8);
    let mixin = $.$AliensForV8$Expat;
    this.$AliensForV8$Expat$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$AliensForV8$Expat$slot;
  };
  this.$init$global$ = function (v) {
   this.$global$slot = v;
   return this;
  };
  this.$global = function () {
   return this.$global$slot;
  };
  this.$init$AliensForV8$Alien$ = function (v) {
   this.$AliensForV8$Alien$slot = v;
   return this;
  };
  this.$AliensForV8$Alien = function () {
   return this.$AliensForV8$Alien$slot;
  };
  this.$AliensForV8$Alien$ = function (v) {
   this.$AliensForV8$Alien$slot = v;
   return this;
  };
  this.$init$AliensForV8$Expat$ = function (v) {
   this.$AliensForV8$Expat$slot = v;
   return this;
  };
  this.$AliensForV8$Expat = function () {
   return this.$AliensForV8$Expat$slot;
  };
  this.$AliensForV8$Expat$ = function (v) {
   this.$AliensForV8$Expat$slot = v;
   return this;
  };
  this.$AliensForV8$Alien = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for AliensForV8`Alien";
   this.name = "AliensForV8`Alien";
   this.header = 469;
   this.slots = [];
   this.methods = [
    new MM("superInit`AliensForV8`Alien", "protected", true, 470),
    new MM("instance`initializer", "public", true, 471),
    new MM("applyConstructorUsingEval:", "protected", false, 472),
    new MM("at:", "public", false, 473),
    new MM("at:put:", "public", false, 474),
    new MM("doesNotUnderstand:", "protected", false, 475),
    new MM("isAlien", "public", false, 476),
    new MM("isExpat", "public", false, 477),
    new MM("isUndefined", "public", false, 478),
    new MM("printString", "public", false, 479),
    new MM("value", "public", false, 480),
    new MM("value:", "public", false, 481),
    new MM("value:value:", "public", false, 482),
    new MM("value:value:value:", "public", false, 483),
    new MM("valueWithArguments:", "public", false, 484)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$AliensForV8$Alien = function ($o) {
    let self = this;
    self.$super$AliensForV8$Alien$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($o) {
    let self = this;
    self._$superInit$AliensForV8$Alien($o);
    self.jsTarget = $o;
    return self;
   };
   this.$applyConstructorUsingEval$ = function ($jsArguments) {
    let self = this;
    function applyNewUsingEval(weirdConstructor, args) {
	var a = [];
	for (var i = 0; i < args.length; i++)
		a[i] = "args[" + i + "]";
	return eval("new weirdConstructor(" + a.join() + ")");
};
    return applyNewUsingEval(self.jsTarget, $jsArguments);
   };
   this.$at$ = function ($memberName) {
    let self = this;
    return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$(self.jsTarget[$memberName]);
   };
   this.$at$put$ = function ($memberName, $value) {
    let self = this;
    self.jsTarget[$memberName] = self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($value);
    return $value;
   };
   this.$doesNotUnderstand$ = function ($msg) {
    let self = this;
    let $jsTarget = nil;
    let $jsArguments = nil;
    let $jsSelector = nil;
    $jsTarget = self.jsTarget;
    $jsArguments = $msg.$arguments().$collect$(function ($arg) {
     return self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($arg);
    });
    $jsSelector = self.$enclosingObjects$AliensForV8$Alien[0]._$copyUntilFirstColon$($msg.$mangledSelector());
    if ($jsSelector.$$equal("new")) {
     let $args = nil;
     let $boundFunction = nil;
     if (!(typeof $jsTarget === "function")) {
      return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$(self._$applyConstructorUsingEval$($jsArguments));
     };
     $args = [null].concat($jsArguments);
     $boundFunction = $jsTarget.bind.apply($jsTarget, $args);
     return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$(new $boundFunction());
    } else {
     let $jsFunction = nil;
     let $jsResult = nil;
     $jsFunction = $jsTarget[$jsSelector];
     if ($jsFunction === undefined) {
      return self.$super$AliensForV8$Alien$slot._$doesNotUnderstand$.call(self, $msg);
     };
     $jsResult = $jsFunction.apply($jsTarget, $jsArguments);
     return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$($jsResult);
    };
    return self;
   };
   this.$isAlien = function () {
    let self = this;
    return true;
   };
   this.$isExpat = function () {
    let self = this;
    return false;
   };
   this.$isUndefined = function () {
    let self = this;
    return self.jsTarget === undefined;
   };
   this.$printString = function () {
    let self = this;
    if (self._$isUndefined()) {
     return "undefined";
    };
    return self.jsTarget.toString();
   };
   this.$value = function () {
    let self = this;
    let $jsTarget = nil;
    $jsTarget = self.jsTarget;
    return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$($jsTarget.call($jsTarget));
   };
   this.$value$ = function ($a1) {
    let self = this;
    let $jsTarget = nil;
    $jsTarget = self.jsTarget;
    return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$($jsTarget.call($jsTarget, self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($a1)));
   };
   this.$value$value$ = function ($a1, $a2) {
    let self = this;
    let $jsTarget = nil;
    $jsTarget = self.jsTarget;
    return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$($jsTarget.call($jsTarget, self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($a1), self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($a2)));
   };
   this.$value$value$value$ = function ($a1, $a2, $a3) {
    let self = this;
    let $jsTarget = nil;
    $jsTarget = self.jsTarget;
    return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$($jsTarget.call($jsTarget, self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($a1), self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($a2), self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($a3)));
   };
   this.$valueWithArguments$ = function ($args) {
    let self = this;
    let $jsTarget = nil;
    $jsTarget = self.jsTarget;
    return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$($jsTarget.apply($jsTarget, $args.$collect$(function ($nsArg) {
     return self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($nsArg);
    })));
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for AliensForV8`Alien";
     this._$superInit$AliensForV8$Alien = $.$superInit$AliensForV8$Alien;
     this.$superInit$AliensForV8$Alien = dnuCatcher("$superInit$AliensForV8$Alien");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$applyConstructorUsingEval$ = $.$applyConstructorUsingEval$;
     this.$applyConstructorUsingEval$ = dnuCatcher("$applyConstructorUsingEval$");
     this.$at$ = this._$at$ = $.$at$;
     this.$at$put$ = this._$at$put$ = $.$at$put$;
     this._$doesNotUnderstand$ = $.$doesNotUnderstand$;
     this.$doesNotUnderstand$ = dnuCatcher("$doesNotUnderstand$");
     this.dnu = $.$doesNotUnderstand$;
     this.$isAlien = this._$isAlien = $.$isAlien;
     this.$isExpat = this._$isExpat = $.$isExpat;
     this.$isUndefined = this._$isUndefined = $.$isUndefined;
     this.$printString = this._$printString = $.$printString;
     this.$value = this._$value = $.$value;
     this.$value$ = this._$value$ = $.$value$;
     this.$value$value$ = this._$value$value$ = $.$value$value$;
     this.$value$value$value$ = this._$value$value$value$ = $.$value$value$value$;
     this.$valueWithArguments$ = this._$valueWithArguments$ = $.$valueWithArguments$;
     this.$enclosingObjects$AliensForV8$Alien = enclosingObjects;
     this.$super$AliensForV8$Alien$slot = runtimeSuperclass;
     this["AliensForV8`Alien"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["AliensForV8`Alien"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for AliensForV8`Alien";
    this.slots = [];
    this.methods = [new MM("wrapping:", "public", true, 0)];
    this.nestedClasses = [];
    this.$wrapping$ = function ($o) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($o);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for AliensForV8`Alien";
      this.$wrapping$ = this._$wrapping$ = $.$wrapping$;
      this.$enclosingObjects$AliensForV8$Alien = enclosingObjects;
      this.$super$AliensForV8$Alien$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$AliensForV8$Expat = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for AliensForV8`Expat";
   this.name = "AliensForV8`Expat";
   this.header = 485;
   this.slots = [];
   this.methods = [
    new MM("superInit`AliensForV8`Expat", "protected", true, 486),
    new MM("instance`initializer", "public", true, 487),
    new MM("isAlien", "public", false, 488),
    new MM("isExpat", "public", false, 489)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$AliensForV8$Expat = function ($o) {
    let self = this;
    self.$super$AliensForV8$Expat$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($o) {
    let self = this;
    self._$superInit$AliensForV8$Expat($o);
    self.nsTarget = $o;
    return self;
   };
   this.$isAlien = function () {
    let self = this;
    return false;
   };
   this.$isExpat = function () {
    let self = this;
    return true;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for AliensForV8`Expat";
     this._$superInit$AliensForV8$Expat = $.$superInit$AliensForV8$Expat;
     this.$superInit$AliensForV8$Expat = dnuCatcher("$superInit$AliensForV8$Expat");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isAlien = this._$isAlien = $.$isAlien;
     this.$isExpat = this._$isExpat = $.$isExpat;
     this.$enclosingObjects$AliensForV8$Expat = enclosingObjects;
     this.$super$AliensForV8$Expat$slot = runtimeSuperclass;
     this["AliensForV8`Expat"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["AliensForV8`Expat"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for AliensForV8`Expat";
    this.slots = [];
    this.methods = [new MM("wrapping:", "public", true, 0)];
    this.nestedClasses = [];
    this.$wrapping$ = function ($o) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($o);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for AliensForV8`Expat";
      this.$wrapping$ = this._$wrapping$ = $.$wrapping$;
      this.$enclosingObjects$AliensForV8$Expat = enclosingObjects;
      this.$super$AliensForV8$Expat$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$AliensForV8$Alien.enclosingMixin = this;
  this.$AliensForV8$Expat.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for AliensForV8";
    this._$superInit$AliensForV8 = $.$superInit$AliensForV8;
    this.$superInit$AliensForV8 = dnuCatcher("$superInit$AliensForV8");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this._$alienate$ = $.$alienate$;
    this.$alienate$ = dnuCatcher("$alienate$");
    this._$copyUntilFirstColon$ = $.$copyUntilFirstColon$;
    this.$copyUntilFirstColon$ = dnuCatcher("$copyUntilFirstColon$");
    this._$expatriate$ = $.$expatriate$;
    this.$expatriate$ = dnuCatcher("$expatriate$");
    this._$expatriateBlock$ = $.$expatriateBlock$;
    this.$expatriateBlock$ = dnuCatcher("$expatriateBlock$");
    this._$Alien = $.$Alien;
    this.$Alien = dnuCatcher("$Alien");
    this._$Expat = $.$Expat;
    this.$Expat = dnuCatcher("$Expat");
    this.$init$global$ = this._$init$global$ = $.$init$global$;
    this.$global = this._$global = $.$global;
    this.$init$AliensForV8$Alien$ = this._$init$AliensForV8$Alien$ = $.$init$AliensForV8$Alien$;
    this.$AliensForV8$Alien = this._$AliensForV8$Alien = $.$AliensForV8$Alien;
    this.$AliensForV8$Alien$ = this._$AliensForV8$Alien$ = $.$AliensForV8$Alien$;
    this.$init$AliensForV8$Expat$ = this._$init$AliensForV8$Expat$ = $.$init$AliensForV8$Expat$;
    this.$AliensForV8$Expat = this._$AliensForV8$Expat = $.$AliensForV8$Expat;
    this.$AliensForV8$Expat$ = this._$AliensForV8$Expat$ = $.$AliensForV8$Expat$;
    this.$enclosingObjects$AliensForV8 = enclosingObjects;
    this.$super$AliensForV8$slot = runtimeSuperclass;
    this.AliensForV8 = function () {
     superBasicNew.call(this);
     this.$global$slot = nil;
     this.$AliensForV8$Alien$slot = nil;
     this.$AliensForV8$Expat$slot = nil;
    };
    this.basicNew = this.AliensForV8;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   let $ = this;
   this.debug = "Runtime meta mixin for AliensForV8";
   this.slots = [];
   this.methods = [new MM("usingPlatform:", "public", true, 0)];
   this.nestedClasses = [];
   this.$usingPlatform$ = function ($p) {
    let t = new this.nonMeta.basicNew();
    t.$instance$initializer($p);
    return t;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for AliensForV8";
     this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
     this.$enclosingObjects$AliensForV8 = enclosingObjects;
     this.$super$AliensForV8$slot = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$Collections = new function () {
  let $ = this;
  let $0 = this;
  this.debug = "Runtime mixin for Collections";
  this.name = "Collections";
  this.header = 490;
  this.slots = [
   new SM("MutableAddableList", "private", false, false),
   new SM("ListReadStream", "private", false, false),
   new SM("ListReadWriteStream", "private", false, false),
   new SM("WeakArray", "public", false, false),
   new SM("Collections`AbstractList", "public", true, true),
   new SM("Collections`AddableList", "public", true, true),
   new SM("Collections`Association", "public", true, true),
   new SM("Collections`Collection", "public", true, true),
   new SM("Collections`HashedCollection", "public", true, true),
   new SM("Collections`IdentityMutableHashedMap", "public", true, true),
   new SM("Collections`IdentitySet", "public", true, true),
   new SM("Collections`Interval", "public", true, true),
   new SM("Collections`MutableArrayList", "public", true, true),
   new SM("Collections`MutableHashedMap", "public", true, true),
   new SM("Collections`MutableList", "public", true, true),
   new SM("Collections`Set", "public", true, true),
   new SM("Collections`SortedList", "public", true, true)
  ];
  this.methods = [
   new MM("superInit`Collections", "protected", true, 491),
   new MM("instance`initializer", "public", true, 492),
   new MM("IdentityMap", "public", false, 493),
   new MM("List", "public", false, 494),
   new MM("Map", "public", false, 495),
   new MM("error:", "protected", false, 496),
   new MM("AbstractList", "protected", true, 0),
   new MM("AddableList", "protected", true, 0),
   new MM("Association", "public", true, 0),
   new MM("Collection", "public", true, 0),
   new MM("HashedCollection", "protected", true, 0),
   new MM("IdentityMutableHashedMap", "protected", true, 0),
   new MM("IdentitySet", "public", true, 0),
   new MM("Interval", "public", true, 0),
   new MM("MutableArrayList", "protected", true, 0),
   new MM("MutableHashedMap", "protected", true, 0),
   new MM("MutableList", "protected", true, 0),
   new MM("Set", "public", true, 0),
   new MM("SortedList", "public", true, 0),
   new MM("init`MutableAddableList:", "private", true, 0),
   new MM("MutableAddableList", "private", true, 0),
   new MM("init`ListReadStream:", "private", true, 0),
   new MM("ListReadStream", "private", true, 0),
   new MM("init`ListReadWriteStream:", "private", true, 0),
   new MM("ListReadWriteStream", "private", true, 0),
   new MM("init`WeakArray:", "public", true, 0),
   new MM("WeakArray", "public", true, 0),
   new MM("init`Collections`AbstractList:", "public", true, 0),
   new MM("Collections`AbstractList", "public", true, 0),
   new MM("Collections`AbstractList:", "public", true, 0),
   new MM("init`Collections`AddableList:", "public", true, 0),
   new MM("Collections`AddableList", "public", true, 0),
   new MM("Collections`AddableList:", "public", true, 0),
   new MM("init`Collections`Association:", "public", true, 0),
   new MM("Collections`Association", "public", true, 0),
   new MM("Collections`Association:", "public", true, 0),
   new MM("init`Collections`Collection:", "public", true, 0),
   new MM("Collections`Collection", "public", true, 0),
   new MM("Collections`Collection:", "public", true, 0),
   new MM("init`Collections`HashedCollection:", "public", true, 0),
   new MM("Collections`HashedCollection", "public", true, 0),
   new MM("Collections`HashedCollection:", "public", true, 0),
   new MM("init`Collections`IdentityMutableHashedMap:", "public", true, 0),
   new MM("Collections`IdentityMutableHashedMap", "public", true, 0),
   new MM("Collections`IdentityMutableHashedMap:", "public", true, 0),
   new MM("init`Collections`IdentitySet:", "public", true, 0),
   new MM("Collections`IdentitySet", "public", true, 0),
   new MM("Collections`IdentitySet:", "public", true, 0),
   new MM("init`Collections`Interval:", "public", true, 0),
   new MM("Collections`Interval", "public", true, 0),
   new MM("Collections`Interval:", "public", true, 0),
   new MM("init`Collections`MutableArrayList:", "public", true, 0),
   new MM("Collections`MutableArrayList", "public", true, 0),
   new MM("Collections`MutableArrayList:", "public", true, 0),
   new MM("init`Collections`MutableHashedMap:", "public", true, 0),
   new MM("Collections`MutableHashedMap", "public", true, 0),
   new MM("Collections`MutableHashedMap:", "public", true, 0),
   new MM("init`Collections`MutableList:", "public", true, 0),
   new MM("Collections`MutableList", "public", true, 0),
   new MM("Collections`MutableList:", "public", true, 0),
   new MM("init`Collections`Set:", "public", true, 0),
   new MM("Collections`Set", "public", true, 0),
   new MM("Collections`Set:", "public", true, 0),
   new MM("init`Collections`SortedList:", "public", true, 0),
   new MM("Collections`SortedList", "public", true, 0),
   new MM("Collections`SortedList:", "public", true, 0)
  ];
  this.nestedClasses = [
   "Collections`AbstractList",
   "Collections`AddableList",
   "Collections`Association",
   "Collections`Collection",
   "Collections`HashedCollection",
   "Collections`IdentityMutableHashedMap",
   "Collections`IdentitySet",
   "Collections`Interval",
   "Collections`MutableArrayList",
   "Collections`MutableHashedMap",
   "Collections`MutableList",
   "Collections`Set",
   "Collections`SortedList"
  ];
  this.applications = [];
  this.$superInit$Collections = function ($p) {
   let self = this;
   self.$super$Collections$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($p) {
   let self = this;
   self._$superInit$Collections($p);
   $0.$init$MutableAddableList$(self, self._$MutableList().$mixinApply$(self._$AddableList()));
   $0.$init$ListReadStream$(self, $p.$streams().$SeqCltnReadStream());
   $0.$init$ListReadWriteStream$(self, $p.$streams().$SeqCltnReadWriteStream());
   self._$init$WeakArray$(self._$Future().$computing$(function () {
    return $p.$squeak().$WeakArray();
   }));
   return self;
  };
  this.$IdentityMap = function () {
   let self = this;
   return self._$IdentityMutableHashedMap();
  };
  this.$List = function () {
   let self = this;
   return self._$MutableArrayList();
  };
  this.$Map = function () {
   let self = this;
   return self._$MutableHashedMap();
  };
  this.$error$ = function ($s) {
   let self = this;
   return self._$Error().$signal$($s);
  };
  this.$AbstractList = function () {
   if (nil === this.$Collections$AbstractList$slot) {
    let self = this;
    let superclass = self._$Collection();
    let enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    let mixin = $.$Collections$AbstractList;
    this.$Collections$AbstractList$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$AbstractList$slot;
  };
  this.$AddableList = function () {
   if (nil === this.$Collections$AddableList$slot) {
    let self = this;
    let superclass = self._$AbstractList();
    let enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    let mixin = $.$Collections$AddableList;
    this.$Collections$AddableList$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$AddableList$slot;
  };
  this.$Association = function () {
   if (nil === this.$Collections$Association$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    let mixin = $.$Collections$Association;
    this.$Collections$Association$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$Association$slot;
  };
  this.$Collection = function () {
   if (nil === this.$Collections$Collection$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    let mixin = $.$Collections$Collection;
    this.$Collections$Collection$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$Collection$slot;
  };
  this.$HashedCollection = function () {
   if (nil === this.$Collections$HashedCollection$slot) {
    let self = this;
    let superclass = self._$Collection();
    let enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    let mixin = $.$Collections$HashedCollection;
    this.$Collections$HashedCollection$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$HashedCollection$slot;
  };
  this.$IdentityMutableHashedMap = function () {
   if (nil === this.$Collections$IdentityMutableHashedMap$slot) {
    let self = this;
    let superclass = self._$MutableHashedMap();
    let enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    let mixin = $.$Collections$IdentityMutableHashedMap;
    this.$Collections$IdentityMutableHashedMap$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$IdentityMutableHashedMap$slot;
  };
  this.$IdentitySet = function () {
   if (nil === this.$Collections$IdentitySet$slot) {
    let self = this;
    let superclass = self._$Set();
    let enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    let mixin = $.$Collections$IdentitySet;
    this.$Collections$IdentitySet$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$IdentitySet$slot;
  };
  this.$Interval = function () {
   if (nil === this.$Collections$Interval$slot) {
    let self = this;
    let superclass = self._$AbstractList();
    let enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    let mixin = $.$Collections$Interval;
    this.$Collections$Interval$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$Interval$slot;
  };
  this.$MutableArrayList = function () {
   if (nil === this.$Collections$MutableArrayList$slot) {
    let self = this;
    let superclass = $0.$MutableAddableList(self);
    let enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    let mixin = $.$Collections$MutableArrayList;
    this.$Collections$MutableArrayList$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$MutableArrayList$slot;
  };
  this.$MutableHashedMap = function () {
   if (nil === this.$Collections$MutableHashedMap$slot) {
    let self = this;
    let superclass = self._$HashedCollection();
    let enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    let mixin = $.$Collections$MutableHashedMap;
    this.$Collections$MutableHashedMap$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$MutableHashedMap$slot;
  };
  this.$MutableList = function () {
   if (nil === this.$Collections$MutableList$slot) {
    let self = this;
    let superclass = self._$AbstractList();
    let enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    let mixin = $.$Collections$MutableList;
    this.$Collections$MutableList$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$MutableList$slot;
  };
  this.$Set = function () {
   if (nil === this.$Collections$Set$slot) {
    let self = this;
    let superclass = self._$HashedCollection();
    let enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    let mixin = $.$Collections$Set;
    this.$Collections$Set$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$Set$slot;
  };
  this.$SortedList = function () {
   if (nil === this.$Collections$SortedList$slot) {
    let self = this;
    let superclass = self._$AddableList();
    let enclosingObjects = [this].concat(this.$enclosingObjects$Collections);
    let mixin = $.$Collections$SortedList;
    this.$Collections$SortedList$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Collections$SortedList$slot;
  };
  this.$init$MutableAddableList$ = function (self, v) {
   self.$MutableAddableList$slot = v;
   return self;
  };
  this.$MutableAddableList = function (self) {
   return self.$MutableAddableList$slot;
  };
  this.$init$ListReadStream$ = function (self, v) {
   self.$ListReadStream$slot = v;
   return self;
  };
  this.$ListReadStream = function (self) {
   return self.$ListReadStream$slot;
  };
  this.$init$ListReadWriteStream$ = function (self, v) {
   self.$ListReadWriteStream$slot = v;
   return self;
  };
  this.$ListReadWriteStream = function (self) {
   return self.$ListReadWriteStream$slot;
  };
  this.$init$WeakArray$ = function (v) {
   this.$WeakArray$slot = v;
   return this;
  };
  this.$WeakArray = function () {
   return this.$WeakArray$slot;
  };
  this.$init$Collections$AbstractList$ = function (v) {
   this.$Collections$AbstractList$slot = v;
   return this;
  };
  this.$Collections$AbstractList = function () {
   return this.$Collections$AbstractList$slot;
  };
  this.$Collections$AbstractList$ = function (v) {
   this.$Collections$AbstractList$slot = v;
   return this;
  };
  this.$init$Collections$AddableList$ = function (v) {
   this.$Collections$AddableList$slot = v;
   return this;
  };
  this.$Collections$AddableList = function () {
   return this.$Collections$AddableList$slot;
  };
  this.$Collections$AddableList$ = function (v) {
   this.$Collections$AddableList$slot = v;
   return this;
  };
  this.$init$Collections$Association$ = function (v) {
   this.$Collections$Association$slot = v;
   return this;
  };
  this.$Collections$Association = function () {
   return this.$Collections$Association$slot;
  };
  this.$Collections$Association$ = function (v) {
   this.$Collections$Association$slot = v;
   return this;
  };
  this.$init$Collections$Collection$ = function (v) {
   this.$Collections$Collection$slot = v;
   return this;
  };
  this.$Collections$Collection = function () {
   return this.$Collections$Collection$slot;
  };
  this.$Collections$Collection$ = function (v) {
   this.$Collections$Collection$slot = v;
   return this;
  };
  this.$init$Collections$HashedCollection$ = function (v) {
   this.$Collections$HashedCollection$slot = v;
   return this;
  };
  this.$Collections$HashedCollection = function () {
   return this.$Collections$HashedCollection$slot;
  };
  this.$Collections$HashedCollection$ = function (v) {
   this.$Collections$HashedCollection$slot = v;
   return this;
  };
  this.$init$Collections$IdentityMutableHashedMap$ = function (v) {
   this.$Collections$IdentityMutableHashedMap$slot = v;
   return this;
  };
  this.$Collections$IdentityMutableHashedMap = function () {
   return this.$Collections$IdentityMutableHashedMap$slot;
  };
  this.$Collections$IdentityMutableHashedMap$ = function (v) {
   this.$Collections$IdentityMutableHashedMap$slot = v;
   return this;
  };
  this.$init$Collections$IdentitySet$ = function (v) {
   this.$Collections$IdentitySet$slot = v;
   return this;
  };
  this.$Collections$IdentitySet = function () {
   return this.$Collections$IdentitySet$slot;
  };
  this.$Collections$IdentitySet$ = function (v) {
   this.$Collections$IdentitySet$slot = v;
   return this;
  };
  this.$init$Collections$Interval$ = function (v) {
   this.$Collections$Interval$slot = v;
   return this;
  };
  this.$Collections$Interval = function () {
   return this.$Collections$Interval$slot;
  };
  this.$Collections$Interval$ = function (v) {
   this.$Collections$Interval$slot = v;
   return this;
  };
  this.$init$Collections$MutableArrayList$ = function (v) {
   this.$Collections$MutableArrayList$slot = v;
   return this;
  };
  this.$Collections$MutableArrayList = function () {
   return this.$Collections$MutableArrayList$slot;
  };
  this.$Collections$MutableArrayList$ = function (v) {
   this.$Collections$MutableArrayList$slot = v;
   return this;
  };
  this.$init$Collections$MutableHashedMap$ = function (v) {
   this.$Collections$MutableHashedMap$slot = v;
   return this;
  };
  this.$Collections$MutableHashedMap = function () {
   return this.$Collections$MutableHashedMap$slot;
  };
  this.$Collections$MutableHashedMap$ = function (v) {
   this.$Collections$MutableHashedMap$slot = v;
   return this;
  };
  this.$init$Collections$MutableList$ = function (v) {
   this.$Collections$MutableList$slot = v;
   return this;
  };
  this.$Collections$MutableList = function () {
   return this.$Collections$MutableList$slot;
  };
  this.$Collections$MutableList$ = function (v) {
   this.$Collections$MutableList$slot = v;
   return this;
  };
  this.$init$Collections$Set$ = function (v) {
   this.$Collections$Set$slot = v;
   return this;
  };
  this.$Collections$Set = function () {
   return this.$Collections$Set$slot;
  };
  this.$Collections$Set$ = function (v) {
   this.$Collections$Set$slot = v;
   return this;
  };
  this.$init$Collections$SortedList$ = function (v) {
   this.$Collections$SortedList$slot = v;
   return this;
  };
  this.$Collections$SortedList = function () {
   return this.$Collections$SortedList$slot;
  };
  this.$Collections$SortedList$ = function (v) {
   this.$Collections$SortedList$slot = v;
   return this;
  };
  this.$Collections$AbstractList = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Collections`AbstractList";
   this.name = "Collections`AbstractList";
   this.header = 497;
   this.slots = [];
   this.methods = [
    new MM("superInit`Collections`AbstractList", "protected", true, 498),
    new MM("instance`initializer", "public", true, 499),
    new MM(",", "public", false, 500),
    new MM("allButFirst", "public", false, 501),
    new MM("allButLast", "public", false, 502),
    new MM("anyOne", "public", false, 503),
    new MM("at:", "public", false, 504),
    new MM("at:ifAbsent:", "public", false, 505),
    new MM("binarySearchFor:between:and:toCompare:", "protected", false, 506),
    new MM("binarySearchFor:toCompare:", "public", false, 507),
    new MM("collect:", "public", false, 508),
    new MM("collectUsingAtPut:", "protected", false, 509),
    new MM("collection:matchesElementsAt:", "protected", false, 510),
    new MM("copyFrom:to:", "public", false, 511),
    new MM("copyReplaceAll:with:", "public", false, 512),
    new MM("copyReplaceFrom:to:with:", "protected", false, 513),
    new MM("copyWith:", "public", false, 514),
    new MM("copyWithSize:", "public", false, 515),
    new MM("copyWithout:", "public", false, 516),
    new MM("do:", "public", false, 517),
    new MM("doWithIndex:", "public", false, 518),
    new MM("findFirst:", "public", false, 519),
    new MM("findLast:", "public", false, 520),
    new MM("first", "public", false, 521),
    new MM("hasSameElementsAndOrderAs:", "public", false, 522),
    new MM("hash", "public", false, 523),
    new MM("hashAt:", "protected", false, 524),
    new MM("includesIndex:", "protected", false, 525),
    new MM("indexOf:", "public", false, 526),
    new MM("indexOf:ifAbsent:", "public", false, 527),
    new MM("indexOfSubCollection:startingAt:", "protected", false, 528),
    new MM("indexOfSubCollection:startingAt:ifAbsent:", "protected", false, 529),
    new MM("indicesOfSubCollection:", "protected", false, 530),
    new MM("indicesOfSubCollection:startingAt:", "protected", false, 531),
    new MM("isKindOfList", "public", false, 532),
    new MM("isSequenceable", "public", false, 533),
    new MM("isSortedBy:", "protected", false, 534),
    new MM("keysAndValuesDo:", "public", false, 535),
    new MM("last", "public", false, 536),
    new MM("newCopyOfSize:thatCanAlsoHoldElementsOf:", "public", false, 537),
    new MM("newForCollectUsingAtPut:", "protected", false, 538),
    new MM("readStream", "public", false, 539),
    new MM("reverse", "public", false, 540),
    new MM("reverseDo:", "public", false, 541),
    new MM("size", "public", false, 542),
    new MM("species", "public", false, 543),
    new MM("with:do:", "public", false, 544)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$AbstractList = function () {
    let self = this;
    self.$super$Collections$AbstractList$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Collections$AbstractList();
    return self;
   };
   this.$$comma = function ($other) {
    let self = this;
    return self._$copyReplaceFrom$to$with$(self._$size() + 1, self._$size(), $other);
   };
   this.$allButFirst = function () {
    let self = this;
    return self._$copyFrom$to$(2, self._$size());
   };
   this.$allButLast = function () {
    let self = this;
    return self._$copyFrom$to$(1, self._$size() - 1);
   };
   this.$anyOne = function () {
    let self = this;
    return self._$first();
   };
   this.$at$ = function ($index) {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$at$ifAbsent$ = function ($index, $fail) {
    let self = this;
    return $index.$between$and$(1, self._$size()).$ifTrue$ifFalse$(function () {
     return self._$at$($index);
    }, function () {
     return $fail.$value();
    });
   };
   this.$binarySearchFor$between$and$toCompare$ = function ($el, $start, $end, $compare) {
    let self = this;
    let $low = nil;
    let $high = nil;
    $low = $start;
    $high = $end;
    {
     for (; $low.$$less$equal($high); ) {
      let $mid = nil;
      $mid = ($low + $high).$$over$over(2);
      if ($compare.$value$value$(self._$at$($mid), $el)) {
       $low = $mid + 1;
      } else {
       $high = $mid - 1;
      };
     };
    };
    return $low;
   };
   this.$binarySearchFor$toCompare$ = function ($el, $compare) {
    let self = this;
    "BOGUS";
    return self._$binarySearchFor$between$and$toCompare$($el, 1, self._$size(), $compare);
   };
   this.$collect$ = function ($map) {
    let self = this;
    return self._$collectUsingAtPut$($map);
   };
   this.$collectUsingAtPut$ = function ($map) {
    let self = this;
    let $c = nil;
    $c = self._$newForCollectUsingAtPut$(self._$size());
    {
     let $i = nil;
     let $$limit = nil;
     nil;
     $i = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($i); ) {
      $c.$at$put$($i, $map.$value$(self._$at$($i)));
      $i = (1).$$plus($i);
     };
    };
    return $c;
   };
   this.$collection$matchesElementsAt$ = function ($cltn, $index) {
    let self = this;
    let $offset = nil;
    $offset = $index - 1;
    {
     let $i = nil;
     let $$limit = nil;
     nil;
     $i = 1;
     $$limit = $cltn.$size();
     for (; $$limit.$$greater$equal($i); ) {
      if (!$cltn.$at$($i).$$equal(self._$at$($i + $offset))) {
       return false;
      };
      $i = (1).$$plus($i);
     };
    };
    return true;
   };
   this.$copyFrom$to$ = function ($start, $stop) {
    let self = this;
    let $cp = nil;
    let $safeme = nil;
    $safeme = self;
    $cp = self._$newCopyOfSize$thatCanAlsoHoldElementsOf$(($stop - $start) + 1, $safeme);
    $cp.$replaceFrom$to$with$startingAt$(1, $cp.$size(), $safeme, $start);
    return $cp;
   };
   this.$copyReplaceAll$with$ = function ($oldSub, $newSub) {
    let self = this;
    let $spots = nil;
    let $subDelta = nil;
    let $copy = nil;
    let $current = nil;
    let $offset = nil;
    let $newSubSize = nil;
    let $oldSubSize = nil;
    let $safeself = nil;
    $newSubSize = $newSub.$size();
    $oldSubSize = $oldSub.$size();
    $subDelta = $newSub.$size() - $oldSubSize;
    $spots = self._$indicesOfSubCollection$($oldSub);
    $safeself = self;
    if ($spots.$size().$$equal(0)) {
     $copy = $safeself.$newCopyOfSize$thatCanAlsoHoldElementsOf$(self._$size(), $newSub);
     $copy.$replaceFrom$to$with$(1, self._$size(), $safeself);
     return $copy;
    };
    $copy = $safeself.$newCopyOfSize$thatCanAlsoHoldElementsOf$(self._$size() + ($spots.$size() * $subDelta), $newSub);
    $current = 1;
    $offset = 0;
    $spots.$do$(function ($spot) {
     let $offspot = nil;
     $offspot = $spot + $offset;
     $copy.$replaceFrom$to$with$startingAt$($current + $offset, $offspot - 1, $safeself, $current);
     $copy.$replaceFrom$to$with$($offspot, ($offspot + $newSubSize) - 1, $newSub);
     $current = $spot + $oldSubSize;
     return $offset = $offset + $subDelta;
    });
    $copy.$replaceFrom$to$with$startingAt$($current + $offset, $copy.$size(), $safeself, $current);
    return $copy;
   };
   this.$copyReplaceFrom$to$with$ = function ($start, $stop, $other) {
    let self = this;
    let $copy = nil;
    let $sizeChange = nil;
    let $sz = nil;
    let $afterNew = nil;
    let $safeself = nil;
    $safeself = self;
    $sizeChange = $other.$size() - (($stop - $start) + 1);
    $sz = self._$size();
    $copy = $safeself.$newCopyOfSize$thatCanAlsoHoldElementsOf$($sz + $sizeChange, $other);
    $afterNew = $start + $other.$size();
    $copy.$replaceFrom$to$with$startingAt$(1, $start - 1, $safeself, 1);
    $copy.$replaceFrom$to$with$($start, $afterNew - 1, $other);
    $copy.$replaceFrom$to$with$startingAt$($afterNew, $copy.$size(), self, $stop + 1);
    return $copy;
   };
   this.$copyWith$ = function ($element) {
    let self = this;
    return self._$$comma([$element]);
   };
   this.$copyWithSize$ = function ($s) {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$copyWithout$ = function ($el) {
    let self = this;
    let $safeself = nil;
    $safeself = self;
    return $safeself.$copyReplaceAll$with$(self._$Array().$with$($el), []);
   };
   this.$do$ = function ($f) {
    let self = this;
    {
     let $i = nil;
     let $$limit = nil;
     nil;
     $i = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($i); ) {
      $f.$value$(self._$at$($i));
      $i = (1).$$plus($i);
     };
    };
    return self;
   };
   this.$doWithIndex$ = function ($f) {
    let self = this;
    {
     let $i = nil;
     let $$limit = nil;
     nil;
     $i = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($i); ) {
      $f.$value$value$(self._$at$($i), $i);
      $i = (1).$$plus($i);
     };
    };
    return self;
   };
   this.$findFirst$ = function ($predicate) {
    let self = this;
    {
     let $i = nil;
     let $$limit = nil;
     nil;
     $i = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($i); ) {
      if ($predicate.$value$(self._$at$($i))) {
       return $i;
      };
      $i = (1).$$plus($i);
     };
    };
    return 0;
   };
   this.$findLast$ = function ($predicate) {
    let self = this;
    {
     let $i = nil;
     nil;
     $i = self._$size();
     for (; (1).$$less$equal($i); ) {
      if ($predicate.$value$(self._$at$($i))) {
       return $i;
      };
      $i = (-1).$$plus($i);
     };
    };
    return 0;
   };
   this.$first = function () {
    let self = this;
    return self._$at$(1);
   };
   this.$hasSameElementsAndOrderAs$ = function ($other) {
    let self = this;
    "ACCESSBOGUS";
    if (!self._$size().$$equal($other.$size())) {
     return false;
    };
    {
     let $i = nil;
     let $$limit = nil;
     nil;
     $i = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($i); ) {
      if (!self._$at$($i).$$equal($other.$at$($i))) {
       return false;
      };
      $i = (1).$$plus($i);
     };
    };
    return true;
   };
   this.$hash = function () {
    let self = this;
    let $sz = nil;
    let $val = nil;
    $sz = self._$size();
    if ($sz < 2) {
     return $sz.$$equal(1).$ifTrue$ifFalse$(function () {
      return self._$hashAt$(1);
     }, function () {
      return 1;
     });
    };
    $val = self._$hashAt$(1);
    $val = $val.$bitShift$(3).$bitXor$(self._$hashAt$(2).$bitXor$($val));
    $val = $val.$bitShift$(3).$bitXor$(self._$hashAt$($sz).$bitXor$($val));
    $val = $val.$bitShift$(3).$bitXor$(self._$hashAt$($sz - 1).$bitXor$($val));
    $val = $val.$bitShift$(3).$bitXor$(self._$hashAt$($sz.$bitShift$(-1) + 1).$bitXor$($val));
    $val = $val.$bitShift$(3).$bitXor$($sz.$bitXor$($val));
    $val = $val.$bitAnd$(1048575);
    return $val;
   };
   this.$hashAt$ = function ($index) {
    let self = this;
    return self._$at$($index).$hash();
   };
   this.$includesIndex$ = function ($index) {
    let self = this;
    return $index.$between$and$(1, self._$size());
   };
   this.$indexOf$ = function ($element) {
    let self = this;
    return self._$indexOf$ifAbsent$($element, function () {
     return 0;
    });
   };
   this.$indexOf$ifAbsent$ = function ($element, $f) {
    let self = this;
    {
     let $index = nil;
     let $$limit = nil;
     nil;
     $index = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($index); ) {
      if (self._$at$($index).$$equal($element)) {
       return $index;
      };
      $index = (1).$$plus($index);
     };
    };
    return $f.$value();
   };
   this.$indexOfSubCollection$startingAt$ = function ($sub, $index) {
    let self = this;
    return self._$indexOfSubCollection$startingAt$ifAbsent$($sub, $index, function () {
     return self.$enclosingObjects$Collections$AbstractList[0]._$error$("subcollection not found");
    });
   };
   this.$indexOfSubCollection$startingAt$ifAbsent$ = function ($sub, $index, $f) {
    let self = this;
    {
     let $i = nil;
     let $$limit = nil;
     nil;
     $i = $index;
     $$limit = (self._$size() - $sub.$size()) + 1;
     for (; $$limit.$$greater$equal($i); ) {
      if (self._$collection$matchesElementsAt$($sub, $i)) {
       return $i;
      };
      $i = (1).$$plus($i);
     };
    };
    return $f.$value();
   };
   this.$indicesOfSubCollection$ = function ($sub) {
    let self = this;
    return self._$indicesOfSubCollection$startingAt$($sub, 1);
   };
   this.$indicesOfSubCollection$startingAt$ = function ($sub, $index) {
    let self = this;
    let $indices = nil;
    let $subSize = nil;
    let $current = nil;
    $indices = self.$enclosingObjects$Collections$AbstractList[0]._$MutableArrayList().$new();
    $subSize = $sub.$size();
    $current = $index;
    {
     $current = self._$indexOfSubCollection$startingAt$ifAbsent$($sub, $current, function () {
      return 0;
     });
     for (; !$current.$$equal(0); ) {
      $indices.$addLast$($current);
      $current = $current + $subSize;
      $current = self._$indexOfSubCollection$startingAt$ifAbsent$($sub, $current, function () {
       return 0;
      });
     };
    };
    return $indices;
   };
   this.$isKindOfList = function () {
    let self = this;
    return true;
   };
   this.$isSequenceable = function () {
    let self = this;
    return true;
   };
   this.$isSortedBy$ = function ($compare) {
    let self = this;
    let $last = nil;
    if (self._$size() < 2) {
     return true;
    };
    $last = self._$at$(1);
    {
     let $i = nil;
     let $$limit = nil;
     nil;
     $i = 2;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($i); ) {
      if (!$compare.$value$value$($last, self._$at$($i))) {
       return false;
      };
      $i = (1).$$plus($i);
     };
    };
    return true;
   };
   this.$keysAndValuesDo$ = function ($action) {
    let self = this;
    {
     let $index = nil;
     let $$limit = nil;
     nil;
     $index = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($index); ) {
      $action.$value$value$($index, self._$at$($index));
      $index = (1).$$plus($index);
     };
    };
    return self;
   };
   this.$last = function () {
    let self = this;
    return self._$at$(self._$size());
   };
   this.$newCopyOfSize$thatCanAlsoHoldElementsOf$ = function ($size, $other) {
    let self = this;
    return self._$Array().$new$($size);
   };
   this.$newForCollectUsingAtPut$ = function ($size) {
    let self = this;
    return self._$Array().$new$($size);
   };
   this.$readStream = function () {
    let self = this;
    return $0.$ListReadStream(self.$enclosingObjects$Collections$AbstractList[0]).$on$(self);
   };
   this.$reverse = function () {
    let self = this;
    let $copy = nil;
    "BOGUS";
    $copy = self._$newCopyOfSize$thatCanAlsoHoldElementsOf$(self._$size(), self);
    {
     let $i = nil;
     let $$limit = nil;
     nil;
     $i = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($i); ) {
      let $el = nil;
      $el = self._$at$($i);
      $copy.$at$put$((self._$size() + 1) - $i, $el);
      $i = (1).$$plus($i);
     };
    };
    return $copy;
   };
   this.$reverseDo$ = function ($action) {
    let self = this;
    {
     let $index = nil;
     nil;
     $index = self._$size();
     for (; (1).$$less$equal($index); ) {
      $action.$value$(self._$at$($index));
      $index = (-1).$$plus($index);
     };
    };
    return self;
   };
   this.$size = function () {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$species = function () {
    let self = this;
    return self._$Array();
   };
   this.$with$do$ = function ($other, $action) {
    let self = this;
    self._$assert$message$(function () {
     return self._$size().$$equal($other.$size());
    }, "Cannot jointly interate collections of different size");
    {
     let $index = nil;
     let $$limit = nil;
     nil;
     $index = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($index); ) {
      $action.$value$value$(self._$at$($index), $other.$at$($index));
      $index = (1).$$plus($index);
     };
    };
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`AbstractList";
     this._$superInit$Collections$AbstractList = $.$superInit$Collections$AbstractList;
     this.$superInit$Collections$AbstractList = dnuCatcher("$superInit$Collections$AbstractList");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$$comma = this._$$comma = $.$$comma;
     this.$allButFirst = this._$allButFirst = $.$allButFirst;
     this.$allButLast = this._$allButLast = $.$allButLast;
     this.$anyOne = this._$anyOne = $.$anyOne;
     this.$at$ = this._$at$ = $.$at$;
     this.$at$ifAbsent$ = this._$at$ifAbsent$ = $.$at$ifAbsent$;
     this._$binarySearchFor$between$and$toCompare$ = $.$binarySearchFor$between$and$toCompare$;
     this.$binarySearchFor$between$and$toCompare$ = dnuCatcher("$binarySearchFor$between$and$toCompare$");
     this.$binarySearchFor$toCompare$ = this._$binarySearchFor$toCompare$ = $.$binarySearchFor$toCompare$;
     this.$collect$ = this._$collect$ = $.$collect$;
     this._$collectUsingAtPut$ = $.$collectUsingAtPut$;
     this.$collectUsingAtPut$ = dnuCatcher("$collectUsingAtPut$");
     this._$collection$matchesElementsAt$ = $.$collection$matchesElementsAt$;
     this.$collection$matchesElementsAt$ = dnuCatcher("$collection$matchesElementsAt$");
     this.$copyFrom$to$ = this._$copyFrom$to$ = $.$copyFrom$to$;
     this.$copyReplaceAll$with$ = this._$copyReplaceAll$with$ = $.$copyReplaceAll$with$;
     this._$copyReplaceFrom$to$with$ = $.$copyReplaceFrom$to$with$;
     this.$copyReplaceFrom$to$with$ = dnuCatcher("$copyReplaceFrom$to$with$");
     this.$copyWith$ = this._$copyWith$ = $.$copyWith$;
     this.$copyWithSize$ = this._$copyWithSize$ = $.$copyWithSize$;
     this.$copyWithout$ = this._$copyWithout$ = $.$copyWithout$;
     this.$do$ = this._$do$ = $.$do$;
     this.$doWithIndex$ = this._$doWithIndex$ = $.$doWithIndex$;
     this.$findFirst$ = this._$findFirst$ = $.$findFirst$;
     this.$findLast$ = this._$findLast$ = $.$findLast$;
     this.$first = this._$first = $.$first;
     this.$hasSameElementsAndOrderAs$ = this._$hasSameElementsAndOrderAs$ = $.$hasSameElementsAndOrderAs$;
     this.$hash = this._$hash = $.$hash;
     this._$hashAt$ = $.$hashAt$;
     this.$hashAt$ = dnuCatcher("$hashAt$");
     this._$includesIndex$ = $.$includesIndex$;
     this.$includesIndex$ = dnuCatcher("$includesIndex$");
     this.$indexOf$ = this._$indexOf$ = $.$indexOf$;
     this.$indexOf$ifAbsent$ = this._$indexOf$ifAbsent$ = $.$indexOf$ifAbsent$;
     this._$indexOfSubCollection$startingAt$ = $.$indexOfSubCollection$startingAt$;
     this.$indexOfSubCollection$startingAt$ = dnuCatcher("$indexOfSubCollection$startingAt$");
     this._$indexOfSubCollection$startingAt$ifAbsent$ = $.$indexOfSubCollection$startingAt$ifAbsent$;
     this.$indexOfSubCollection$startingAt$ifAbsent$ = dnuCatcher("$indexOfSubCollection$startingAt$ifAbsent$");
     this._$indicesOfSubCollection$ = $.$indicesOfSubCollection$;
     this.$indicesOfSubCollection$ = dnuCatcher("$indicesOfSubCollection$");
     this._$indicesOfSubCollection$startingAt$ = $.$indicesOfSubCollection$startingAt$;
     this.$indicesOfSubCollection$startingAt$ = dnuCatcher("$indicesOfSubCollection$startingAt$");
     this.$isKindOfList = this._$isKindOfList = $.$isKindOfList;
     this.$isSequenceable = this._$isSequenceable = $.$isSequenceable;
     this._$isSortedBy$ = $.$isSortedBy$;
     this.$isSortedBy$ = dnuCatcher("$isSortedBy$");
     this.$keysAndValuesDo$ = this._$keysAndValuesDo$ = $.$keysAndValuesDo$;
     this.$last = this._$last = $.$last;
     this.$newCopyOfSize$thatCanAlsoHoldElementsOf$ = this._$newCopyOfSize$thatCanAlsoHoldElementsOf$ = $.$newCopyOfSize$thatCanAlsoHoldElementsOf$;
     this._$newForCollectUsingAtPut$ = $.$newForCollectUsingAtPut$;
     this.$newForCollectUsingAtPut$ = dnuCatcher("$newForCollectUsingAtPut$");
     this.$readStream = this._$readStream = $.$readStream;
     this.$reverse = this._$reverse = $.$reverse;
     this.$reverseDo$ = this._$reverseDo$ = $.$reverseDo$;
     this.$size = this._$size = $.$size;
     this.$species = this._$species = $.$species;
     this.$with$do$ = this._$with$do$ = $.$with$do$;
     this.$enclosingObjects$Collections$AbstractList = enclosingObjects;
     this.$super$Collections$AbstractList$slot = runtimeSuperclass;
     this["Collections`AbstractList"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Collections`AbstractList"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Collections`AbstractList";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`AbstractList";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Collections$AbstractList = enclosingObjects;
      this.$super$Collections$AbstractList$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$AddableList = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Collections`AddableList";
   this.name = "Collections`AddableList";
   this.header = 545;
   this.slots = [
    new SM("contents", "protected", true, false),
    new SM("startGap", "protected", true, false),
    new SM("lastIndex", "protected", true, false)
   ];
   this.methods = [
    new MM("superInit`Collections`AddableList", "protected", true, 546),
    new MM("instance`initializer", "public", true, 547),
    new MM("add:", "public", false, 548),
    new MM("addAll:", "public", false, 549),
    new MM("at:", "public", false, 550),
    new MM("at:ifAbsent:", "public", false, 551),
    new MM("copyWithSize:", "public", false, 552),
    new MM("do:", "public", false, 553),
    new MM("endGap", "protected", false, 554),
    new MM("firstIndex", "protected", false, 555),
    new MM("include:", "public", false, 556),
    new MM("include:ifNew:", "public", false, 557),
    new MM("includeAll:", "public", false, 558),
    new MM("indexOf:ifAbsent:", "public", false, 559),
    new MM("initCapacity:", "public", false, 560),
    new MM("internalIndexIsValid:", "protected", false, 561),
    new MM("internalRangeCheck:", "protected", false, 562),
    new MM("makeSpace:beforeIndex:", "protected", false, 563),
    new MM("makeSpaceAtStart:", "protected", false, 564),
    new MM("needSpaceAtEnd:", "protected", false, 565),
    new MM("needSpaceAtStart:", "protected", false, 566),
    new MM("postCopy", "public", false, 567),
    new MM("remove:", "public", false, 568),
    new MM("remove:at:", "public", false, 569),
    new MM("remove:ifAbsent:", "public", false, 570),
    new MM("removeAll", "public", false, 571),
    new MM("removeAll:", "public", false, 572),
    new MM("removeAllSuchThat:", "public", false, 573),
    new MM("removeAt:", "public", false, 574),
    new MM("removeEvery:", "public", false, 575),
    new MM("removeEvery:startingAt:", "public", false, 576),
    new MM("removeFirst", "public", false, 577),
    new MM("removeLast", "public", false, 578),
    new MM("size", "public", false, 579),
    new MM("size:", "public", false, 580),
    new MM("sort:", "public", false, 581),
    new MM("init`contents:", "protected", true, 0),
    new MM("contents", "protected", true, 0),
    new MM("contents:", "protected", true, 0),
    new MM("init`startGap:", "protected", true, 0),
    new MM("startGap", "protected", true, 0),
    new MM("startGap:", "protected", true, 0),
    new MM("init`lastIndex:", "protected", true, 0),
    new MM("lastIndex", "protected", true, 0),
    new MM("lastIndex:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$AddableList = function () {
    let self = this;
    self.$super$Collections$AddableList$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Collections$AddableList();
    self._$initCapacity$(self._$class().$defaultCapacity());
    return self;
   };
   this.$add$ = function ($e) {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$addAll$ = function ($c) {
    let self = this;
    $c.$do$(function ($el) {
     return self._$add$($el);
    });
    return $c;
   };
   this.$at$ = function ($i) {
    let self = this;
    let $adjusted = nil;
    $adjusted = $i + self._$startGap();
    if (!((0 < $i) && $adjusted.$$less$equal(self._$lastIndex()))) {
     self.$enclosingObjects$Collections$AddableList[0]._$error$("invalid index");
    };
    return self._$contents().$at$($adjusted);
   };
   this.$at$ifAbsent$ = function ($i, $f) {
    let self = this;
    let $internal = nil;
    $internal = $i + self._$startGap();
    return self._$internalIndexIsValid$($internal).$ifTrue$ifFalse$(function () {
     return self._$contents().$at$($internal);
    }, function () {
     return $f.$value();
    });
   };
   this.$copyWithSize$ = function ($s) {
    let self = this;
    let $safeself = nil;
    $safeself = self;
    return self._$Array().$new$($s).$replaceFrom$to$with$(1, $s.$min$(self._$size()), $safeself);
   };
   this.$do$ = function ($action) {
    let self = this;
    {
     let $index = nil;
     let $$limit = nil;
     nil;
     $index = self._$startGap() + 1;
     $$limit = self._$lastIndex();
     for (; $$limit.$$greater$equal($index); ) {
      $action.$value$(self._$contents().$at$($index));
      $index = (1).$$plus($index);
     };
    };
    return self;
   };
   this.$endGap = function () {
    let self = this;
    return self._$contents().$size() - self._$lastIndex();
   };
   this.$firstIndex = function () {
    let self = this;
    return 1 + self._$startGap();
   };
   this.$include$ = function ($e) {
    let self = this;
    return self._$include$ifNew$($e, function () {
     return nil;
    });
   };
   this.$include$ifNew$ = function ($e, $blk) {
    let self = this;
    if (!self._$includes$($e)) {
     self._$add$($e);
     $blk.$value();
    };
    return $e;
   };
   this.$includeAll$ = function ($c) {
    let self = this;
    $c.$do$(function ($el) {
     return self._$include$($el);
    });
    return $c;
   };
   this.$indexOf$ifAbsent$ = function ($el, $f) {
    let self = this;
    {
     let $i = nil;
     let $$limit = nil;
     nil;
     $i = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($i); ) {
      if (self._$at$($i).$$equal($el)) {
       return $i;
      };
      $i = (1).$$plus($i);
     };
    };
    return $f.$value();
   };
   this.$initCapacity$ = function ($c) {
    let self = this;
    self._$contents$(self._$Array().$new$($c));
    self._$startGap$(0);
    self._$lastIndex$(0);
    return self;
   };
   this.$internalIndexIsValid$ = function ($index) {
    let self = this;
    return $index.$$greater(self._$startGap()) && $index.$$less$equal(self._$lastIndex());
   };
   this.$internalRangeCheck$ = function ($index) {
    let self = this;
    if (!self._$internalIndexIsValid$($index)) {
     self.$enclosingObjects$Collections$AddableList[0]._$error$("invalid index");
    };
    return self;
   };
   this.$makeSpace$beforeIndex$ = function ($slots, $i) {
    let self = this;
    return (($i - self._$startGap()) - 1).$$greater((self._$lastIndex() - $i) + 1).$ifTrue$ifFalse$(function () {
     self._$needSpaceAtEnd$($slots);
     self._$contents().$replaceFrom$to$with$startingAt$($i + $slots, self._$lastIndex() + $slots, self._$contents(), $i);
     self._$lastIndex$(self._$lastIndex() + $slots);
     return $i;
    }, function () {
     let $newI = nil;
     $newI = ($i + self._$needSpaceAtStart$($slots)) - $slots;
     self._$contents().$replaceFrom$to$with$startingAt$((self._$startGap() + 1) - $slots, $newI - 1, self._$contents(), self._$startGap() + 1);
     self._$startGap$(self._$startGap() - $slots);
     return $newI;
    });
   };
   this.$makeSpaceAtStart$ = function ($nslots) {
    let self = this;
    let $newGap = nil;
    let $diff = nil;
    let $newContents = nil;
    let $sz = nil;
    let $newLastIndex = nil;
    if (self._$isEmpty() && $nslots.$$less$equal(self._$contents().$size())) {
     self._$startGap$($nslots);
     self._$lastIndex$($nslots);
     return $nslots;
    };
    $sz = self._$size();
    $newGap = $nslots.$max$($sz);
    $diff = $newGap - self._$startGap();
    $newLastIndex = $newGap + $sz;
    $newContents = self._$Array().$new$(self._$contents().$size() + $diff);
    $newContents.$replaceFrom$to$with$startingAt$($newGap + 1, $newLastIndex, self._$contents(), self._$firstIndex());
    self._$startGap$($newGap);
    self._$contents$($newContents);
    self._$lastIndex$($newLastIndex);
    return $diff;
   };
   this.$needSpaceAtEnd$ = function ($slots) {
    let self = this;
    if ($slots.$$greater(self._$endGap())) {
     self._$contents$(self._$contents().$copyWithSize$(self._$contents().$size() + $slots.$max$(self._$size())));
    };
    return self;
   };
   this.$needSpaceAtStart$ = function ($nslots) {
    let self = this;
    return $nslots.$$greater(self._$startGap()).$ifTrue$ifFalse$(function () {
     return self._$makeSpaceAtStart$($nslots);
    }, function () {
     return 0;
    });
   };
   this.$postCopy = function () {
    let self = this;
    self.$super$Collections$AddableList$slot._$postCopy.call(self);
    self._$contents$(self._$contents().$copyWithSize$(self._$contents().$size().$max$(self._$lastIndex())));
    return self;
   };
   this.$remove$ = function ($el) {
    let self = this;
    return self._$remove$ifAbsent$($el, function () {
     return self.$enclosingObjects$Collections$AddableList[0]._$error$("element not found");
    });
   };
   this.$remove$at$ = function ($nElements, $i) {
    let self = this;
    let $el = nil;
    let $internal = nil;
    $el = self._$at$($i);
    $internal = self._$startGap() + $i;
    self._$internalRangeCheck$($internal);
    self._$internalRangeCheck$(($internal + $nElements) - 1);
    {
     let $index = nil;
     let $$limit = nil;
     nil;
     $index = $internal;
     $$limit = self._$lastIndex() - $nElements;
     for (; $$limit.$$greater$equal($index); ) {
      self._$contents().$at$put$($index, self._$contents().$at$($index + $nElements));
      $index = (1).$$plus($index);
     };
    };
    self._$contents().$at$put$(self._$lastIndex(), nil);
    self._$lastIndex$(self._$lastIndex() - $nElements);
    return self;
   };
   this.$remove$ifAbsent$ = function ($el, $f) {
    let self = this;
    let NLR = new Object();
    try {
     self._$removeAt$(self._$indexOf$ifAbsent$($el, function () {
      {
       let t = $f.$value();
       if (NLR === null) {
        self.cannotReturn(self, t);
       };
       NLR.value = t;
       throw NLR;
      };
     }));
     {
      let t = $el;
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$removeAll = function () {
    let self = this;
    {
     let $i = nil;
     let $$limit = nil;
     nil;
     $i = self._$startGap() + 1;
     $$limit = self._$lastIndex();
     for (; $$limit.$$greater$equal($i); ) {
      self._$contents().$at$put$($i, nil);
      $i = (1).$$plus($i);
     };
    };
    self._$lastIndex$(self._$startGap());
    return self;
   };
   this.$removeAll$ = function ($c) {
    let self = this;
    $c.$do$(function ($el) {
     return self._$remove$($el);
    });
    return $c;
   };
   this.$removeAllSuchThat$ = function ($test) {
    let self = this;
    let $i = nil;
    $i = 1;
    {
     for (; $i.$$less$equal(self._$size()); ) {
      if ($test.$value$(self._$at$($i))) {
       self._$removeAt$($i);
      } else {
       $i = $i + 1;
      };
     };
    };
    return self;
   };
   this.$removeAt$ = function ($index) {
    let self = this;
    let $el = nil;
    $el = self._$at$($index);
    self._$remove$at$(1, $index);
    return $el;
   };
   this.$removeEvery$ = function ($val) {
    let self = this;
    return self._$removeEvery$startingAt$($val, 1);
   };
   this.$removeEvery$startingAt$ = function ($val, $start) {
    let self = this;
    let NLR = new Object();
    try {
     let $index = nil;
     $index = self._$indexOf$ifAbsent$($val, function () {
      {
       let t = $val;
       if (NLR === null) {
        self.cannotReturn(self, t);
       };
       NLR.value = t;
       throw NLR;
      };
     });
     self._$removeAt$($index);
     {
      let t = self._$removeEvery$startingAt$($val, $index);
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$removeFirst = function () {
    let self = this;
    return self._$removeAt$(1);
   };
   this.$removeLast = function () {
    let self = this;
    return self._$removeAt$(self._$size());
   };
   this.$size = function () {
    let self = this;
    return self._$lastIndex() - self._$startGap();
   };
   this.$size$ = function ($s) {
    let self = this;
    let $delta = nil;
    let $newLastIndex = nil;
    $delta = $s - self._$size();
    $newLastIndex = self._$lastIndex() + $delta;
    if ($delta < 0) {
     {
      let $i = nil;
      let $$limit = nil;
      nil;
      $i = $newLastIndex + 1;
      $$limit = self._$lastIndex();
      for (; $$limit.$$greater$equal($i); ) {
       self._$contents().$at$put$($i, nil);
       $i = (1).$$plus($i);
      };
     };
    };
    if ($delta > 0) {
     self._$needSpaceAtEnd$($delta);
    };
    self._$lastIndex$(self._$lastIndex() + $delta);
    return self;
   };
   this.$sort$ = function ($compare) {
    let self = this;
    if (self._$lastIndex().$$less(self._$firstIndex())) {
     return self;
    };
    self._$contents().$mergeSortFrom$to$by$(self._$firstIndex(), self._$lastIndex(), $compare);
    return self;
   };
   this.$init$contents$ = function (v) {
    this.$contents$slot = v;
    return this;
   };
   this.$contents = function () {
    return this.$contents$slot;
   };
   this.$contents$ = function (v) {
    this.$contents$slot = v;
    return this;
   };
   this.$init$startGap$ = function (v) {
    this.$startGap$slot = v;
    return this;
   };
   this.$startGap = function () {
    return this.$startGap$slot;
   };
   this.$startGap$ = function (v) {
    this.$startGap$slot = v;
    return this;
   };
   this.$init$lastIndex$ = function (v) {
    this.$lastIndex$slot = v;
    return this;
   };
   this.$lastIndex = function () {
    return this.$lastIndex$slot;
   };
   this.$lastIndex$ = function (v) {
    this.$lastIndex$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`AddableList";
     this._$superInit$Collections$AddableList = $.$superInit$Collections$AddableList;
     this.$superInit$Collections$AddableList = dnuCatcher("$superInit$Collections$AddableList");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$add$ = this._$add$ = $.$add$;
     this.$addAll$ = this._$addAll$ = $.$addAll$;
     this.$at$ = this._$at$ = $.$at$;
     this.$at$ifAbsent$ = this._$at$ifAbsent$ = $.$at$ifAbsent$;
     this.$copyWithSize$ = this._$copyWithSize$ = $.$copyWithSize$;
     this.$do$ = this._$do$ = $.$do$;
     this._$endGap = $.$endGap;
     this.$endGap = dnuCatcher("$endGap");
     this._$firstIndex = $.$firstIndex;
     this.$firstIndex = dnuCatcher("$firstIndex");
     this.$include$ = this._$include$ = $.$include$;
     this.$include$ifNew$ = this._$include$ifNew$ = $.$include$ifNew$;
     this.$includeAll$ = this._$includeAll$ = $.$includeAll$;
     this.$indexOf$ifAbsent$ = this._$indexOf$ifAbsent$ = $.$indexOf$ifAbsent$;
     this.$initCapacity$ = this._$initCapacity$ = $.$initCapacity$;
     this._$internalIndexIsValid$ = $.$internalIndexIsValid$;
     this.$internalIndexIsValid$ = dnuCatcher("$internalIndexIsValid$");
     this._$internalRangeCheck$ = $.$internalRangeCheck$;
     this.$internalRangeCheck$ = dnuCatcher("$internalRangeCheck$");
     this._$makeSpace$beforeIndex$ = $.$makeSpace$beforeIndex$;
     this.$makeSpace$beforeIndex$ = dnuCatcher("$makeSpace$beforeIndex$");
     this._$makeSpaceAtStart$ = $.$makeSpaceAtStart$;
     this.$makeSpaceAtStart$ = dnuCatcher("$makeSpaceAtStart$");
     this._$needSpaceAtEnd$ = $.$needSpaceAtEnd$;
     this.$needSpaceAtEnd$ = dnuCatcher("$needSpaceAtEnd$");
     this._$needSpaceAtStart$ = $.$needSpaceAtStart$;
     this.$needSpaceAtStart$ = dnuCatcher("$needSpaceAtStart$");
     this.$postCopy = this._$postCopy = $.$postCopy;
     this.$remove$ = this._$remove$ = $.$remove$;
     this.$remove$at$ = this._$remove$at$ = $.$remove$at$;
     this.$remove$ifAbsent$ = this._$remove$ifAbsent$ = $.$remove$ifAbsent$;
     this.$removeAll = this._$removeAll = $.$removeAll;
     this.$removeAll$ = this._$removeAll$ = $.$removeAll$;
     this.$removeAllSuchThat$ = this._$removeAllSuchThat$ = $.$removeAllSuchThat$;
     this.$removeAt$ = this._$removeAt$ = $.$removeAt$;
     this.$removeEvery$ = this._$removeEvery$ = $.$removeEvery$;
     this.$removeEvery$startingAt$ = this._$removeEvery$startingAt$ = $.$removeEvery$startingAt$;
     this.$removeFirst = this._$removeFirst = $.$removeFirst;
     this.$removeLast = this._$removeLast = $.$removeLast;
     this.$size = this._$size = $.$size;
     this.$size$ = this._$size$ = $.$size$;
     this.$sort$ = this._$sort$ = $.$sort$;
     this._$init$contents$ = $.$init$contents$;
     this.$init$contents$ = dnuCatcher("$init$contents$");
     this._$contents = $.$contents;
     this.$contents = dnuCatcher("$contents");
     this._$contents$ = $.$contents$;
     this.$contents$ = dnuCatcher("$contents$");
     this._$init$startGap$ = $.$init$startGap$;
     this.$init$startGap$ = dnuCatcher("$init$startGap$");
     this._$startGap = $.$startGap;
     this.$startGap = dnuCatcher("$startGap");
     this._$startGap$ = $.$startGap$;
     this.$startGap$ = dnuCatcher("$startGap$");
     this._$init$lastIndex$ = $.$init$lastIndex$;
     this.$init$lastIndex$ = dnuCatcher("$init$lastIndex$");
     this._$lastIndex = $.$lastIndex;
     this.$lastIndex = dnuCatcher("$lastIndex");
     this._$lastIndex$ = $.$lastIndex$;
     this.$lastIndex$ = dnuCatcher("$lastIndex$");
     this.$enclosingObjects$Collections$AddableList = enclosingObjects;
     this.$super$Collections$AddableList$slot = runtimeSuperclass;
     this["Collections`AddableList"] = function () {
      superBasicNew.call(this);
      this.$contents$slot = nil;
      this.$startGap$slot = nil;
      this.$lastIndex$slot = nil;
     };
     this.basicNew = this["Collections`AddableList"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Collections`AddableList";
    this.slots = [];
    this.methods = [
     new MM("new", "public", true, 0),
     new MM("defaultCapacity", "public", false, 582),
     new MM("new:", "public", false, 583),
     new MM("with:", "public", false, 584),
     new MM("withAll:", "public", false, 585)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.$defaultCapacity = function () {
     let self = this;
     return 5;
    };
    this.$new$ = function ($capacity) {
     let self = this;
     return self._$new().$initCapacity$($capacity);
    };
    this.$with$ = function ($val1) {
     let self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$add$($val1);
      return cascadeReceiver.$yourself();
     })(self._$new$(1));
    };
    this.$withAll$ = function ($cltn) {
     let self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$addAll$($cltn);
      return cascadeReceiver.$yourself();
     })(self._$new$($cltn.$size()));
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`AddableList";
      this.$new = this._$new = $.$new;
      this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
      this.$new$ = this._$new$ = $.$new$;
      this.$with$ = this._$with$ = $.$with$;
      this.$withAll$ = this._$withAll$ = $.$withAll$;
      this.$enclosingObjects$Collections$AddableList = enclosingObjects;
      this.$super$Collections$AddableList$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$Association = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Collections`Association";
   this.name = "Collections`Association";
   this.header = 586;
   this.slots = [
    new SM("key", "public", true, false),
    new SM("value", "public", true, false)
   ];
   this.methods = [
    new MM("superInit`Collections`Association", "protected", true, 587),
    new MM("instance`initializer", "public", true, 588),
    new MM("=", "public", false, 589),
    new MM("copy", "public", false, 590),
    new MM("hash", "public", false, 591),
    new MM("printOn:", "public", false, 592),
    new MM("init`key:", "public", true, 0),
    new MM("key", "public", true, 0),
    new MM("key:", "public", true, 0),
    new MM("init`value:", "public", true, 0),
    new MM("value", "public", true, 0),
    new MM("value:", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$Association = function ($k, $v) {
    let self = this;
    self.$super$Collections$Association$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($k, $v) {
    let self = this;
    self._$superInit$Collections$Association($k, $v);
    self._$init$key$($k);
    self._$init$value$($v);
    return self;
   };
   this.$$equal = function ($other) {
    let self = this;
    return self._$key().$$equal($other.$key()) && self._$value().$$equal($other.$value());
   };
   this.$copy = function () {
    let self = this;
    return self._$class().$key$value$(self._$key(), self._$value());
   };
   this.$hash = function () {
    let self = this;
    return self._$key().$hash().$bitXor$(self._$value().$hash());
   };
   this.$printOn$ = function ($strm) {
    let self = this;
    self._$key().$printOn$($strm);
    $strm.$nextPutAll$(" -> ");
    self._$value().$printOn$($strm);
    return self;
   };
   this.$init$key$ = function (v) {
    this.$key$slot = v;
    return this;
   };
   this.$key = function () {
    return this.$key$slot;
   };
   this.$key$ = function (v) {
    this.$key$slot = v;
    return this;
   };
   this.$init$value$ = function (v) {
    this.$value$slot = v;
    return this;
   };
   this.$value = function () {
    return this.$value$slot;
   };
   this.$value$ = function (v) {
    this.$value$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`Association";
     this._$superInit$Collections$Association = $.$superInit$Collections$Association;
     this.$superInit$Collections$Association = dnuCatcher("$superInit$Collections$Association");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$$equal = this._$$equal = $.$$equal;
     this.$copy = this._$copy = $.$copy;
     this.$hash = this._$hash = $.$hash;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this.$init$key$ = this._$init$key$ = $.$init$key$;
     this.$key = this._$key = $.$key;
     this.$key$ = this._$key$ = $.$key$;
     this.$init$value$ = this._$init$value$ = $.$init$value$;
     this.$value = this._$value = $.$value;
     this.$value$ = this._$value$ = $.$value$;
     this.$enclosingObjects$Collections$Association = enclosingObjects;
     this.$super$Collections$Association$slot = runtimeSuperclass;
     this["Collections`Association"] = function () {
      superBasicNew.call(this);
      this.$key$slot = nil;
      this.$value$slot = nil;
     };
     this.basicNew = this["Collections`Association"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Collections`Association";
    this.slots = [];
    this.methods = [
     new MM("key:value:", "public", true, 0),
     new MM("new", "public", false, 593)
    ];
    this.nestedClasses = [];
    this.$key$value$ = function ($k, $v) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($k, $v);
     return t;
    };
    this.$new = function () {
     let self = this;
     self._$warnObsolete();
     return self._$key$value$(nil, nil);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`Association";
      this.$key$value$ = this._$key$value$ = $.$key$value$;
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Collections$Association = enclosingObjects;
      this.$super$Collections$Association$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$Collection = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Collections`Collection";
   this.name = "Collections`Collection";
   this.header = 594;
   this.slots = [];
   this.methods = [
    new MM("superInit`Collections`Collection", "protected", true, 595),
    new MM("instance`initializer", "public", true, 596),
    new MM("allSatisfy:", "public", false, 597),
    new MM("anySatisfy:", "public", false, 598),
    new MM("asArray", "public", false, 599),
    new MM("asCollection", "public", false, 600),
    new MM("asMutableArrayList", "public", false, 601),
    new MM("asSet", "public", false, 602),
    new MM("asSortedList", "public", false, 603),
    new MM("asSortedList:", "public", false, 604),
    new MM("collect:", "public", false, 605),
    new MM("collectUsingAdd:", "protected", false, 606),
    new MM("copy", "public", false, 607),
    new MM("detect:", "public", false, 608),
    new MM("detect:ifFound:ifNone:", "public", false, 609),
    new MM("detect:ifNone:", "public", false, 610),
    new MM("do:", "public", false, 611),
    new MM("do:separatedBy:", "public", false, 612),
    new MM("flatMap:", "public", false, 613),
    new MM("flatten", "public", false, 614),
    new MM("hash", "public", false, 615),
    new MM("includes:", "public", false, 616),
    new MM("inject:into:", "public", false, 617),
    new MM("intersection:", "public", false, 618),
    new MM("isCollection", "public", false, 619),
    new MM("isEmpty", "public", false, 620),
    new MM("isKindOfCollection", "public", false, 621),
    new MM("max", "public", false, 622),
    new MM("maxPrintElements", "protected", false, 623),
    new MM("newForCollectUsingAdd:", "protected", false, 624),
    new MM("noneSatisfy:", "public", false, 625),
    new MM("occurrencesOf:", "protected", false, 626),
    new MM("postCopy", "public", false, 627),
    new MM("printElementsDo:", "protected", false, 628),
    new MM("printOn:", "public", false, 629),
    new MM("reduce:", "public", false, 630),
    new MM("reduce:ifEmpty:", "public", false, 631),
    new MM("reject:", "public", false, 632),
    new MM("select:", "public", false, 633),
    new MM("size", "public", false, 634),
    new MM("species", "public", false, 635),
    new MM("union:", "public", false, 636),
    new MM("value", "public", false, 637)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$Collection = function () {
    let self = this;
    self.$super$Collections$Collection$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Collections$Collection();
    return self;
   };
   this.$allSatisfy$ = function ($predicate) {
    let self = this;
    let NLR = new Object();
    try {
     self._$do$(function ($each) {
      return $predicate.$value$($each).$ifFalse$(function () {
       {
        let t = false;
        if (NLR === null) {
         self.cannotReturn(self, t);
        };
        NLR.value = t;
        throw NLR;
       };
      });
     });
     {
      let t = true;
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$anySatisfy$ = function ($predicate) {
    let self = this;
    let NLR = new Object();
    try {
     self._$do$(function ($each) {
      return $predicate.$value$($each).$ifTrue$(function () {
       {
        let t = true;
        if (NLR === null) {
         self.cannotReturn(self, t);
        };
        NLR.value = t;
        throw NLR;
       };
      });
     });
     {
      let t = false;
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$asArray = function () {
    let self = this;
    let $array = nil;
    let $index = nil;
    $array = self._$Array().$new$(self._$size());
    $index = 1;
    self._$do$(function ($element) {
     $array.$at$put$($index, $element);
     return $index = $index + 1;
    });
    return $array;
   };
   this.$asCollection = function () {
    let self = this;
    return self;
   };
   this.$asMutableArrayList = function () {
    let self = this;
    return self.$enclosingObjects$Collections$Collection[0]._$MutableArrayList().$withAll$(self);
   };
   this.$asSet = function () {
    let self = this;
    return self.$enclosingObjects$Collections$Collection[0]._$Set().$withAll$(self);
   };
   this.$asSortedList = function () {
    let self = this;
    return self.$enclosingObjects$Collections$Collection[0]._$SortedList().$withAll$(self);
   };
   this.$asSortedList$ = function ($sortPredicate) {
    let self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$addAll$(self);
     return cascadeReceiver.$yourself();
    })(self.$enclosingObjects$Collections$Collection[0]._$SortedList().$new$sortBlock$(self._$size(), $sortPredicate));
   };
   this.$collect$ = function ($map) {
    let self = this;
    return self._$collectUsingAdd$($map);
   };
   this.$collectUsingAdd$ = function ($map) {
    let self = this;
    let $c = nil;
    $c = self._$newForCollectUsingAdd$(self._$size());
    self._$do$(function ($e) {
     return $c.$add$($map.$value$($e));
    });
    return $c;
   };
   this.$copy = function () {
    let self = this;
    "BOGUS";
    return self._$class().$withAll$(self);
   };
   this.$detect$ = function ($predicate) {
    let self = this;
    return self._$detect$ifNone$($predicate, function () {
     return self._$Error().$signal$("No matching element detected");
    });
   };
   this.$detect$ifFound$ifNone$ = function ($aBlock, $foundBlock, $exceptionBlock) {
    let self = this;
    let NLR = new Object();
    try {
     self._$do$(function ($each) {
      return $aBlock.$value$($each).$ifTrue$(function () {
       {
        let t = $foundBlock.$cull$($each);
        if (NLR === null) {
         self.cannotReturn(self, t);
        };
        NLR.value = t;
        throw NLR;
       };
      });
     });
     {
      let t = $exceptionBlock.$value();
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$detect$ifNone$ = function ($predicate, $fail) {
    let self = this;
    let NLR = new Object();
    try {
     self._$do$(function ($element) {
      return $predicate.$value$($element).$ifTrue$(function () {
       {
        let t = $element;
        if (NLR === null) {
         self.cannotReturn(self, t);
        };
        NLR.value = t;
        throw NLR;
       };
      });
     });
     {
      let t = $fail.$value();
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$do$ = function ($action) {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$do$separatedBy$ = function ($action, $betweenAction) {
    let self = this;
    let $firstTime = nil;
    $firstTime = true;
    $firstTime = true;
    self._$do$(function ($element) {
     if ($firstTime) {
      $firstTime = false;
     } else {
      $betweenAction.$value();
     };
     return $action.$value$($element);
    });
    return self;
   };
   this.$flatMap$ = function ($map) {
    let self = this;
    return self._$collect$($map).$flatten();
   };
   this.$flatten = function () {
    let self = this;
    let $totalSize = nil;
    let $c = nil;
    $totalSize = 0;
    self._$do$(function ($e) {
     return $totalSize = $totalSize + $e.$isKindOfCollection().$ifTrue$ifFalse$(function () {
      return $e.$size();
     }, function () {
      return 1;
     });
    });
    $c = self._$newForCollectUsingAdd$($totalSize);
    self._$do$(function ($e) {
     return $e.$isKindOfCollection().$ifTrue$ifFalse$(function () {
      return $e.$do$(function ($x) {
       return $c.$add$($x);
      });
     }, function () {
      return $c.$add$($e);
     });
    });
    return $c;
   };
   this.$hash = function () {
    let self = this;
    let NLR = new Object();
    try {
     let $count = nil;
     $count = 0;
     {
      let t = self._$inject$into$(0, function ($previousHash, $element) {
       let $newHash = nil;
       $newHash = $previousHash.$bitXor$($element.$hash());
       $count = $count + 1;
       if ($count > 2) {
        {
         let t = $newHash;
         if (NLR === null) {
          self.cannotReturn(self, t);
         };
         NLR.value = t;
         throw NLR;
        };
       };
       return $newHash;
      });
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$includes$ = function ($o) {
    let self = this;
    let NLR = new Object();
    try {
     self._$do$(function ($element) {
      return $element.$$equal($o).$ifTrue$(function () {
       {
        let t = true;
        if (NLR === null) {
         self.cannotReturn(self, t);
        };
        NLR.value = t;
        throw NLR;
       };
      });
     });
     {
      let t = false;
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$inject$into$ = function ($initialValue, $foldBlock) {
    let self = this;
    let $runningValue = nil;
    $runningValue = $initialValue;
    self._$do$(function ($element) {
     return $runningValue = $foldBlock.$value$value$($runningValue, $element);
    });
    return $runningValue;
   };
   this.$intersection$ = function ($other) {
    let self = this;
    return self._$select$(function ($each) {
     return $other.$includes$($each);
    });
   };
   this.$isCollection = function () {
    let self = this;
    return true;
   };
   this.$isEmpty = function () {
    let self = this;
    return 0 === self._$size();
   };
   this.$isKindOfCollection = function () {
    let self = this;
    return true;
   };
   this.$max = function () {
    let self = this;
    return self._$inject$into$(self._$anyOne(), function ($m, $each) {
     return $m.$max$($each);
    });
   };
   this.$maxPrintElements = function () {
    let self = this;
    return 100;
   };
   this.$newForCollectUsingAdd$ = function ($size) {
    let self = this;
    return self.$enclosingObjects$Collections$Collection[0]._$MutableArrayList().$new$($size);
   };
   this.$noneSatisfy$ = function ($predicate) {
    let self = this;
    let NLR = new Object();
    try {
     self._$do$(function ($each) {
      return $predicate.$value$($each).$ifTrue$(function () {
       {
        let t = false;
        if (NLR === null) {
         self.cannotReturn(self, t);
        };
        NLR.value = t;
        throw NLR;
       };
      });
     });
     {
      let t = true;
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$occurrencesOf$ = function ($o) {
    let self = this;
    let $c = nil;
    "BOGUS";
    $c = 0;
    self._$do$(function ($e) {
     return $e.$$equal($o).$ifTrue$(function () {
      return $c = $c + 1;
     });
    });
    return $c;
   };
   this.$postCopy = function () {
    let self = this;
    "BOGUS";
    return self;
   };
   this.$printElementsDo$ = function ($f) {
    let self = this;
    self._$do$($f);
    return self;
   };
   this.$printOn$ = function ($stream) {
    let self = this;
    let NLR = new Object();
    try {
     let $count = nil;
     let $first = nil;
     (function (cascadeReceiver) {
      cascadeReceiver.$nextPutAll$(self._$class().$mixin().$simpleName());
      return cascadeReceiver.$nextPut$("(");
     })($stream);
     $count = 0;
     $first = true;
     self._$printElementsDo$(function ($element) {
      if ($first) {
       $first = false;
      } else {
       $stream.$space();
      };
      $element.$printOn$($stream);
      $count = $count + 1;
      return $count.$$greater$equal(self._$maxPrintElements()).$ifTrue$(function () {
       (function (cascadeReceiver) {
        cascadeReceiver.$nextPut$("<");
        cascadeReceiver.$print$(self._$size() - $count);
        return cascadeReceiver.$nextPutAll$(" more elements>)");
       })($stream);
       {
        let t = self;
        if (NLR === null) {
         self.cannotReturn(self, t);
        };
        NLR.value = t;
        throw NLR;
       };
      });
     });
     $stream.$nextPut$(")");
     {
      let t = self;
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$reduce$ = function ($reduceFn) {
    let self = this;
    return self._$reduce$ifEmpty$($reduceFn, function () {
     return self._$Error().$signal$("Cannot reduce an empty collection");
    });
   };
   this.$reduce$ifEmpty$ = function ($reduceFn, $onEmpty) {
    let self = this;
    let $current = nil;
    self._$do$(function ($element) {
     let $rel = nil;
     $rel = $element;
     return $current.$isNil().$ifTrue$ifFalse$(function () {
      return $current = $rel;
     }, function () {
      return $current = $reduceFn.$value$value$($current, $rel);
     });
    });
    return $current.$isNil().$ifFalse$ifTrue$(function () {
     return $current;
    }, function () {
     return $onEmpty.$value();
    });
   };
   this.$reject$ = function ($predicate) {
    let self = this;
    return self._$select$(function ($e) {
     return $predicate.$value$($e).$not();
    });
   };
   this.$select$ = function ($predicate) {
    let self = this;
    let $result = nil;
    $result = self._$newForCollectUsingAdd$(self._$size());
    self._$do$(function ($element) {
     return $predicate.$value$($element).$ifTrue$(function () {
      return $result.$add$($element);
     });
    });
    return $result;
   };
   this.$size = function () {
    let self = this;
    let $count = nil;
    $count = 0;
    self._$do$(function ($element) {
     return $count = $count + 1;
    });
    return $count;
   };
   this.$species = function () {
    let self = this;
    return self.$enclosingObjects$Collections$Collection[0]._$Set();
   };
   this.$union$ = function ($other) {
    let self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$addAll$($other);
     return cascadeReceiver.$yourself();
    })(self._$asSet());
   };
   this.$value = function () {
    let self = this;
    "BOGUS";
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`Collection";
     this._$superInit$Collections$Collection = $.$superInit$Collections$Collection;
     this.$superInit$Collections$Collection = dnuCatcher("$superInit$Collections$Collection");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$allSatisfy$ = this._$allSatisfy$ = $.$allSatisfy$;
     this.$anySatisfy$ = this._$anySatisfy$ = $.$anySatisfy$;
     this.$asArray = this._$asArray = $.$asArray;
     this.$asCollection = this._$asCollection = $.$asCollection;
     this.$asMutableArrayList = this._$asMutableArrayList = $.$asMutableArrayList;
     this.$asSet = this._$asSet = $.$asSet;
     this.$asSortedList = this._$asSortedList = $.$asSortedList;
     this.$asSortedList$ = this._$asSortedList$ = $.$asSortedList$;
     this.$collect$ = this._$collect$ = $.$collect$;
     this._$collectUsingAdd$ = $.$collectUsingAdd$;
     this.$collectUsingAdd$ = dnuCatcher("$collectUsingAdd$");
     this.$copy = this._$copy = $.$copy;
     this.$detect$ = this._$detect$ = $.$detect$;
     this.$detect$ifFound$ifNone$ = this._$detect$ifFound$ifNone$ = $.$detect$ifFound$ifNone$;
     this.$detect$ifNone$ = this._$detect$ifNone$ = $.$detect$ifNone$;
     this.$do$ = this._$do$ = $.$do$;
     this.$do$separatedBy$ = this._$do$separatedBy$ = $.$do$separatedBy$;
     this.$flatMap$ = this._$flatMap$ = $.$flatMap$;
     this.$flatten = this._$flatten = $.$flatten;
     this.$hash = this._$hash = $.$hash;
     this.$includes$ = this._$includes$ = $.$includes$;
     this.$inject$into$ = this._$inject$into$ = $.$inject$into$;
     this.$intersection$ = this._$intersection$ = $.$intersection$;
     this.$isCollection = this._$isCollection = $.$isCollection;
     this.$isEmpty = this._$isEmpty = $.$isEmpty;
     this.$isKindOfCollection = this._$isKindOfCollection = $.$isKindOfCollection;
     this.$max = this._$max = $.$max;
     this._$maxPrintElements = $.$maxPrintElements;
     this.$maxPrintElements = dnuCatcher("$maxPrintElements");
     this._$newForCollectUsingAdd$ = $.$newForCollectUsingAdd$;
     this.$newForCollectUsingAdd$ = dnuCatcher("$newForCollectUsingAdd$");
     this.$noneSatisfy$ = this._$noneSatisfy$ = $.$noneSatisfy$;
     this._$occurrencesOf$ = $.$occurrencesOf$;
     this.$occurrencesOf$ = dnuCatcher("$occurrencesOf$");
     this.$postCopy = this._$postCopy = $.$postCopy;
     this._$printElementsDo$ = $.$printElementsDo$;
     this.$printElementsDo$ = dnuCatcher("$printElementsDo$");
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this.$reduce$ = this._$reduce$ = $.$reduce$;
     this.$reduce$ifEmpty$ = this._$reduce$ifEmpty$ = $.$reduce$ifEmpty$;
     this.$reject$ = this._$reject$ = $.$reject$;
     this.$select$ = this._$select$ = $.$select$;
     this.$size = this._$size = $.$size;
     this.$species = this._$species = $.$species;
     this.$union$ = this._$union$ = $.$union$;
     this.$value = this._$value = $.$value;
     this.$enclosingObjects$Collections$Collection = enclosingObjects;
     this.$super$Collections$Collection$slot = runtimeSuperclass;
     this["Collections`Collection"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Collections`Collection"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Collections`Collection";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`Collection";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Collections$Collection = enclosingObjects;
      this.$super$Collections$Collection$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$HashedCollection = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Collections`HashedCollection";
   this.name = "Collections`HashedCollection";
   this.header = 638;
   this.slots = [
    new SM("table_0", "protected", true, false),
    new SM("size_0", "protected", true, false),
    new SM("deleted", "protected", true, false)
   ];
   this.methods = [
    new MM("superInit`Collections`HashedCollection", "protected", true, 639),
    new MM("instance`initializer", "public", true, 640),
    new MM("add:", "public", false, 641),
    new MM("addAll:", "public", false, 642),
    new MM("advanceAmount", "protected", false, 643),
    new MM("at:", "public", false, 644),
    new MM("at:ifAbsent:", "public", false, 645),
    new MM("atIndex:inTable:occupiedSlotDo:emptySlotDo:deletedSlotDo:", "protected", false, 646),
    new MM("buildValForKey:element:", "protected", false, 647),
    new MM("checkValidity", "protected", false, 648),
    new MM("contentsDo:", "public", false, 649),
    new MM("createFirstTable", "protected", false, 650),
    new MM("do:", "public", false, 651),
    new MM("elementFor:", "protected", false, 652),
    new MM("elementForCopy:", "protected", false, 653),
    new MM("firstTableSize", "protected", false, 654),
    new MM("growIfNeeded", "protected", false, 655),
    new MM("growTable", "protected", false, 656),
    new MM("hashFor:", "protected", false, 657),
    new MM("include:", "public", false, 658),
    new MM("include:ifNew:", "public", false, 659),
    new MM("includeAll:", "public", false, 660),
    new MM("includesIndex:", "public", false, 661),
    new MM("includesKey:", "public", false, 662),
    new MM("indexOf:", "public", false, 663),
    new MM("indexOf:ifAbsent:", "public", false, 664),
    new MM("indexOf:tableMask:", "protected", false, 665),
    new MM("initCapacity:", "protected", false, 666),
    new MM("key:matches:", "protected", false, 667),
    new MM("keyAtValue:", "public", false, 668),
    new MM("keyAtValue:ifAbsent:", "public", false, 669),
    new MM("keyFor:", "protected", false, 670),
    new MM("keysDo:", "public", false, 671),
    new MM("lookup:inTable:matchingSlotDo:emptySlotDo:deletedSlotsDo:mismatchingSlotsDo:", "protected", false, 672),
    new MM("lookup:matchingSlotDo:emptySlotDo:deletedSlotsDo:", "protected", false, 673),
    new MM("markDeleted:", "protected", false, 674),
    new MM("minTableSize", "protected", false, 675),
    new MM("minTableSizeForCapacity:", "protected", false, 676),
    new MM("newTableWithSize:", "protected", false, 677),
    new MM("objToIncludeFor:withExisting:", "protected", false, 678),
    new MM("occupied", "protected", false, 679),
    new MM("postCopy", "protected", false, 680),
    new MM("printElementsDo:", "protected", false, 681),
    new MM("remove:", "public", false, 682),
    new MM("remove:ifAbsent:", "public", false, 683),
    new MM("removeAll:", "public", false, 684),
    new MM("removeAllSuchThat:", "public", false, 685),
    new MM("removeAt:", "public", false, 686),
    new MM("removeAt:ifAbsent:", "public", false, 687),
    new MM("removeEvery:", "public", false, 688),
    new MM("removeKey:", "public", false, 689),
    new MM("removeKey:ifAbsent:", "public", false, 690),
    new MM("setTable:", "protected", false, 691),
    new MM("size", "public", false, 692),
    new MM("size:", "protected", false, 693),
    new MM("table", "protected", false, 694),
    new MM("table:", "protected", false, 695),
    new MM("tableAt:put:ifNew:", "protected", false, 696),
    new MM("tableAt:put:inDeletedSlot:", "protected", false, 697),
    new MM("tableAt:put:inEmptySlot:", "protected", false, 698),
    new MM("tableAt:put:inMatchingSlot:value:", "protected", false, 699),
    new MM("tableAt:put:inUnusedSlot:", "protected", false, 700),
    new MM("tableSizeForCapacity:", "protected", false, 701),
    new MM("valAt:ifAbsent:", "protected", false, 702),
    new MM("init`table_0:", "protected", true, 0),
    new MM("table_0", "protected", true, 0),
    new MM("table_0:", "protected", true, 0),
    new MM("init`size_0:", "protected", true, 0),
    new MM("size_0", "protected", true, 0),
    new MM("size_0:", "protected", true, 0),
    new MM("init`deleted:", "protected", true, 0),
    new MM("deleted", "protected", true, 0),
    new MM("deleted:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$HashedCollection = function ($cap) {
    let self = this;
    self.$super$Collections$HashedCollection$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($cap) {
    let self = this;
    self._$superInit$Collections$HashedCollection($cap);
    self._$initCapacity$($cap);
    return self;
   };
   this.$add$ = function ($val) {
    let self = this;
    return self._$include$($val);
   };
   this.$addAll$ = function ($c) {
    let self = this;
    $c.$do$(function ($e) {
     return self._$add$($e);
    });
    return $c;
   };
   this.$advanceAmount = function () {
    let self = this;
    return 99990;
   };
   this.$at$ = function ($key) {
    let self = this;
    return self._$at$ifAbsent$($key, function () {
     return self._$Error().$signal$("key not found");
    });
   };
   this.$at$ifAbsent$ = function ($key, $f) {
    let self = this;
    let NLR = new Object();
    try {
     {
      let t = self._$elementFor$(self._$valAt$ifAbsent$($key, function () {
       {
        let t = $f.$value();
        if (NLR === null) {
         self.cannotReturn(self, t);
        };
        NLR.value = t;
        throw NLR;
       };
      }));
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$ = function ($i, $tbl, $occupied, $empty, $deleted) {
    let self = this;
    let $el = nil;
    $el = $tbl.$at$($i);
    if ($el === nil) {
     return $empty.$value();
    };
    if ($el === $tbl) {
     return $deleted.$value();
    };
    return $occupied.$value$($el);
   };
   this.$buildValForKey$element$ = function ($k, $el) {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$checkValidity = function () {
    let self = this;
    let $c = nil;
    $c = 0;
    self._$contentsDo$(function ($val) {
     self._$assert$message$(function () {
      return self._$at$(self._$keyFor$($val)).$$equal(self._$elementFor$($val));
     }, "");
     return $c = $c + 1;
    });
    self._$assert$message$(function () {
     return $c.$$equal(self._$size());
    }, "");
    return self;
   };
   this.$contentsDo$ = function ($f) {
    let self = this;
    let $tbl = nil;
    "ACCESSBOGUS";
    $tbl = self._$table();
    if ($tbl === nil) {
     return self;
    };
    {
     let $index = nil;
     let $$limit = nil;
     nil;
     $index = 1;
     $$limit = $tbl.$size();
     for (; $$limit.$$greater$equal($index); ) {
      self._$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$($index, $tbl, function ($val) {
       return $f.$value$($val);
      }, function () {
       return nil;
      }, function () {
       return nil;
      });
      $index = (1).$$plus($index);
     };
    };
    return self;
   };
   this.$createFirstTable = function () {
    let self = this;
    self._$table$(self._$newTableWithSize$(self._$firstTableSize()));
    return self;
   };
   this.$do$ = function ($f) {
    let self = this;
    self._$contentsDo$(function ($val) {
     return $f.$value$(self._$elementFor$($val));
    });
    return self;
   };
   this.$elementFor$ = function ($val) {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$elementForCopy$ = function ($el) {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$firstTableSize = function () {
    let self = this;
    return 8;
   };
   this.$growIfNeeded = function () {
    let self = this;
    if (self._$minTableSizeForCapacity$(self._$occupied()).$$greater(self._$table().$size())) {
     self._$growTable();
    };
    return self;
   };
   this.$growTable = function () {
    let self = this;
    let $new = nil;
    $new = self._$newTableWithSize$(self._$table().$size() + self._$table().$size());
    self._$contentsDo$(function ($a_value) {
     return self._$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$(self._$keyFor$($a_value), $new, function ($index, $val) {
      return self._$shouldNotHappen();
     }, function ($index) {
      return $new.$at$put$($index, $a_value);
     }, function ($index) {
      return self._$shouldNotHappen();
     }, function ($index) {
      return nil;
     });
    });
    self._$deleted$(0);
    self._$table$($new);
    return self;
   };
   this.$hashFor$ = function ($key) {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$include$ = function ($val) {
    let self = this;
    return self._$include$ifNew$($val, function () {
     return nil;
    });
   };
   this.$include$ifNew$ = function ($val, $ifNew) {
    let self = this;
    return self._$tableAt$put$ifNew$(self._$keyFor$($val), self._$elementFor$($val), $ifNew);
   };
   this.$includeAll$ = function ($c) {
    let self = this;
    $c.$do$(function ($el) {
     return self._$include$($el);
    });
    return $c;
   };
   this.$includesIndex$ = function ($k) {
    let self = this;
    let NLR = new Object();
    try {
     self._$valAt$ifAbsent$($k, function () {
      {
       let t = false;
       if (NLR === null) {
        self.cannotReturn(self, t);
       };
       NLR.value = t;
       throw NLR;
      };
     });
     {
      let t = true;
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$includesKey$ = function ($k) {
    let self = this;
    return self._$includesIndex$($k);
   };
   this.$indexOf$ = function ($el) {
    let self = this;
    return self._$indexOf$ifAbsent$($el, function () {
     return self.$enclosingObjects$Collections$HashedCollection[0]._$error$("Element not found");
    });
   };
   this.$indexOf$ifAbsent$ = function ($el, $blk) {
    let self = this;
    let NLR = new Object();
    try {
     self._$contentsDo$(function ($v) {
      return self._$elementFor$($v).$$equal($el).$ifTrue$(function () {
       {
        let t = self._$keyFor$($v);
        if (NLR === null) {
         self.cannotReturn(self, t);
        };
        NLR.value = t;
        throw NLR;
       };
      });
     });
     {
      let t = $blk.$value();
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$indexOf$tableMask$ = function ($key, $mask) {
    let self = this;
    return self._$hashFor$($key).$bitAnd$($mask) + 1;
   };
   this.$initCapacity$ = function ($cap) {
    let self = this;
    self._$size$(0);
    self._$deleted$(0);
    if ($cap > 0) {
     self._$table$(self._$newTableWithSize$(self._$tableSizeForCapacity$($cap)));
    };
    return self;
   };
   this.$key$matches$ = function ($key1, $key2) {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$keyAtValue$ = function ($v) {
    let self = this;
    return self._$indexOf$($v);
   };
   this.$keyAtValue$ifAbsent$ = function ($v, $blk) {
    let self = this;
    return self._$indexOf$ifAbsent$($v, $blk);
   };
   this.$keyFor$ = function ($val) {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$keysDo$ = function ($f) {
    let self = this;
    self._$contentsDo$(function ($val) {
     return $f.$value$(self._$keyFor$($val));
    });
    return self;
   };
   this.$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$ = function ($key, $tbl, $matching, $empty, $marked, $mismatch) {
    let self = this;
    let NLR = new Object();
    try {
     let $i = nil;
     let $mask = nil;
     $mask = $tbl.$size() - 1;
     $i = self._$indexOf$tableMask$($key, $mask);
     {
      self._$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$($i, $tbl, function ($val) {
       return self._$key$matches$($key, self._$keyFor$($val)).$ifTrue$ifFalse$(function () {
        {
         let t = $matching.$value$value$($i, $val);
         if (NLR === null) {
          self.cannotReturn(self, t);
         };
         NLR.value = t;
         throw NLR;
        };
       }, function () {
        return $mismatch.$value$($i);
       });
      }, function () {
       {
        let t = $empty.$value$($i);
        if (NLR === null) {
         self.cannotReturn(self, t);
        };
        NLR.value = t;
        throw NLR;
       };
      }, function () {
       return $marked.$value$($i);
      });
      $i = ($i + self._$advanceAmount()).$bitAnd$($mask) + 1;
      for (; true; ) {
       self._$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$($i, $tbl, function ($val) {
        return self._$key$matches$($key, self._$keyFor$($val)).$ifTrue$ifFalse$(function () {
         {
          let t = $matching.$value$value$($i, $val);
          if (NLR === null) {
           self.cannotReturn(self, t);
          };
          NLR.value = t;
          throw NLR;
         };
        }, function () {
         return $mismatch.$value$($i);
        });
       }, function () {
        {
         let t = $empty.$value$($i);
         if (NLR === null) {
          self.cannotReturn(self, t);
         };
         NLR.value = t;
         throw NLR;
        };
       }, function () {
        return $marked.$value$($i);
       });
       $i = ($i + self._$advanceAmount()).$bitAnd$($mask) + 1;
      };
     };
     {
      let t = self;
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$ = function ($key, $matching, $empty, $marked) {
    let self = this;
    return self._$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$($key, self._$table(), $matching, $empty, $marked, function ($index) {
     return nil;
    });
   };
   this.$markDeleted$ = function ($index) {
    let self = this;
    let $tbl = nil;
    $tbl = self._$table();
    $tbl.$at$put$($index, $tbl);
    self._$deleted$(self._$deleted() + 1);
    return self;
   };
   this.$minTableSize = function () {
    let self = this;
    return 4;
   };
   this.$minTableSizeForCapacity$ = function ($cap) {
    let self = this;
    return $cap + $cap;
   };
   this.$newTableWithSize$ = function ($tableSize) {
    let self = this;
    return self._$Array().$new$($tableSize);
   };
   this.$objToIncludeFor$withExisting$ = function ($new, $other) {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$occupied = function () {
    let self = this;
    return self._$size() + self._$deleted();
   };
   this.$postCopy = function () {
    let self = this;
    let $tbl = nil;
    let $newtbl = nil;
    self.$super$Collections$HashedCollection$slot._$postCopy.call(self);
    $tbl = self._$table();
    if ($tbl === nil) {
     return self;
    };
    $newtbl = self._$newTableWithSize$($tbl.$size());
    {
     let $index = nil;
     let $$limit = nil;
     nil;
     $index = 1;
     $$limit = $tbl.$size();
     for (; $$limit.$$greater$equal($index); ) {
      self._$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$($index, $tbl, function ($val) {
       return $newtbl.$at$put$($index, self._$elementForCopy$($val));
      }, function () {
       return nil;
      }, function () {
       return $newtbl.$at$put$($index, $newtbl);
      });
      $index = (1).$$plus($index);
     };
    };
    self._$setTable$($newtbl);
    return self;
   };
   this.$printElementsDo$ = function ($f) {
    let self = this;
    self._$contentsDo$($f);
    return self;
   };
   this.$remove$ = function ($val) {
    let self = this;
    return self._$remove$ifAbsent$($val, function () {
     return self.$enclosingObjects$Collections$HashedCollection[0]._$error$("value not in collection");
    });
   };
   this.$remove$ifAbsent$ = function ($val, $f) {
    let self = this;
    self._$removeKey$ifAbsent$(self._$keyFor$($val), $f);
    return $val;
   };
   this.$removeAll$ = function ($c) {
    let self = this;
    $c.$do$(function ($el) {
     return self._$remove$($el);
    });
    return $c;
   };
   this.$removeAllSuchThat$ = function ($test) {
    let self = this;
    self._$copy().$contentsDo$(function ($el) {
     return $test.$value$($el).$ifTrue$(function () {
      return self._$remove$($el);
     });
    });
    return self;
   };
   this.$removeAt$ = function ($k) {
    let self = this;
    return self._$removeKey$($k);
   };
   this.$removeAt$ifAbsent$ = function ($k, $f) {
    let self = this;
    return self._$removeKey$ifAbsent$($k, $f);
   };
   this.$removeEvery$ = function ($val) {
    let self = this;
    self._$remove$ifAbsent$($val, function () {
     return nil;
    });
    return $val;
   };
   this.$removeKey$ = function ($key) {
    let self = this;
    return self._$removeKey$ifAbsent$($key, function () {
     return self.$enclosingObjects$Collections$HashedCollection[0]._$error$("key not found");
    });
   };
   this.$removeKey$ifAbsent$ = function ($key, $f) {
    let self = this;
    if (self._$table() === nil) {
     return $f.$value();
    };
    return self._$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$($key, function ($index, $val) {
     self._$markDeleted$($index);
     self._$size$(self._$size() - 1);
     return self._$elementFor$($val);
    }, function ($index) {
     return $f.$value();
    }, function ($index) {
     return nil;
    });
   };
   this.$setTable$ = function ($t) {
    let self = this;
    self._$table_0$($t);
    return self;
   };
   this.$size = function () {
    let self = this;
    return self._$size_0();
   };
   this.$size$ = function ($s) {
    let self = this;
    self._$size_0$($s);
    return self;
   };
   this.$table = function () {
    let self = this;
    return self._$table_0();
   };
   this.$table$ = function ($t) {
    let self = this;
    self._$setTable$($t);
    self._$assert$message$(function () {
     return self._$deleted().$$equal(0);
    }, "");
    return self;
   };
   this.$tableAt$put$ifNew$ = function ($key, $el, $onNew) {
    let self = this;
    let $reusableSlot = nil;
    if (self._$table() === nil) {
     self._$createFirstTable();
    };
    return self._$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$($key, function ($index, $val) {
     return self._$tableAt$put$inMatchingSlot$value$($key, $el, $index, $val);
    }, function ($index) {
     let $newVal = nil;
     if ($reusableSlot === nil) {
      $newVal = self._$tableAt$put$inEmptySlot$($key, $el, $index);
     } else {
      $newVal = self._$tableAt$put$inDeletedSlot$($key, $el, $reusableSlot);
     };
     $onNew.$value();
     return $newVal;
    }, function ($index) {
     return ($reusableSlot === nil).$ifTrue$(function () {
      return $reusableSlot = $index;
     });
    });
   };
   this.$tableAt$put$inDeletedSlot$ = function ($key, $el, $index) {
    let self = this;
    let $val = nil;
    $val = self._$tableAt$put$inUnusedSlot$($key, $el, $index);
    self._$deleted$(self._$deleted() - 1);
    return $val;
   };
   this.$tableAt$put$inEmptySlot$ = function ($key, $el, $index) {
    let self = this;
    let $val = nil;
    $val = self._$tableAt$put$inUnusedSlot$($key, $el, $index);
    self._$growIfNeeded();
    return $val;
   };
   this.$tableAt$put$inMatchingSlot$value$ = function ($key, $el, $index, $val) {
    let self = this;
    let $newVal = nil;
    $newVal = self._$objToIncludeFor$withExisting$(self._$buildValForKey$element$($key, $el), $val);
    self._$table().$at$put$($index, $newVal);
    return $newVal;
   };
   this.$tableAt$put$inUnusedSlot$ = function ($key, $el, $index) {
    let self = this;
    let $newVal = nil;
    $newVal = self._$buildValForKey$element$($key, $el);
    self._$table().$at$put$($index, $newVal);
    self._$size$(self._$size() + 1);
    return $newVal;
   };
   this.$tableSizeForCapacity$ = function ($cap) {
    let self = this;
    let $min = nil;
    let $tsize = nil;
    $min = self._$minTableSizeForCapacity$($cap);
    $tsize = self._$minTableSize();
    {
     for (; $tsize.$$less($min); ) {
      $tsize = $tsize + $tsize;
     };
    };
    return $tsize;
   };
   this.$valAt$ifAbsent$ = function ($key, $f) {
    let self = this;
    if (self._$table() === nil) {
     return $f.$value();
    };
    return self._$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$($key, function ($index, $val) {
     return $val;
    }, function ($index) {
     return $f.$value();
    }, function ($index) {
     return nil;
    });
   };
   this.$init$table_0$ = function (v) {
    this.$table_0$slot = v;
    return this;
   };
   this.$table_0 = function () {
    return this.$table_0$slot;
   };
   this.$table_0$ = function (v) {
    this.$table_0$slot = v;
    return this;
   };
   this.$init$size_0$ = function (v) {
    this.$size_0$slot = v;
    return this;
   };
   this.$size_0 = function () {
    return this.$size_0$slot;
   };
   this.$size_0$ = function (v) {
    this.$size_0$slot = v;
    return this;
   };
   this.$init$deleted$ = function (v) {
    this.$deleted$slot = v;
    return this;
   };
   this.$deleted = function () {
    return this.$deleted$slot;
   };
   this.$deleted$ = function (v) {
    this.$deleted$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`HashedCollection";
     this._$superInit$Collections$HashedCollection = $.$superInit$Collections$HashedCollection;
     this.$superInit$Collections$HashedCollection = dnuCatcher("$superInit$Collections$HashedCollection");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$add$ = this._$add$ = $.$add$;
     this.$addAll$ = this._$addAll$ = $.$addAll$;
     this._$advanceAmount = $.$advanceAmount;
     this.$advanceAmount = dnuCatcher("$advanceAmount");
     this.$at$ = this._$at$ = $.$at$;
     this.$at$ifAbsent$ = this._$at$ifAbsent$ = $.$at$ifAbsent$;
     this._$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$ = $.$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$;
     this.$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$ = dnuCatcher("$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$");
     this._$buildValForKey$element$ = $.$buildValForKey$element$;
     this.$buildValForKey$element$ = dnuCatcher("$buildValForKey$element$");
     this._$checkValidity = $.$checkValidity;
     this.$checkValidity = dnuCatcher("$checkValidity");
     this.$contentsDo$ = this._$contentsDo$ = $.$contentsDo$;
     this._$createFirstTable = $.$createFirstTable;
     this.$createFirstTable = dnuCatcher("$createFirstTable");
     this.$do$ = this._$do$ = $.$do$;
     this._$elementFor$ = $.$elementFor$;
     this.$elementFor$ = dnuCatcher("$elementFor$");
     this._$elementForCopy$ = $.$elementForCopy$;
     this.$elementForCopy$ = dnuCatcher("$elementForCopy$");
     this._$firstTableSize = $.$firstTableSize;
     this.$firstTableSize = dnuCatcher("$firstTableSize");
     this._$growIfNeeded = $.$growIfNeeded;
     this.$growIfNeeded = dnuCatcher("$growIfNeeded");
     this._$growTable = $.$growTable;
     this.$growTable = dnuCatcher("$growTable");
     this._$hashFor$ = $.$hashFor$;
     this.$hashFor$ = dnuCatcher("$hashFor$");
     this.$include$ = this._$include$ = $.$include$;
     this.$include$ifNew$ = this._$include$ifNew$ = $.$include$ifNew$;
     this.$includeAll$ = this._$includeAll$ = $.$includeAll$;
     this.$includesIndex$ = this._$includesIndex$ = $.$includesIndex$;
     this.$includesKey$ = this._$includesKey$ = $.$includesKey$;
     this.$indexOf$ = this._$indexOf$ = $.$indexOf$;
     this.$indexOf$ifAbsent$ = this._$indexOf$ifAbsent$ = $.$indexOf$ifAbsent$;
     this._$indexOf$tableMask$ = $.$indexOf$tableMask$;
     this.$indexOf$tableMask$ = dnuCatcher("$indexOf$tableMask$");
     this._$initCapacity$ = $.$initCapacity$;
     this.$initCapacity$ = dnuCatcher("$initCapacity$");
     this._$key$matches$ = $.$key$matches$;
     this.$key$matches$ = dnuCatcher("$key$matches$");
     this.$keyAtValue$ = this._$keyAtValue$ = $.$keyAtValue$;
     this.$keyAtValue$ifAbsent$ = this._$keyAtValue$ifAbsent$ = $.$keyAtValue$ifAbsent$;
     this._$keyFor$ = $.$keyFor$;
     this.$keyFor$ = dnuCatcher("$keyFor$");
     this.$keysDo$ = this._$keysDo$ = $.$keysDo$;
     this._$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$ = $.$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$;
     this.$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$ = dnuCatcher("$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$");
     this._$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$ = $.$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$;
     this.$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$ = dnuCatcher("$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$");
     this._$markDeleted$ = $.$markDeleted$;
     this.$markDeleted$ = dnuCatcher("$markDeleted$");
     this._$minTableSize = $.$minTableSize;
     this.$minTableSize = dnuCatcher("$minTableSize");
     this._$minTableSizeForCapacity$ = $.$minTableSizeForCapacity$;
     this.$minTableSizeForCapacity$ = dnuCatcher("$minTableSizeForCapacity$");
     this._$newTableWithSize$ = $.$newTableWithSize$;
     this.$newTableWithSize$ = dnuCatcher("$newTableWithSize$");
     this._$objToIncludeFor$withExisting$ = $.$objToIncludeFor$withExisting$;
     this.$objToIncludeFor$withExisting$ = dnuCatcher("$objToIncludeFor$withExisting$");
     this._$occupied = $.$occupied;
     this.$occupied = dnuCatcher("$occupied");
     this._$postCopy = $.$postCopy;
     this.$postCopy = dnuCatcher("$postCopy");
     this._$printElementsDo$ = $.$printElementsDo$;
     this.$printElementsDo$ = dnuCatcher("$printElementsDo$");
     this.$remove$ = this._$remove$ = $.$remove$;
     this.$remove$ifAbsent$ = this._$remove$ifAbsent$ = $.$remove$ifAbsent$;
     this.$removeAll$ = this._$removeAll$ = $.$removeAll$;
     this.$removeAllSuchThat$ = this._$removeAllSuchThat$ = $.$removeAllSuchThat$;
     this.$removeAt$ = this._$removeAt$ = $.$removeAt$;
     this.$removeAt$ifAbsent$ = this._$removeAt$ifAbsent$ = $.$removeAt$ifAbsent$;
     this.$removeEvery$ = this._$removeEvery$ = $.$removeEvery$;
     this.$removeKey$ = this._$removeKey$ = $.$removeKey$;
     this.$removeKey$ifAbsent$ = this._$removeKey$ifAbsent$ = $.$removeKey$ifAbsent$;
     this._$setTable$ = $.$setTable$;
     this.$setTable$ = dnuCatcher("$setTable$");
     this.$size = this._$size = $.$size;
     this._$size$ = $.$size$;
     this.$size$ = dnuCatcher("$size$");
     this._$table = $.$table;
     this.$table = dnuCatcher("$table");
     this._$table$ = $.$table$;
     this.$table$ = dnuCatcher("$table$");
     this._$tableAt$put$ifNew$ = $.$tableAt$put$ifNew$;
     this.$tableAt$put$ifNew$ = dnuCatcher("$tableAt$put$ifNew$");
     this._$tableAt$put$inDeletedSlot$ = $.$tableAt$put$inDeletedSlot$;
     this.$tableAt$put$inDeletedSlot$ = dnuCatcher("$tableAt$put$inDeletedSlot$");
     this._$tableAt$put$inEmptySlot$ = $.$tableAt$put$inEmptySlot$;
     this.$tableAt$put$inEmptySlot$ = dnuCatcher("$tableAt$put$inEmptySlot$");
     this._$tableAt$put$inMatchingSlot$value$ = $.$tableAt$put$inMatchingSlot$value$;
     this.$tableAt$put$inMatchingSlot$value$ = dnuCatcher("$tableAt$put$inMatchingSlot$value$");
     this._$tableAt$put$inUnusedSlot$ = $.$tableAt$put$inUnusedSlot$;
     this.$tableAt$put$inUnusedSlot$ = dnuCatcher("$tableAt$put$inUnusedSlot$");
     this._$tableSizeForCapacity$ = $.$tableSizeForCapacity$;
     this.$tableSizeForCapacity$ = dnuCatcher("$tableSizeForCapacity$");
     this._$valAt$ifAbsent$ = $.$valAt$ifAbsent$;
     this.$valAt$ifAbsent$ = dnuCatcher("$valAt$ifAbsent$");
     this._$init$table_0$ = $.$init$table_0$;
     this.$init$table_0$ = dnuCatcher("$init$table_0$");
     this._$table_0 = $.$table_0;
     this.$table_0 = dnuCatcher("$table_0");
     this._$table_0$ = $.$table_0$;
     this.$table_0$ = dnuCatcher("$table_0$");
     this._$init$size_0$ = $.$init$size_0$;
     this.$init$size_0$ = dnuCatcher("$init$size_0$");
     this._$size_0 = $.$size_0;
     this.$size_0 = dnuCatcher("$size_0");
     this._$size_0$ = $.$size_0$;
     this.$size_0$ = dnuCatcher("$size_0$");
     this._$init$deleted$ = $.$init$deleted$;
     this.$init$deleted$ = dnuCatcher("$init$deleted$");
     this._$deleted = $.$deleted;
     this.$deleted = dnuCatcher("$deleted");
     this._$deleted$ = $.$deleted$;
     this.$deleted$ = dnuCatcher("$deleted$");
     this.$enclosingObjects$Collections$HashedCollection = enclosingObjects;
     this.$super$Collections$HashedCollection$slot = runtimeSuperclass;
     this["Collections`HashedCollection"] = function () {
      superBasicNew.call(this);
      this.$table_0$slot = nil;
      this.$size_0$slot = nil;
      this.$deleted$slot = nil;
     };
     this.basicNew = this["Collections`HashedCollection"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Collections`HashedCollection";
    this.slots = [];
    this.methods = [
     new MM("new:", "public", true, 0),
     new MM("defaultCapacity", "public", false, 703)
    ];
    this.nestedClasses = [];
    this.$new$ = function ($cap) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($cap);
     return t;
    };
    this.$defaultCapacity = function () {
     let self = this;
     return 0;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`HashedCollection";
      this.$new$ = this._$new$ = $.$new$;
      this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
      this.$enclosingObjects$Collections$HashedCollection = enclosingObjects;
      this.$super$Collections$HashedCollection$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$IdentityMutableHashedMap = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Collections`IdentityMutableHashedMap";
   this.name = "Collections`IdentityMutableHashedMap";
   this.header = 704;
   this.slots = [];
   this.methods = [
    new MM("superInit`Collections`IdentityMutableHashedMap", "protected", true, 705),
    new MM("instance`initializer", "public", true, 706),
    new MM("hashFor:", "protected", false, 707),
    new MM("key:matches:", "protected", false, 708)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$IdentityMutableHashedMap = function ($cap) {
    let self = this;
    self.$super$Collections$IdentityMutableHashedMap$slot._$instance$initializer.call(self, $cap);
    return self;
   };
   this.$instance$initializer = function ($cap) {
    let self = this;
    self._$superInit$Collections$IdentityMutableHashedMap($cap);
    return self;
   };
   this.$hashFor$ = function ($key) {
    let self = this;
    return $key.$identityHash();
   };
   this.$key$matches$ = function ($k, $another) {
    let self = this;
    return $k === $another;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`IdentityMutableHashedMap";
     this._$superInit$Collections$IdentityMutableHashedMap = $.$superInit$Collections$IdentityMutableHashedMap;
     this.$superInit$Collections$IdentityMutableHashedMap = dnuCatcher("$superInit$Collections$IdentityMutableHashedMap");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$hashFor$ = $.$hashFor$;
     this.$hashFor$ = dnuCatcher("$hashFor$");
     this._$key$matches$ = $.$key$matches$;
     this.$key$matches$ = dnuCatcher("$key$matches$");
     this.$enclosingObjects$Collections$IdentityMutableHashedMap = enclosingObjects;
     this.$super$Collections$IdentityMutableHashedMap$slot = runtimeSuperclass;
     this["Collections`IdentityMutableHashedMap"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Collections`IdentityMutableHashedMap"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Collections`IdentityMutableHashedMap";
    this.slots = [];
    this.methods = [
     new MM("new:", "public", true, 0),
     new MM("defaultCapacity", "public", false, 709),
     new MM("new", "public", false, 710)
    ];
    this.nestedClasses = [];
    this.$new$ = function ($cap) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($cap);
     return t;
    };
    this.$defaultCapacity = function () {
     let self = this;
     return 0;
    };
    this.$new = function () {
     let self = this;
     return self._$new$(self._$defaultCapacity());
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`IdentityMutableHashedMap";
      this.$new$ = this._$new$ = $.$new$;
      this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Collections$IdentityMutableHashedMap = enclosingObjects;
      this.$super$Collections$IdentityMutableHashedMap$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$IdentitySet = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Collections`IdentitySet";
   this.name = "Collections`IdentitySet";
   this.header = 711;
   this.slots = [];
   this.methods = [
    new MM("superInit`Collections`IdentitySet", "protected", true, 712),
    new MM("instance`initializer", "public", true, 713),
    new MM("hashFor:", "protected", false, 714),
    new MM("key:matches:", "protected", false, 715)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$IdentitySet = function ($cap) {
    let self = this;
    self.$super$Collections$IdentitySet$slot._$instance$initializer.call(self, $cap);
    return self;
   };
   this.$instance$initializer = function ($cap) {
    let self = this;
    self._$superInit$Collections$IdentitySet($cap);
    return self;
   };
   this.$hashFor$ = function ($key) {
    let self = this;
    return $key.$identityHash();
   };
   this.$key$matches$ = function ($k, $another) {
    let self = this;
    return $k === $another;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`IdentitySet";
     this._$superInit$Collections$IdentitySet = $.$superInit$Collections$IdentitySet;
     this.$superInit$Collections$IdentitySet = dnuCatcher("$superInit$Collections$IdentitySet");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$hashFor$ = $.$hashFor$;
     this.$hashFor$ = dnuCatcher("$hashFor$");
     this._$key$matches$ = $.$key$matches$;
     this.$key$matches$ = dnuCatcher("$key$matches$");
     this.$enclosingObjects$Collections$IdentitySet = enclosingObjects;
     this.$super$Collections$IdentitySet$slot = runtimeSuperclass;
     this["Collections`IdentitySet"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Collections`IdentitySet"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Collections`IdentitySet";
    this.slots = [];
    this.methods = [
     new MM("new:", "public", true, 0),
     new MM("defaultCapacity", "public", false, 716),
     new MM("new", "public", false, 717),
     new MM("withAll:", "public", false, 718)
    ];
    this.nestedClasses = [];
    this.$new$ = function ($cap) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($cap);
     return t;
    };
    this.$defaultCapacity = function () {
     let self = this;
     return 0;
    };
    this.$new = function () {
     let self = this;
     return self._$new$(self._$defaultCapacity());
    };
    this.$withAll$ = function ($cltn) {
     let self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$includeAll$($cltn);
      return cascadeReceiver.$yourself();
     })(self._$new$($cltn.$size()));
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`IdentitySet";
      this.$new$ = this._$new$ = $.$new$;
      this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
      this.$new = this._$new = $.$new;
      this.$withAll$ = this._$withAll$ = $.$withAll$;
      this.$enclosingObjects$Collections$IdentitySet = enclosingObjects;
      this.$super$Collections$IdentitySet$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$Interval = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Collections`Interval";
   this.name = "Collections`Interval";
   this.header = 719;
   this.slots = [
    new SM("start", "public", false, false),
    new SM("stop", "public", false, false),
    new SM("increment", "public", false, false)
   ];
   this.methods = [
    new MM("superInit`Collections`Interval", "protected", true, 720),
    new MM("instance`initializer", "public", true, 721),
    new MM("at:", "public", false, 722),
    new MM("copyWithSize:", "protected", false, 723),
    new MM("do:", "public", false, 724),
    new MM("size", "public", false, 725),
    new MM("init`start:", "public", true, 0),
    new MM("start", "public", true, 0),
    new MM("init`stop:", "public", true, 0),
    new MM("stop", "public", true, 0),
    new MM("init`increment:", "public", true, 0),
    new MM("increment", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$Interval = function ($p_start, $p_stop, $p_step) {
    let self = this;
    self.$super$Collections$Interval$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($p_start, $p_stop, $p_step) {
    let self = this;
    self._$superInit$Collections$Interval($p_start, $p_stop, $p_step);
    self._$init$start$($p_start);
    self._$init$stop$($p_stop);
    self._$init$increment$($p_step);
    return self;
   };
   this.$at$ = function ($index) {
    let self = this;
    if (!(self._$start() - self._$stop()).$sign().$$equal(self._$increment().$sign())) {
     let $value = nil;
     $value = self._$start() + (self._$increment() * ($index - 1));
     if (self._$increment() >= 0) {
      if ($value.$between$and$(self._$start(), self._$stop())) {
       return $value;
      };
     } else {
      if ($value.$between$and$(self._$stop(), self._$start())) {
       return $value;
      };
     };
    };
    self._$Error().$signal$("Index out-of-range");
    return self;
   };
   this.$copyWithSize$ = function ($s) {
    let self = this;
    self._$unimplemented();
    return self;
   };
   this.$do$ = function ($action) {
    let self = this;
    let $value = nil;
    let $incr = nil;
    let $stp = nil;
    $value = self._$start();
    $incr = self._$increment();
    $stp = self._$stop();
    if ($incr >= 0) {
     {
      for (; $value.$$less$equal($stp); ) {
       $action.$value$($value);
       $value = $value + $incr;
      };
     };
    } else {
     {
      for (; $value.$$greater$equal($stp); ) {
       $action.$value$($value);
       $value = $value + $incr;
      };
     };
    };
    return self;
   };
   this.$size = function () {
    let self = this;
    return ((self._$stop() - self._$start()).$$over$over(self._$increment()) + 1).$max$(0);
   };
   this.$init$start$ = function (v) {
    this.$start$slot = v;
    return this;
   };
   this.$start = function () {
    return this.$start$slot;
   };
   this.$init$stop$ = function (v) {
    this.$stop$slot = v;
    return this;
   };
   this.$stop = function () {
    return this.$stop$slot;
   };
   this.$init$increment$ = function (v) {
    this.$increment$slot = v;
    return this;
   };
   this.$increment = function () {
    return this.$increment$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`Interval";
     this._$superInit$Collections$Interval = $.$superInit$Collections$Interval;
     this.$superInit$Collections$Interval = dnuCatcher("$superInit$Collections$Interval");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$at$ = this._$at$ = $.$at$;
     this._$copyWithSize$ = $.$copyWithSize$;
     this.$copyWithSize$ = dnuCatcher("$copyWithSize$");
     this.$do$ = this._$do$ = $.$do$;
     this.$size = this._$size = $.$size;
     this.$init$start$ = this._$init$start$ = $.$init$start$;
     this.$start = this._$start = $.$start;
     this.$init$stop$ = this._$init$stop$ = $.$init$stop$;
     this.$stop = this._$stop = $.$stop;
     this.$init$increment$ = this._$init$increment$ = $.$init$increment$;
     this.$increment = this._$increment = $.$increment;
     this.$enclosingObjects$Collections$Interval = enclosingObjects;
     this.$super$Collections$Interval$slot = runtimeSuperclass;
     this["Collections`Interval"] = function () {
      superBasicNew.call(this);
      this.$start$slot = nil;
      this.$stop$slot = nil;
      this.$increment$slot = nil;
     };
     this.basicNew = this["Collections`Interval"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Collections`Interval";
    this.slots = [];
    this.methods = [
     new MM("from:to:by:", "public", true, 0),
     new MM("from:to:", "public", false, 726)
    ];
    this.nestedClasses = [];
    this.$from$to$by$ = function ($p_start, $p_stop, $p_step) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($p_start, $p_stop, $p_step);
     return t;
    };
    this.$from$to$ = function ($start, $stop) {
     let self = this;
     return self._$from$to$by$($start, $stop, 1);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`Interval";
      this.$from$to$by$ = this._$from$to$by$ = $.$from$to$by$;
      this.$from$to$ = this._$from$to$ = $.$from$to$;
      this.$enclosingObjects$Collections$Interval = enclosingObjects;
      this.$super$Collections$Interval$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$MutableArrayList = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Collections`MutableArrayList";
   this.name = "Collections`MutableArrayList";
   this.header = 727;
   this.slots = [];
   this.methods = [
    new MM("superInit`Collections`MutableArrayList", "protected", true, 728),
    new MM("instance`initializer", "public", true, 729),
    new MM("add:", "public", false, 730),
    new MM("add:after:", "public", false, 731),
    new MM("add:afterIndex:", "public", false, 732),
    new MM("add:before:", "public", false, 733),
    new MM("add:beforeIndex:", "public", false, 734),
    new MM("addAllFirst:", "public", false, 735),
    new MM("addAllLast:", "public", false, 736),
    new MM("addFirst:", "public", false, 737),
    new MM("addLast:", "public", false, 738),
    new MM("asMutableArrayList", "public", false, 739),
    new MM("at:put:", "public", false, 740),
    new MM("collect:", "public", false, 741),
    new MM("copyWithSize:", "public", false, 742),
    new MM("newCopyOfSize:thatCanAlsoHoldElementsOf:", "public", false, 743),
    new MM("replaceFrom:to:with:startingAt:", "public", false, 744)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$MutableArrayList = function () {
    let self = this;
    self.$super$Collections$MutableArrayList$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Collections$MutableArrayList();
    return self;
   };
   this.$add$ = function ($e) {
    let self = this;
    return self._$addLast$($e);
   };
   this.$add$after$ = function ($el, $existing) {
    let self = this;
    let $index = nil;
    $index = self._$indexOf$($existing);
    if (!$index.$$equal(self._$size())) {
     $index = self._$makeSpace$beforeIndex$(1, ($index + self._$startGap()) + 1);
    } else {
     self._$needSpaceAtEnd$(1);
     $index = ($index + self._$startGap()) + 1;
    };
    return self._$contents().$at$put$($index, $el);
   };
   this.$add$afterIndex$ = function ($el, $i) {
    let self = this;
    return self._$add$beforeIndex$($el, $i + 1);
   };
   this.$add$before$ = function ($el, $existing) {
    let self = this;
    let $index = nil;
    $index = self._$indexOf$($existing);
    $index = self._$makeSpace$beforeIndex$(1, $index + self._$startGap());
    return self._$contents().$at$put$($index, $el);
   };
   this.$add$beforeIndex$ = function ($el, $i) {
    let self = this;
    let $index = nil;
    if (!$i.$$greater(self._$size())) {
     $index = self._$makeSpace$beforeIndex$(1, $i + self._$startGap());
    } else {
     self._$needSpaceAtEnd$(1);
     $index = $i + self._$startGap();
    };
    return self._$contents().$at$put$($index, $el);
   };
   this.$addAllFirst$ = function ($c) {
    let self = this;
    $c.$do$(function ($el) {
     return self._$addFirst$($el);
    });
    return $c;
   };
   this.$addAllLast$ = function ($c) {
    let self = this;
    $c.$do$(function ($el) {
     return self._$addLast$($el);
    });
    return $c;
   };
   this.$addFirst$ = function ($e) {
    let self = this;
    self._$needSpaceAtStart$(1);
    self._$contents().$at$put$(self._$startGap(), $e);
    self._$startGap$(self._$startGap() - 1);
    return $e;
   };
   this.$addLast$ = function ($e) {
    let self = this;
    self._$needSpaceAtEnd$(1);
    self._$lastIndex$(self._$lastIndex() + 1);
    self._$contents().$at$put$(self._$lastIndex(), $e);
    return $e;
   };
   this.$asMutableArrayList = function () {
    let self = this;
    return self;
   };
   this.$at$put$ = function ($i, $el) {
    let self = this;
    let $adjusted = nil;
    $adjusted = $i + self._$startGap();
    if (!((0 < $i) && $adjusted.$$less$equal(self._$lastIndex()))) {
     self.$enclosingObjects$Collections$MutableArrayList[0]._$error$("invalid index");
    };
    return self._$contents().$at$put$($adjusted, $el);
   };
   this.$collect$ = function ($map) {
    let self = this;
    return self._$collectUsingAdd$($map).$asMutableArrayList();
   };
   this.$copyWithSize$ = function ($s) {
    let self = this;
    let $oldLastIndex = nil;
    let $safeself = nil;
    let $copy = nil;
    $safeself = self;
    $oldLastIndex = self._$lastIndex();
    self._$lastIndex$($s + self._$startGap());
    $copy = $safeself.$copy();
    self._$lastIndex$($oldLastIndex);
    return $copy;
   };
   this.$newCopyOfSize$thatCanAlsoHoldElementsOf$ = function ($size, $other) {
    let self = this;
    return self.$enclosingObjects$Collections$MutableArrayList[0]._$MutableArrayList().$new$($size).$size$($size);
   };
   this.$replaceFrom$to$with$startingAt$ = function ($start, $stop, $other, $repStart) {
    let self = this;
    let $otheri = nil;
    if (!(($start >= 1) && $stop.$$less$equal(self._$size()))) {
     self.$enclosingObjects$Collections$MutableArrayList[0]._$error$("range out of bounds");
    };
    self._$contents().$replaceFrom$to$with$startingAt$($start + self._$startGap(), $stop + self._$startGap(), $other, $repStart);
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`MutableArrayList";
     this._$superInit$Collections$MutableArrayList = $.$superInit$Collections$MutableArrayList;
     this.$superInit$Collections$MutableArrayList = dnuCatcher("$superInit$Collections$MutableArrayList");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$add$ = this._$add$ = $.$add$;
     this.$add$after$ = this._$add$after$ = $.$add$after$;
     this.$add$afterIndex$ = this._$add$afterIndex$ = $.$add$afterIndex$;
     this.$add$before$ = this._$add$before$ = $.$add$before$;
     this.$add$beforeIndex$ = this._$add$beforeIndex$ = $.$add$beforeIndex$;
     this.$addAllFirst$ = this._$addAllFirst$ = $.$addAllFirst$;
     this.$addAllLast$ = this._$addAllLast$ = $.$addAllLast$;
     this.$addFirst$ = this._$addFirst$ = $.$addFirst$;
     this.$addLast$ = this._$addLast$ = $.$addLast$;
     this.$asMutableArrayList = this._$asMutableArrayList = $.$asMutableArrayList;
     this.$at$put$ = this._$at$put$ = $.$at$put$;
     this.$collect$ = this._$collect$ = $.$collect$;
     this.$copyWithSize$ = this._$copyWithSize$ = $.$copyWithSize$;
     this.$newCopyOfSize$thatCanAlsoHoldElementsOf$ = this._$newCopyOfSize$thatCanAlsoHoldElementsOf$ = $.$newCopyOfSize$thatCanAlsoHoldElementsOf$;
     this.$replaceFrom$to$with$startingAt$ = this._$replaceFrom$to$with$startingAt$ = $.$replaceFrom$to$with$startingAt$;
     this.$enclosingObjects$Collections$MutableArrayList = enclosingObjects;
     this.$super$Collections$MutableArrayList$slot = runtimeSuperclass;
     this["Collections`MutableArrayList"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Collections`MutableArrayList"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Collections`MutableArrayList";
    this.slots = [];
    this.methods = [
     new MM("new", "public", true, 0),
     new MM("defaultCapacity", "public", false, 745),
     new MM("new:", "public", false, 746),
     new MM("with:", "public", false, 747),
     new MM("withAll:", "public", false, 748)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.$defaultCapacity = function () {
     let self = this;
     return 5;
    };
    this.$new$ = function ($capacity) {
     let self = this;
     return self._$new().$initCapacity$($capacity);
    };
    this.$with$ = function ($val1) {
     let self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$add$($val1);
      return cascadeReceiver.$yourself();
     })(self._$new$(1));
    };
    this.$withAll$ = function ($cltn) {
     let self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$addAll$($cltn);
      return cascadeReceiver.$yourself();
     })(self._$new$($cltn.$size()));
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`MutableArrayList";
      this.$new = this._$new = $.$new;
      this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
      this.$new$ = this._$new$ = $.$new$;
      this.$with$ = this._$with$ = $.$with$;
      this.$withAll$ = this._$withAll$ = $.$withAll$;
      this.$enclosingObjects$Collections$MutableArrayList = enclosingObjects;
      this.$super$Collections$MutableArrayList$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$MutableHashedMap = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Collections`MutableHashedMap";
   this.name = "Collections`MutableHashedMap";
   this.header = 749;
   this.slots = [];
   this.methods = [
    new MM("superInit`Collections`MutableHashedMap", "protected", true, 750),
    new MM("instance`initializer", "public", true, 751),
    new MM("=", "public", false, 752),
    new MM("associationAt:", "protected", false, 753),
    new MM("associationAt:ifAbsent:", "protected", false, 754),
    new MM("associations", "protected", false, 755),
    new MM("associationsDo:", "protected", false, 756),
    new MM("at:ifAbsentPut:", "public", false, 757),
    new MM("at:ifPresent:ifAbsentPut:", "public", false, 758),
    new MM("at:put:", "public", false, 759),
    new MM("at:put:ifNew:", "protected", false, 760),
    new MM("buildValForKey:element:", "protected", false, 761),
    new MM("elementFor:", "protected", false, 762),
    new MM("elementForCopy:", "protected", false, 763),
    new MM("hashFor:", "protected", false, 764),
    new MM("includesAssociation:", "public", false, 765),
    new MM("isDictionary", "public", false, 766),
    new MM("isKindOfMap", "public", false, 767),
    new MM("key:matches:", "protected", false, 768),
    new MM("keyFor:", "protected", false, 769),
    new MM("keys", "public", false, 770),
    new MM("keysAndValuesDo:", "public", false, 771),
    new MM("objToIncludeFor:withExisting:", "protected", false, 772),
    new MM("tableAt:put:inMatchingSlot:value:", "protected", false, 773),
    new MM("values", "public", false, 774)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$MutableHashedMap = function ($cap) {
    let self = this;
    self.$super$Collections$MutableHashedMap$slot._$instance$initializer.call(self, $cap);
    return self;
   };
   this.$instance$initializer = function ($cap) {
    let self = this;
    self._$superInit$Collections$MutableHashedMap($cap);
    return self;
   };
   this.$$equal = function ($other) {
    let self = this;
    return self.$super$Collections$MutableHashedMap$slot._$$equal.call(self, $other) && ((self === $other) || self._$keys().$$equal($other.$keys()));
   };
   this.$associationAt$ = function ($key) {
    let self = this;
    return self._$associationAt$ifAbsent$($key, function () {
     return self.$enclosingObjects$Collections$MutableHashedMap[0]._$error$("key not found");
    });
   };
   this.$associationAt$ifAbsent$ = function ($key, $failBlock) {
    let self = this;
    return self._$valAt$ifAbsent$($key, $failBlock);
   };
   this.$associations = function () {
    let self = this;
    let $oc = nil;
    $oc = self.$enclosingObjects$Collections$MutableHashedMap[0]._$MutableArrayList().$new$(self._$size());
    self._$associationsDo$(function ($assoc) {
     return $oc.$add$($assoc);
    });
    return $oc;
   };
   this.$associationsDo$ = function ($f) {
    let self = this;
    self._$contentsDo$(function ($assoc) {
     return $f.$value$($assoc);
    });
    return self;
   };
   this.$at$ifAbsentPut$ = function ($key, $ablk) {
    let self = this;
    return self._$at$ifPresent$ifAbsentPut$($key, function ($e) {
     return $e;
    }, $ablk);
   };
   this.$at$ifPresent$ifAbsentPut$ = function ($key, $pblk, $ablk) {
    let self = this;
    let $reusableSlot = nil;
    "BOGUS";
    if (self._$table() === nil) {
     self._$createFirstTable();
    };
    return self._$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$($key, function ($index, $assoc) {
     let $el = nil;
     $el = $assoc.$value();
     $pblk.$value$($el);
     return $el;
    }, function ($index) {
     let $newEl = nil;
     $newEl = $ablk.$value();
     if ($reusableSlot === nil) {
      self._$tableAt$put$inEmptySlot$($key, $newEl, $index);
     } else {
      self._$tableAt$put$inDeletedSlot$($key, $newEl, $reusableSlot);
     };
     return $newEl;
    }, function ($index) {
     return ($reusableSlot === nil).$ifTrue$(function () {
      return $reusableSlot = $index;
     });
    });
   };
   this.$at$put$ = function ($key, $el) {
    let self = this;
    return self._$at$put$ifNew$($key, $el, function () {
     return nil;
    });
   };
   this.$at$put$ifNew$ = function ($key, $el, $blk) {
    let self = this;
    "BOGUS";
    self._$tableAt$put$ifNew$($key, $el, $blk);
    return $el;
   };
   this.$buildValForKey$element$ = function ($k, $el) {
    let self = this;
    return self.$enclosingObjects$Collections$MutableHashedMap[0]._$Association().$key$value$($k, $el);
   };
   this.$elementFor$ = function ($assoc) {
    let self = this;
    return $assoc.$value();
   };
   this.$elementForCopy$ = function ($el) {
    let self = this;
    return $el.$copy();
   };
   this.$hashFor$ = function ($key) {
    let self = this;
    return $key.$hash();
   };
   this.$includesAssociation$ = function ($assoc) {
    let self = this;
    let NLR = new Object();
    try {
     {
      let t = self._$at$ifAbsent$($assoc.$key(), function () {
       {
        let t = false;
        if (NLR === null) {
         self.cannotReturn(self, t);
        };
        NLR.value = t;
        throw NLR;
       };
      }).$$equal($assoc.$value());
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$isDictionary = function () {
    let self = this;
    return true;
   };
   this.$isKindOfMap = function () {
    let self = this;
    return true;
   };
   this.$key$matches$ = function ($k, $another) {
    let self = this;
    return $k.$$equal($another);
   };
   this.$keyFor$ = function ($assoc) {
    let self = this;
    return $assoc.$key();
   };
   this.$keys = function () {
    let self = this;
    let $s = nil;
    $s = self.$enclosingObjects$Collections$MutableHashedMap[0]._$Set().$new$(self._$size());
    self._$keysDo$(function ($key) {
     return $s.$include$($key);
    });
    return $s;
   };
   this.$keysAndValuesDo$ = function ($action) {
    let self = this;
    self._$contentsDo$(function ($assoc) {
     return $action.$value$value$($assoc.$key(), $assoc.$value());
    });
    return self;
   };
   this.$objToIncludeFor$withExisting$ = function ($newAssoc, $assoc) {
    let self = this;
    $assoc.$value$($newAssoc.$value());
    return $assoc;
   };
   this.$tableAt$put$inMatchingSlot$value$ = function ($key, $el, $index, $val) {
    let self = this;
    $val.$value$($el);
    return $val;
   };
   this.$values = function () {
    let self = this;
    return self._$inject$into$(self.$enclosingObjects$Collections$MutableHashedMap[0]._$MutableArrayList().$new$(self._$size()), function ($oc, $el) {
     return (function (cascadeReceiver) {
      cascadeReceiver.$add$($el);
      return cascadeReceiver.$yourself();
     })($oc);
    });
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`MutableHashedMap";
     this._$superInit$Collections$MutableHashedMap = $.$superInit$Collections$MutableHashedMap;
     this.$superInit$Collections$MutableHashedMap = dnuCatcher("$superInit$Collections$MutableHashedMap");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$$equal = this._$$equal = $.$$equal;
     this._$associationAt$ = $.$associationAt$;
     this.$associationAt$ = dnuCatcher("$associationAt$");
     this._$associationAt$ifAbsent$ = $.$associationAt$ifAbsent$;
     this.$associationAt$ifAbsent$ = dnuCatcher("$associationAt$ifAbsent$");
     this._$associations = $.$associations;
     this.$associations = dnuCatcher("$associations");
     this._$associationsDo$ = $.$associationsDo$;
     this.$associationsDo$ = dnuCatcher("$associationsDo$");
     this.$at$ifAbsentPut$ = this._$at$ifAbsentPut$ = $.$at$ifAbsentPut$;
     this.$at$ifPresent$ifAbsentPut$ = this._$at$ifPresent$ifAbsentPut$ = $.$at$ifPresent$ifAbsentPut$;
     this.$at$put$ = this._$at$put$ = $.$at$put$;
     this._$at$put$ifNew$ = $.$at$put$ifNew$;
     this.$at$put$ifNew$ = dnuCatcher("$at$put$ifNew$");
     this._$buildValForKey$element$ = $.$buildValForKey$element$;
     this.$buildValForKey$element$ = dnuCatcher("$buildValForKey$element$");
     this._$elementFor$ = $.$elementFor$;
     this.$elementFor$ = dnuCatcher("$elementFor$");
     this._$elementForCopy$ = $.$elementForCopy$;
     this.$elementForCopy$ = dnuCatcher("$elementForCopy$");
     this._$hashFor$ = $.$hashFor$;
     this.$hashFor$ = dnuCatcher("$hashFor$");
     this.$includesAssociation$ = this._$includesAssociation$ = $.$includesAssociation$;
     this.$isDictionary = this._$isDictionary = $.$isDictionary;
     this.$isKindOfMap = this._$isKindOfMap = $.$isKindOfMap;
     this._$key$matches$ = $.$key$matches$;
     this.$key$matches$ = dnuCatcher("$key$matches$");
     this._$keyFor$ = $.$keyFor$;
     this.$keyFor$ = dnuCatcher("$keyFor$");
     this.$keys = this._$keys = $.$keys;
     this.$keysAndValuesDo$ = this._$keysAndValuesDo$ = $.$keysAndValuesDo$;
     this._$objToIncludeFor$withExisting$ = $.$objToIncludeFor$withExisting$;
     this.$objToIncludeFor$withExisting$ = dnuCatcher("$objToIncludeFor$withExisting$");
     this._$tableAt$put$inMatchingSlot$value$ = $.$tableAt$put$inMatchingSlot$value$;
     this.$tableAt$put$inMatchingSlot$value$ = dnuCatcher("$tableAt$put$inMatchingSlot$value$");
     this.$values = this._$values = $.$values;
     this.$enclosingObjects$Collections$MutableHashedMap = enclosingObjects;
     this.$super$Collections$MutableHashedMap$slot = runtimeSuperclass;
     this["Collections`MutableHashedMap"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Collections`MutableHashedMap"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Collections`MutableHashedMap";
    this.slots = [];
    this.methods = [
     new MM("new:", "public", true, 0),
     new MM("defaultCapacity", "public", false, 775),
     new MM("new", "public", false, 776),
     new MM("with:", "public", false, 777),
     new MM("withAll:", "public", false, 778)
    ];
    this.nestedClasses = [];
    this.$new$ = function ($cap) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($cap);
     return t;
    };
    this.$defaultCapacity = function () {
     let self = this;
     return 0;
    };
    this.$new = function () {
     let self = this;
     return self._$new$(self._$defaultCapacity());
    };
    this.$with$ = function ($val1) {
     let self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$include$($val1);
      return cascadeReceiver.$yourself();
     })(self._$new$(1));
    };
    this.$withAll$ = function ($cltn) {
     let self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$includeAll$($cltn);
      return cascadeReceiver.$yourself();
     })(self._$new$($cltn.$size()));
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`MutableHashedMap";
      this.$new$ = this._$new$ = $.$new$;
      this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
      this.$new = this._$new = $.$new;
      this.$with$ = this._$with$ = $.$with$;
      this.$withAll$ = this._$withAll$ = $.$withAll$;
      this.$enclosingObjects$Collections$MutableHashedMap = enclosingObjects;
      this.$super$Collections$MutableHashedMap$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$MutableList = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Collections`MutableList";
   this.name = "Collections`MutableList";
   this.header = 779;
   this.slots = [];
   this.methods = [
    new MM("superInit`Collections`MutableList", "protected", true, 780),
    new MM("instance`initializer", "public", true, 781),
    new MM("at:put:", "public", false, 782),
    new MM("defaultMedianOf:and:and:", "protected", false, 783),
    new MM("defaultSort:to:", "protected", false, 784),
    new MM("medianOf:and:and:using:", "protected", false, 785),
    new MM("readWriteStream", "protected", false, 786),
    new MM("replaceFrom:to:with:", "public", false, 787),
    new MM("replaceFrom:to:with:startingAt:", "public", false, 788),
    new MM("swap:with:", "protected", false, 789),
    new MM("writeStream", "protected", false, 790)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$MutableList = function () {
    let self = this;
    self.$super$Collections$MutableList$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Collections$MutableList();
    return self;
   };
   this.$at$put$ = function ($index, $el) {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$defaultMedianOf$and$and$ = function ($a, $b, $c) {
    let self = this;
    let $atA = nil;
    let $atB = nil;
    let $atC = nil;
    $atA = self._$at$($a);
    $atB = self._$at$($b);
    $atC = self._$at$($c);
    return $atB.$$less$equal($atA).$ifFalse$ifTrue$(function () {
     return $atC.$$less$equal($atB).$ifFalse$ifTrue$(function () {
      return $b;
     }, function () {
      return $atC.$$less$equal($atA).$ifFalse$ifTrue$(function () {
       return $c;
      }, function () {
       return $a;
      });
     });
    }, function () {
     return $atB.$$less$equal($atC).$ifFalse$ifTrue$(function () {
      return $b;
     }, function () {
      return $atA.$$less$equal($atC).$ifFalse$ifTrue$(function () {
       return $c;
      }, function () {
       return $a;
      });
     });
    });
   };
   this.$defaultSort$to$ = function ($l, $r) {
    let self = this;
    let $i = nil;
    let $j = nil;
    let $x = nil;
    let $m = nil;
    let $n = nil;
    $i = $l;
    $j = $r;
    $n = ($r - $l) + 1;
    if ($n === 0) {
     return self;
    };
    $m = ($l + $r).$$over$over(2);
    if ($n > 7) {
     let $pl = nil;
     let $pn = nil;
     let $s = nil;
     $pl = $l;
     $pn = $r;
     if ($n > 40) {
      $s = $n.$$over$over(8);
      $pl = self._$defaultMedianOf$and$and$($pl, $pl + $s, ($pl + $s) + $s);
      $m = self._$defaultMedianOf$and$and$($m - $s, $m, $m + $s);
      $pn = self._$defaultMedianOf$and$and$(($pn - $s) - $s, $pn - $s, $pn);
     };
     $m = self._$defaultMedianOf$and$and$($pl, $m, $pn);
    };
    $x = self._$at$($m);
    {
     for (; $i.$$less$equal($j); ) {
      let $ati = nil;
      let $atj = nil;
      {
       for (; !$x.$$less$equal($ati = self._$at$($i)); ) {
        $i = $i + 1;
       };
      };
      {
       for (; !($atj = self._$at$($j)).$$less$equal($x); ) {
        $j = $j - 1;
       };
      };
      if ($i.$$less$equal($j)) {
       self._$at$put$($i, $atj);
       self._$at$put$($j, $ati);
       $i = $i + 1;
       $j = $j - 1;
      };
     };
    };
    if ($l.$$less($j)) {
     self._$defaultSort$to$($l, $j);
    };
    if ($i.$$less($r)) {
     self._$defaultSort$to$($i, $r);
    };
    return self;
   };
   this.$medianOf$and$and$using$ = function ($a, $b, $c, $compare) {
    let self = this;
    let $atA = nil;
    let $atB = nil;
    let $atC = nil;
    $atA = self._$at$($a);
    $atB = self._$at$($b);
    $atC = self._$at$($c);
    return $compare.$value$value$($atB, $atA).$ifFalse$ifTrue$(function () {
     return $compare.$value$value$($atC, $atB).$ifFalse$ifTrue$(function () {
      return $b;
     }, function () {
      return $compare.$value$value$($atC, $atA).$ifFalse$ifTrue$(function () {
       return $c;
      }, function () {
       return $a;
      });
     });
    }, function () {
     return $compare.$value$value$($atB, $atC).$ifFalse$ifTrue$(function () {
      return $b;
     }, function () {
      return $compare.$value$value$($atA, $atC).$ifFalse$ifTrue$(function () {
       return $c;
      }, function () {
       return $a;
      });
     });
    });
   };
   this.$readWriteStream = function () {
    let self = this;
    return $0.$ListReadWriteStream(self.$enclosingObjects$Collections$MutableList[0]).$on$(self);
   };
   this.$replaceFrom$to$with$ = function ($start, $stop, $other) {
    let self = this;
    return self._$replaceFrom$to$with$startingAt$($start, $stop, $other, 1);
   };
   this.$replaceFrom$to$with$startingAt$ = function ($start, $stop, $other, $repStart) {
    let self = this;
    let $otheri = nil;
    if (!$repStart.$$less($start)) {
     $otheri = $repStart;
     {
      let $i = nil;
      let $$limit = nil;
      nil;
      $i = $start;
      $$limit = $stop;
      for (; $$limit.$$greater$equal($i); ) {
       self._$at$put$($i, $other.$at$($otheri));
       $otheri = $otheri + 1;
       $i = (1).$$plus($i);
      };
     };
    } else {
     $otheri = $repStart + ($stop - $start);
     {
      let $i = nil;
      let $$limit = nil;
      nil;
      $i = $stop;
      $$limit = $start;
      for (; $$limit.$$less$equal($i); ) {
       self._$at$put$($i, $other.$at$($otheri));
       $otheri = $otheri - 1;
       $i = (-1).$$plus($i);
      };
     };
    };
    return self;
   };
   this.$swap$with$ = function ($i, $j) {
    let self = this;
    let $t = nil;
    $t = self._$at$($i);
    self._$at$put$($i, self._$at$($j));
    self._$at$put$($j, $t);
    return self;
   };
   this.$writeStream = function () {
    let self = this;
    return self._$readWriteStream();
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`MutableList";
     this._$superInit$Collections$MutableList = $.$superInit$Collections$MutableList;
     this.$superInit$Collections$MutableList = dnuCatcher("$superInit$Collections$MutableList");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$at$put$ = this._$at$put$ = $.$at$put$;
     this._$defaultMedianOf$and$and$ = $.$defaultMedianOf$and$and$;
     this.$defaultMedianOf$and$and$ = dnuCatcher("$defaultMedianOf$and$and$");
     this._$defaultSort$to$ = $.$defaultSort$to$;
     this.$defaultSort$to$ = dnuCatcher("$defaultSort$to$");
     this._$medianOf$and$and$using$ = $.$medianOf$and$and$using$;
     this.$medianOf$and$and$using$ = dnuCatcher("$medianOf$and$and$using$");
     this._$readWriteStream = $.$readWriteStream;
     this.$readWriteStream = dnuCatcher("$readWriteStream");
     this.$replaceFrom$to$with$ = this._$replaceFrom$to$with$ = $.$replaceFrom$to$with$;
     this.$replaceFrom$to$with$startingAt$ = this._$replaceFrom$to$with$startingAt$ = $.$replaceFrom$to$with$startingAt$;
     this._$swap$with$ = $.$swap$with$;
     this.$swap$with$ = dnuCatcher("$swap$with$");
     this._$writeStream = $.$writeStream;
     this.$writeStream = dnuCatcher("$writeStream");
     this.$enclosingObjects$Collections$MutableList = enclosingObjects;
     this.$super$Collections$MutableList$slot = runtimeSuperclass;
     this["Collections`MutableList"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Collections`MutableList"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Collections`MutableList";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`MutableList";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Collections$MutableList = enclosingObjects;
      this.$super$Collections$MutableList$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$Set = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Collections`Set";
   this.name = "Collections`Set";
   this.header = 791;
   this.slots = [];
   this.methods = [
    new MM("superInit`Collections`Set", "protected", true, 792),
    new MM("instance`initializer", "public", true, 793),
    new MM("asSet", "public", false, 794),
    new MM("buildValForKey:element:", "protected", false, 795),
    new MM("elementFor:", "protected", false, 796),
    new MM("elementForCopy:", "protected", false, 797),
    new MM("hasSameElementsAs:", "public", false, 798),
    new MM("hashFor:", "protected", false, 799),
    new MM("includes:", "public", false, 800),
    new MM("isKindOfSet", "public", false, 801),
    new MM("key:matches:", "protected", false, 802),
    new MM("keyFor:", "protected", false, 803),
    new MM("objToIncludeFor:withExisting:", "protected", false, 804)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$Set = function ($cap) {
    let self = this;
    self.$super$Collections$Set$slot._$instance$initializer.call(self, $cap);
    return self;
   };
   this.$instance$initializer = function ($cap) {
    let self = this;
    self._$superInit$Collections$Set($cap);
    return self;
   };
   this.$asSet = function () {
    let self = this;
    return self;
   };
   this.$buildValForKey$element$ = function ($key, $el) {
    let self = this;
    return $el;
   };
   this.$elementFor$ = function ($el) {
    let self = this;
    return $el;
   };
   this.$elementForCopy$ = function ($el) {
    let self = this;
    return $el;
   };
   this.$hasSameElementsAs$ = function ($other) {
    let self = this;
    let NLR = new Object();
    try {
     let $otherSet = nil;
     if (!self._$size().$$equal($other.$size())) {
      {
       let t = false;
       NLR = null;
       return t;
      };
     };
     $otherSet = $other.$asSet();
     if (!self._$size().$$equal($otherSet.$size())) {
      {
       let t = false;
       NLR = null;
       return t;
      };
     };
     self._$do$(function ($el) {
      return $otherSet.$includes$($el).$ifFalse$(function () {
       {
        let t = false;
        if (NLR === null) {
         self.cannotReturn(self, t);
        };
        NLR.value = t;
        throw NLR;
       };
      });
     });
     {
      let t = true;
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$hashFor$ = function ($key) {
    let self = this;
    return $key.$hash();
   };
   this.$includes$ = function ($o) {
    let self = this;
    return self._$includesKey$($o);
   };
   this.$isKindOfSet = function () {
    let self = this;
    return true;
   };
   this.$key$matches$ = function ($k, $another) {
    let self = this;
    return $k.$$equal($another);
   };
   this.$keyFor$ = function ($e) {
    let self = this;
    return $e;
   };
   this.$objToIncludeFor$withExisting$ = function ($new, $other) {
    let self = this;
    return $new;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`Set";
     this._$superInit$Collections$Set = $.$superInit$Collections$Set;
     this.$superInit$Collections$Set = dnuCatcher("$superInit$Collections$Set");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$asSet = this._$asSet = $.$asSet;
     this._$buildValForKey$element$ = $.$buildValForKey$element$;
     this.$buildValForKey$element$ = dnuCatcher("$buildValForKey$element$");
     this._$elementFor$ = $.$elementFor$;
     this.$elementFor$ = dnuCatcher("$elementFor$");
     this._$elementForCopy$ = $.$elementForCopy$;
     this.$elementForCopy$ = dnuCatcher("$elementForCopy$");
     this.$hasSameElementsAs$ = this._$hasSameElementsAs$ = $.$hasSameElementsAs$;
     this._$hashFor$ = $.$hashFor$;
     this.$hashFor$ = dnuCatcher("$hashFor$");
     this.$includes$ = this._$includes$ = $.$includes$;
     this.$isKindOfSet = this._$isKindOfSet = $.$isKindOfSet;
     this._$key$matches$ = $.$key$matches$;
     this.$key$matches$ = dnuCatcher("$key$matches$");
     this._$keyFor$ = $.$keyFor$;
     this.$keyFor$ = dnuCatcher("$keyFor$");
     this._$objToIncludeFor$withExisting$ = $.$objToIncludeFor$withExisting$;
     this.$objToIncludeFor$withExisting$ = dnuCatcher("$objToIncludeFor$withExisting$");
     this.$enclosingObjects$Collections$Set = enclosingObjects;
     this.$super$Collections$Set$slot = runtimeSuperclass;
     this["Collections`Set"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Collections`Set"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Collections`Set";
    this.slots = [];
    this.methods = [
     new MM("new:", "public", true, 0),
     new MM("defaultCapacity", "public", false, 805),
     new MM("new", "public", false, 806),
     new MM("with:", "public", false, 807),
     new MM("withAll:", "public", false, 808)
    ];
    this.nestedClasses = [];
    this.$new$ = function ($cap) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($cap);
     return t;
    };
    this.$defaultCapacity = function () {
     let self = this;
     return 0;
    };
    this.$new = function () {
     let self = this;
     return self._$new$(self._$defaultCapacity());
    };
    this.$with$ = function ($val1) {
     let self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$include$($val1);
      return cascadeReceiver.$yourself();
     })(self._$new$(1));
    };
    this.$withAll$ = function ($cltn) {
     let self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$includeAll$($cltn);
      return cascadeReceiver.$yourself();
     })(self._$new$($cltn.$size()));
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`Set";
      this.$new$ = this._$new$ = $.$new$;
      this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
      this.$new = this._$new = $.$new;
      this.$with$ = this._$with$ = $.$with$;
      this.$withAll$ = this._$withAll$ = $.$withAll$;
      this.$enclosingObjects$Collections$Set = enclosingObjects;
      this.$super$Collections$Set$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$SortedList = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Collections`SortedList";
   this.name = "Collections`SortedList";
   this.header = 809;
   this.slots = [
    new SM("usesDefaultSortBlock_private", "private", true, false),
    new SM("sortBlock_private", "private", true, false)
   ];
   this.methods = [
    new MM("superInit`Collections`SortedList", "protected", true, 810),
    new MM("instance`initializer", "public", true, 811),
    new MM("add:", "public", false, 812),
    new MM("addAll:", "public", false, 813),
    new MM("asSortedList", "public", false, 814),
    new MM("indexFor:", "protected", false, 815),
    new MM("initCapacity:", "public", false, 816),
    new MM("isSorted", "public", false, 817),
    new MM("sort", "public", false, 818),
    new MM("sortBlock", "public", false, 819),
    new MM("sortBlock:", "public", false, 820),
    new MM("usesDefaultSortBlock", "public", false, 821),
    new MM("init`usesDefaultSortBlock_private:", "private", true, 0),
    new MM("usesDefaultSortBlock_private", "private", true, 0),
    new MM("usesDefaultSortBlock_private:", "private", true, 0),
    new MM("init`sortBlock_private:", "private", true, 0),
    new MM("sortBlock_private", "private", true, 0),
    new MM("sortBlock_private:", "private", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Collections$SortedList = function () {
    let self = this;
    self.$super$Collections$SortedList$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Collections$SortedList();
    self._$initCapacity$(self._$class().$defaultCapacity());
    $1.$sortBlock_private$(self, self.$enclosingObjects$Collections$SortedList[0]._$SortedList().$defaultSortBlock());
    $1.$usesDefaultSortBlock_private$(self, true);
    return self;
   };
   this.$add$ = function ($el) {
    let self = this;
    let $index = nil;
    $index = self._$indexFor$($el);
    if (!$index.$$greater(self._$contents().$size())) {
     $index = self._$makeSpace$beforeIndex$(1, $index);
    } else {
     self._$needSpaceAtEnd$(1);
     self._$lastIndex$(self._$lastIndex() + 1);
    };
    return self._$contents().$at$put$($index, $el);
   };
   this.$addAll$ = function ($els) {
    let self = this;
    if ($els.$size().$$greater(self._$size().$$over$over(8))) {
     self._$needSpaceAtEnd$($els.$size());
     $els.$do$(function ($el) {
      self._$lastIndex$(self._$lastIndex() + 1);
      return self._$contents().$at$put$(self._$lastIndex(), $el);
     });
     self._$sort();
    } else {
     $els.$do$(function ($el) {
      return self._$add$($el);
     });
    };
    return $els;
   };
   this.$asSortedList = function () {
    let self = this;
    return self;
   };
   this.$indexFor$ = function ($el) {
    let self = this;
    return self._$contents().$binarySearchFor$between$and$toCompare$($el, self._$startGap() + 1, self._$lastIndex(), self._$sortBlock());
   };
   this.$initCapacity$ = function ($cap) {
    let self = this;
    self.$super$Collections$SortedList$slot._$initCapacity$.call(self, $cap);
    return self;
   };
   this.$isSorted = function () {
    let self = this;
    return self._$isSortedBy$(self._$sortBlock());
   };
   this.$sort = function () {
    let self = this;
    if (self._$usesDefaultSortBlock()) {
     self._$contents().$defaultSort$to$(self._$startGap() + 1, self._$lastIndex());
    } else {
     self._$contents().$sort$to$using$(self._$startGap() + 1, self._$lastIndex(), self._$sortBlock());
    };
    return self;
   };
   this.$sortBlock = function () {
    let self = this;
    return $1.$sortBlock_private(self);
   };
   this.$sortBlock$ = function ($sortBy) {
    let self = this;
    $1.$sortBlock_private$(self, $sortBy);
    $1.$usesDefaultSortBlock_private$(self, false);
    if (!self._$isEmpty()) {
     self._$sort();
    };
    return self;
   };
   this.$usesDefaultSortBlock = function () {
    let self = this;
    return $1.$usesDefaultSortBlock_private(self);
   };
   this.$init$usesDefaultSortBlock_private$ = function (self, v) {
    self.$usesDefaultSortBlock_private$slot = v;
    return self;
   };
   this.$usesDefaultSortBlock_private = function (self) {
    return self.$usesDefaultSortBlock_private$slot;
   };
   this.$usesDefaultSortBlock_private$ = function (self, v) {
    self.$usesDefaultSortBlock_private$slot = v;
    return self;
   };
   this.$init$sortBlock_private$ = function (self, v) {
    self.$sortBlock_private$slot = v;
    return self;
   };
   this.$sortBlock_private = function (self) {
    return self.$sortBlock_private$slot;
   };
   this.$sortBlock_private$ = function (self, v) {
    self.$sortBlock_private$slot = v;
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Collections`SortedList";
     this._$superInit$Collections$SortedList = $.$superInit$Collections$SortedList;
     this.$superInit$Collections$SortedList = dnuCatcher("$superInit$Collections$SortedList");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$add$ = this._$add$ = $.$add$;
     this.$addAll$ = this._$addAll$ = $.$addAll$;
     this.$asSortedList = this._$asSortedList = $.$asSortedList;
     this._$indexFor$ = $.$indexFor$;
     this.$indexFor$ = dnuCatcher("$indexFor$");
     this.$initCapacity$ = this._$initCapacity$ = $.$initCapacity$;
     this.$isSorted = this._$isSorted = $.$isSorted;
     this.$sort = this._$sort = $.$sort;
     this.$sortBlock = this._$sortBlock = $.$sortBlock;
     this.$sortBlock$ = this._$sortBlock$ = $.$sortBlock$;
     this.$usesDefaultSortBlock = this._$usesDefaultSortBlock = $.$usesDefaultSortBlock;
     this.$enclosingObjects$Collections$SortedList = enclosingObjects;
     this.$super$Collections$SortedList$slot = runtimeSuperclass;
     this["Collections`SortedList"] = function () {
      superBasicNew.call(this);
      this.$usesDefaultSortBlock_private$slot = nil;
      this.$sortBlock_private$slot = nil;
     };
     this.basicNew = this["Collections`SortedList"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Collections`SortedList";
    this.slots = [];
    this.methods = [
     new MM("new", "public", true, 0),
     new MM("defaultCapacity", "public", false, 822),
     new MM("defaultSortBlock", "public", false, 823),
     new MM("new:", "public", false, 824),
     new MM("new:sortBlock:", "public", false, 825),
     new MM("sortBlock:", "public", false, 826),
     new MM("with:", "public", false, 827),
     new MM("withAll:", "public", false, 828)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.$defaultCapacity = function () {
     let self = this;
     return 5;
    };
    this.$defaultSortBlock = function () {
     let self = this;
     return function ($el1, $el2) {
      return $el1.$$less$equal($el2);
     };
    };
    this.$new$ = function ($capacity) {
     let self = this;
     return self._$new().$initCapacity$($capacity);
    };
    this.$new$sortBlock$ = function ($capacity, $sort) {
     let self = this;
     return self._$new$($capacity).$sortBlock$($sort);
    };
    this.$sortBlock$ = function ($sort) {
     let self = this;
     return self._$new$sortBlock$(self._$defaultCapacity(), $sort);
    };
    this.$with$ = function ($val1) {
     let self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$add$($val1);
      return cascadeReceiver.$yourself();
     })(self._$new$(1));
    };
    this.$withAll$ = function ($cltn) {
     let self = this;
     return (function (cascadeReceiver) {
      cascadeReceiver.$addAll$($cltn);
      return cascadeReceiver.$yourself();
     })(self._$new$($cltn.$size()));
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Collections`SortedList";
      this.$new = this._$new = $.$new;
      this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
      this.$defaultSortBlock = this._$defaultSortBlock = $.$defaultSortBlock;
      this.$new$ = this._$new$ = $.$new$;
      this.$new$sortBlock$ = this._$new$sortBlock$ = $.$new$sortBlock$;
      this.$sortBlock$ = this._$sortBlock$ = $.$sortBlock$;
      this.$with$ = this._$with$ = $.$with$;
      this.$withAll$ = this._$withAll$ = $.$withAll$;
      this.$enclosingObjects$Collections$SortedList = enclosingObjects;
      this.$super$Collections$SortedList$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Collections$AbstractList.enclosingMixin = this;
  this.$Collections$AddableList.enclosingMixin = this;
  this.$Collections$Association.enclosingMixin = this;
  this.$Collections$Collection.enclosingMixin = this;
  this.$Collections$HashedCollection.enclosingMixin = this;
  this.$Collections$IdentityMutableHashedMap.enclosingMixin = this;
  this.$Collections$IdentitySet.enclosingMixin = this;
  this.$Collections$Interval.enclosingMixin = this;
  this.$Collections$MutableArrayList.enclosingMixin = this;
  this.$Collections$MutableHashedMap.enclosingMixin = this;
  this.$Collections$MutableList.enclosingMixin = this;
  this.$Collections$Set.enclosingMixin = this;
  this.$Collections$SortedList.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for Collections";
    this._$superInit$Collections = $.$superInit$Collections;
    this.$superInit$Collections = dnuCatcher("$superInit$Collections");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this.$IdentityMap = this._$IdentityMap = $.$IdentityMap;
    this.$List = this._$List = $.$List;
    this.$Map = this._$Map = $.$Map;
    this._$error$ = $.$error$;
    this.$error$ = dnuCatcher("$error$");
    this._$AbstractList = $.$AbstractList;
    this.$AbstractList = dnuCatcher("$AbstractList");
    this._$AddableList = $.$AddableList;
    this.$AddableList = dnuCatcher("$AddableList");
    this.$Association = this._$Association = $.$Association;
    this.$Collection = this._$Collection = $.$Collection;
    this._$HashedCollection = $.$HashedCollection;
    this.$HashedCollection = dnuCatcher("$HashedCollection");
    this._$IdentityMutableHashedMap = $.$IdentityMutableHashedMap;
    this.$IdentityMutableHashedMap = dnuCatcher("$IdentityMutableHashedMap");
    this.$IdentitySet = this._$IdentitySet = $.$IdentitySet;
    this.$Interval = this._$Interval = $.$Interval;
    this._$MutableArrayList = $.$MutableArrayList;
    this.$MutableArrayList = dnuCatcher("$MutableArrayList");
    this._$MutableHashedMap = $.$MutableHashedMap;
    this.$MutableHashedMap = dnuCatcher("$MutableHashedMap");
    this._$MutableList = $.$MutableList;
    this.$MutableList = dnuCatcher("$MutableList");
    this.$Set = this._$Set = $.$Set;
    this.$SortedList = this._$SortedList = $.$SortedList;
    this.$init$WeakArray$ = this._$init$WeakArray$ = $.$init$WeakArray$;
    this.$WeakArray = this._$WeakArray = $.$WeakArray;
    this.$init$Collections$AbstractList$ = this._$init$Collections$AbstractList$ = $.$init$Collections$AbstractList$;
    this.$Collections$AbstractList = this._$Collections$AbstractList = $.$Collections$AbstractList;
    this.$Collections$AbstractList$ = this._$Collections$AbstractList$ = $.$Collections$AbstractList$;
    this.$init$Collections$AddableList$ = this._$init$Collections$AddableList$ = $.$init$Collections$AddableList$;
    this.$Collections$AddableList = this._$Collections$AddableList = $.$Collections$AddableList;
    this.$Collections$AddableList$ = this._$Collections$AddableList$ = $.$Collections$AddableList$;
    this.$init$Collections$Association$ = this._$init$Collections$Association$ = $.$init$Collections$Association$;
    this.$Collections$Association = this._$Collections$Association = $.$Collections$Association;
    this.$Collections$Association$ = this._$Collections$Association$ = $.$Collections$Association$;
    this.$init$Collections$Collection$ = this._$init$Collections$Collection$ = $.$init$Collections$Collection$;
    this.$Collections$Collection = this._$Collections$Collection = $.$Collections$Collection;
    this.$Collections$Collection$ = this._$Collections$Collection$ = $.$Collections$Collection$;
    this.$init$Collections$HashedCollection$ = this._$init$Collections$HashedCollection$ = $.$init$Collections$HashedCollection$;
    this.$Collections$HashedCollection = this._$Collections$HashedCollection = $.$Collections$HashedCollection;
    this.$Collections$HashedCollection$ = this._$Collections$HashedCollection$ = $.$Collections$HashedCollection$;
    this.$init$Collections$IdentityMutableHashedMap$ = this._$init$Collections$IdentityMutableHashedMap$ = $.$init$Collections$IdentityMutableHashedMap$;
    this.$Collections$IdentityMutableHashedMap = this._$Collections$IdentityMutableHashedMap = $.$Collections$IdentityMutableHashedMap;
    this.$Collections$IdentityMutableHashedMap$ = this._$Collections$IdentityMutableHashedMap$ = $.$Collections$IdentityMutableHashedMap$;
    this.$init$Collections$IdentitySet$ = this._$init$Collections$IdentitySet$ = $.$init$Collections$IdentitySet$;
    this.$Collections$IdentitySet = this._$Collections$IdentitySet = $.$Collections$IdentitySet;
    this.$Collections$IdentitySet$ = this._$Collections$IdentitySet$ = $.$Collections$IdentitySet$;
    this.$init$Collections$Interval$ = this._$init$Collections$Interval$ = $.$init$Collections$Interval$;
    this.$Collections$Interval = this._$Collections$Interval = $.$Collections$Interval;
    this.$Collections$Interval$ = this._$Collections$Interval$ = $.$Collections$Interval$;
    this.$init$Collections$MutableArrayList$ = this._$init$Collections$MutableArrayList$ = $.$init$Collections$MutableArrayList$;
    this.$Collections$MutableArrayList = this._$Collections$MutableArrayList = $.$Collections$MutableArrayList;
    this.$Collections$MutableArrayList$ = this._$Collections$MutableArrayList$ = $.$Collections$MutableArrayList$;
    this.$init$Collections$MutableHashedMap$ = this._$init$Collections$MutableHashedMap$ = $.$init$Collections$MutableHashedMap$;
    this.$Collections$MutableHashedMap = this._$Collections$MutableHashedMap = $.$Collections$MutableHashedMap;
    this.$Collections$MutableHashedMap$ = this._$Collections$MutableHashedMap$ = $.$Collections$MutableHashedMap$;
    this.$init$Collections$MutableList$ = this._$init$Collections$MutableList$ = $.$init$Collections$MutableList$;
    this.$Collections$MutableList = this._$Collections$MutableList = $.$Collections$MutableList;
    this.$Collections$MutableList$ = this._$Collections$MutableList$ = $.$Collections$MutableList$;
    this.$init$Collections$Set$ = this._$init$Collections$Set$ = $.$init$Collections$Set$;
    this.$Collections$Set = this._$Collections$Set = $.$Collections$Set;
    this.$Collections$Set$ = this._$Collections$Set$ = $.$Collections$Set$;
    this.$init$Collections$SortedList$ = this._$init$Collections$SortedList$ = $.$init$Collections$SortedList$;
    this.$Collections$SortedList = this._$Collections$SortedList = $.$Collections$SortedList;
    this.$Collections$SortedList$ = this._$Collections$SortedList$ = $.$Collections$SortedList$;
    this.$enclosingObjects$Collections = enclosingObjects;
    this.$super$Collections$slot = runtimeSuperclass;
    this.Collections = function () {
     superBasicNew.call(this);
     this.$MutableAddableList$slot = nil;
     this.$ListReadStream$slot = nil;
     this.$ListReadWriteStream$slot = nil;
     this.$WeakArray$slot = nil;
     this.$Collections$AbstractList$slot = nil;
     this.$Collections$AddableList$slot = nil;
     this.$Collections$Association$slot = nil;
     this.$Collections$Collection$slot = nil;
     this.$Collections$HashedCollection$slot = nil;
     this.$Collections$IdentityMutableHashedMap$slot = nil;
     this.$Collections$IdentitySet$slot = nil;
     this.$Collections$Interval$slot = nil;
     this.$Collections$MutableArrayList$slot = nil;
     this.$Collections$MutableHashedMap$slot = nil;
     this.$Collections$MutableList$slot = nil;
     this.$Collections$Set$slot = nil;
     this.$Collections$SortedList$slot = nil;
    };
    this.basicNew = this.Collections;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   let $ = this;
   this.debug = "Runtime meta mixin for Collections";
   this.slots = [];
   this.methods = [new MM("usingPlatform:", "public", true, 0)];
   this.nestedClasses = [];
   this.$usingPlatform$ = function ($p) {
    let t = new this.nonMeta.basicNew();
    t.$instance$initializer($p);
    return t;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for Collections";
     this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
     this.$enclosingObjects$Collections = enclosingObjects;
     this.$super$Collections$slot = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$MirrorsForV8 = new function () {
  let $ = this;
  let $0 = this;
  this.debug = "Runtime mixin for MirrorsForV8";
  this.name = "MirrorsForV8";
  this.header = 829;
  this.slots = [
   new SM("List", "private", false, false),
   new SM("Map", "private", false, false),
   new SM("Mixin", "private", false, false),
   new SM("StringBuilder", "private", false, false),
   new SM("ImmutableMirrorGroup", "private", false, false),
   new SM("vmmirror", "private", false, false),
   new SM("parserLib", "private", false, false),
   new SM("grammar", "private", false, false),
   new SM("asts", "private", false, false),
   new SM("parsing", "private", false, false),
   new SM("generation", "private", false, false),
   new SM("compilation", "private", false, false),
   new SM("compiler", "private", false, false),
   new SM("MirrorsForV8`AbstractClassHeaderMirror", "public", true, true),
   new SM("MirrorsForV8`ClassDeclarationBuilder", "public", true, true),
   new SM("MirrorsForV8`ClassDeclarationMirror", "public", true, true),
   new SM("MirrorsForV8`ClassHeaderMirror", "public", true, true),
   new SM("MirrorsForV8`ClassMirror", "public", true, true),
   new SM("MirrorsForV8`IRBasedClassDeclarationBuilder", "public", true, true),
   new SM("MirrorsForV8`MethodBuilder", "public", true, true),
   new SM("MirrorsForV8`MethodMirror", "public", true, true),
   new SM("MirrorsForV8`MixinBasedClassDeclarationBuilder", "public", true, true),
   new SM("MirrorsForV8`MixinBuilder", "public", true, true),
   new SM("MirrorsForV8`MixinMirror", "public", true, true),
   new SM("MirrorsForV8`MutableMethodGroup", "public", true, true),
   new SM("MirrorsForV8`MutableMirrorGroup", "public", true, true),
   new SM("MirrorsForV8`MutableNestedClassGroup", "public", true, true),
   new SM("MirrorsForV8`ObjectMirror", "public", true, true),
   new SM("MirrorsForV8`SlotDeclarationMirror", "public", true, true),
   new SM("MirrorsForV8`SourceBasedClassHeaderMirror", "public", true, true),
   new SM("MirrorsForV8`ThreadMirror", "public", true, true)
  ];
  this.methods = [
   new MM("superInit`MirrorsForV8", "protected", true, 830),
   new MM("instance`initializer", "public", true, 831),
   new MM("classDeclIRFor:within:", "protected", false, 832),
   new MM("classMixinOf:", "protected", false, 833),
   new MM("identityHashOf:", "private", false, 834),
   new MM("sourceForMethod:ofMixin:", "protected", false, 835),
   new MM("sourceIndexForMethod:ofMixin:", "protected", false, 836),
   new MM("AbstractClassHeaderMirror", "protected", true, 0),
   new MM("ClassDeclarationBuilder", "public", true, 0),
   new MM("ClassDeclarationMirror", "protected", true, 0),
   new MM("ClassHeaderMirror", "protected", true, 0),
   new MM("ClassMirror", "public", true, 0),
   new MM("IRBasedClassDeclarationBuilder", "protected", true, 0),
   new MM("MethodBuilder", "protected", true, 0),
   new MM("MethodMirror", "protected", true, 0),
   new MM("MixinBasedClassDeclarationBuilder", "public", true, 0),
   new MM("MixinBuilder", "protected", true, 0),
   new MM("MixinMirror", "protected", true, 0),
   new MM("MutableMethodGroup", "protected", true, 0),
   new MM("MutableMirrorGroup", "protected", true, 0),
   new MM("MutableNestedClassGroup", "protected", true, 0),
   new MM("ObjectMirror", "public", true, 0),
   new MM("SlotDeclarationMirror", "protected", true, 0),
   new MM("SourceBasedClassHeaderMirror", "protected", true, 0),
   new MM("ThreadMirror", "protected", true, 0),
   new MM("init`List:", "private", true, 0),
   new MM("List", "private", true, 0),
   new MM("init`Map:", "private", true, 0),
   new MM("Map", "private", true, 0),
   new MM("init`Mixin:", "private", true, 0),
   new MM("Mixin", "private", true, 0),
   new MM("init`StringBuilder:", "private", true, 0),
   new MM("StringBuilder", "private", true, 0),
   new MM("init`ImmutableMirrorGroup:", "private", true, 0),
   new MM("ImmutableMirrorGroup", "private", true, 0),
   new MM("init`vmmirror:", "private", true, 0),
   new MM("vmmirror", "private", true, 0),
   new MM("init`parserLib:", "private", true, 0),
   new MM("parserLib", "private", true, 0),
   new MM("init`grammar:", "private", true, 0),
   new MM("grammar", "private", true, 0),
   new MM("init`asts:", "private", true, 0),
   new MM("asts", "private", true, 0),
   new MM("init`parsing:", "private", true, 0),
   new MM("parsing", "private", true, 0),
   new MM("init`generation:", "private", true, 0),
   new MM("generation", "private", true, 0),
   new MM("init`compilation:", "private", true, 0),
   new MM("compilation", "private", true, 0),
   new MM("init`compiler:", "private", true, 0),
   new MM("compiler", "private", true, 0),
   new MM("init`MirrorsForV8`AbstractClassHeaderMirror:", "public", true, 0),
   new MM("MirrorsForV8`AbstractClassHeaderMirror", "public", true, 0),
   new MM("MirrorsForV8`AbstractClassHeaderMirror:", "public", true, 0),
   new MM("init`MirrorsForV8`ClassDeclarationBuilder:", "public", true, 0),
   new MM("MirrorsForV8`ClassDeclarationBuilder", "public", true, 0),
   new MM("MirrorsForV8`ClassDeclarationBuilder:", "public", true, 0),
   new MM("init`MirrorsForV8`ClassDeclarationMirror:", "public", true, 0),
   new MM("MirrorsForV8`ClassDeclarationMirror", "public", true, 0),
   new MM("MirrorsForV8`ClassDeclarationMirror:", "public", true, 0),
   new MM("init`MirrorsForV8`ClassHeaderMirror:", "public", true, 0),
   new MM("MirrorsForV8`ClassHeaderMirror", "public", true, 0),
   new MM("MirrorsForV8`ClassHeaderMirror:", "public", true, 0),
   new MM("init`MirrorsForV8`ClassMirror:", "public", true, 0),
   new MM("MirrorsForV8`ClassMirror", "public", true, 0),
   new MM("MirrorsForV8`ClassMirror:", "public", true, 0),
   new MM("init`MirrorsForV8`IRBasedClassDeclarationBuilder:", "public", true, 0),
   new MM("MirrorsForV8`IRBasedClassDeclarationBuilder", "public", true, 0),
   new MM("MirrorsForV8`IRBasedClassDeclarationBuilder:", "public", true, 0),
   new MM("init`MirrorsForV8`MethodBuilder:", "public", true, 0),
   new MM("MirrorsForV8`MethodBuilder", "public", true, 0),
   new MM("MirrorsForV8`MethodBuilder:", "public", true, 0),
   new MM("init`MirrorsForV8`MethodMirror:", "public", true, 0),
   new MM("MirrorsForV8`MethodMirror", "public", true, 0),
   new MM("MirrorsForV8`MethodMirror:", "public", true, 0),
   new MM("init`MirrorsForV8`MixinBasedClassDeclarationBuilder:", "public", true, 0),
   new MM("MirrorsForV8`MixinBasedClassDeclarationBuilder", "public", true, 0),
   new MM("MirrorsForV8`MixinBasedClassDeclarationBuilder:", "public", true, 0),
   new MM("init`MirrorsForV8`MixinBuilder:", "public", true, 0),
   new MM("MirrorsForV8`MixinBuilder", "public", true, 0),
   new MM("MirrorsForV8`MixinBuilder:", "public", true, 0),
   new MM("init`MirrorsForV8`MixinMirror:", "public", true, 0),
   new MM("MirrorsForV8`MixinMirror", "public", true, 0),
   new MM("MirrorsForV8`MixinMirror:", "public", true, 0),
   new MM("init`MirrorsForV8`MutableMethodGroup:", "public", true, 0),
   new MM("MirrorsForV8`MutableMethodGroup", "public", true, 0),
   new MM("MirrorsForV8`MutableMethodGroup:", "public", true, 0),
   new MM("init`MirrorsForV8`MutableMirrorGroup:", "public", true, 0),
   new MM("MirrorsForV8`MutableMirrorGroup", "public", true, 0),
   new MM("MirrorsForV8`MutableMirrorGroup:", "public", true, 0),
   new MM("init`MirrorsForV8`MutableNestedClassGroup:", "public", true, 0),
   new MM("MirrorsForV8`MutableNestedClassGroup", "public", true, 0),
   new MM("MirrorsForV8`MutableNestedClassGroup:", "public", true, 0),
   new MM("init`MirrorsForV8`ObjectMirror:", "public", true, 0),
   new MM("MirrorsForV8`ObjectMirror", "public", true, 0),
   new MM("MirrorsForV8`ObjectMirror:", "public", true, 0),
   new MM("init`MirrorsForV8`SlotDeclarationMirror:", "public", true, 0),
   new MM("MirrorsForV8`SlotDeclarationMirror", "public", true, 0),
   new MM("MirrorsForV8`SlotDeclarationMirror:", "public", true, 0),
   new MM("init`MirrorsForV8`SourceBasedClassHeaderMirror:", "public", true, 0),
   new MM("MirrorsForV8`SourceBasedClassHeaderMirror", "public", true, 0),
   new MM("MirrorsForV8`SourceBasedClassHeaderMirror:", "public", true, 0),
   new MM("init`MirrorsForV8`ThreadMirror:", "public", true, 0),
   new MM("MirrorsForV8`ThreadMirror", "public", true, 0),
   new MM("MirrorsForV8`ThreadMirror:", "public", true, 0)
  ];
  this.nestedClasses = [
   "MirrorsForV8`AbstractClassHeaderMirror",
   "MirrorsForV8`ClassDeclarationBuilder",
   "MirrorsForV8`ClassDeclarationMirror",
   "MirrorsForV8`ClassHeaderMirror",
   "MirrorsForV8`ClassMirror",
   "MirrorsForV8`IRBasedClassDeclarationBuilder",
   "MirrorsForV8`MethodBuilder",
   "MirrorsForV8`MethodMirror",
   "MirrorsForV8`MixinBasedClassDeclarationBuilder",
   "MirrorsForV8`MixinBuilder",
   "MirrorsForV8`MixinMirror",
   "MirrorsForV8`MutableMethodGroup",
   "MirrorsForV8`MutableMirrorGroup",
   "MirrorsForV8`MutableNestedClassGroup",
   "MirrorsForV8`ObjectMirror",
   "MirrorsForV8`SlotDeclarationMirror",
   "MirrorsForV8`SourceBasedClassHeaderMirror",
   "MirrorsForV8`ThreadMirror"
  ];
  this.applications = [];
  this.$superInit$MirrorsForV8 = function ($p, $r, $vmm) {
   let self = this;
   self.$super$MirrorsForV8$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($p, $r, $vmm) {
   let self = this;
   self._$superInit$MirrorsForV8($p, $r, $vmm);
   $0.$init$List$(self, $p.$collections().$List());
   $0.$init$Map$(self, $p.$collections().$Map());
   $0.$init$Mixin$(self, $p.$kernel().$Mixin());
   $0.$init$StringBuilder$(self, $p.$kernel().$StringBuilder());
   $0.$init$ImmutableMirrorGroup$(self, $r.$MirrorGroups().$usingLib$($p).$ImmutableMirrorGroup());
   $0.$init$vmmirror$(self, $vmm);
   $0.$init$parserLib$(self, self._$Future().$computing$(function () {
    return $r.$CombinatorialParsing().$usingPlatform$($p);
   }));
   $0.$init$grammar$(self, self._$Future().$computing$(function () {
    return $r.$NewspeakGrammar().$usingPlatform$parsers$($p, $0.$parserLib(self));
   }));
   $0.$init$asts$(self, self._$Future().$computing$(function () {
    return $r.$NewspeakASTs().$usingLib$($p);
   }));
   $0.$init$parsing$(self, self._$Future().$computing$(function () {
    return $r.$NewspeakParsing().$usingPlatform$grammar$asts$($p, $0.$grammar(self), $0.$asts(self));
   }));
   $0.$init$generation$(self, self._$Future().$computing$(function () {
    return $r.$JavascriptGeneration().$usingPlatform$($p);
   }));
   $0.$init$compilation$(self, self._$Future().$computing$(function () {
    return $r.$Compilation().$usingPlatform$asts$parsing$generation$($p, $0.$asts(self), $0.$parsing(self), $0.$generation(self));
   }));
   $0.$init$compiler$(self, self._$Future().$computing$(function () {
    return $0.$compilation(self).$Compiler().$new();
   }));
   return self;
  };
  this.$classDeclIRFor$within$ = function ($mixin, $enclosing) {
   let self = this;
   let $source = nil;
   $source = "Newspeak3 'Uncategorized' ".$$comma(self._$ClassDeclarationMirror().$reflecting$($mixin).$source());
   return $0.$compiler(self).$compileClassSource$within$($source, $enclosing);
  };
  this.$classMixinOf$ = function ($m) {
   let self = this;
   return $0.$Mixin(self).$fromRuntimeMixin$($m.runtimeMixin.meta);
  };
  this.$identityHashOf$ = function (self, $object) {
   {
    for (; $object.hashCode.$$equal(0); ) {
     $object.hashCode = Math.random() * 0x3FFFFFF | 0;
    };
   };
   return $object.hashCode;
  };
  this.$sourceForMethod$ofMixin$ = function ($methodName, $m) {
   let self = this;
   let $js = nil;
   let $sourceIndex = nil;
   $js = $0.$generation(self).$factory();
   $sourceIndex = self._$sourceIndexForMethod$ofMixin$($methodName, $m);
   return $js.$propertyOf$at$($js.$ident$("sources"), $sourceIndex);
  };
  this.$sourceIndexForMethod$ofMixin$ = function ($methodName, $m) {
   let self = this;
   let $js = nil;
   let $methodMetadata = nil;
   $js = $0.$generation(self).$factory();
   $methodMetadata = $js.$propertyOf$at$($m, $js.$literal$("methods")).$select$(function ($e) {
    return $js.$propertyOf$at$($e, "name").$$equal($methodName);
   });
   return $js.$propertyOf$at$($methodMetadata, "source");
  };
  this.$AbstractClassHeaderMirror = function () {
   if (nil === this.$MirrorsForV8$AbstractClassHeaderMirror$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    let mixin = $.$MirrorsForV8$AbstractClassHeaderMirror;
    this.$MirrorsForV8$AbstractClassHeaderMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$AbstractClassHeaderMirror$slot;
  };
  this.$ClassDeclarationBuilder = function () {
   if (nil === this.$MirrorsForV8$ClassDeclarationBuilder$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    let mixin = $.$MirrorsForV8$ClassDeclarationBuilder;
    this.$MirrorsForV8$ClassDeclarationBuilder$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$ClassDeclarationBuilder$slot;
  };
  this.$ClassDeclarationMirror = function () {
   if (nil === this.$MirrorsForV8$ClassDeclarationMirror$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    let mixin = $.$MirrorsForV8$ClassDeclarationMirror;
    this.$MirrorsForV8$ClassDeclarationMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$ClassDeclarationMirror$slot;
  };
  this.$ClassHeaderMirror = function () {
   if (nil === this.$MirrorsForV8$ClassHeaderMirror$slot) {
    let self = this;
    let superclass = self._$AbstractClassHeaderMirror();
    let enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    let mixin = $.$MirrorsForV8$ClassHeaderMirror;
    this.$MirrorsForV8$ClassHeaderMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$ClassHeaderMirror$slot;
  };
  this.$ClassMirror = function () {
   if (nil === this.$MirrorsForV8$ClassMirror$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    let mixin = $.$MirrorsForV8$ClassMirror;
    this.$MirrorsForV8$ClassMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$ClassMirror$slot;
  };
  this.$IRBasedClassDeclarationBuilder = function () {
   if (nil === this.$MirrorsForV8$IRBasedClassDeclarationBuilder$slot) {
    let self = this;
    let superclass = self._$ClassDeclarationBuilder();
    let enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    let mixin = $.$MirrorsForV8$IRBasedClassDeclarationBuilder;
    this.$MirrorsForV8$IRBasedClassDeclarationBuilder$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$IRBasedClassDeclarationBuilder$slot;
  };
  this.$MethodBuilder = function () {
   if (nil === this.$MirrorsForV8$MethodBuilder$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    let mixin = $.$MirrorsForV8$MethodBuilder;
    this.$MirrorsForV8$MethodBuilder$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$MethodBuilder$slot;
  };
  this.$MethodMirror = function () {
   if (nil === this.$MirrorsForV8$MethodMirror$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    let mixin = $.$MirrorsForV8$MethodMirror;
    this.$MirrorsForV8$MethodMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$MethodMirror$slot;
  };
  this.$MixinBasedClassDeclarationBuilder = function () {
   if (nil === this.$MirrorsForV8$MixinBasedClassDeclarationBuilder$slot) {
    let self = this;
    let superclass = self._$ClassDeclarationBuilder();
    let enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    let mixin = $.$MirrorsForV8$MixinBasedClassDeclarationBuilder;
    this.$MirrorsForV8$MixinBasedClassDeclarationBuilder$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$MixinBasedClassDeclarationBuilder$slot;
  };
  this.$MixinBuilder = function () {
   if (nil === this.$MirrorsForV8$MixinBuilder$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    let mixin = $.$MirrorsForV8$MixinBuilder;
    this.$MirrorsForV8$MixinBuilder$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$MixinBuilder$slot;
  };
  this.$MixinMirror = function () {
   if (nil === this.$MirrorsForV8$MixinMirror$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    let mixin = $.$MirrorsForV8$MixinMirror;
    this.$MirrorsForV8$MixinMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$MixinMirror$slot;
  };
  this.$MutableMethodGroup = function () {
   if (nil === this.$MirrorsForV8$MutableMethodGroup$slot) {
    let self = this;
    let superclass = self._$MutableMirrorGroup();
    let enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    let mixin = $.$MirrorsForV8$MutableMethodGroup;
    this.$MirrorsForV8$MutableMethodGroup$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$MutableMethodGroup$slot;
  };
  this.$MutableMirrorGroup = function () {
   if (nil === this.$MirrorsForV8$MutableMirrorGroup$slot) {
    let self = this;
    let superclass = $0.$ImmutableMirrorGroup(self);
    let enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    let mixin = $.$MirrorsForV8$MutableMirrorGroup;
    this.$MirrorsForV8$MutableMirrorGroup$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$MutableMirrorGroup$slot;
  };
  this.$MutableNestedClassGroup = function () {
   if (nil === this.$MirrorsForV8$MutableNestedClassGroup$slot) {
    let self = this;
    let superclass = self._$MutableMirrorGroup();
    let enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    let mixin = $.$MirrorsForV8$MutableNestedClassGroup;
    this.$MirrorsForV8$MutableNestedClassGroup$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$MutableNestedClassGroup$slot;
  };
  this.$ObjectMirror = function () {
   if (nil === this.$MirrorsForV8$ObjectMirror$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    let mixin = $.$MirrorsForV8$ObjectMirror;
    this.$MirrorsForV8$ObjectMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$ObjectMirror$slot;
  };
  this.$SlotDeclarationMirror = function () {
   if (nil === this.$MirrorsForV8$SlotDeclarationMirror$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    let mixin = $.$MirrorsForV8$SlotDeclarationMirror;
    this.$MirrorsForV8$SlotDeclarationMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$SlotDeclarationMirror$slot;
  };
  this.$SourceBasedClassHeaderMirror = function () {
   if (nil === this.$MirrorsForV8$SourceBasedClassHeaderMirror$slot) {
    let self = this;
    let superclass = self._$AbstractClassHeaderMirror();
    let enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    let mixin = $.$MirrorsForV8$SourceBasedClassHeaderMirror;
    this.$MirrorsForV8$SourceBasedClassHeaderMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$SourceBasedClassHeaderMirror$slot;
  };
  this.$ThreadMirror = function () {
   if (nil === this.$MirrorsForV8$ThreadMirror$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$MirrorsForV8);
    let mixin = $.$MirrorsForV8$ThreadMirror;
    this.$MirrorsForV8$ThreadMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorsForV8$ThreadMirror$slot;
  };
  this.$init$List$ = function (self, v) {
   self.$List$slot = v;
   return self;
  };
  this.$List = function (self) {
   return self.$List$slot;
  };
  this.$init$Map$ = function (self, v) {
   self.$Map$slot = v;
   return self;
  };
  this.$Map = function (self) {
   return self.$Map$slot;
  };
  this.$init$Mixin$ = function (self, v) {
   self.$Mixin$slot = v;
   return self;
  };
  this.$Mixin = function (self) {
   return self.$Mixin$slot;
  };
  this.$init$StringBuilder$ = function (self, v) {
   self.$StringBuilder$slot = v;
   return self;
  };
  this.$StringBuilder = function (self) {
   return self.$StringBuilder$slot;
  };
  this.$init$ImmutableMirrorGroup$ = function (self, v) {
   self.$ImmutableMirrorGroup$slot = v;
   return self;
  };
  this.$ImmutableMirrorGroup = function (self) {
   return self.$ImmutableMirrorGroup$slot;
  };
  this.$init$vmmirror$ = function (self, v) {
   self.$vmmirror$slot = v;
   return self;
  };
  this.$vmmirror = function (self) {
   return self.$vmmirror$slot;
  };
  this.$init$parserLib$ = function (self, v) {
   self.$parserLib$slot = v;
   return self;
  };
  this.$parserLib = function (self) {
   return self.$parserLib$slot;
  };
  this.$init$grammar$ = function (self, v) {
   self.$grammar$slot = v;
   return self;
  };
  this.$grammar = function (self) {
   return self.$grammar$slot;
  };
  this.$init$asts$ = function (self, v) {
   self.$asts$slot = v;
   return self;
  };
  this.$asts = function (self) {
   return self.$asts$slot;
  };
  this.$init$parsing$ = function (self, v) {
   self.$parsing$slot = v;
   return self;
  };
  this.$parsing = function (self) {
   return self.$parsing$slot;
  };
  this.$init$generation$ = function (self, v) {
   self.$generation$slot = v;
   return self;
  };
  this.$generation = function (self) {
   return self.$generation$slot;
  };
  this.$init$compilation$ = function (self, v) {
   self.$compilation$slot = v;
   return self;
  };
  this.$compilation = function (self) {
   return self.$compilation$slot;
  };
  this.$init$compiler$ = function (self, v) {
   self.$compiler$slot = v;
   return self;
  };
  this.$compiler = function (self) {
   return self.$compiler$slot;
  };
  this.$init$MirrorsForV8$AbstractClassHeaderMirror$ = function (v) {
   this.$MirrorsForV8$AbstractClassHeaderMirror$slot = v;
   return this;
  };
  this.$MirrorsForV8$AbstractClassHeaderMirror = function () {
   return this.$MirrorsForV8$AbstractClassHeaderMirror$slot;
  };
  this.$MirrorsForV8$AbstractClassHeaderMirror$ = function (v) {
   this.$MirrorsForV8$AbstractClassHeaderMirror$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$ClassDeclarationBuilder$ = function (v) {
   this.$MirrorsForV8$ClassDeclarationBuilder$slot = v;
   return this;
  };
  this.$MirrorsForV8$ClassDeclarationBuilder = function () {
   return this.$MirrorsForV8$ClassDeclarationBuilder$slot;
  };
  this.$MirrorsForV8$ClassDeclarationBuilder$ = function (v) {
   this.$MirrorsForV8$ClassDeclarationBuilder$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$ClassDeclarationMirror$ = function (v) {
   this.$MirrorsForV8$ClassDeclarationMirror$slot = v;
   return this;
  };
  this.$MirrorsForV8$ClassDeclarationMirror = function () {
   return this.$MirrorsForV8$ClassDeclarationMirror$slot;
  };
  this.$MirrorsForV8$ClassDeclarationMirror$ = function (v) {
   this.$MirrorsForV8$ClassDeclarationMirror$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$ClassHeaderMirror$ = function (v) {
   this.$MirrorsForV8$ClassHeaderMirror$slot = v;
   return this;
  };
  this.$MirrorsForV8$ClassHeaderMirror = function () {
   return this.$MirrorsForV8$ClassHeaderMirror$slot;
  };
  this.$MirrorsForV8$ClassHeaderMirror$ = function (v) {
   this.$MirrorsForV8$ClassHeaderMirror$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$ClassMirror$ = function (v) {
   this.$MirrorsForV8$ClassMirror$slot = v;
   return this;
  };
  this.$MirrorsForV8$ClassMirror = function () {
   return this.$MirrorsForV8$ClassMirror$slot;
  };
  this.$MirrorsForV8$ClassMirror$ = function (v) {
   this.$MirrorsForV8$ClassMirror$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$IRBasedClassDeclarationBuilder$ = function (v) {
   this.$MirrorsForV8$IRBasedClassDeclarationBuilder$slot = v;
   return this;
  };
  this.$MirrorsForV8$IRBasedClassDeclarationBuilder = function () {
   return this.$MirrorsForV8$IRBasedClassDeclarationBuilder$slot;
  };
  this.$MirrorsForV8$IRBasedClassDeclarationBuilder$ = function (v) {
   this.$MirrorsForV8$IRBasedClassDeclarationBuilder$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$MethodBuilder$ = function (v) {
   this.$MirrorsForV8$MethodBuilder$slot = v;
   return this;
  };
  this.$MirrorsForV8$MethodBuilder = function () {
   return this.$MirrorsForV8$MethodBuilder$slot;
  };
  this.$MirrorsForV8$MethodBuilder$ = function (v) {
   this.$MirrorsForV8$MethodBuilder$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$MethodMirror$ = function (v) {
   this.$MirrorsForV8$MethodMirror$slot = v;
   return this;
  };
  this.$MirrorsForV8$MethodMirror = function () {
   return this.$MirrorsForV8$MethodMirror$slot;
  };
  this.$MirrorsForV8$MethodMirror$ = function (v) {
   this.$MirrorsForV8$MethodMirror$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$MixinBasedClassDeclarationBuilder$ = function (v) {
   this.$MirrorsForV8$MixinBasedClassDeclarationBuilder$slot = v;
   return this;
  };
  this.$MirrorsForV8$MixinBasedClassDeclarationBuilder = function () {
   return this.$MirrorsForV8$MixinBasedClassDeclarationBuilder$slot;
  };
  this.$MirrorsForV8$MixinBasedClassDeclarationBuilder$ = function (v) {
   this.$MirrorsForV8$MixinBasedClassDeclarationBuilder$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$MixinBuilder$ = function (v) {
   this.$MirrorsForV8$MixinBuilder$slot = v;
   return this;
  };
  this.$MirrorsForV8$MixinBuilder = function () {
   return this.$MirrorsForV8$MixinBuilder$slot;
  };
  this.$MirrorsForV8$MixinBuilder$ = function (v) {
   this.$MirrorsForV8$MixinBuilder$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$MixinMirror$ = function (v) {
   this.$MirrorsForV8$MixinMirror$slot = v;
   return this;
  };
  this.$MirrorsForV8$MixinMirror = function () {
   return this.$MirrorsForV8$MixinMirror$slot;
  };
  this.$MirrorsForV8$MixinMirror$ = function (v) {
   this.$MirrorsForV8$MixinMirror$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$MutableMethodGroup$ = function (v) {
   this.$MirrorsForV8$MutableMethodGroup$slot = v;
   return this;
  };
  this.$MirrorsForV8$MutableMethodGroup = function () {
   return this.$MirrorsForV8$MutableMethodGroup$slot;
  };
  this.$MirrorsForV8$MutableMethodGroup$ = function (v) {
   this.$MirrorsForV8$MutableMethodGroup$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$MutableMirrorGroup$ = function (v) {
   this.$MirrorsForV8$MutableMirrorGroup$slot = v;
   return this;
  };
  this.$MirrorsForV8$MutableMirrorGroup = function () {
   return this.$MirrorsForV8$MutableMirrorGroup$slot;
  };
  this.$MirrorsForV8$MutableMirrorGroup$ = function (v) {
   this.$MirrorsForV8$MutableMirrorGroup$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$MutableNestedClassGroup$ = function (v) {
   this.$MirrorsForV8$MutableNestedClassGroup$slot = v;
   return this;
  };
  this.$MirrorsForV8$MutableNestedClassGroup = function () {
   return this.$MirrorsForV8$MutableNestedClassGroup$slot;
  };
  this.$MirrorsForV8$MutableNestedClassGroup$ = function (v) {
   this.$MirrorsForV8$MutableNestedClassGroup$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$ObjectMirror$ = function (v) {
   this.$MirrorsForV8$ObjectMirror$slot = v;
   return this;
  };
  this.$MirrorsForV8$ObjectMirror = function () {
   return this.$MirrorsForV8$ObjectMirror$slot;
  };
  this.$MirrorsForV8$ObjectMirror$ = function (v) {
   this.$MirrorsForV8$ObjectMirror$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$SlotDeclarationMirror$ = function (v) {
   this.$MirrorsForV8$SlotDeclarationMirror$slot = v;
   return this;
  };
  this.$MirrorsForV8$SlotDeclarationMirror = function () {
   return this.$MirrorsForV8$SlotDeclarationMirror$slot;
  };
  this.$MirrorsForV8$SlotDeclarationMirror$ = function (v) {
   this.$MirrorsForV8$SlotDeclarationMirror$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$SourceBasedClassHeaderMirror$ = function (v) {
   this.$MirrorsForV8$SourceBasedClassHeaderMirror$slot = v;
   return this;
  };
  this.$MirrorsForV8$SourceBasedClassHeaderMirror = function () {
   return this.$MirrorsForV8$SourceBasedClassHeaderMirror$slot;
  };
  this.$MirrorsForV8$SourceBasedClassHeaderMirror$ = function (v) {
   this.$MirrorsForV8$SourceBasedClassHeaderMirror$slot = v;
   return this;
  };
  this.$init$MirrorsForV8$ThreadMirror$ = function (v) {
   this.$MirrorsForV8$ThreadMirror$slot = v;
   return this;
  };
  this.$MirrorsForV8$ThreadMirror = function () {
   return this.$MirrorsForV8$ThreadMirror$slot;
  };
  this.$MirrorsForV8$ThreadMirror$ = function (v) {
   this.$MirrorsForV8$ThreadMirror$slot = v;
   return this;
  };
  this.$MirrorsForV8$AbstractClassHeaderMirror = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`AbstractClassHeaderMirror";
   this.name = "MirrorsForV8`AbstractClassHeaderMirror";
   this.header = 837;
   this.slots = [];
   this.methods = [
    new MM("superInit`MirrorsForV8`AbstractClassHeaderMirror", "protected", true, 838),
    new MM("instance`initializer", "public", true, 839),
    new MM("accessModifier", "public", false, 840),
    new MM("classComment", "public", false, 841),
    new MM("source", "public", false, 842)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$AbstractClassHeaderMirror = function () {
    let self = this;
    self.$super$MirrorsForV8$AbstractClassHeaderMirror$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$MirrorsForV8$AbstractClassHeaderMirror();
    return self;
   };
   this.$accessModifier = function () {
    let self = this;
    if (self._$source().$startsWith$("public ")) {
     return "public";
    };
    if (self._$source().$startsWith$("private ")) {
     return "private";
    };
    return "protected";
   };
   this.$classComment = function () {
    let self = this;
    return $0.$compilation(self.$enclosingObjects$MirrorsForV8$AbstractClassHeaderMirror[0]).$parser().$classHeader().$parseString$(self._$source()).$classComment();
   };
   this.$source = function () {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`AbstractClassHeaderMirror";
     this._$superInit$MirrorsForV8$AbstractClassHeaderMirror = $.$superInit$MirrorsForV8$AbstractClassHeaderMirror;
     this.$superInit$MirrorsForV8$AbstractClassHeaderMirror = dnuCatcher("$superInit$MirrorsForV8$AbstractClassHeaderMirror");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$accessModifier = this._$accessModifier = $.$accessModifier;
     this.$classComment = this._$classComment = $.$classComment;
     this.$source = this._$source = $.$source;
     this.$enclosingObjects$MirrorsForV8$AbstractClassHeaderMirror = enclosingObjects;
     this.$super$MirrorsForV8$AbstractClassHeaderMirror$slot = runtimeSuperclass;
     this["MirrorsForV8`AbstractClassHeaderMirror"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["MirrorsForV8`AbstractClassHeaderMirror"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`AbstractClassHeaderMirror";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`AbstractClassHeaderMirror";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$MirrorsForV8$AbstractClassHeaderMirror = enclosingObjects;
      this.$super$MirrorsForV8$AbstractClassHeaderMirror$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$ClassDeclarationBuilder = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`ClassDeclarationBuilder";
   this.name = "MirrorsForV8`ClassDeclarationBuilder";
   this.header = 843;
   this.slots = [
    new SM("prvtExistingMixin", "protected", true, false),
    new SM("enclosingClass", "public", false, false),
    new SM("instanceSideSlot", "private", true, false),
    new SM("classSideSlot", "private", true, false),
    new SM("deletedInstanceMethods", "protected", true, false),
    new SM("deletedClassMethods", "protected", true, false)
   ];
   this.methods = [
    new MM("superInit`MirrorsForV8`ClassDeclarationBuilder", "protected", true, 844),
    new MM("instance`initializer", "public", true, 845),
    new MM("accessModifier", "public", false, 846),
    new MM("classSide", "public", false, 847),
    new MM("computeClassDeclIR", "public", false, 848),
    new MM("computeClassSide", "protected", false, 849),
    new MM("computeInstanceSide", "protected", false, 850),
    new MM("declarationData", "protected", false, 851),
    new MM("install", "public", false, 852),
    new MM("instanceSide", "public", false, 853),
    new MM("name", "public", false, 854),
    new MM("qualifiedName", "public", false, 855),
    new MM("simpleName", "public", false, 856),
    new MM("source", "public", false, 857),
    new MM("updateApplicationsOf:from:by:", "protected", false, 858),
    new MM("updateHeaderSourceForNewRuntimeMixin:from:", "protected", false, 859),
    new MM("updateInstanceMixin:from:by:", "protected", false, 860),
    new MM("updateMetaMixin:from:by:", "protected", false, 861),
    new MM("updateMixin:from:by:", "protected", false, 862),
    new MM("updateMixinFrom:with:", "protected", false, 863),
    new MM("updateSourceIndicesOfNewRuntimeMixin:from:", "protected", false, 864),
    new MM("init`prvtExistingMixin:", "protected", true, 0),
    new MM("prvtExistingMixin", "protected", true, 0),
    new MM("prvtExistingMixin:", "protected", true, 0),
    new MM("init`enclosingClass:", "public", true, 0),
    new MM("enclosingClass", "public", true, 0),
    new MM("init`instanceSideSlot:", "private", true, 0),
    new MM("instanceSideSlot", "private", true, 0),
    new MM("instanceSideSlot:", "private", true, 0),
    new MM("init`classSideSlot:", "private", true, 0),
    new MM("classSideSlot", "private", true, 0),
    new MM("classSideSlot:", "private", true, 0),
    new MM("init`deletedInstanceMethods:", "protected", true, 0),
    new MM("deletedInstanceMethods", "protected", true, 0),
    new MM("deletedInstanceMethods:", "protected", true, 0),
    new MM("init`deletedClassMethods:", "protected", true, 0),
    new MM("deletedClassMethods", "protected", true, 0),
    new MM("deletedClassMethods:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$ClassDeclarationBuilder = function ($m, $enclosing) {
    let self = this;
    self.$super$MirrorsForV8$ClassDeclarationBuilder$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($m, $enclosing) {
    let self = this;
    self._$superInit$MirrorsForV8$ClassDeclarationBuilder($m, $enclosing);
    self._$init$prvtExistingMixin$($m);
    self._$init$enclosingClass$($enclosing);
    return self;
   };
   this.$accessModifier = function () {
    let self = this;
    return self._$declarationData().$accessModifier();
   };
   this.$classSide = function () {
    let self = this;
    if (nil.$$equal($1.$classSideSlot(self))) {
     $1.$classSideSlot$(self, self._$computeClassSide());
    };
    return $1.$classSideSlot(self);
   };
   this.$computeClassDeclIR = function () {
    let self = this;
    return nil.$$equal(self._$enclosingClass()).$ifTrue$ifFalse$(function () {
     return $0.$compiler(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$compileClassSource$within$("Newspeak3 'Uncategorized' ".$$comma(self._$source()), nil);
    }, function () {
     return self._$enclosingClass().$computeClassDeclIR().$instanceSide().$nestedClasses().$detect$(function ($ncd) {
      return $ncd.$qualifiedName().$$equal(self._$qualifiedName());
     });
    });
   };
   this.$computeClassSide = function () {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$computeInstanceSide = function () {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$declarationData = function () {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$install = function () {
    let self = this;
    let $writer = nil;
    let $sb = nil;
    let $src = nil;
    let $runtimeMixin = nil;
    let $cdir = nil;
    $writer = $0.$generation(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$Writer().$new();
    $sb = $0.$StringBuilder(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$new();
    $cdir = self._$computeClassDeclIR();
    $writer.$generateSourceFor$on$($cdir.$runtimeMixin(), $sb);
    $src = $sb.$asString();
    $src.$out();
    $runtimeMixin = eval($src);
    if (self._$prvtExistingMixin().$isNil()) {
     self._$prvtExistingMixin$($0.$Mixin(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$fromRuntimeMixin$($runtimeMixin));
     self._$updateSourceIndicesOfNewRuntimeMixin$from$($runtimeMixin, $cdir);
    } else {
     self._$updateMixinFrom$with$($runtimeMixin, $cdir);
    };
    return self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]._$ClassDeclarationMirror().$reflecting$(self._$prvtExistingMixin());
   };
   this.$instanceSide = function () {
    let self = this;
    if (nil.$$equal($1.$instanceSideSlot(self))) {
     $1.$instanceSideSlot$(self, self._$computeInstanceSide());
    };
    return $1.$instanceSideSlot(self);
   };
   this.$name = function () {
    let self = this;
    return self._$subclassResponsibility();
   };
   this.$qualifiedName = function () {
    let self = this;
    return self._$declarationData().$qualifiedName();
   };
   this.$simpleName = function () {
    let self = this;
    return self._$name();
   };
   this.$source = function () {
    let self = this;
    let $sb = nil;
    $sb = $0.$StringBuilder(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$new();
    $sb.$add$(self._$header().$source());
    $sb.$writeln$(" ( ");
    self._$instanceSide().$nestedClasses().$do$(function ($ea) {
     return $sb.$writeln$($ea.$source());
    });
    self._$instanceSide().$methods().$do$(function ($ea) {
     return $sb.$writeln$($ea.$source());
    });
    $sb.$writeln$(" ) : ( ");
    self._$classSide().$methods().$do$(function ($ea) {
     return $sb.$writeln$($ea.$source());
    });
    $sb.$writeln$(" )");
    return $sb.$asString();
   };
   this.$updateApplicationsOf$from$by$ = function ($oldRuntimeMixin, $newRuntimeMixin, $classDeclIR) {
    let self = this;
    let $newRuntimeMetamixin = nil;
    let $applications = nil;
    $newRuntimeMetamixin = $newRuntimeMixin.meta;
    $applications = $oldRuntimeMixin.applications;
    $applications.$do$(function ($runtimeClass) {
     let $runtimeMetaclass = nil;
     $runtimeMetaclass = $runtimeClass.meta;
     $classDeclIR.$instanceSide().$methods().$do$(function ($ea) {
      let $jsProName = nil;
      let $jsPubName = nil;
      $jsPubName = $0.$compilation(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$names().$manglePublic$($ea.$name());
      $jsProName = $0.$compilation(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$names().$mangleProtected$($ea.$name());
      if ($ea.$isProtected()) {
       $runtimeClass[$jsProName] = $newRuntimeMixin[$jsPubName];
       $runtimeClass[$jsPubName] = dnuCatcher($jsPubName);
      };
      return $ea.$isPublic().$ifTrue$(function () {
       $runtimeClass[$jsProName] = $newRuntimeMixin[$jsPubName];
       return $runtimeClass[$jsPubName] = $newRuntimeMixin[$jsPubName];
      });
     });
     return $classDeclIR.$classSide().$methods().$do$(function ($ea) {
      let $jsProName = nil;
      let $jsPubName = nil;
      $jsPubName = $0.$compilation(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$names().$manglePublic$($ea.$name());
      $jsProName = $0.$compilation(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$names().$mangleProtected$($ea.$name());
      if ($ea.$isProtected()) {
       $runtimeMetaclass[$jsProName] = $newRuntimeMetamixin[$jsPubName];
       $runtimeMetaclass[$jsPubName] = dnuCatcher($jsPubName);
      };
      return $ea.$isPublic().$ifTrue$(function () {
       $runtimeMetaclass[$jsProName] = $newRuntimeMetamixin[$jsPubName];
       return $runtimeMetaclass[$jsPubName] = $newRuntimeMetamixin[$jsPubName];
      });
     });
    });
    return self;
   };
   this.$updateHeaderSourceForNewRuntimeMixin$from$ = function ($runtimeMixin, $cdir) {
    let self = this;
    let $headerSourceIndex = nil;
    let $headerSource = nil;
    $headerSourceIndex = sources.length;
    $headerSource = $cdir.$headerSource();
    $runtimeMixin.header = $headerSourceIndex;
    sources[$headerSourceIndex] = $headerSource;
    return self;
   };
   this.$updateInstanceMixin$from$by$ = function ($oldRuntimeMixin, $newRuntimeMixin, $classDeclIR) {
    let self = this;
    let $newMethods = nil;
    $newMethods = $classDeclIR.$instanceSide().$methods();
    self._$deletedInstanceMethods$($0.$List(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$new());
    $newMethods.$do$(function ($ea) {
     let $jsName = nil;
     $jsName = $0.$compilation(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$names().$manglePublic$($ea.$name());
     return $oldRuntimeMixin[$jsName] = $newRuntimeMixin[$jsName];
    });
    [
     "name",
     "header",
     "slots",
     "methods",
     "nestedClasses"
    ].$do$(function ($jsName) {
     return $oldRuntimeMixin[$jsName] = $newRuntimeMixin[$jsName];
    });
    return self;
   };
   this.$updateMetaMixin$from$by$ = function ($oldRuntimeMetamixin, $newRuntimeMetamixin, $classDeclIR) {
    let self = this;
    let $newMethods = nil;
    $newMethods = $classDeclIR.$classSide().$methods();
    self._$deletedClassMethods$($0.$List(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$new());
    $newMethods.$do$(function ($ea) {
     let $jsName = nil;
     $jsName = $0.$compilation(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$names().$manglePublic$($ea.$name());
     return $oldRuntimeMetamixin[$jsName] = $newRuntimeMetamixin[$jsName];
    });
    [
     "slots",
     "methods",
     "nestedClasses"
    ].$do$(function ($jsName) {
     return $oldRuntimeMetamixin[$jsName] = $newRuntimeMetamixin[$jsName];
    });
    return self;
   };
   this.$updateMixin$from$by$ = function ($oldMixin, $newRuntimeMixin, $classDeclIR) {
    let self = this;
    let $deletedInstanceMethods = nil;
    let $deletedClassMethods = nil;
    let $oldRuntimeMixin = nil;
    let $oldRuntimeMetamixin = nil;
    let $newRuntimeMetamixin = nil;
    $oldRuntimeMixin = $oldMixin.runtimeMixin;
    $oldRuntimeMetamixin = $oldRuntimeMixin.meta;
    $newRuntimeMetamixin = $newRuntimeMixin.meta;
    $deletedInstanceMethods = self._$updateInstanceMixin$from$by$($oldRuntimeMixin, $newRuntimeMixin, $classDeclIR);
    $deletedClassMethods = self._$updateMetaMixin$from$by$($oldRuntimeMetamixin, $newRuntimeMetamixin, $classDeclIR);
    self._$updateApplicationsOf$from$by$($oldRuntimeMixin, $newRuntimeMixin, $classDeclIR);
    return self;
   };
   this.$updateMixinFrom$with$ = function ($runtimeMixin, $cdir) {
    let self = this;
    let $instanceMethodSourceIndices = nil;
    let $classMethodSourceIndices = nil;
    let $runtimeMetamixin = nil;
    let $existingMixin = nil;
    let $existingMetamixin = nil;
    let $newSourceIndex = nil;
    $instanceMethodSourceIndices = $0.$Map(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$new();
    $classMethodSourceIndices = $0.$Map(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$new();
    $runtimeMetamixin = $runtimeMixin.meta;
    $existingMixin = self._$prvtExistingMixin().runtimeMixin;
    $existingMetamixin = $existingMixin.meta;
    $newSourceIndex = sources.length;
    $existingMixin.methods.$do$(function ($ea) {
     return $instanceMethodSourceIndices.$at$put$($ea.name, $ea.source);
    });
    $existingMetamixin.methods.$do$(function ($ea) {
     return $classMethodSourceIndices.$at$put$($ea.name, $ea.source);
    });
    $runtimeMixin.methods.$do$(function ($e) {
     let $selector = nil;
     $selector = $e.name;
     $instanceMethodSourceIndices.$at$ifAbsent$($selector, function () {
      return $instanceMethodSourceIndices.$at$put$($selector, $newSourceIndex);
     });
     return $newSourceIndex = $newSourceIndex + 1;
    });
    $runtimeMetamixin.methods.$do$(function ($e) {
     let $selector = nil;
     $selector = $e.name;
     $classMethodSourceIndices.$at$ifAbsent$($selector, function () {
      return $classMethodSourceIndices.$at$put$($selector, $newSourceIndex);
     });
     return $newSourceIndex = $newSourceIndex + 1;
    });
    self._$instanceSide().$methods().$do$(function ($m) {
     let $sourceIndex = nil;
     $sourceIndex = $instanceMethodSourceIndices.$at$($m.$name());
     return $m.$source().$$tilde$equal(nil).$ifTrue$(function () {
      return sources[$sourceIndex] = $m.$source();
     });
    });
    self._$classSide().$methods().$do$(function ($m) {
     let $sourceIndex = nil;
     $sourceIndex = $classMethodSourceIndices.$at$($m.$name());
     return $m.$source().$$tilde$equal(nil).$ifTrue$(function () {
      return sources[$sourceIndex] = $m.$source();
     });
    });
    $runtimeMixin.methods.$do$(function ($mm) {
     return $mm.source = $instanceMethodSourceIndices.$at$($mm.name);
    });
    $runtimeMetamixin.methods.$do$(function ($mm) {
     return $mm.source = $classMethodSourceIndices.$at$($mm.name);
    });
    $runtimeMixin.header = $existingMixin.header;
    self._$updateMixin$from$by$(self._$prvtExistingMixin(), $runtimeMixin, $cdir);
    return self;
   };
   this.$updateSourceIndicesOfNewRuntimeMixin$from$ = function ($runtimeMixin, $cdir) {
    let self = this;
    let $instanceMethodSourceIndices = nil;
    let $classMethodSourceIndices = nil;
    let $runtimeMetamixin = nil;
    let $newSourceIndex = nil;
    $instanceMethodSourceIndices = $0.$Map(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$new();
    $classMethodSourceIndices = $0.$Map(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$new();
    $runtimeMetamixin = $runtimeMixin.meta;
    $newSourceIndex = sources.length;
    $runtimeMixin.methods.$do$(function ($e) {
     let $selector = nil;
     $selector = $e.name;
     $instanceMethodSourceIndices.$at$ifAbsent$($selector, function () {
      return $instanceMethodSourceIndices.$at$put$($selector, $newSourceIndex);
     });
     return $newSourceIndex = $newSourceIndex + 1;
    });
    $runtimeMetamixin.methods.$do$(function ($e) {
     let $selector = nil;
     $selector = $e.name;
     $classMethodSourceIndices.$at$ifAbsent$($selector, function () {
      return $classMethodSourceIndices.$at$put$($selector, $newSourceIndex);
     });
     return $newSourceIndex = $newSourceIndex + 1;
    });
    self._$instanceSide().$methods().$do$(function ($m) {
     let $sourceIndex = nil;
     $sourceIndex = $instanceMethodSourceIndices.$at$($m.$name());
     return $m.$source().$$tilde$equal(nil).$ifTrue$(function () {
      return sources[$sourceIndex] = $m.$source();
     });
    });
    self._$classSide().$methods().$do$(function ($m) {
     let $sourceIndex = nil;
     $sourceIndex = $classMethodSourceIndices.$at$($m.$name());
     return $m.$source().$$tilde$equal(nil).$ifTrue$(function () {
      return sources[$sourceIndex] = $m.$source();
     });
    });
    $runtimeMixin.methods.$do$(function ($mm) {
     return $mm.source = $instanceMethodSourceIndices.$at$($mm.name);
    });
    $runtimeMetamixin.methods.$do$(function ($mm) {
     return $mm.source = $classMethodSourceIndices.$at$($mm.name);
    });
    self._$updateHeaderSourceForNewRuntimeMixin$from$($runtimeMixin, $cdir);
    return self;
   };
   this.$init$prvtExistingMixin$ = function (v) {
    this.$prvtExistingMixin$slot = v;
    return this;
   };
   this.$prvtExistingMixin = function () {
    return this.$prvtExistingMixin$slot;
   };
   this.$prvtExistingMixin$ = function (v) {
    this.$prvtExistingMixin$slot = v;
    return this;
   };
   this.$init$enclosingClass$ = function (v) {
    this.$enclosingClass$slot = v;
    return this;
   };
   this.$enclosingClass = function () {
    return this.$enclosingClass$slot;
   };
   this.$init$instanceSideSlot$ = function (self, v) {
    self.$instanceSideSlot$slot = v;
    return self;
   };
   this.$instanceSideSlot = function (self) {
    return self.$instanceSideSlot$slot;
   };
   this.$instanceSideSlot$ = function (self, v) {
    self.$instanceSideSlot$slot = v;
    return self;
   };
   this.$init$classSideSlot$ = function (self, v) {
    self.$classSideSlot$slot = v;
    return self;
   };
   this.$classSideSlot = function (self) {
    return self.$classSideSlot$slot;
   };
   this.$classSideSlot$ = function (self, v) {
    self.$classSideSlot$slot = v;
    return self;
   };
   this.$init$deletedInstanceMethods$ = function (v) {
    this.$deletedInstanceMethods$slot = v;
    return this;
   };
   this.$deletedInstanceMethods = function () {
    return this.$deletedInstanceMethods$slot;
   };
   this.$deletedInstanceMethods$ = function (v) {
    this.$deletedInstanceMethods$slot = v;
    return this;
   };
   this.$init$deletedClassMethods$ = function (v) {
    this.$deletedClassMethods$slot = v;
    return this;
   };
   this.$deletedClassMethods = function () {
    return this.$deletedClassMethods$slot;
   };
   this.$deletedClassMethods$ = function (v) {
    this.$deletedClassMethods$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`ClassDeclarationBuilder";
     this._$superInit$MirrorsForV8$ClassDeclarationBuilder = $.$superInit$MirrorsForV8$ClassDeclarationBuilder;
     this.$superInit$MirrorsForV8$ClassDeclarationBuilder = dnuCatcher("$superInit$MirrorsForV8$ClassDeclarationBuilder");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$accessModifier = this._$accessModifier = $.$accessModifier;
     this.$classSide = this._$classSide = $.$classSide;
     this.$computeClassDeclIR = this._$computeClassDeclIR = $.$computeClassDeclIR;
     this._$computeClassSide = $.$computeClassSide;
     this.$computeClassSide = dnuCatcher("$computeClassSide");
     this._$computeInstanceSide = $.$computeInstanceSide;
     this.$computeInstanceSide = dnuCatcher("$computeInstanceSide");
     this._$declarationData = $.$declarationData;
     this.$declarationData = dnuCatcher("$declarationData");
     this.$install = this._$install = $.$install;
     this.$instanceSide = this._$instanceSide = $.$instanceSide;
     this.$name = this._$name = $.$name;
     this.$qualifiedName = this._$qualifiedName = $.$qualifiedName;
     this.$simpleName = this._$simpleName = $.$simpleName;
     this.$source = this._$source = $.$source;
     this._$updateApplicationsOf$from$by$ = $.$updateApplicationsOf$from$by$;
     this.$updateApplicationsOf$from$by$ = dnuCatcher("$updateApplicationsOf$from$by$");
     this._$updateHeaderSourceForNewRuntimeMixin$from$ = $.$updateHeaderSourceForNewRuntimeMixin$from$;
     this.$updateHeaderSourceForNewRuntimeMixin$from$ = dnuCatcher("$updateHeaderSourceForNewRuntimeMixin$from$");
     this._$updateInstanceMixin$from$by$ = $.$updateInstanceMixin$from$by$;
     this.$updateInstanceMixin$from$by$ = dnuCatcher("$updateInstanceMixin$from$by$");
     this._$updateMetaMixin$from$by$ = $.$updateMetaMixin$from$by$;
     this.$updateMetaMixin$from$by$ = dnuCatcher("$updateMetaMixin$from$by$");
     this._$updateMixin$from$by$ = $.$updateMixin$from$by$;
     this.$updateMixin$from$by$ = dnuCatcher("$updateMixin$from$by$");
     this._$updateMixinFrom$with$ = $.$updateMixinFrom$with$;
     this.$updateMixinFrom$with$ = dnuCatcher("$updateMixinFrom$with$");
     this._$updateSourceIndicesOfNewRuntimeMixin$from$ = $.$updateSourceIndicesOfNewRuntimeMixin$from$;
     this.$updateSourceIndicesOfNewRuntimeMixin$from$ = dnuCatcher("$updateSourceIndicesOfNewRuntimeMixin$from$");
     this._$init$prvtExistingMixin$ = $.$init$prvtExistingMixin$;
     this.$init$prvtExistingMixin$ = dnuCatcher("$init$prvtExistingMixin$");
     this._$prvtExistingMixin = $.$prvtExistingMixin;
     this.$prvtExistingMixin = dnuCatcher("$prvtExistingMixin");
     this._$prvtExistingMixin$ = $.$prvtExistingMixin$;
     this.$prvtExistingMixin$ = dnuCatcher("$prvtExistingMixin$");
     this.$init$enclosingClass$ = this._$init$enclosingClass$ = $.$init$enclosingClass$;
     this.$enclosingClass = this._$enclosingClass = $.$enclosingClass;
     this._$init$deletedInstanceMethods$ = $.$init$deletedInstanceMethods$;
     this.$init$deletedInstanceMethods$ = dnuCatcher("$init$deletedInstanceMethods$");
     this._$deletedInstanceMethods = $.$deletedInstanceMethods;
     this.$deletedInstanceMethods = dnuCatcher("$deletedInstanceMethods");
     this._$deletedInstanceMethods$ = $.$deletedInstanceMethods$;
     this.$deletedInstanceMethods$ = dnuCatcher("$deletedInstanceMethods$");
     this._$init$deletedClassMethods$ = $.$init$deletedClassMethods$;
     this.$init$deletedClassMethods$ = dnuCatcher("$init$deletedClassMethods$");
     this._$deletedClassMethods = $.$deletedClassMethods;
     this.$deletedClassMethods = dnuCatcher("$deletedClassMethods");
     this._$deletedClassMethods$ = $.$deletedClassMethods$;
     this.$deletedClassMethods$ = dnuCatcher("$deletedClassMethods$");
     this.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder = enclosingObjects;
     this.$super$MirrorsForV8$ClassDeclarationBuilder$slot = runtimeSuperclass;
     this["MirrorsForV8`ClassDeclarationBuilder"] = function () {
      superBasicNew.call(this);
      this.$prvtExistingMixin$slot = nil;
      this.$enclosingClass$slot = nil;
      this.$instanceSideSlot$slot = nil;
      this.$classSideSlot$slot = nil;
      this.$deletedInstanceMethods$slot = nil;
      this.$deletedClassMethods$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`ClassDeclarationBuilder"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`ClassDeclarationBuilder";
    this.slots = [];
    this.methods = [
     new MM("forExistingMixin:within:", "public", true, 0),
     new MM("fromSource:", "public", false, 865),
     new MM("fromUnitSource:", "public", false, 866),
     new MM("reflecting:", "public", false, 867)
    ];
    this.nestedClasses = [];
    this.$forExistingMixin$within$ = function ($m, $enclosing) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($m, $enclosing);
     return t;
    };
    this.$fromSource$ = function ($src) {
     let self = this;
     return self._$fromUnitSource$("Newspeak3 'Uncategorized' ".$$comma($src));
    };
    this.$fromUnitSource$ = function ($src) {
     let self = this;
     let $ir = nil;
     $ir = $0.$compiler(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$compileClassSource$within$($src, nil);
     return self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]._$IRBasedClassDeclarationBuilder().$fromIR$existingMixin$within$($ir, nil, nil);
    };
    this.$reflecting$ = function ($mixin) {
     let self = this;
     let $m = nil;
     $m = self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]._$ClassDeclarationMirror().$reflecting$($mixin);
     if (!nil.$$equal($m.$enclosingClass())) {
      return $m.$enclosingClass().$asBuilder().$instanceSide().$nestedClasses().$findMirrorNamed$($m.$simpleName());
     };
     return self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]._$MixinBasedClassDeclarationBuilder().$forExistingMixin$within$($mixin, nil);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`ClassDeclarationBuilder";
      this.$forExistingMixin$within$ = this._$forExistingMixin$within$ = $.$forExistingMixin$within$;
      this.$fromSource$ = this._$fromSource$ = $.$fromSource$;
      this.$fromUnitSource$ = this._$fromUnitSource$ = $.$fromUnitSource$;
      this.$reflecting$ = this._$reflecting$ = $.$reflecting$;
      this.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder = enclosingObjects;
      this.$super$MirrorsForV8$ClassDeclarationBuilder$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$ClassDeclarationMirror = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`ClassDeclarationMirror";
   this.name = "MirrorsForV8`ClassDeclarationMirror";
   this.header = 868;
   this.slots = [
    new SM("reflectee", "private", false, false),
    new SM("instanceSide", "public", false, false),
    new SM("classSide", "public", false, false)
   ];
   this.methods = [
    new MM("superInit`MirrorsForV8`ClassDeclarationMirror", "protected", true, 869),
    new MM("instance`initializer", "public", true, 870),
    new MM("accessModifier", "public", false, 871),
    new MM("applyToObject", "public", false, 872),
    new MM("asBuilder", "public", false, 873),
    new MM("definingMixin", "public", false, 874),
    new MM("enclosingClass", "public", false, 875),
    new MM("header", "public", false, 876),
    new MM("isKindOfClassDeclarationMirror", "public", false, 877),
    new MM("name", "public", false, 878),
    new MM("qualifiedName", "public", false, 879),
    new MM("simpleName", "public", false, 880),
    new MM("source", "public", false, 881),
    new MM("init`reflectee:", "private", true, 0),
    new MM("reflectee", "private", true, 0),
    new MM("init`instanceSide:", "public", true, 0),
    new MM("instanceSide", "public", true, 0),
    new MM("init`classSide:", "public", true, 0),
    new MM("classSide", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$ClassDeclarationMirror = function ($mixin) {
    let self = this;
    self.$super$MirrorsForV8$ClassDeclarationMirror$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($mixin) {
    let self = this;
    self._$superInit$MirrorsForV8$ClassDeclarationMirror($mixin);
    $1.$init$reflectee$(self, $mixin);
    self._$init$instanceSide$(self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]._$MixinMirror().$reflecting$($mixin));
    self._$init$classSide$(self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]._$MixinMirror().$reflecting$(self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]._$classMixinOf$($mixin)));
    return self;
   };
   this.$accessModifier = function () {
    let self = this;
    return self._$header().$accessModifier();
   };
   this.$applyToObject = function () {
    let self = this;
    if (!nil.$$equal(self._$enclosingClass())) {
     return self._$notTopLevel();
    };
    return self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]._$ClassMirror().$reflecting$($1.$reflectee(self).$applyTo$withName$(self._$Object(), self._$simpleName()));
   };
   this.$asBuilder = function () {
    let self = this;
    return self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]._$ClassDeclarationBuilder().$reflecting$($1.$reflectee(self));
   };
   this.$definingMixin = function () {
    let self = this;
    let $ec = nil;
    $ec = self._$enclosingClass();
    if (nil.$$equal($ec)) {
     return nil;
    };
    return $ec.$instanceSide();
   };
   this.$enclosingClass = function () {
    let self = this;
    let $enclosing = nil;
    $enclosing = $1.$reflectee(self).runtimeMixin.enclosingMixin;
    if ($enclosing === undefined) {
     return nil;
    };
    return self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]._$ClassDeclarationMirror().$reflecting$($0.$Mixin(self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]).$fromRuntimeMixin$($enclosing));
   };
   this.$header = function () {
    let self = this;
    return self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]._$ClassHeaderMirror().$reflecting$($1.$reflectee(self));
   };
   this.$isKindOfClassDeclarationMirror = function () {
    let self = this;
    return true;
   };
   this.$name = function () {
    let self = this;
    return $1.$reflectee(self).$name().$splitBy$("`").$last();
   };
   this.$qualifiedName = function () {
    let self = this;
    "BOGUS";
    return $1.$reflectee(self).$name();
   };
   this.$simpleName = function () {
    let self = this;
    return self._$name();
   };
   this.$source = function () {
    let self = this;
    let $sb = nil;
    $sb = $0.$StringBuilder(self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]).$new();
    $sb.$add$(self._$header().$source());
    $sb.$writeln$(" ( ");
    self._$instanceSide().$nestedClasses().$do$(function ($ea) {
     return $sb.$writeln$($ea.$source());
    });
    self._$instanceSide().$methods().$do$(function ($ea) {
     return $sb.$writeln$($ea.$source());
    });
    $sb.$writeln$(" ) : ( ");
    self._$classSide().$methods().$do$(function ($ea) {
     return $sb.$writeln$($ea.$source());
    });
    $sb.$writeln$(" )");
    return $sb.$asString();
   };
   this.$init$reflectee$ = function (self, v) {
    self.$reflectee$slot = v;
    return self;
   };
   this.$reflectee = function (self) {
    return self.$reflectee$slot;
   };
   this.$init$instanceSide$ = function (v) {
    this.$instanceSide$slot = v;
    return this;
   };
   this.$instanceSide = function () {
    return this.$instanceSide$slot;
   };
   this.$init$classSide$ = function (v) {
    this.$classSide$slot = v;
    return this;
   };
   this.$classSide = function () {
    return this.$classSide$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`ClassDeclarationMirror";
     this._$superInit$MirrorsForV8$ClassDeclarationMirror = $.$superInit$MirrorsForV8$ClassDeclarationMirror;
     this.$superInit$MirrorsForV8$ClassDeclarationMirror = dnuCatcher("$superInit$MirrorsForV8$ClassDeclarationMirror");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$accessModifier = this._$accessModifier = $.$accessModifier;
     this.$applyToObject = this._$applyToObject = $.$applyToObject;
     this.$asBuilder = this._$asBuilder = $.$asBuilder;
     this.$definingMixin = this._$definingMixin = $.$definingMixin;
     this.$enclosingClass = this._$enclosingClass = $.$enclosingClass;
     this.$header = this._$header = $.$header;
     this.$isKindOfClassDeclarationMirror = this._$isKindOfClassDeclarationMirror = $.$isKindOfClassDeclarationMirror;
     this.$name = this._$name = $.$name;
     this.$qualifiedName = this._$qualifiedName = $.$qualifiedName;
     this.$simpleName = this._$simpleName = $.$simpleName;
     this.$source = this._$source = $.$source;
     this.$init$instanceSide$ = this._$init$instanceSide$ = $.$init$instanceSide$;
     this.$instanceSide = this._$instanceSide = $.$instanceSide;
     this.$init$classSide$ = this._$init$classSide$ = $.$init$classSide$;
     this.$classSide = this._$classSide = $.$classSide;
     this.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror = enclosingObjects;
     this.$super$MirrorsForV8$ClassDeclarationMirror$slot = runtimeSuperclass;
     this["MirrorsForV8`ClassDeclarationMirror"] = function () {
      superBasicNew.call(this);
      this.$reflectee$slot = nil;
      this.$instanceSide$slot = nil;
      this.$classSide$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`ClassDeclarationMirror"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`ClassDeclarationMirror";
    this.slots = [];
    this.methods = [new MM("reflecting:", "public", true, 0)];
    this.nestedClasses = [];
    this.$reflecting$ = function ($mixin) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($mixin);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`ClassDeclarationMirror";
      this.$reflecting$ = this._$reflecting$ = $.$reflecting$;
      this.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror = enclosingObjects;
      this.$super$MirrorsForV8$ClassDeclarationMirror$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$ClassHeaderMirror = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`ClassHeaderMirror";
   this.name = "MirrorsForV8`ClassHeaderMirror";
   this.header = 882;
   this.slots = [new SM("reflectee", "private", false, false)];
   this.methods = [
    new MM("superInit`MirrorsForV8`ClassHeaderMirror", "protected", true, 883),
    new MM("instance`initializer", "public", true, 884),
    new MM("isKindOfClassHeaderMirror", "public", false, 885),
    new MM("name", "public", false, 886),
    new MM("preamble", "public", false, 887),
    new MM("source", "public", false, 888),
    new MM("init`reflectee:", "private", true, 0),
    new MM("reflectee", "private", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$ClassHeaderMirror = function ($mixin) {
    let self = this;
    self.$super$MirrorsForV8$ClassHeaderMirror$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($mixin) {
    let self = this;
    self._$superInit$MirrorsForV8$ClassHeaderMirror($mixin);
    $1.$init$reflectee$(self, $mixin);
    return self;
   };
   this.$isKindOfClassHeaderMirror = function () {
    let self = this;
    return true;
   };
   this.$name = function () {
    let self = this;
    return $1.$reflectee(self).$name().$splitBy$("`").$last();
   };
   this.$preamble = function () {
    let self = this;
    let $headerAst = nil;
    $headerAst = $0.$compilation(self.$enclosingObjects$MirrorsForV8$ClassHeaderMirror[0]).$parser().$classHeader().$parseString$(self._$source());
    return self._$source().$copyFrom$to$($headerAst.$start(), $headerAst.$superConstructorCall().$end());
   };
   this.$source = function () {
    let self = this;
    let $sourceIndex = nil;
    $sourceIndex = $1.$reflectee(self).runtimeMixin.header;
    return sources[$sourceIndex];
   };
   this.$init$reflectee$ = function (self, v) {
    self.$reflectee$slot = v;
    return self;
   };
   this.$reflectee = function (self) {
    return self.$reflectee$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`ClassHeaderMirror";
     this._$superInit$MirrorsForV8$ClassHeaderMirror = $.$superInit$MirrorsForV8$ClassHeaderMirror;
     this.$superInit$MirrorsForV8$ClassHeaderMirror = dnuCatcher("$superInit$MirrorsForV8$ClassHeaderMirror");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isKindOfClassHeaderMirror = this._$isKindOfClassHeaderMirror = $.$isKindOfClassHeaderMirror;
     this.$name = this._$name = $.$name;
     this.$preamble = this._$preamble = $.$preamble;
     this.$source = this._$source = $.$source;
     this.$enclosingObjects$MirrorsForV8$ClassHeaderMirror = enclosingObjects;
     this.$super$MirrorsForV8$ClassHeaderMirror$slot = runtimeSuperclass;
     this["MirrorsForV8`ClassHeaderMirror"] = function () {
      superBasicNew.call(this);
      this.$reflectee$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`ClassHeaderMirror"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`ClassHeaderMirror";
    this.slots = [];
    this.methods = [new MM("reflecting:", "public", true, 0)];
    this.nestedClasses = [];
    this.$reflecting$ = function ($mixin) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($mixin);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`ClassHeaderMirror";
      this.$reflecting$ = this._$reflecting$ = $.$reflecting$;
      this.$enclosingObjects$MirrorsForV8$ClassHeaderMirror = enclosingObjects;
      this.$super$MirrorsForV8$ClassHeaderMirror$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$ClassMirror = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`ClassMirror";
   this.name = "MirrorsForV8`ClassMirror";
   this.header = 889;
   this.slots = [new SM("reflectee", "public", false, false)];
   this.methods = [
    new MM("superInit`MirrorsForV8`ClassMirror", "protected", true, 890),
    new MM("instance`initializer", "public", true, 891),
    new MM("=", "public", false, 892),
    new MM("allSuperclasses", "public", false, 893),
    new MM("computeMirrorGroup:", "private", false, 894),
    new MM("declaration", "public", false, 895),
    new MM("enclosingObject", "public", false, 896),
    new MM("hash", "public", false, 897),
    new MM("isKindOfClassMirror", "public", false, 898),
    new MM("isMeta", "public", false, 899),
    new MM("methods", "public", false, 900),
    new MM("mixin", "public", false, 901),
    new MM("name", "public", false, 902),
    new MM("nestedClasses", "public", false, 903),
    new MM("simpleName", "public", false, 904),
    new MM("slots", "public", false, 905),
    new MM("superclass", "public", false, 906),
    new MM("init`reflectee:", "public", true, 0),
    new MM("reflectee", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$ClassMirror = function ($r) {
    let self = this;
    self.$super$MirrorsForV8$ClassMirror$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($r) {
    let self = this;
    self._$superInit$MirrorsForV8$ClassMirror($r);
    self._$init$reflectee$($r);
    return self;
   };
   this.$$equal = function ($other) {
    let self = this;
    if (!$other.$isKindOfClassMirror()) {
     return false;
    };
    return self._$reflectee() === $other.$reflectee();
   };
   this.$allSuperclasses = function () {
    let self = this;
    let $klass = nil;
    let $superclasses = nil;
    $superclasses = $0.$List(self.$enclosingObjects$MirrorsForV8$ClassMirror[0]).$new();
    $klass = self._$superclass();
    {
     for (; !$klass.$isNil(); ) {
      $superclasses.$add$($klass);
      $klass = $klass.$superclass();
     };
    };
    return $superclasses;
   };
   this.$computeMirrorGroup$ = function (self, $mgAccessor) {
    let $mg = nil;
    $mg = $0.$List(self.$enclosingObjects$MirrorsForV8$ClassMirror[0]).$new();
    (function (cascadeReceiver) {
     cascadeReceiver.$add$(self);
     return cascadeReceiver.$yourself();
    })(self._$allSuperclasses().$reverse()).$do$(function ($klass) {
     return $mg.$addAll$($mgAccessor.$value$($klass.$mixin()));
    });
    return $mg;
   };
   this.$declaration = function () {
    let self = this;
    return self._$mixin().$declaration();
   };
   this.$enclosingObject = function () {
    let self = this;
    return self.$enclosingObjects$MirrorsForV8$ClassMirror[0]._$ObjectMirror().$reflecting$(self._$reflectee().$enclosingObject());
   };
   this.$hash = function () {
    let self = this;
    return $0.$identityHashOf$(self.$enclosingObjects$MirrorsForV8$ClassMirror[0], self._$reflectee()).$bitXor$(self._$class().$hash());
   };
   this.$isKindOfClassMirror = function () {
    let self = this;
    return true;
   };
   this.$isMeta = function () {
    let self = this;
    return self._$reflectee().$isMeta();
   };
   this.$methods = function () {
    let self = this;
    return $1.$computeMirrorGroup$(self, function ($r) {
     return $r.$methods();
    });
   };
   this.$mixin = function () {
    let self = this;
    return self.$enclosingObjects$MirrorsForV8$ClassMirror[0]._$MixinMirror().$reflecting$(self._$reflectee().$mixin());
   };
   this.$name = function () {
    let self = this;
    return self._$reflectee().$name();
   };
   this.$nestedClasses = function () {
    let self = this;
    return $1.$computeMirrorGroup$(self, function ($r) {
     return $r.$nestedClasses();
    });
   };
   this.$simpleName = function () {
    let self = this;
    return self._$reflectee().$name().$splitBy$("`").$last();
   };
   this.$slots = function () {
    let self = this;
    return $1.$computeMirrorGroup$(self, function ($r) {
     return $r.$slots();
    });
   };
   this.$superclass = function () {
    let self = this;
    if (self._$reflectee().$superclass().$isNil()) {
     return nil;
    };
    return self.$enclosingObjects$MirrorsForV8$ClassMirror[0]._$ClassMirror().$reflecting$(self._$reflectee().$superclass());
   };
   this.$init$reflectee$ = function (v) {
    this.$reflectee$slot = v;
    return this;
   };
   this.$reflectee = function () {
    return this.$reflectee$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`ClassMirror";
     this._$superInit$MirrorsForV8$ClassMirror = $.$superInit$MirrorsForV8$ClassMirror;
     this.$superInit$MirrorsForV8$ClassMirror = dnuCatcher("$superInit$MirrorsForV8$ClassMirror");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$$equal = this._$$equal = $.$$equal;
     this.$allSuperclasses = this._$allSuperclasses = $.$allSuperclasses;
     this.$declaration = this._$declaration = $.$declaration;
     this.$enclosingObject = this._$enclosingObject = $.$enclosingObject;
     this.$hash = this._$hash = $.$hash;
     this.$isKindOfClassMirror = this._$isKindOfClassMirror = $.$isKindOfClassMirror;
     this.$isMeta = this._$isMeta = $.$isMeta;
     this.$methods = this._$methods = $.$methods;
     this.$mixin = this._$mixin = $.$mixin;
     this.$name = this._$name = $.$name;
     this.$nestedClasses = this._$nestedClasses = $.$nestedClasses;
     this.$simpleName = this._$simpleName = $.$simpleName;
     this.$slots = this._$slots = $.$slots;
     this.$superclass = this._$superclass = $.$superclass;
     this.$init$reflectee$ = this._$init$reflectee$ = $.$init$reflectee$;
     this.$reflectee = this._$reflectee = $.$reflectee;
     this.$enclosingObjects$MirrorsForV8$ClassMirror = enclosingObjects;
     this.$super$MirrorsForV8$ClassMirror$slot = runtimeSuperclass;
     this["MirrorsForV8`ClassMirror"] = function () {
      superBasicNew.call(this);
      this.$reflectee$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`ClassMirror"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`ClassMirror";
    this.slots = [];
    this.methods = [new MM("reflecting:", "public", true, 0)];
    this.nestedClasses = [];
    this.$reflecting$ = function ($r) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($r);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`ClassMirror";
      this.$reflecting$ = this._$reflecting$ = $.$reflecting$;
      this.$enclosingObjects$MirrorsForV8$ClassMirror = enclosingObjects;
      this.$super$MirrorsForV8$ClassMirror$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$IRBasedClassDeclarationBuilder = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`IRBasedClassDeclarationBuilder";
   this.name = "MirrorsForV8`IRBasedClassDeclarationBuilder";
   this.header = 907;
   this.slots = [new SM("prvtIR", "protected", false, false)];
   this.methods = [
    new MM("superInit`MirrorsForV8`IRBasedClassDeclarationBuilder", "protected", true, 908),
    new MM("instance`initializer", "public", true, 909),
    new MM("computeClassSide", "protected", false, 910),
    new MM("computeInstanceSide", "protected", false, 911),
    new MM("declarationData", "protected", false, 912),
    new MM("header", "public", false, 913),
    new MM("name", "public", false, 914),
    new MM("init`prvtIR:", "protected", true, 0),
    new MM("prvtIR", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$IRBasedClassDeclarationBuilder = function ($ir, $m, $enclosing) {
    let self = this;
    self.$super$MirrorsForV8$IRBasedClassDeclarationBuilder$slot._$instance$initializer.call(self, $m, $enclosing);
    return self;
   };
   this.$instance$initializer = function ($ir, $m, $enclosing) {
    let self = this;
    self._$superInit$MirrorsForV8$IRBasedClassDeclarationBuilder($ir, $m, $enclosing);
    self._$init$prvtIR$($ir);
    return self;
   };
   this.$computeClassSide = function () {
    let self = this;
    let $existingClassMixin = nil;
    $existingClassMixin = nil.$$equal(self._$prvtExistingMixin()).$ifFalse$(function () {
     return self.$enclosingObjects$MirrorsForV8$IRBasedClassDeclarationBuilder[0]._$classMixinOf$(self._$prvtExistingMixin());
    });
    return self.$enclosingObjects$MirrorsForV8$IRBasedClassDeclarationBuilder[0]._$MixinBuilder().$for$classDeclaration$existingMixin$(self._$prvtIR().$classSide(), self, $existingClassMixin);
   };
   this.$computeInstanceSide = function () {
    let self = this;
    return self.$enclosingObjects$MirrorsForV8$IRBasedClassDeclarationBuilder[0]._$MixinBuilder().$for$classDeclaration$existingMixin$(self._$prvtIR().$instanceSide(), self, self._$prvtIR().$instanceSide());
   };
   this.$declarationData = function () {
    let self = this;
    return self._$prvtIR();
   };
   this.$header = function () {
    let self = this;
    return self.$enclosingObjects$MirrorsForV8$IRBasedClassDeclarationBuilder[0]._$SourceBasedClassHeaderMirror().$from$(self._$prvtIR().$headerSource());
   };
   this.$name = function () {
    let self = this;
    return $0.$compilation(self.$enclosingObjects$MirrorsForV8$IRBasedClassDeclarationBuilder[0]).$names().$fullyQualifiedNameToSimple$(self._$qualifiedName());
   };
   this.$init$prvtIR$ = function (v) {
    this.$prvtIR$slot = v;
    return this;
   };
   this.$prvtIR = function () {
    return this.$prvtIR$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`IRBasedClassDeclarationBuilder";
     this._$superInit$MirrorsForV8$IRBasedClassDeclarationBuilder = $.$superInit$MirrorsForV8$IRBasedClassDeclarationBuilder;
     this.$superInit$MirrorsForV8$IRBasedClassDeclarationBuilder = dnuCatcher("$superInit$MirrorsForV8$IRBasedClassDeclarationBuilder");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$computeClassSide = $.$computeClassSide;
     this.$computeClassSide = dnuCatcher("$computeClassSide");
     this._$computeInstanceSide = $.$computeInstanceSide;
     this.$computeInstanceSide = dnuCatcher("$computeInstanceSide");
     this._$declarationData = $.$declarationData;
     this.$declarationData = dnuCatcher("$declarationData");
     this.$header = this._$header = $.$header;
     this.$name = this._$name = $.$name;
     this._$init$prvtIR$ = $.$init$prvtIR$;
     this.$init$prvtIR$ = dnuCatcher("$init$prvtIR$");
     this._$prvtIR = $.$prvtIR;
     this.$prvtIR = dnuCatcher("$prvtIR");
     this.$enclosingObjects$MirrorsForV8$IRBasedClassDeclarationBuilder = enclosingObjects;
     this.$super$MirrorsForV8$IRBasedClassDeclarationBuilder$slot = runtimeSuperclass;
     this["MirrorsForV8`IRBasedClassDeclarationBuilder"] = function () {
      superBasicNew.call(this);
      this.$prvtIR$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`IRBasedClassDeclarationBuilder"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`IRBasedClassDeclarationBuilder";
    this.slots = [];
    this.methods = [new MM("fromIR:existingMixin:within:", "public", true, 0)];
    this.nestedClasses = [];
    this.$fromIR$existingMixin$within$ = function ($ir, $m, $enclosing) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($ir, $m, $enclosing);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`IRBasedClassDeclarationBuilder";
      this.$fromIR$existingMixin$within$ = this._$fromIR$existingMixin$within$ = $.$fromIR$existingMixin$within$;
      this.$enclosingObjects$MirrorsForV8$IRBasedClassDeclarationBuilder = enclosingObjects;
      this.$super$MirrorsForV8$IRBasedClassDeclarationBuilder$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$MethodBuilder = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`MethodBuilder";
   this.name = "MirrorsForV8`MethodBuilder";
   this.header = 915;
   this.slots = [
    new SM("reflecteeX", "protected", false, false),
    new SM("definingMixinX", "protected", false, false),
    new SM("source", "public", false, false)
   ];
   this.methods = [
    new MM("superInit`MirrorsForV8`MethodBuilder", "protected", true, 916),
    new MM("instance`initializer", "public", true, 917),
    new MM("accessModifier", "public", false, 918),
    new MM("definingMixin", "public", false, 919),
    new MM("name", "public", false, 920),
    new MM("simpleName", "public", false, 921),
    new MM("init`reflecteeX:", "protected", true, 0),
    new MM("reflecteeX", "protected", true, 0),
    new MM("init`definingMixinX:", "protected", true, 0),
    new MM("definingMixinX", "protected", true, 0),
    new MM("init`source:", "public", true, 0),
    new MM("source", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$MethodBuilder = function ($mir, $mb, $s) {
    let self = this;
    self.$super$MirrorsForV8$MethodBuilder$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($mir, $mb, $s) {
    let self = this;
    self._$superInit$MirrorsForV8$MethodBuilder($mir, $mb, $s);
    self._$init$reflecteeX$($mir);
    self._$init$definingMixinX$($mb);
    self._$init$source$($s);
    return self;
   };
   this.$accessModifier = function () {
    let self = this;
    return self._$reflecteeX().$accessModifier();
   };
   this.$definingMixin = function () {
    let self = this;
    return self._$definingMixinX();
   };
   this.$name = function () {
    let self = this;
    return self._$reflecteeX().$name();
   };
   this.$simpleName = function () {
    let self = this;
    return self._$reflecteeX().$name();
   };
   this.$init$reflecteeX$ = function (v) {
    this.$reflecteeX$slot = v;
    return this;
   };
   this.$reflecteeX = function () {
    return this.$reflecteeX$slot;
   };
   this.$init$definingMixinX$ = function (v) {
    this.$definingMixinX$slot = v;
    return this;
   };
   this.$definingMixinX = function () {
    return this.$definingMixinX$slot;
   };
   this.$init$source$ = function (v) {
    this.$source$slot = v;
    return this;
   };
   this.$source = function () {
    return this.$source$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`MethodBuilder";
     this._$superInit$MirrorsForV8$MethodBuilder = $.$superInit$MirrorsForV8$MethodBuilder;
     this.$superInit$MirrorsForV8$MethodBuilder = dnuCatcher("$superInit$MirrorsForV8$MethodBuilder");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$accessModifier = this._$accessModifier = $.$accessModifier;
     this.$definingMixin = this._$definingMixin = $.$definingMixin;
     this.$name = this._$name = $.$name;
     this.$simpleName = this._$simpleName = $.$simpleName;
     this._$init$reflecteeX$ = $.$init$reflecteeX$;
     this.$init$reflecteeX$ = dnuCatcher("$init$reflecteeX$");
     this._$reflecteeX = $.$reflecteeX;
     this.$reflecteeX = dnuCatcher("$reflecteeX");
     this._$init$definingMixinX$ = $.$init$definingMixinX$;
     this.$init$definingMixinX$ = dnuCatcher("$init$definingMixinX$");
     this._$definingMixinX = $.$definingMixinX;
     this.$definingMixinX = dnuCatcher("$definingMixinX");
     this.$init$source$ = this._$init$source$ = $.$init$source$;
     this.$source = this._$source = $.$source;
     this.$enclosingObjects$MirrorsForV8$MethodBuilder = enclosingObjects;
     this.$super$MirrorsForV8$MethodBuilder$slot = runtimeSuperclass;
     this["MirrorsForV8`MethodBuilder"] = function () {
      superBasicNew.call(this);
      this.$reflecteeX$slot = nil;
      this.$definingMixinX$slot = nil;
      this.$source$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`MethodBuilder"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`MethodBuilder";
    this.slots = [];
    this.methods = [new MM("reflecting:in:source:", "public", true, 0)];
    this.nestedClasses = [];
    this.$reflecting$in$source$ = function ($mir, $mb, $s) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($mir, $mb, $s);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`MethodBuilder";
      this.$reflecting$in$source$ = this._$reflecting$in$source$ = $.$reflecting$in$source$;
      this.$enclosingObjects$MirrorsForV8$MethodBuilder = enclosingObjects;
      this.$super$MirrorsForV8$MethodBuilder$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$MethodMirror = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`MethodMirror";
   this.name = "MirrorsForV8`MethodMirror";
   this.header = 922;
   this.slots = [
    new SM("name", "public", false, false),
    new SM("accessModifier", "public", false, false),
    new SM("definingMixin", "public", false, false),
    new SM("sourceIndex", "private", false, false)
   ];
   this.methods = [
    new MM("superInit`MirrorsForV8`MethodMirror", "protected", true, 923),
    new MM("instance`initializer", "public", true, 924),
    new MM("isKindOfMethodMirror", "public", false, 925),
    new MM("simpleName", "public", false, 926),
    new MM("source", "public", false, 927),
    new MM("init`name:", "public", true, 0),
    new MM("name", "public", true, 0),
    new MM("init`accessModifier:", "public", true, 0),
    new MM("accessModifier", "public", true, 0),
    new MM("init`definingMixin:", "public", true, 0),
    new MM("definingMixin", "public", true, 0),
    new MM("init`sourceIndex:", "private", true, 0),
    new MM("sourceIndex", "private", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$MethodMirror = function ($n, $a, $m, $s) {
    let self = this;
    self.$super$MirrorsForV8$MethodMirror$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($n, $a, $m, $s) {
    let self = this;
    self._$superInit$MirrorsForV8$MethodMirror($n, $a, $m, $s);
    self._$init$name$($n);
    self._$init$accessModifier$($a);
    self._$init$definingMixin$($m);
    $1.$init$sourceIndex$(self, $s);
    return self;
   };
   this.$isKindOfMethodMirror = function () {
    let self = this;
    return true;
   };
   this.$simpleName = function () {
    let self = this;
    return self._$name();
   };
   this.$source = function () {
    let self = this;
    return sources[$1.$sourceIndex(self)];
   };
   this.$init$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$name = function () {
    return this.$name$slot;
   };
   this.$init$accessModifier$ = function (v) {
    this.$accessModifier$slot = v;
    return this;
   };
   this.$accessModifier = function () {
    return this.$accessModifier$slot;
   };
   this.$init$definingMixin$ = function (v) {
    this.$definingMixin$slot = v;
    return this;
   };
   this.$definingMixin = function () {
    return this.$definingMixin$slot;
   };
   this.$init$sourceIndex$ = function (self, v) {
    self.$sourceIndex$slot = v;
    return self;
   };
   this.$sourceIndex = function (self) {
    return self.$sourceIndex$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`MethodMirror";
     this._$superInit$MirrorsForV8$MethodMirror = $.$superInit$MirrorsForV8$MethodMirror;
     this.$superInit$MirrorsForV8$MethodMirror = dnuCatcher("$superInit$MirrorsForV8$MethodMirror");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isKindOfMethodMirror = this._$isKindOfMethodMirror = $.$isKindOfMethodMirror;
     this.$simpleName = this._$simpleName = $.$simpleName;
     this.$source = this._$source = $.$source;
     this.$init$name$ = this._$init$name$ = $.$init$name$;
     this.$name = this._$name = $.$name;
     this.$init$accessModifier$ = this._$init$accessModifier$ = $.$init$accessModifier$;
     this.$accessModifier = this._$accessModifier = $.$accessModifier;
     this.$init$definingMixin$ = this._$init$definingMixin$ = $.$init$definingMixin$;
     this.$definingMixin = this._$definingMixin = $.$definingMixin;
     this.$enclosingObjects$MirrorsForV8$MethodMirror = enclosingObjects;
     this.$super$MirrorsForV8$MethodMirror$slot = runtimeSuperclass;
     this["MirrorsForV8`MethodMirror"] = function () {
      superBasicNew.call(this);
      this.$name$slot = nil;
      this.$accessModifier$slot = nil;
      this.$definingMixin$slot = nil;
      this.$sourceIndex$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`MethodMirror"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`MethodMirror";
    this.slots = [];
    this.methods = [new MM("name:accessModifier:mixin:source:", "public", true, 0)];
    this.nestedClasses = [];
    this.$name$accessModifier$mixin$source$ = function ($n, $a, $m, $s) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($n, $a, $m, $s);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`MethodMirror";
      this.$name$accessModifier$mixin$source$ = this._$name$accessModifier$mixin$source$ = $.$name$accessModifier$mixin$source$;
      this.$enclosingObjects$MirrorsForV8$MethodMirror = enclosingObjects;
      this.$super$MirrorsForV8$MethodMirror$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$MixinBasedClassDeclarationBuilder = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`MixinBasedClassDeclarationBuilder";
   this.name = "MirrorsForV8`MixinBasedClassDeclarationBuilder";
   this.header = 928;
   this.slots = [new SM("mixinMirror", "protected", false, false)];
   this.methods = [
    new MM("superInit`MirrorsForV8`MixinBasedClassDeclarationBuilder", "protected", true, 929),
    new MM("instance`initializer", "public", true, 930),
    new MM("computeClassSide", "protected", false, 931),
    new MM("computeInstanceSide", "protected", false, 932),
    new MM("declarationData", "protected", false, 933),
    new MM("header", "public", false, 934),
    new MM("name", "public", false, 935),
    new MM("init`mixinMirror:", "protected", true, 0),
    new MM("mixinMirror", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$MixinBasedClassDeclarationBuilder = function ($m, $enclosing) {
    let self = this;
    self.$super$MirrorsForV8$MixinBasedClassDeclarationBuilder$slot._$instance$initializer.call(self, $m, $enclosing);
    return self;
   };
   this.$instance$initializer = function ($m, $enclosing) {
    let self = this;
    self._$superInit$MirrorsForV8$MixinBasedClassDeclarationBuilder($m, $enclosing);
    self._$init$mixinMirror$(self.$enclosingObjects$MirrorsForV8$MixinBasedClassDeclarationBuilder[0]._$MixinMirror().$reflecting$($m));
    return self;
   };
   this.$computeClassSide = function () {
    let self = this;
    let $existingClassMixin = nil;
    $existingClassMixin = self.$enclosingObjects$MirrorsForV8$MixinBasedClassDeclarationBuilder[0]._$classMixinOf$(self._$prvtExistingMixin());
    return self.$enclosingObjects$MirrorsForV8$MixinBasedClassDeclarationBuilder[0]._$MixinBuilder().$for$classDeclaration$existingMixin$(self._$mixinMirror().$declaration().$classSide(), self, $existingClassMixin);
   };
   this.$computeInstanceSide = function () {
    let self = this;
    return self.$enclosingObjects$MirrorsForV8$MixinBasedClassDeclarationBuilder[0]._$MixinBuilder().$for$classDeclaration$existingMixin$(self._$mixinMirror(), self, self._$prvtExistingMixin());
   };
   this.$declarationData = function () {
    let self = this;
    return self._$mixinMirror().$declaration();
   };
   this.$header = function () {
    let self = this;
    return self._$declarationData().$header();
   };
   this.$name = function () {
    let self = this;
    return self._$declarationData().$name();
   };
   this.$init$mixinMirror$ = function (v) {
    this.$mixinMirror$slot = v;
    return this;
   };
   this.$mixinMirror = function () {
    return this.$mixinMirror$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`MixinBasedClassDeclarationBuilder";
     this._$superInit$MirrorsForV8$MixinBasedClassDeclarationBuilder = $.$superInit$MirrorsForV8$MixinBasedClassDeclarationBuilder;
     this.$superInit$MirrorsForV8$MixinBasedClassDeclarationBuilder = dnuCatcher("$superInit$MirrorsForV8$MixinBasedClassDeclarationBuilder");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$computeClassSide = $.$computeClassSide;
     this.$computeClassSide = dnuCatcher("$computeClassSide");
     this._$computeInstanceSide = $.$computeInstanceSide;
     this.$computeInstanceSide = dnuCatcher("$computeInstanceSide");
     this._$declarationData = $.$declarationData;
     this.$declarationData = dnuCatcher("$declarationData");
     this.$header = this._$header = $.$header;
     this.$name = this._$name = $.$name;
     this._$init$mixinMirror$ = $.$init$mixinMirror$;
     this.$init$mixinMirror$ = dnuCatcher("$init$mixinMirror$");
     this._$mixinMirror = $.$mixinMirror;
     this.$mixinMirror = dnuCatcher("$mixinMirror");
     this.$enclosingObjects$MirrorsForV8$MixinBasedClassDeclarationBuilder = enclosingObjects;
     this.$super$MirrorsForV8$MixinBasedClassDeclarationBuilder$slot = runtimeSuperclass;
     this["MirrorsForV8`MixinBasedClassDeclarationBuilder"] = function () {
      superBasicNew.call(this);
      this.$mixinMirror$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`MixinBasedClassDeclarationBuilder"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`MixinBasedClassDeclarationBuilder";
    this.slots = [];
    this.methods = [new MM("forExistingMixin:within:", "public", true, 0)];
    this.nestedClasses = [];
    this.$forExistingMixin$within$ = function ($m, $enclosing) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($m, $enclosing);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`MixinBasedClassDeclarationBuilder";
      this.$forExistingMixin$within$ = this._$forExistingMixin$within$ = $.$forExistingMixin$within$;
      this.$enclosingObjects$MirrorsForV8$MixinBasedClassDeclarationBuilder = enclosingObjects;
      this.$super$MirrorsForV8$MixinBasedClassDeclarationBuilder$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$MixinBuilder = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`MixinBuilder";
   this.name = "MirrorsForV8`MixinBuilder";
   this.header = 936;
   this.slots = [
    new SM("data", "protected", false, false),
    new SM("declaration", "public", false, false),
    new SM("slots", "public", false, false),
    new SM("methods", "public", false, false),
    new SM("nestedClasses", "public", false, false)
   ];
   this.methods = [
    new MM("superInit`MirrorsForV8`MixinBuilder", "protected", true, 937),
    new MM("instance`initializer", "public", true, 938),
    new MM("canUnderstand:", "public", false, 939),
    new MM("find:in:", "protected", false, 940),
    new MM("isKindOfMixinMirror", "public", false, 941),
    new MM("isMeta", "public", false, 942),
    new MM("nestedClassBuilderFor:within:", "protected", false, 943),
    new MM("init`data:", "protected", true, 0),
    new MM("data", "protected", true, 0),
    new MM("init`declaration:", "public", true, 0),
    new MM("declaration", "public", true, 0),
    new MM("init`slots:", "public", true, 0),
    new MM("slots", "public", true, 0),
    new MM("init`methods:", "public", true, 0),
    new MM("methods", "public", true, 0),
    new MM("init`nestedClasses:", "public", true, 0),
    new MM("nestedClasses", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$MixinBuilder = function ($dataSource, $cdb, $em) {
    let self = this;
    self.$super$MirrorsForV8$MixinBuilder$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($dataSource, $cdb, $em) {
    let self = this;
    self._$superInit$MirrorsForV8$MixinBuilder($dataSource, $cdb, $em);
    self._$init$data$($dataSource);
    self._$init$declaration$($cdb);
    self._$init$slots$(self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$MutableMirrorGroup().$group$within$($dataSource.$slots().$reject$(function ($ea) {
     return $ea.$isSynthetic();
    }), self));
    self._$init$methods$(self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$MutableMethodGroup().$group$within$($dataSource.$methods().$reject$(function ($ea) {
     return $ea.$isSynthetic();
    }).$collect$(function ($ea) {
     return self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$MethodBuilder().$reflecting$in$source$($ea, self, $ea.$source());
    }), self));
    self._$init$nestedClasses$(self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$MutableNestedClassGroup().$group$within$($dataSource.$nestedClasses().$collect$(function ($ea) {
     return self._$nestedClassBuilderFor$within$($ea, $em);
    }), self));
    return self;
   };
   this.$canUnderstand$ = function ($selector) {
    let self = this;
    return self._$methods().$includesMirrorNamed$($selector);
   };
   this.$find$in$ = function ($name, $aMixin) {
    let self = this;
    return $0.$Mixin(self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]).$fromRuntimeMixin$($aMixin.runtimeMixin[$0.$compilation(self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]).$names().$manglePublic$($name)]);
   };
   this.$isKindOfMixinMirror = function () {
    let self = this;
    return true;
   };
   this.$isMeta = function () {
    let self = this;
    return self._$data().$isMeta();
   };
   this.$nestedClassBuilderFor$within$ = function ($nc, $em) {
    let self = this;
    if (self._$data().$isKindOfIntermediateMixin()) {
     return self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$IRBasedClassDeclarationBuilder().$fromIR$existingMixin$within$($nc, self._$find$in$($nc.$qualifiedName(), $em), self._$declaration());
    };
    return self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$MixinBasedClassDeclarationBuilder().$forExistingMixin$within$(self._$find$in$($nc.$qualifiedName(), $em), self._$declaration());
   };
   this.$init$data$ = function (v) {
    this.$data$slot = v;
    return this;
   };
   this.$data = function () {
    return this.$data$slot;
   };
   this.$init$declaration$ = function (v) {
    this.$declaration$slot = v;
    return this;
   };
   this.$declaration = function () {
    return this.$declaration$slot;
   };
   this.$init$slots$ = function (v) {
    this.$slots$slot = v;
    return this;
   };
   this.$slots = function () {
    return this.$slots$slot;
   };
   this.$init$methods$ = function (v) {
    this.$methods$slot = v;
    return this;
   };
   this.$methods = function () {
    return this.$methods$slot;
   };
   this.$init$nestedClasses$ = function (v) {
    this.$nestedClasses$slot = v;
    return this;
   };
   this.$nestedClasses = function () {
    return this.$nestedClasses$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`MixinBuilder";
     this._$superInit$MirrorsForV8$MixinBuilder = $.$superInit$MirrorsForV8$MixinBuilder;
     this.$superInit$MirrorsForV8$MixinBuilder = dnuCatcher("$superInit$MirrorsForV8$MixinBuilder");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$canUnderstand$ = this._$canUnderstand$ = $.$canUnderstand$;
     this._$find$in$ = $.$find$in$;
     this.$find$in$ = dnuCatcher("$find$in$");
     this.$isKindOfMixinMirror = this._$isKindOfMixinMirror = $.$isKindOfMixinMirror;
     this.$isMeta = this._$isMeta = $.$isMeta;
     this._$nestedClassBuilderFor$within$ = $.$nestedClassBuilderFor$within$;
     this.$nestedClassBuilderFor$within$ = dnuCatcher("$nestedClassBuilderFor$within$");
     this._$init$data$ = $.$init$data$;
     this.$init$data$ = dnuCatcher("$init$data$");
     this._$data = $.$data;
     this.$data = dnuCatcher("$data");
     this.$init$declaration$ = this._$init$declaration$ = $.$init$declaration$;
     this.$declaration = this._$declaration = $.$declaration;
     this.$init$slots$ = this._$init$slots$ = $.$init$slots$;
     this.$slots = this._$slots = $.$slots;
     this.$init$methods$ = this._$init$methods$ = $.$init$methods$;
     this.$methods = this._$methods = $.$methods;
     this.$init$nestedClasses$ = this._$init$nestedClasses$ = $.$init$nestedClasses$;
     this.$nestedClasses = this._$nestedClasses = $.$nestedClasses;
     this.$enclosingObjects$MirrorsForV8$MixinBuilder = enclosingObjects;
     this.$super$MirrorsForV8$MixinBuilder$slot = runtimeSuperclass;
     this["MirrorsForV8`MixinBuilder"] = function () {
      superBasicNew.call(this);
      this.$data$slot = nil;
      this.$declaration$slot = nil;
      this.$slots$slot = nil;
      this.$methods$slot = nil;
      this.$nestedClasses$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`MixinBuilder"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`MixinBuilder";
    this.slots = [];
    this.methods = [
     new MM("for:classDeclaration:existingMixin:", "public", true, 0),
     new MM("reflecting:", "public", false, 944)
    ];
    this.nestedClasses = [];
    this.$for$classDeclaration$existingMixin$ = function ($dataSource, $cdb, $em) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($dataSource, $cdb, $em);
     return t;
    };
    this.$reflecting$ = function ($mxn) {
     let self = this;
     return $mxn.$isMeta().$ifTrue$ifFalse$(function () {
      return self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$ClassDeclarationBuilder().$reflecting$(self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$MixinMirror().$reflecting$($mxn).$declaration().$instanceSide().$reflectee()).$classSide();
     }, function () {
      return self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$ClassDeclarationBuilder().$reflecting$($mxn).$instanceSide();
     });
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`MixinBuilder";
      this.$for$classDeclaration$existingMixin$ = this._$for$classDeclaration$existingMixin$ = $.$for$classDeclaration$existingMixin$;
      this.$reflecting$ = this._$reflecting$ = $.$reflecting$;
      this.$enclosingObjects$MirrorsForV8$MixinBuilder = enclosingObjects;
      this.$super$MirrorsForV8$MixinBuilder$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$MixinMirror = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`MixinMirror";
   this.name = "MirrorsForV8`MixinMirror";
   this.header = 945;
   this.slots = [new SM("reflectee", "private", false, false)];
   this.methods = [
    new MM("superInit`MirrorsForV8`MixinMirror", "protected", true, 946),
    new MM("instance`initializer", "public", true, 947),
    new MM("apply:withName:", "public", false, 948),
    new MM("asBuilder", "public", false, 949),
    new MM("canUnderstand:", "public", false, 950),
    new MM("declaration", "public", false, 951),
    new MM("isKindOfMixinMirror", "public", false, 952),
    new MM("isMeta", "public", false, 953),
    new MM("methods", "public", false, 954),
    new MM("name", "public", false, 955),
    new MM("nestedClasses", "public", false, 956),
    new MM("slots", "public", false, 957),
    new MM("init`reflectee:", "private", true, 0),
    new MM("reflectee", "private", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$MixinMirror = function ($mixin) {
    let self = this;
    self.$super$MirrorsForV8$MixinMirror$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($mixin) {
    let self = this;
    self._$superInit$MirrorsForV8$MixinMirror($mixin);
    $1.$init$reflectee$(self, $mixin);
    return self;
   };
   this.$apply$withName$ = function ($newSuperclass, $n) {
    let self = this;
    return self.$enclosingObjects$MirrorsForV8$MixinMirror[0]._$ClassMirror().$reflecting$($1.$reflectee(self).$applyTo$withName$($newSuperclass, $n));
   };
   this.$asBuilder = function () {
    let self = this;
    return self._$isMeta().$ifTrue$ifFalse$(function () {
     return self._$declaration().$asBuilder().$classSide();
    }, function () {
     return self._$declaration().$asBuilder().$instanceSide();
    });
   };
   this.$canUnderstand$ = function ($selector) {
    let self = this;
    return self._$methods().$includesMirrorNamed$($selector);
   };
   this.$declaration = function () {
    let self = this;
    return self.$enclosingObjects$MirrorsForV8$MixinMirror[0]._$ClassDeclarationMirror().$reflecting$(self._$isMeta().$ifFalse$ifTrue$(function () {
     return $1.$reflectee(self);
    }, function () {
     return $0.$Mixin(self.$enclosingObjects$MirrorsForV8$MixinMirror[0]).$fromRuntimeMixin$($1.$reflectee(self).runtimeMixin.nonMeta);
    }));
   };
   this.$isKindOfMixinMirror = function () {
    let self = this;
    return true;
   };
   this.$isMeta = function () {
    let self = this;
    return $1.$reflectee(self).$isMeta();
   };
   this.$methods = function () {
    let self = this;
    let $raw = nil;
    $raw = $1.$reflectee(self).runtimeMixin.methods.$select$(function ($each) {
     return $each.isSynthetic.$not();
    }).$collect$(function ($each) {
     return self.$enclosingObjects$MirrorsForV8$MixinMirror[0]._$MethodMirror().$name$accessModifier$mixin$source$($each.name, $each.accessModifier, self, $each.source);
    });
    return $0.$ImmutableMirrorGroup(self.$enclosingObjects$MirrorsForV8$MixinMirror[0]).$group$($raw);
   };
   this.$name = function () {
    let self = this;
    return $1.$reflectee(self).$name().$splitBy$("`").$last();
   };
   this.$nestedClasses = function () {
    let self = this;
    let $raw = nil;
    $raw = $1.$reflectee(self).runtimeMixin.nestedClasses.$collect$(function ($each) {
     return self.$enclosingObjects$MirrorsForV8$MixinMirror[0]._$ClassDeclarationMirror().$reflecting$($0.$Mixin(self.$enclosingObjects$MirrorsForV8$MixinMirror[0]).$fromRuntimeMixin$($1.$reflectee(self).runtimeMixin[$0.$vmmirror(self.$enclosingObjects$MirrorsForV8$MixinMirror[0]).$mangleSelector$($each)]));
    });
    return $0.$ImmutableMirrorGroup(self.$enclosingObjects$MirrorsForV8$MixinMirror[0]).$group$($raw);
   };
   this.$slots = function () {
    let self = this;
    let $raw = nil;
    if (self._$isMeta()) {
     return $0.$ImmutableMirrorGroup(self.$enclosingObjects$MirrorsForV8$MixinMirror[0]).$group$([]);
    };
    $raw = $1.$reflectee(self).runtimeMixin.slots.$select$(function ($each) {
     return $each.isSynthetic.$not();
    }).$collect$(function ($each) {
     return self.$enclosingObjects$MirrorsForV8$MixinMirror[0]._$SlotDeclarationMirror().$name$accessModifier$isMutable$mixin$($each.name, $each.accessModifier, $each.isMutable, self);
    });
    return $0.$ImmutableMirrorGroup(self.$enclosingObjects$MirrorsForV8$MixinMirror[0]).$group$($raw);
   };
   this.$init$reflectee$ = function (self, v) {
    self.$reflectee$slot = v;
    return self;
   };
   this.$reflectee = function (self) {
    return self.$reflectee$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`MixinMirror";
     this._$superInit$MirrorsForV8$MixinMirror = $.$superInit$MirrorsForV8$MixinMirror;
     this.$superInit$MirrorsForV8$MixinMirror = dnuCatcher("$superInit$MirrorsForV8$MixinMirror");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$apply$withName$ = this._$apply$withName$ = $.$apply$withName$;
     this.$asBuilder = this._$asBuilder = $.$asBuilder;
     this.$canUnderstand$ = this._$canUnderstand$ = $.$canUnderstand$;
     this.$declaration = this._$declaration = $.$declaration;
     this.$isKindOfMixinMirror = this._$isKindOfMixinMirror = $.$isKindOfMixinMirror;
     this.$isMeta = this._$isMeta = $.$isMeta;
     this.$methods = this._$methods = $.$methods;
     this.$name = this._$name = $.$name;
     this.$nestedClasses = this._$nestedClasses = $.$nestedClasses;
     this.$slots = this._$slots = $.$slots;
     this.$enclosingObjects$MirrorsForV8$MixinMirror = enclosingObjects;
     this.$super$MirrorsForV8$MixinMirror$slot = runtimeSuperclass;
     this["MirrorsForV8`MixinMirror"] = function () {
      superBasicNew.call(this);
      this.$reflectee$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`MixinMirror"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`MixinMirror";
    this.slots = [];
    this.methods = [new MM("reflecting:", "public", true, 0)];
    this.nestedClasses = [];
    this.$reflecting$ = function ($mixin) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($mixin);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`MixinMirror";
      this.$reflecting$ = this._$reflecting$ = $.$reflecting$;
      this.$enclosingObjects$MirrorsForV8$MixinMirror = enclosingObjects;
      this.$super$MirrorsForV8$MixinMirror$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$MutableMethodGroup = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`MutableMethodGroup";
   this.name = "MirrorsForV8`MutableMethodGroup";
   this.header = 958;
   this.slots = [];
   this.methods = [
    new MM("superInit`MirrorsForV8`MutableMethodGroup", "protected", true, 959),
    new MM("instance`initializer", "public", true, 960),
    new MM("addFromSource:", "public", false, 961),
    new MM("removeMirrorNamed:", "public", false, 962)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$MutableMethodGroup = function ($ms, $mb) {
    let self = this;
    self.$super$MirrorsForV8$MutableMethodGroup$slot._$instance$initializer.call(self, $ms, $mb);
    return self;
   };
   this.$instance$initializer = function ($ms, $mb) {
    let self = this;
    self._$superInit$MirrorsForV8$MutableMethodGroup($ms, $mb);
    return self;
   };
   this.$addFromSource$ = function ($s) {
    let self = this;
    let $result = nil;
    let $newM = nil;
    let $sourceIndex = nil;
    $result = $0.$compiler(self.$enclosingObjects$MirrorsForV8$MutableMethodGroup[0]).$compileMethodSource$within$($s, self._$definingMixin());
    $newM = self.$enclosingObjects$MirrorsForV8$MutableMethodGroup[0]._$MethodBuilder().$reflecting$in$source$($result, self._$definingMixin(), $s);
    self._$removeMirrorNamed$($result.$name());
    self._$addMirror$($newM);
    return $newM;
   };
   this.$removeMirrorNamed$ = function ($m) {
    let self = this;
    let $oldMirror = nil;
    $oldMirror = self.$super$MirrorsForV8$MutableMethodGroup$slot._$removeMirrorNamed$.call(self, $m);
    if (!$oldMirror.$isNil()) {
     nil;
    };
    return $oldMirror;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`MutableMethodGroup";
     this._$superInit$MirrorsForV8$MutableMethodGroup = $.$superInit$MirrorsForV8$MutableMethodGroup;
     this.$superInit$MirrorsForV8$MutableMethodGroup = dnuCatcher("$superInit$MirrorsForV8$MutableMethodGroup");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$addFromSource$ = this._$addFromSource$ = $.$addFromSource$;
     this.$removeMirrorNamed$ = this._$removeMirrorNamed$ = $.$removeMirrorNamed$;
     this.$enclosingObjects$MirrorsForV8$MutableMethodGroup = enclosingObjects;
     this.$super$MirrorsForV8$MutableMethodGroup$slot = runtimeSuperclass;
     this["MirrorsForV8`MutableMethodGroup"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["MirrorsForV8`MutableMethodGroup"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`MutableMethodGroup";
    this.slots = [];
    this.methods = [new MM("group:within:", "public", true, 0)];
    this.nestedClasses = [];
    this.$group$within$ = function ($ms, $mb) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($ms, $mb);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`MutableMethodGroup";
      this.$group$within$ = this._$group$within$ = $.$group$within$;
      this.$enclosingObjects$MirrorsForV8$MutableMethodGroup = enclosingObjects;
      this.$super$MirrorsForV8$MutableMethodGroup$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$MutableMirrorGroup = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`MutableMirrorGroup";
   this.name = "MirrorsForV8`MutableMirrorGroup";
   this.header = 963;
   this.slots = [new SM("definingMixin", "protected", false, false)];
   this.methods = [
    new MM("superInit`MirrorsForV8`MutableMirrorGroup", "protected", true, 964),
    new MM("instance`initializer", "public", true, 965),
    new MM("addMirror:", "protected", false, 966),
    new MM("removeMirrorNamed:", "public", false, 967),
    new MM("init`definingMixin:", "protected", true, 0),
    new MM("definingMixin", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$MutableMirrorGroup = function ($mirrors, $mb) {
    let self = this;
    self.$super$MirrorsForV8$MutableMirrorGroup$slot._$instance$initializer.call(self, $mirrors);
    return self;
   };
   this.$instance$initializer = function ($mirrors, $mb) {
    let self = this;
    self._$superInit$MirrorsForV8$MutableMirrorGroup($mirrors, $mb);
    self._$init$definingMixin$($mb);
    return self;
   };
   this.$addMirror$ = function ($m) {
    let self = this;
    let NLR = new Object();
    try {
     self._$mirrors().$keysAndValuesDo$(function ($index, $mirror) {
      return $mirror.$simpleName().$$equal($m.$simpleName()).$ifTrue$(function () {
       {
        let t = self._$mirrors().$at$put$($index, $m);
        if (NLR === null) {
         self.cannotReturn(self, t);
        };
        NLR.value = t;
        throw NLR;
       };
      });
     });
     {
      let t = self._$mirrors().$addLast$($m);
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$removeMirrorNamed$ = function ($m) {
    let self = this;
    let NLR = new Object();
    try {
     self._$mirrors().$keysAndValuesDo$(function ($index, $mirror) {
      return $mirror.$simpleName().$$equal($m).$ifTrue$(function () {
       {
        let t = self._$mirrors().$remove$($mirror);
        if (NLR === null) {
         self.cannotReturn(self, t);
        };
        NLR.value = t;
        throw NLR;
       };
      });
     });
     {
      let t = nil;
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$init$definingMixin$ = function (v) {
    this.$definingMixin$slot = v;
    return this;
   };
   this.$definingMixin = function () {
    return this.$definingMixin$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`MutableMirrorGroup";
     this._$superInit$MirrorsForV8$MutableMirrorGroup = $.$superInit$MirrorsForV8$MutableMirrorGroup;
     this.$superInit$MirrorsForV8$MutableMirrorGroup = dnuCatcher("$superInit$MirrorsForV8$MutableMirrorGroup");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$addMirror$ = $.$addMirror$;
     this.$addMirror$ = dnuCatcher("$addMirror$");
     this.$removeMirrorNamed$ = this._$removeMirrorNamed$ = $.$removeMirrorNamed$;
     this._$init$definingMixin$ = $.$init$definingMixin$;
     this.$init$definingMixin$ = dnuCatcher("$init$definingMixin$");
     this._$definingMixin = $.$definingMixin;
     this.$definingMixin = dnuCatcher("$definingMixin");
     this.$enclosingObjects$MirrorsForV8$MutableMirrorGroup = enclosingObjects;
     this.$super$MirrorsForV8$MutableMirrorGroup$slot = runtimeSuperclass;
     this["MirrorsForV8`MutableMirrorGroup"] = function () {
      superBasicNew.call(this);
      this.$definingMixin$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`MutableMirrorGroup"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`MutableMirrorGroup";
    this.slots = [];
    this.methods = [new MM("group:within:", "public", true, 0)];
    this.nestedClasses = [];
    this.$group$within$ = function ($mirrors, $mb) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($mirrors, $mb);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`MutableMirrorGroup";
      this.$group$within$ = this._$group$within$ = $.$group$within$;
      this.$enclosingObjects$MirrorsForV8$MutableMirrorGroup = enclosingObjects;
      this.$super$MirrorsForV8$MutableMirrorGroup$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$MutableNestedClassGroup = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`MutableNestedClassGroup";
   this.name = "MirrorsForV8`MutableNestedClassGroup";
   this.header = 968;
   this.slots = [];
   this.methods = [
    new MM("superInit`MirrorsForV8`MutableNestedClassGroup", "protected", true, 969),
    new MM("instance`initializer", "public", true, 970)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$MutableNestedClassGroup = function ($ms, $mb) {
    let self = this;
    self.$super$MirrorsForV8$MutableNestedClassGroup$slot._$instance$initializer.call(self, $ms, $mb);
    return self;
   };
   this.$instance$initializer = function ($ms, $mb) {
    let self = this;
    self._$superInit$MirrorsForV8$MutableNestedClassGroup($ms, $mb);
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`MutableNestedClassGroup";
     this._$superInit$MirrorsForV8$MutableNestedClassGroup = $.$superInit$MirrorsForV8$MutableNestedClassGroup;
     this.$superInit$MirrorsForV8$MutableNestedClassGroup = dnuCatcher("$superInit$MirrorsForV8$MutableNestedClassGroup");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$enclosingObjects$MirrorsForV8$MutableNestedClassGroup = enclosingObjects;
     this.$super$MirrorsForV8$MutableNestedClassGroup$slot = runtimeSuperclass;
     this["MirrorsForV8`MutableNestedClassGroup"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["MirrorsForV8`MutableNestedClassGroup"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`MutableNestedClassGroup";
    this.slots = [];
    this.methods = [new MM("group:within:", "public", true, 0)];
    this.nestedClasses = [];
    this.$group$within$ = function ($ms, $mb) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($ms, $mb);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`MutableNestedClassGroup";
      this.$group$within$ = this._$group$within$ = $.$group$within$;
      this.$enclosingObjects$MirrorsForV8$MutableNestedClassGroup = enclosingObjects;
      this.$super$MirrorsForV8$MutableNestedClassGroup$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$ObjectMirror = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`ObjectMirror";
   this.name = "MirrorsForV8`ObjectMirror";
   this.header = 971;
   this.slots = [new SM("reflectee", "public", false, false)];
   this.methods = [
    new MM("superInit`MirrorsForV8`ObjectMirror", "protected", true, 972),
    new MM("instance`initializer", "public", true, 973),
    new MM("=", "public", false, 974),
    new MM("compileExpression:with:", "private", false, 975),
    new MM("evaluate:", "public", false, 976),
    new MM("evaluate:with:", "public", false, 977),
    new MM("getClass", "public", false, 978),
    new MM("getSlot:", "public", false, 979),
    new MM("hash", "public", false, 980),
    new MM("isKindOfObjectMirror", "public", false, 981),
    new MM("setSlot:to:", "public", false, 982),
    new MM("init`reflectee:", "public", true, 0),
    new MM("reflectee", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$ObjectMirror = function ($r) {
    let self = this;
    self.$super$MirrorsForV8$ObjectMirror$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($r) {
    let self = this;
    self._$superInit$MirrorsForV8$ObjectMirror($r);
    self._$init$reflectee$($r);
    return self;
   };
   this.$$equal = function ($other) {
    let self = this;
    if (!$other.$isKindOfObjectMirror()) {
     return false;
    };
    return self._$reflectee() === $other.$reflectee();
   };
   this.$compileExpression$with$ = function (self, $expression, $rawScope) {
    let $compiler = nil;
    let $ir = nil;
    let $dnuHandlers = nil;
    let $writer = nil;
    let $sb = nil;
    let $src = nil;
    let $func = nil;
    $compiler = $0.$compilation(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$Compiler().$new();
    $ir = $compiler.$compileExpressionSource$inMixin$withScope$($expression, self._$getClass().$mixin(), $rawScope);
    $dnuHandlers = $compiler.$dnuHandlers();
    $writer = $0.$generation(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$Writer().$new();
    $sb = $0.$StringBuilder(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$new();
    $writer.$generateSourceFor$on$($dnuHandlers, $sb);
    $src = $sb.$asString();
    $func = eval("(".$$comma($src).$$comma(")"));
    $func(Object.prototype);
    $writer = $0.$generation(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$Writer().$new();
    $sb = $0.$StringBuilder(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$new();
    $writer.$generateSourceFor$on$($ir.$function(), $sb);
    $src = $sb.$asString();
    $src.$out();
    return eval("(".$$comma($src).$$comma(")"));
   };
   this.$evaluate$ = function ($expression) {
    let self = this;
    return self._$evaluate$with$($expression, $0.$Map(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$new());
   };
   this.$evaluate$with$ = function ($expression, $scope) {
    let self = this;
    let $rawScope = nil;
    let $func = nil;
    let $state = nil;
    let $result = nil;
    $rawScope = $0.$Map(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$new();
    $scope.$keysAndValuesDo$(function ($key, $value) {
     return $rawScope.$at$put$($key, $value.$reflectee());
    });
    $func = $1.$compileExpression$with$(self, $expression, $scope);
    (function () {
     $result = $func.call(self._$reflectee(), $rawScope);
     return $state = "fulfilled";
    }).$on$do$(self._$Error(), function ($e) {
     $result = $e;
     return $state = "broken";
    });
    return self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]._$ThreadMirror().$state$result$($state, self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]._$ObjectMirror().$reflecting$($result));
   };
   this.$getClass = function () {
    let self = this;
    "BOGUS";
    return self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]._$ClassMirror().$reflecting$(self._$reflectee().newspeakClass);
   };
   this.$getSlot$ = function ($selector) {
    let self = this;
    let $mangledName = nil;
    let $raw = nil;
    $mangledName = $0.$vmmirror(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$mangleSelector$($selector.$$comma("`slot"));
    $raw = self._$reflectee()[$mangledName];
    if (undefined === $raw) {
     self._$halt();
    };
    return self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]._$ObjectMirror().$reflecting$($raw);
   };
   this.$hash = function () {
    let self = this;
    return $0.$identityHashOf$(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0], self._$reflectee()).$bitXor$(self._$class().$hash());
   };
   this.$isKindOfObjectMirror = function () {
    let self = this;
    return true;
   };
   this.$setSlot$to$ = function ($selector, $value) {
    let self = this;
    let $mangledName = nil;
    let $raw = nil;
    $mangledName = $0.$vmmirror(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$mangleSelector$($selector.$$comma("`slot"));
    $raw = self._$reflectee()[$mangledName];
    if (undefined === $raw) {
     return self._$halt();
    };
    self._$reflectee()[$mangledName] = $value;
    return self;
   };
   this.$init$reflectee$ = function (v) {
    this.$reflectee$slot = v;
    return this;
   };
   this.$reflectee = function () {
    return this.$reflectee$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`ObjectMirror";
     this._$superInit$MirrorsForV8$ObjectMirror = $.$superInit$MirrorsForV8$ObjectMirror;
     this.$superInit$MirrorsForV8$ObjectMirror = dnuCatcher("$superInit$MirrorsForV8$ObjectMirror");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$$equal = this._$$equal = $.$$equal;
     this.$evaluate$ = this._$evaluate$ = $.$evaluate$;
     this.$evaluate$with$ = this._$evaluate$with$ = $.$evaluate$with$;
     this.$getClass = this._$getClass = $.$getClass;
     this.$getSlot$ = this._$getSlot$ = $.$getSlot$;
     this.$hash = this._$hash = $.$hash;
     this.$isKindOfObjectMirror = this._$isKindOfObjectMirror = $.$isKindOfObjectMirror;
     this.$setSlot$to$ = this._$setSlot$to$ = $.$setSlot$to$;
     this.$init$reflectee$ = this._$init$reflectee$ = $.$init$reflectee$;
     this.$reflectee = this._$reflectee = $.$reflectee;
     this.$enclosingObjects$MirrorsForV8$ObjectMirror = enclosingObjects;
     this.$super$MirrorsForV8$ObjectMirror$slot = runtimeSuperclass;
     this["MirrorsForV8`ObjectMirror"] = function () {
      superBasicNew.call(this);
      this.$reflectee$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`ObjectMirror"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`ObjectMirror";
    this.slots = [];
    this.methods = [new MM("reflecting:", "public", true, 0)];
    this.nestedClasses = [];
    this.$reflecting$ = function ($r) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($r);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`ObjectMirror";
      this.$reflecting$ = this._$reflecting$ = $.$reflecting$;
      this.$enclosingObjects$MirrorsForV8$ObjectMirror = enclosingObjects;
      this.$super$MirrorsForV8$ObjectMirror$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$SlotDeclarationMirror = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`SlotDeclarationMirror";
   this.name = "MirrorsForV8`SlotDeclarationMirror";
   this.header = 983;
   this.slots = [
    new SM("name", "public", false, false),
    new SM("accessModifier", "public", false, false),
    new SM("isMutable", "public", false, false),
    new SM("definingMixin", "public", false, false)
   ];
   this.methods = [
    new MM("superInit`MirrorsForV8`SlotDeclarationMirror", "protected", true, 984),
    new MM("instance`initializer", "public", true, 985),
    new MM("isKindOfSlotDeclarationMirror", "public", false, 986),
    new MM("init`name:", "public", true, 0),
    new MM("name", "public", true, 0),
    new MM("init`accessModifier:", "public", true, 0),
    new MM("accessModifier", "public", true, 0),
    new MM("init`isMutable:", "public", true, 0),
    new MM("isMutable", "public", true, 0),
    new MM("init`definingMixin:", "public", true, 0),
    new MM("definingMixin", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$SlotDeclarationMirror = function ($n, $a, $m, $mxn) {
    let self = this;
    self.$super$MirrorsForV8$SlotDeclarationMirror$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($n, $a, $m, $mxn) {
    let self = this;
    self._$superInit$MirrorsForV8$SlotDeclarationMirror($n, $a, $m, $mxn);
    self._$init$name$($n);
    self._$init$accessModifier$($a);
    self._$init$isMutable$($m);
    self._$init$definingMixin$($mxn);
    return self;
   };
   this.$isKindOfSlotDeclarationMirror = function () {
    let self = this;
    return true;
   };
   this.$init$name$ = function (v) {
    this.$name$slot = v;
    return this;
   };
   this.$name = function () {
    return this.$name$slot;
   };
   this.$init$accessModifier$ = function (v) {
    this.$accessModifier$slot = v;
    return this;
   };
   this.$accessModifier = function () {
    return this.$accessModifier$slot;
   };
   this.$init$isMutable$ = function (v) {
    this.$isMutable$slot = v;
    return this;
   };
   this.$isMutable = function () {
    return this.$isMutable$slot;
   };
   this.$init$definingMixin$ = function (v) {
    this.$definingMixin$slot = v;
    return this;
   };
   this.$definingMixin = function () {
    return this.$definingMixin$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`SlotDeclarationMirror";
     this._$superInit$MirrorsForV8$SlotDeclarationMirror = $.$superInit$MirrorsForV8$SlotDeclarationMirror;
     this.$superInit$MirrorsForV8$SlotDeclarationMirror = dnuCatcher("$superInit$MirrorsForV8$SlotDeclarationMirror");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isKindOfSlotDeclarationMirror = this._$isKindOfSlotDeclarationMirror = $.$isKindOfSlotDeclarationMirror;
     this.$init$name$ = this._$init$name$ = $.$init$name$;
     this.$name = this._$name = $.$name;
     this.$init$accessModifier$ = this._$init$accessModifier$ = $.$init$accessModifier$;
     this.$accessModifier = this._$accessModifier = $.$accessModifier;
     this.$init$isMutable$ = this._$init$isMutable$ = $.$init$isMutable$;
     this.$isMutable = this._$isMutable = $.$isMutable;
     this.$init$definingMixin$ = this._$init$definingMixin$ = $.$init$definingMixin$;
     this.$definingMixin = this._$definingMixin = $.$definingMixin;
     this.$enclosingObjects$MirrorsForV8$SlotDeclarationMirror = enclosingObjects;
     this.$super$MirrorsForV8$SlotDeclarationMirror$slot = runtimeSuperclass;
     this["MirrorsForV8`SlotDeclarationMirror"] = function () {
      superBasicNew.call(this);
      this.$name$slot = nil;
      this.$accessModifier$slot = nil;
      this.$isMutable$slot = nil;
      this.$definingMixin$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`SlotDeclarationMirror"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`SlotDeclarationMirror";
    this.slots = [];
    this.methods = [new MM("name:accessModifier:isMutable:mixin:", "public", true, 0)];
    this.nestedClasses = [];
    this.$name$accessModifier$isMutable$mixin$ = function ($n, $a, $m, $mxn) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($n, $a, $m, $mxn);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`SlotDeclarationMirror";
      this.$name$accessModifier$isMutable$mixin$ = this._$name$accessModifier$isMutable$mixin$ = $.$name$accessModifier$isMutable$mixin$;
      this.$enclosingObjects$MirrorsForV8$SlotDeclarationMirror = enclosingObjects;
      this.$super$MirrorsForV8$SlotDeclarationMirror$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$SourceBasedClassHeaderMirror = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`SourceBasedClassHeaderMirror";
   this.name = "MirrorsForV8`SourceBasedClassHeaderMirror";
   this.header = 987;
   this.slots = [new SM("source", "public", false, false)];
   this.methods = [
    new MM("superInit`MirrorsForV8`SourceBasedClassHeaderMirror", "protected", true, 988),
    new MM("instance`initializer", "public", true, 989),
    new MM("init`source:", "public", true, 0),
    new MM("source", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$SourceBasedClassHeaderMirror = function ($src) {
    let self = this;
    self.$super$MirrorsForV8$SourceBasedClassHeaderMirror$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($src) {
    let self = this;
    self._$superInit$MirrorsForV8$SourceBasedClassHeaderMirror($src);
    self._$init$source$($src);
    return self;
   };
   this.$init$source$ = function (v) {
    this.$source$slot = v;
    return this;
   };
   this.$source = function () {
    return this.$source$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`SourceBasedClassHeaderMirror";
     this._$superInit$MirrorsForV8$SourceBasedClassHeaderMirror = $.$superInit$MirrorsForV8$SourceBasedClassHeaderMirror;
     this.$superInit$MirrorsForV8$SourceBasedClassHeaderMirror = dnuCatcher("$superInit$MirrorsForV8$SourceBasedClassHeaderMirror");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$init$source$ = this._$init$source$ = $.$init$source$;
     this.$source = this._$source = $.$source;
     this.$enclosingObjects$MirrorsForV8$SourceBasedClassHeaderMirror = enclosingObjects;
     this.$super$MirrorsForV8$SourceBasedClassHeaderMirror$slot = runtimeSuperclass;
     this["MirrorsForV8`SourceBasedClassHeaderMirror"] = function () {
      superBasicNew.call(this);
      this.$source$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`SourceBasedClassHeaderMirror"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`SourceBasedClassHeaderMirror";
    this.slots = [];
    this.methods = [new MM("from:", "public", true, 0)];
    this.nestedClasses = [];
    this.$from$ = function ($src) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($src);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`SourceBasedClassHeaderMirror";
      this.$from$ = this._$from$ = $.$from$;
      this.$enclosingObjects$MirrorsForV8$SourceBasedClassHeaderMirror = enclosingObjects;
      this.$super$MirrorsForV8$SourceBasedClassHeaderMirror$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$ThreadMirror = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for MirrorsForV8`ThreadMirror";
   this.name = "MirrorsForV8`ThreadMirror";
   this.header = 990;
   this.slots = [
    new SM("state", "protected", false, false),
    new SM("result", "public", false, false)
   ];
   this.methods = [
    new MM("superInit`MirrorsForV8`ThreadMirror", "protected", true, 991),
    new MM("instance`initializer", "public", true, 992),
    new MM("isBroken", "public", false, 993),
    new MM("isFulfilled", "public", false, 994),
    new MM("isSuspended", "public", false, 995),
    new MM("init`state:", "protected", true, 0),
    new MM("state", "protected", true, 0),
    new MM("init`result:", "public", true, 0),
    new MM("result", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorsForV8$ThreadMirror = function ($s, $r) {
    let self = this;
    self.$super$MirrorsForV8$ThreadMirror$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($s, $r) {
    let self = this;
    self._$superInit$MirrorsForV8$ThreadMirror($s, $r);
    self._$init$state$($s);
    self._$init$result$($r);
    return self;
   };
   this.$isBroken = function () {
    let self = this;
    return self._$state().$$equal("broken");
   };
   this.$isFulfilled = function () {
    let self = this;
    return self._$state().$$equal("fulfilled");
   };
   this.$isSuspended = function () {
    let self = this;
    return self._$state().$$equal("suspended");
   };
   this.$init$state$ = function (v) {
    this.$state$slot = v;
    return this;
   };
   this.$state = function () {
    return this.$state$slot;
   };
   this.$init$result$ = function (v) {
    this.$result$slot = v;
    return this;
   };
   this.$result = function () {
    return this.$result$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorsForV8`ThreadMirror";
     this._$superInit$MirrorsForV8$ThreadMirror = $.$superInit$MirrorsForV8$ThreadMirror;
     this.$superInit$MirrorsForV8$ThreadMirror = dnuCatcher("$superInit$MirrorsForV8$ThreadMirror");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isBroken = this._$isBroken = $.$isBroken;
     this.$isFulfilled = this._$isFulfilled = $.$isFulfilled;
     this.$isSuspended = this._$isSuspended = $.$isSuspended;
     this._$init$state$ = $.$init$state$;
     this.$init$state$ = dnuCatcher("$init$state$");
     this._$state = $.$state;
     this.$state = dnuCatcher("$state");
     this.$init$result$ = this._$init$result$ = $.$init$result$;
     this.$result = this._$result = $.$result;
     this.$enclosingObjects$MirrorsForV8$ThreadMirror = enclosingObjects;
     this.$super$MirrorsForV8$ThreadMirror$slot = runtimeSuperclass;
     this["MirrorsForV8`ThreadMirror"] = function () {
      superBasicNew.call(this);
      this.$state$slot = nil;
      this.$result$slot = nil;
     };
     this.basicNew = this["MirrorsForV8`ThreadMirror"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for MirrorsForV8`ThreadMirror";
    this.slots = [];
    this.methods = [new MM("state:result:", "public", true, 0)];
    this.nestedClasses = [];
    this.$state$result$ = function ($s, $r) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($s, $r);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorsForV8`ThreadMirror";
      this.$state$result$ = this._$state$result$ = $.$state$result$;
      this.$enclosingObjects$MirrorsForV8$ThreadMirror = enclosingObjects;
      this.$super$MirrorsForV8$ThreadMirror$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorsForV8$AbstractClassHeaderMirror.enclosingMixin = this;
  this.$MirrorsForV8$ClassDeclarationBuilder.enclosingMixin = this;
  this.$MirrorsForV8$ClassDeclarationMirror.enclosingMixin = this;
  this.$MirrorsForV8$ClassHeaderMirror.enclosingMixin = this;
  this.$MirrorsForV8$ClassMirror.enclosingMixin = this;
  this.$MirrorsForV8$IRBasedClassDeclarationBuilder.enclosingMixin = this;
  this.$MirrorsForV8$MethodBuilder.enclosingMixin = this;
  this.$MirrorsForV8$MethodMirror.enclosingMixin = this;
  this.$MirrorsForV8$MixinBasedClassDeclarationBuilder.enclosingMixin = this;
  this.$MirrorsForV8$MixinBuilder.enclosingMixin = this;
  this.$MirrorsForV8$MixinMirror.enclosingMixin = this;
  this.$MirrorsForV8$MutableMethodGroup.enclosingMixin = this;
  this.$MirrorsForV8$MutableMirrorGroup.enclosingMixin = this;
  this.$MirrorsForV8$MutableNestedClassGroup.enclosingMixin = this;
  this.$MirrorsForV8$ObjectMirror.enclosingMixin = this;
  this.$MirrorsForV8$SlotDeclarationMirror.enclosingMixin = this;
  this.$MirrorsForV8$SourceBasedClassHeaderMirror.enclosingMixin = this;
  this.$MirrorsForV8$ThreadMirror.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for MirrorsForV8";
    this._$superInit$MirrorsForV8 = $.$superInit$MirrorsForV8;
    this.$superInit$MirrorsForV8 = dnuCatcher("$superInit$MirrorsForV8");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this._$classDeclIRFor$within$ = $.$classDeclIRFor$within$;
    this.$classDeclIRFor$within$ = dnuCatcher("$classDeclIRFor$within$");
    this._$classMixinOf$ = $.$classMixinOf$;
    this.$classMixinOf$ = dnuCatcher("$classMixinOf$");
    this._$sourceForMethod$ofMixin$ = $.$sourceForMethod$ofMixin$;
    this.$sourceForMethod$ofMixin$ = dnuCatcher("$sourceForMethod$ofMixin$");
    this._$sourceIndexForMethod$ofMixin$ = $.$sourceIndexForMethod$ofMixin$;
    this.$sourceIndexForMethod$ofMixin$ = dnuCatcher("$sourceIndexForMethod$ofMixin$");
    this._$AbstractClassHeaderMirror = $.$AbstractClassHeaderMirror;
    this.$AbstractClassHeaderMirror = dnuCatcher("$AbstractClassHeaderMirror");
    this.$ClassDeclarationBuilder = this._$ClassDeclarationBuilder = $.$ClassDeclarationBuilder;
    this._$ClassDeclarationMirror = $.$ClassDeclarationMirror;
    this.$ClassDeclarationMirror = dnuCatcher("$ClassDeclarationMirror");
    this._$ClassHeaderMirror = $.$ClassHeaderMirror;
    this.$ClassHeaderMirror = dnuCatcher("$ClassHeaderMirror");
    this.$ClassMirror = this._$ClassMirror = $.$ClassMirror;
    this._$IRBasedClassDeclarationBuilder = $.$IRBasedClassDeclarationBuilder;
    this.$IRBasedClassDeclarationBuilder = dnuCatcher("$IRBasedClassDeclarationBuilder");
    this._$MethodBuilder = $.$MethodBuilder;
    this.$MethodBuilder = dnuCatcher("$MethodBuilder");
    this._$MethodMirror = $.$MethodMirror;
    this.$MethodMirror = dnuCatcher("$MethodMirror");
    this.$MixinBasedClassDeclarationBuilder = this._$MixinBasedClassDeclarationBuilder = $.$MixinBasedClassDeclarationBuilder;
    this._$MixinBuilder = $.$MixinBuilder;
    this.$MixinBuilder = dnuCatcher("$MixinBuilder");
    this._$MixinMirror = $.$MixinMirror;
    this.$MixinMirror = dnuCatcher("$MixinMirror");
    this._$MutableMethodGroup = $.$MutableMethodGroup;
    this.$MutableMethodGroup = dnuCatcher("$MutableMethodGroup");
    this._$MutableMirrorGroup = $.$MutableMirrorGroup;
    this.$MutableMirrorGroup = dnuCatcher("$MutableMirrorGroup");
    this._$MutableNestedClassGroup = $.$MutableNestedClassGroup;
    this.$MutableNestedClassGroup = dnuCatcher("$MutableNestedClassGroup");
    this.$ObjectMirror = this._$ObjectMirror = $.$ObjectMirror;
    this._$SlotDeclarationMirror = $.$SlotDeclarationMirror;
    this.$SlotDeclarationMirror = dnuCatcher("$SlotDeclarationMirror");
    this._$SourceBasedClassHeaderMirror = $.$SourceBasedClassHeaderMirror;
    this.$SourceBasedClassHeaderMirror = dnuCatcher("$SourceBasedClassHeaderMirror");
    this._$ThreadMirror = $.$ThreadMirror;
    this.$ThreadMirror = dnuCatcher("$ThreadMirror");
    this.$init$MirrorsForV8$AbstractClassHeaderMirror$ = this._$init$MirrorsForV8$AbstractClassHeaderMirror$ = $.$init$MirrorsForV8$AbstractClassHeaderMirror$;
    this.$MirrorsForV8$AbstractClassHeaderMirror = this._$MirrorsForV8$AbstractClassHeaderMirror = $.$MirrorsForV8$AbstractClassHeaderMirror;
    this.$MirrorsForV8$AbstractClassHeaderMirror$ = this._$MirrorsForV8$AbstractClassHeaderMirror$ = $.$MirrorsForV8$AbstractClassHeaderMirror$;
    this.$init$MirrorsForV8$ClassDeclarationBuilder$ = this._$init$MirrorsForV8$ClassDeclarationBuilder$ = $.$init$MirrorsForV8$ClassDeclarationBuilder$;
    this.$MirrorsForV8$ClassDeclarationBuilder = this._$MirrorsForV8$ClassDeclarationBuilder = $.$MirrorsForV8$ClassDeclarationBuilder;
    this.$MirrorsForV8$ClassDeclarationBuilder$ = this._$MirrorsForV8$ClassDeclarationBuilder$ = $.$MirrorsForV8$ClassDeclarationBuilder$;
    this.$init$MirrorsForV8$ClassDeclarationMirror$ = this._$init$MirrorsForV8$ClassDeclarationMirror$ = $.$init$MirrorsForV8$ClassDeclarationMirror$;
    this.$MirrorsForV8$ClassDeclarationMirror = this._$MirrorsForV8$ClassDeclarationMirror = $.$MirrorsForV8$ClassDeclarationMirror;
    this.$MirrorsForV8$ClassDeclarationMirror$ = this._$MirrorsForV8$ClassDeclarationMirror$ = $.$MirrorsForV8$ClassDeclarationMirror$;
    this.$init$MirrorsForV8$ClassHeaderMirror$ = this._$init$MirrorsForV8$ClassHeaderMirror$ = $.$init$MirrorsForV8$ClassHeaderMirror$;
    this.$MirrorsForV8$ClassHeaderMirror = this._$MirrorsForV8$ClassHeaderMirror = $.$MirrorsForV8$ClassHeaderMirror;
    this.$MirrorsForV8$ClassHeaderMirror$ = this._$MirrorsForV8$ClassHeaderMirror$ = $.$MirrorsForV8$ClassHeaderMirror$;
    this.$init$MirrorsForV8$ClassMirror$ = this._$init$MirrorsForV8$ClassMirror$ = $.$init$MirrorsForV8$ClassMirror$;
    this.$MirrorsForV8$ClassMirror = this._$MirrorsForV8$ClassMirror = $.$MirrorsForV8$ClassMirror;
    this.$MirrorsForV8$ClassMirror$ = this._$MirrorsForV8$ClassMirror$ = $.$MirrorsForV8$ClassMirror$;
    this.$init$MirrorsForV8$IRBasedClassDeclarationBuilder$ = this._$init$MirrorsForV8$IRBasedClassDeclarationBuilder$ = $.$init$MirrorsForV8$IRBasedClassDeclarationBuilder$;
    this.$MirrorsForV8$IRBasedClassDeclarationBuilder = this._$MirrorsForV8$IRBasedClassDeclarationBuilder = $.$MirrorsForV8$IRBasedClassDeclarationBuilder;
    this.$MirrorsForV8$IRBasedClassDeclarationBuilder$ = this._$MirrorsForV8$IRBasedClassDeclarationBuilder$ = $.$MirrorsForV8$IRBasedClassDeclarationBuilder$;
    this.$init$MirrorsForV8$MethodBuilder$ = this._$init$MirrorsForV8$MethodBuilder$ = $.$init$MirrorsForV8$MethodBuilder$;
    this.$MirrorsForV8$MethodBuilder = this._$MirrorsForV8$MethodBuilder = $.$MirrorsForV8$MethodBuilder;
    this.$MirrorsForV8$MethodBuilder$ = this._$MirrorsForV8$MethodBuilder$ = $.$MirrorsForV8$MethodBuilder$;
    this.$init$MirrorsForV8$MethodMirror$ = this._$init$MirrorsForV8$MethodMirror$ = $.$init$MirrorsForV8$MethodMirror$;
    this.$MirrorsForV8$MethodMirror = this._$MirrorsForV8$MethodMirror = $.$MirrorsForV8$MethodMirror;
    this.$MirrorsForV8$MethodMirror$ = this._$MirrorsForV8$MethodMirror$ = $.$MirrorsForV8$MethodMirror$;
    this.$init$MirrorsForV8$MixinBasedClassDeclarationBuilder$ = this._$init$MirrorsForV8$MixinBasedClassDeclarationBuilder$ = $.$init$MirrorsForV8$MixinBasedClassDeclarationBuilder$;
    this.$MirrorsForV8$MixinBasedClassDeclarationBuilder = this._$MirrorsForV8$MixinBasedClassDeclarationBuilder = $.$MirrorsForV8$MixinBasedClassDeclarationBuilder;
    this.$MirrorsForV8$MixinBasedClassDeclarationBuilder$ = this._$MirrorsForV8$MixinBasedClassDeclarationBuilder$ = $.$MirrorsForV8$MixinBasedClassDeclarationBuilder$;
    this.$init$MirrorsForV8$MixinBuilder$ = this._$init$MirrorsForV8$MixinBuilder$ = $.$init$MirrorsForV8$MixinBuilder$;
    this.$MirrorsForV8$MixinBuilder = this._$MirrorsForV8$MixinBuilder = $.$MirrorsForV8$MixinBuilder;
    this.$MirrorsForV8$MixinBuilder$ = this._$MirrorsForV8$MixinBuilder$ = $.$MirrorsForV8$MixinBuilder$;
    this.$init$MirrorsForV8$MixinMirror$ = this._$init$MirrorsForV8$MixinMirror$ = $.$init$MirrorsForV8$MixinMirror$;
    this.$MirrorsForV8$MixinMirror = this._$MirrorsForV8$MixinMirror = $.$MirrorsForV8$MixinMirror;
    this.$MirrorsForV8$MixinMirror$ = this._$MirrorsForV8$MixinMirror$ = $.$MirrorsForV8$MixinMirror$;
    this.$init$MirrorsForV8$MutableMethodGroup$ = this._$init$MirrorsForV8$MutableMethodGroup$ = $.$init$MirrorsForV8$MutableMethodGroup$;
    this.$MirrorsForV8$MutableMethodGroup = this._$MirrorsForV8$MutableMethodGroup = $.$MirrorsForV8$MutableMethodGroup;
    this.$MirrorsForV8$MutableMethodGroup$ = this._$MirrorsForV8$MutableMethodGroup$ = $.$MirrorsForV8$MutableMethodGroup$;
    this.$init$MirrorsForV8$MutableMirrorGroup$ = this._$init$MirrorsForV8$MutableMirrorGroup$ = $.$init$MirrorsForV8$MutableMirrorGroup$;
    this.$MirrorsForV8$MutableMirrorGroup = this._$MirrorsForV8$MutableMirrorGroup = $.$MirrorsForV8$MutableMirrorGroup;
    this.$MirrorsForV8$MutableMirrorGroup$ = this._$MirrorsForV8$MutableMirrorGroup$ = $.$MirrorsForV8$MutableMirrorGroup$;
    this.$init$MirrorsForV8$MutableNestedClassGroup$ = this._$init$MirrorsForV8$MutableNestedClassGroup$ = $.$init$MirrorsForV8$MutableNestedClassGroup$;
    this.$MirrorsForV8$MutableNestedClassGroup = this._$MirrorsForV8$MutableNestedClassGroup = $.$MirrorsForV8$MutableNestedClassGroup;
    this.$MirrorsForV8$MutableNestedClassGroup$ = this._$MirrorsForV8$MutableNestedClassGroup$ = $.$MirrorsForV8$MutableNestedClassGroup$;
    this.$init$MirrorsForV8$ObjectMirror$ = this._$init$MirrorsForV8$ObjectMirror$ = $.$init$MirrorsForV8$ObjectMirror$;
    this.$MirrorsForV8$ObjectMirror = this._$MirrorsForV8$ObjectMirror = $.$MirrorsForV8$ObjectMirror;
    this.$MirrorsForV8$ObjectMirror$ = this._$MirrorsForV8$ObjectMirror$ = $.$MirrorsForV8$ObjectMirror$;
    this.$init$MirrorsForV8$SlotDeclarationMirror$ = this._$init$MirrorsForV8$SlotDeclarationMirror$ = $.$init$MirrorsForV8$SlotDeclarationMirror$;
    this.$MirrorsForV8$SlotDeclarationMirror = this._$MirrorsForV8$SlotDeclarationMirror = $.$MirrorsForV8$SlotDeclarationMirror;
    this.$MirrorsForV8$SlotDeclarationMirror$ = this._$MirrorsForV8$SlotDeclarationMirror$ = $.$MirrorsForV8$SlotDeclarationMirror$;
    this.$init$MirrorsForV8$SourceBasedClassHeaderMirror$ = this._$init$MirrorsForV8$SourceBasedClassHeaderMirror$ = $.$init$MirrorsForV8$SourceBasedClassHeaderMirror$;
    this.$MirrorsForV8$SourceBasedClassHeaderMirror = this._$MirrorsForV8$SourceBasedClassHeaderMirror = $.$MirrorsForV8$SourceBasedClassHeaderMirror;
    this.$MirrorsForV8$SourceBasedClassHeaderMirror$ = this._$MirrorsForV8$SourceBasedClassHeaderMirror$ = $.$MirrorsForV8$SourceBasedClassHeaderMirror$;
    this.$init$MirrorsForV8$ThreadMirror$ = this._$init$MirrorsForV8$ThreadMirror$ = $.$init$MirrorsForV8$ThreadMirror$;
    this.$MirrorsForV8$ThreadMirror = this._$MirrorsForV8$ThreadMirror = $.$MirrorsForV8$ThreadMirror;
    this.$MirrorsForV8$ThreadMirror$ = this._$MirrorsForV8$ThreadMirror$ = $.$MirrorsForV8$ThreadMirror$;
    this.$enclosingObjects$MirrorsForV8 = enclosingObjects;
    this.$super$MirrorsForV8$slot = runtimeSuperclass;
    this.MirrorsForV8 = function () {
     superBasicNew.call(this);
     this.$List$slot = nil;
     this.$Map$slot = nil;
     this.$Mixin$slot = nil;
     this.$StringBuilder$slot = nil;
     this.$ImmutableMirrorGroup$slot = nil;
     this.$vmmirror$slot = nil;
     this.$parserLib$slot = nil;
     this.$grammar$slot = nil;
     this.$asts$slot = nil;
     this.$parsing$slot = nil;
     this.$generation$slot = nil;
     this.$compilation$slot = nil;
     this.$compiler$slot = nil;
     this.$MirrorsForV8$AbstractClassHeaderMirror$slot = nil;
     this.$MirrorsForV8$ClassDeclarationBuilder$slot = nil;
     this.$MirrorsForV8$ClassDeclarationMirror$slot = nil;
     this.$MirrorsForV8$ClassHeaderMirror$slot = nil;
     this.$MirrorsForV8$ClassMirror$slot = nil;
     this.$MirrorsForV8$IRBasedClassDeclarationBuilder$slot = nil;
     this.$MirrorsForV8$MethodBuilder$slot = nil;
     this.$MirrorsForV8$MethodMirror$slot = nil;
     this.$MirrorsForV8$MixinBasedClassDeclarationBuilder$slot = nil;
     this.$MirrorsForV8$MixinBuilder$slot = nil;
     this.$MirrorsForV8$MixinMirror$slot = nil;
     this.$MirrorsForV8$MutableMethodGroup$slot = nil;
     this.$MirrorsForV8$MutableMirrorGroup$slot = nil;
     this.$MirrorsForV8$MutableNestedClassGroup$slot = nil;
     this.$MirrorsForV8$ObjectMirror$slot = nil;
     this.$MirrorsForV8$SlotDeclarationMirror$slot = nil;
     this.$MirrorsForV8$SourceBasedClassHeaderMirror$slot = nil;
     this.$MirrorsForV8$ThreadMirror$slot = nil;
    };
    this.basicNew = this.MirrorsForV8;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   let $ = this;
   this.debug = "Runtime meta mixin for MirrorsForV8";
   this.slots = [];
   this.methods = [new MM("usingPlatform:runtime:vmMirror:", "public", true, 0)];
   this.nestedClasses = [];
   this.$usingPlatform$runtime$vmMirror$ = function ($p, $r, $vmm) {
    let t = new this.nonMeta.basicNew();
    t.$instance$initializer($p, $r, $vmm);
    return t;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for MirrorsForV8";
     this.$usingPlatform$runtime$vmMirror$ = this._$usingPlatform$runtime$vmMirror$ = $.$usingPlatform$runtime$vmMirror$;
     this.$enclosingObjects$MirrorsForV8 = enclosingObjects;
     this.$super$MirrorsForV8$slot = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$MirrorGroups = new function () {
  let $ = this;
  let $0 = this;
  this.debug = "Runtime mixin for MirrorGroups";
  this.name = "MirrorGroups";
  this.header = 996;
  this.slots = [
   new SM("Collection", "private", false, false),
   new SM("List", "private", false, false),
   new SM("MirrorGroups`ImmutableMirrorGroup", "public", true, true),
   new SM("MirrorGroups`MirrorGroup", "public", true, true)
  ];
  this.methods = [
   new MM("superInit`MirrorGroups", "protected", true, 997),
   new MM("instance`initializer", "public", true, 998),
   new MM("ImmutableMirrorGroup", "public", true, 0),
   new MM("MirrorGroup", "protected", true, 0),
   new MM("init`Collection:", "private", true, 0),
   new MM("Collection", "private", true, 0),
   new MM("init`List:", "private", true, 0),
   new MM("List", "private", true, 0),
   new MM("init`MirrorGroups`ImmutableMirrorGroup:", "public", true, 0),
   new MM("MirrorGroups`ImmutableMirrorGroup", "public", true, 0),
   new MM("MirrorGroups`ImmutableMirrorGroup:", "public", true, 0),
   new MM("init`MirrorGroups`MirrorGroup:", "public", true, 0),
   new MM("MirrorGroups`MirrorGroup", "public", true, 0),
   new MM("MirrorGroups`MirrorGroup:", "public", true, 0)
  ];
  this.nestedClasses = [
   "MirrorGroups`ImmutableMirrorGroup",
   "MirrorGroups`MirrorGroup"
  ];
  this.applications = [];
  this.$superInit$MirrorGroups = function ($platform) {
   let self = this;
   self.$super$MirrorGroups$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($platform) {
   let self = this;
   self._$superInit$MirrorGroups($platform);
   $0.$init$Collection$(self, $platform.$collections().$Collection());
   $0.$init$List$(self, $platform.$collections().$List());
   return self;
  };
  this.$ImmutableMirrorGroup = function () {
   if (nil === this.$MirrorGroups$ImmutableMirrorGroup$slot) {
    let self = this;
    let superclass = $0.$Collection(self);
    let enclosingObjects = [this].concat(this.$enclosingObjects$MirrorGroups);
    let mixin = $.$MirrorGroups$ImmutableMirrorGroup;
    this.$MirrorGroups$ImmutableMirrorGroup$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorGroups$ImmutableMirrorGroup$slot;
  };
  this.$MirrorGroup = function () {
   if (nil === this.$MirrorGroups$MirrorGroup$slot) {
    let self = this;
    let superclass = self._$ImmutableMirrorGroup();
    let enclosingObjects = [this].concat(this.$enclosingObjects$MirrorGroups);
    let mixin = $.$MirrorGroups$MirrorGroup;
    this.$MirrorGroups$MirrorGroup$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$MirrorGroups$MirrorGroup$slot;
  };
  this.$init$Collection$ = function (self, v) {
   self.$Collection$slot = v;
   return self;
  };
  this.$Collection = function (self) {
   return self.$Collection$slot;
  };
  this.$init$List$ = function (self, v) {
   self.$List$slot = v;
   return self;
  };
  this.$List = function (self) {
   return self.$List$slot;
  };
  this.$init$MirrorGroups$ImmutableMirrorGroup$ = function (v) {
   this.$MirrorGroups$ImmutableMirrorGroup$slot = v;
   return this;
  };
  this.$MirrorGroups$ImmutableMirrorGroup = function () {
   return this.$MirrorGroups$ImmutableMirrorGroup$slot;
  };
  this.$MirrorGroups$ImmutableMirrorGroup$ = function (v) {
   this.$MirrorGroups$ImmutableMirrorGroup$slot = v;
   return this;
  };
  this.$init$MirrorGroups$MirrorGroup$ = function (v) {
   this.$MirrorGroups$MirrorGroup$slot = v;
   return this;
  };
  this.$MirrorGroups$MirrorGroup = function () {
   return this.$MirrorGroups$MirrorGroup$slot;
  };
  this.$MirrorGroups$MirrorGroup$ = function (v) {
   this.$MirrorGroups$MirrorGroup$slot = v;
   return this;
  };
  this.$MirrorGroups$ImmutableMirrorGroup = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for MirrorGroups`ImmutableMirrorGroup";
   this.name = "MirrorGroups`ImmutableMirrorGroup";
   this.header = 999;
   this.slots = [new SM("mirrors", "protected", false, false)];
   this.methods = [
    new MM("superInit`MirrorGroups`ImmutableMirrorGroup", "protected", true, 1000),
    new MM("instance`initializer", "public", true, 1001),
    new MM("addFromSource:", "public", false, 1002),
    new MM("addMirror:", "public", false, 1003),
    new MM("do:", "public", false, 1004),
    new MM("findMirrorNamed:", "public", false, 1005),
    new MM("includesMirrorNamed:", "public", false, 1006),
    new MM("removeMirror:", "public", false, 1007),
    new MM("removeMirrorNamed:", "public", false, 1008),
    new MM("size", "public", false, 1009),
    new MM("init`mirrors:", "protected", true, 0),
    new MM("mirrors", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorGroups$ImmutableMirrorGroup = function ($ms) {
    let self = this;
    self.$super$MirrorGroups$ImmutableMirrorGroup$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($ms) {
    let self = this;
    self._$superInit$MirrorGroups$ImmutableMirrorGroup($ms);
    self._$init$mirrors$($0.$List(self.$enclosingObjects$MirrorGroups$ImmutableMirrorGroup[0]).$withAll$($ms));
    return self;
   };
   this.$addFromSource$ = function ($s) {
    let self = this;
    return self._$Error().$signal$("Adding mirrors not allowed on an immutable mirror group!");
   };
   this.$addMirror$ = function ($m) {
    let self = this;
    return self._$Error().$signal$("Adding mirrors not allowed on an immutable mirror group!");
   };
   this.$do$ = function ($blk) {
    let self = this;
    self._$mirrors().$do$($blk);
    return self;
   };
   this.$findMirrorNamed$ = function ($n) {
    let self = this;
    let NLR = new Object();
    try {
     self._$mirrors().$do$(function ($mirror) {
      return $mirror.$name().$$equal($n).$ifTrue$(function () {
       {
        let t = $mirror;
        if (NLR === null) {
         self.cannotReturn(self, t);
        };
        NLR.value = t;
        throw NLR;
       };
      });
     });
     {
      let t = nil;
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$includesMirrorNamed$ = function ($n) {
    let self = this;
    let NLR = new Object();
    try {
     self._$mirrors().$do$(function ($mirror) {
      return $mirror.$name().$$equal($n).$ifTrue$(function () {
       {
        let t = true;
        if (NLR === null) {
         self.cannotReturn(self, t);
        };
        NLR.value = t;
        throw NLR;
       };
      });
     });
     {
      let t = false;
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$removeMirror$ = function ($m) {
    let self = this;
    return self._$Error().$signal$("Removng mirrors not allowed on an immutable mirror group!");
   };
   this.$removeMirrorNamed$ = function ($m) {
    let self = this;
    return self._$Error().$signal$("Removng mirrors not allowed on an immutable mirror group!");
   };
   this.$size = function () {
    let self = this;
    return self._$mirrors().$size();
   };
   this.$init$mirrors$ = function (v) {
    this.$mirrors$slot = v;
    return this;
   };
   this.$mirrors = function () {
    return this.$mirrors$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorGroups`ImmutableMirrorGroup";
     this._$superInit$MirrorGroups$ImmutableMirrorGroup = $.$superInit$MirrorGroups$ImmutableMirrorGroup;
     this.$superInit$MirrorGroups$ImmutableMirrorGroup = dnuCatcher("$superInit$MirrorGroups$ImmutableMirrorGroup");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$addFromSource$ = this._$addFromSource$ = $.$addFromSource$;
     this.$addMirror$ = this._$addMirror$ = $.$addMirror$;
     this.$do$ = this._$do$ = $.$do$;
     this.$findMirrorNamed$ = this._$findMirrorNamed$ = $.$findMirrorNamed$;
     this.$includesMirrorNamed$ = this._$includesMirrorNamed$ = $.$includesMirrorNamed$;
     this.$removeMirror$ = this._$removeMirror$ = $.$removeMirror$;
     this.$removeMirrorNamed$ = this._$removeMirrorNamed$ = $.$removeMirrorNamed$;
     this.$size = this._$size = $.$size;
     this._$init$mirrors$ = $.$init$mirrors$;
     this.$init$mirrors$ = dnuCatcher("$init$mirrors$");
     this._$mirrors = $.$mirrors;
     this.$mirrors = dnuCatcher("$mirrors");
     this.$enclosingObjects$MirrorGroups$ImmutableMirrorGroup = enclosingObjects;
     this.$super$MirrorGroups$ImmutableMirrorGroup$slot = runtimeSuperclass;
     this["MirrorGroups`ImmutableMirrorGroup"] = function () {
      superBasicNew.call(this);
      this.$mirrors$slot = nil;
     };
     this.basicNew = this["MirrorGroups`ImmutableMirrorGroup"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for MirrorGroups`ImmutableMirrorGroup";
    this.slots = [];
    this.methods = [new MM("group:", "public", true, 0)];
    this.nestedClasses = [];
    this.$group$ = function ($ms) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($ms);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorGroups`ImmutableMirrorGroup";
      this.$group$ = this._$group$ = $.$group$;
      this.$enclosingObjects$MirrorGroups$ImmutableMirrorGroup = enclosingObjects;
      this.$super$MirrorGroups$ImmutableMirrorGroup$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorGroups$MirrorGroup = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for MirrorGroups`MirrorGroup";
   this.name = "MirrorGroups`MirrorGroup";
   this.header = 1010;
   this.slots = [];
   this.methods = [
    new MM("superInit`MirrorGroups`MirrorGroup", "protected", true, 1011),
    new MM("instance`initializer", "public", true, 1012),
    new MM("addFromSource:", "public", false, 1013),
    new MM("addMirror:", "protected", false, 1014),
    new MM("removeAll", "protected", false, 1015),
    new MM("removeAllSuchThat:", "protected", false, 1016),
    new MM("removeMirror:", "protected", false, 1017),
    new MM("removeMirrorNamed:", "protected", false, 1018)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$MirrorGroups$MirrorGroup = function ($ms) {
    let self = this;
    self.$super$MirrorGroups$MirrorGroup$slot._$instance$initializer.call(self, $ms);
    return self;
   };
   this.$instance$initializer = function ($ms) {
    let self = this;
    self._$superInit$MirrorGroups$MirrorGroup($ms);
    return self;
   };
   this.$addFromSource$ = function ($s) {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$addMirror$ = function ($m) {
    let self = this;
    let NLR = new Object();
    try {
     self._$mirrors().$keysAndValuesDo$(function ($index, $mirror) {
      return $mirror.$simpleName().$$equal($m.$simpleName()).$ifTrue$(function () {
       {
        let t = self._$mirrors().$at$put$($index, $m);
        if (NLR === null) {
         self.cannotReturn(self, t);
        };
        NLR.value = t;
        throw NLR;
       };
      });
     });
     {
      let t = self._$mirrors().$addLast$($m);
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$removeAll = function () {
    let self = this;
    self._$mirrors$($0.$List(self.$enclosingObjects$MirrorGroups$MirrorGroup[0]).$new());
    return self;
   };
   this.$removeAllSuchThat$ = function ($blk) {
    let self = this;
    self._$mirrors().$select$thenDo$($blk, function ($m) {
     return self._$removeMirrorNamed$($m.$name());
    });
    return self;
   };
   this.$removeMirror$ = function ($m) {
    let self = this;
    return self._$mirrors().$remove$($m);
   };
   this.$removeMirrorNamed$ = function ($n) {
    let self = this;
    let $m = nil;
    $m = self._$findMirrorNamed$($n);
    return $m.$ifNotNil$(function () {
     return self._$removeMirror$($m);
    });
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for MirrorGroups`MirrorGroup";
     this._$superInit$MirrorGroups$MirrorGroup = $.$superInit$MirrorGroups$MirrorGroup;
     this.$superInit$MirrorGroups$MirrorGroup = dnuCatcher("$superInit$MirrorGroups$MirrorGroup");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$addFromSource$ = this._$addFromSource$ = $.$addFromSource$;
     this._$addMirror$ = $.$addMirror$;
     this.$addMirror$ = dnuCatcher("$addMirror$");
     this._$removeAll = $.$removeAll;
     this.$removeAll = dnuCatcher("$removeAll");
     this._$removeAllSuchThat$ = $.$removeAllSuchThat$;
     this.$removeAllSuchThat$ = dnuCatcher("$removeAllSuchThat$");
     this._$removeMirror$ = $.$removeMirror$;
     this.$removeMirror$ = dnuCatcher("$removeMirror$");
     this._$removeMirrorNamed$ = $.$removeMirrorNamed$;
     this.$removeMirrorNamed$ = dnuCatcher("$removeMirrorNamed$");
     this.$enclosingObjects$MirrorGroups$MirrorGroup = enclosingObjects;
     this.$super$MirrorGroups$MirrorGroup$slot = runtimeSuperclass;
     this["MirrorGroups`MirrorGroup"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["MirrorGroups`MirrorGroup"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for MirrorGroups`MirrorGroup";
    this.slots = [];
    this.methods = [new MM("group:", "public", true, 0)];
    this.nestedClasses = [];
    this.$group$ = function ($ms) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($ms);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for MirrorGroups`MirrorGroup";
      this.$group$ = this._$group$ = $.$group$;
      this.$enclosingObjects$MirrorGroups$MirrorGroup = enclosingObjects;
      this.$super$MirrorGroups$MirrorGroup$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$MirrorGroups$ImmutableMirrorGroup.enclosingMixin = this;
  this.$MirrorGroups$MirrorGroup.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for MirrorGroups";
    this._$superInit$MirrorGroups = $.$superInit$MirrorGroups;
    this.$superInit$MirrorGroups = dnuCatcher("$superInit$MirrorGroups");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this.$ImmutableMirrorGroup = this._$ImmutableMirrorGroup = $.$ImmutableMirrorGroup;
    this._$MirrorGroup = $.$MirrorGroup;
    this.$MirrorGroup = dnuCatcher("$MirrorGroup");
    this.$init$MirrorGroups$ImmutableMirrorGroup$ = this._$init$MirrorGroups$ImmutableMirrorGroup$ = $.$init$MirrorGroups$ImmutableMirrorGroup$;
    this.$MirrorGroups$ImmutableMirrorGroup = this._$MirrorGroups$ImmutableMirrorGroup = $.$MirrorGroups$ImmutableMirrorGroup;
    this.$MirrorGroups$ImmutableMirrorGroup$ = this._$MirrorGroups$ImmutableMirrorGroup$ = $.$MirrorGroups$ImmutableMirrorGroup$;
    this.$init$MirrorGroups$MirrorGroup$ = this._$init$MirrorGroups$MirrorGroup$ = $.$init$MirrorGroups$MirrorGroup$;
    this.$MirrorGroups$MirrorGroup = this._$MirrorGroups$MirrorGroup = $.$MirrorGroups$MirrorGroup;
    this.$MirrorGroups$MirrorGroup$ = this._$MirrorGroups$MirrorGroup$ = $.$MirrorGroups$MirrorGroup$;
    this.$enclosingObjects$MirrorGroups = enclosingObjects;
    this.$super$MirrorGroups$slot = runtimeSuperclass;
    this.MirrorGroups = function () {
     superBasicNew.call(this);
     this.$Collection$slot = nil;
     this.$List$slot = nil;
     this.$MirrorGroups$ImmutableMirrorGroup$slot = nil;
     this.$MirrorGroups$MirrorGroup$slot = nil;
    };
    this.basicNew = this.MirrorGroups;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   let $ = this;
   this.debug = "Runtime meta mixin for MirrorGroups";
   this.slots = [];
   this.methods = [new MM("usingLib:", "public", true, 0)];
   this.nestedClasses = [];
   this.$usingLib$ = function ($platform) {
    let t = new this.nonMeta.basicNew();
    t.$instance$initializer($platform);
    return t;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for MirrorGroups";
     this.$usingLib$ = this._$usingLib$ = $.$usingLib$;
     this.$enclosingObjects$MirrorGroups = enclosingObjects;
     this.$super$MirrorGroups$slot = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$Streams = new function () {
  let $ = this;
  let $0 = this;
  this.debug = "Runtime mixin for Streams";
  this.name = "Streams";
  this.header = 1019;
  this.slots = [
   new SM("BasicOutputReadStream", "private", false, false),
   new SM("CharacterIStream", "private", false, false),
   new SM("CharacterOStream", "private", false, false),
   new SM("CharacterConverterWithOutput", "private", false, false),
   new SM("OutputInputConverter", "private", false, false),
   new SM("BasicIExStream", "private", false, false),
   new SM("EIStream", "private", false, false),
   new SM("ReadExternalOutputStream", "private", false, false),
   new SM("EOStream", "private", false, false),
   new SM("EIOStream", "private", false, false),
   new SM("Streams`BasicInputStream", "public", true, true),
   new SM("Streams`BasicOutputStream", "public", true, true),
   new SM("Streams`BasicReadStream", "public", true, true),
   new SM("Streams`BasicReadWriteStream", "public", true, true),
   new SM("Streams`CharacterInput", "public", true, true),
   new SM("Streams`CharacterInputConverter", "public", true, true),
   new SM("Streams`CharacterInputOutputConverter", "public", true, true),
   new SM("Streams`CharacterOutput", "public", true, true),
   new SM("Streams`CharacterOutputConverter", "public", true, true),
   new SM("Streams`CharacterReadConverter", "public", true, true),
   new SM("Streams`ExternalInputStream", "public", true, true),
   new SM("Streams`ExternalOutputStream", "public", true, true),
   new SM("Streams`ExternalReadStream", "public", true, true),
   new SM("Streams`ExternalReadWriteStream", "public", true, true),
   new SM("Streams`ExternalStream", "public", true, true),
   new SM("Streams`SeqCltnReadStream", "public", true, true),
   new SM("Streams`SeqCltnReadWriteStream", "public", true, true),
   new SM("Streams`TempTranscript", "public", true, true)
  ];
  this.methods = [
   new MM("superInit`Streams", "protected", true, 1020),
   new MM("instance`initializer", "public", true, 1021),
   new MM("usingCrLfConvention", "protected", false, 1022),
   new MM("BasicInputStream", "public", true, 0),
   new MM("BasicOutputStream", "public", true, 0),
   new MM("BasicReadStream", "protected", true, 0),
   new MM("BasicReadWriteStream", "protected", true, 0),
   new MM("CharacterInput", "protected", true, 0),
   new MM("CharacterInputConverter", "protected", true, 0),
   new MM("CharacterInputOutputConverter", "public", true, 0),
   new MM("CharacterOutput", "protected", true, 0),
   new MM("CharacterOutputConverter", "protected", true, 0),
   new MM("CharacterReadConverter", "public", true, 0),
   new MM("ExternalInputStream", "protected", true, 0),
   new MM("ExternalOutputStream", "public", true, 0),
   new MM("ExternalReadStream", "public", true, 0),
   new MM("ExternalReadWriteStream", "public", true, 0),
   new MM("ExternalStream", "protected", true, 0),
   new MM("SeqCltnReadStream", "public", true, 0),
   new MM("SeqCltnReadWriteStream", "public", true, 0),
   new MM("TempTranscript", "public", true, 0),
   new MM("init`BasicOutputReadStream:", "private", true, 0),
   new MM("BasicOutputReadStream", "private", true, 0),
   new MM("init`CharacterIStream:", "private", true, 0),
   new MM("CharacterIStream", "private", true, 0),
   new MM("init`CharacterOStream:", "private", true, 0),
   new MM("CharacterOStream", "private", true, 0),
   new MM("init`CharacterConverterWithOutput:", "private", true, 0),
   new MM("CharacterConverterWithOutput", "private", true, 0),
   new MM("init`OutputInputConverter:", "private", true, 0),
   new MM("OutputInputConverter", "private", true, 0),
   new MM("init`BasicIExStream:", "private", true, 0),
   new MM("BasicIExStream", "private", true, 0),
   new MM("init`EIStream:", "private", true, 0),
   new MM("EIStream", "private", true, 0),
   new MM("init`ReadExternalOutputStream:", "private", true, 0),
   new MM("ReadExternalOutputStream", "private", true, 0),
   new MM("init`EOStream:", "private", true, 0),
   new MM("EOStream", "private", true, 0),
   new MM("init`EIOStream:", "private", true, 0),
   new MM("EIOStream", "private", true, 0),
   new MM("init`Streams`BasicInputStream:", "public", true, 0),
   new MM("Streams`BasicInputStream", "public", true, 0),
   new MM("Streams`BasicInputStream:", "public", true, 0),
   new MM("init`Streams`BasicOutputStream:", "public", true, 0),
   new MM("Streams`BasicOutputStream", "public", true, 0),
   new MM("Streams`BasicOutputStream:", "public", true, 0),
   new MM("init`Streams`BasicReadStream:", "public", true, 0),
   new MM("Streams`BasicReadStream", "public", true, 0),
   new MM("Streams`BasicReadStream:", "public", true, 0),
   new MM("init`Streams`BasicReadWriteStream:", "public", true, 0),
   new MM("Streams`BasicReadWriteStream", "public", true, 0),
   new MM("Streams`BasicReadWriteStream:", "public", true, 0),
   new MM("init`Streams`CharacterInput:", "public", true, 0),
   new MM("Streams`CharacterInput", "public", true, 0),
   new MM("Streams`CharacterInput:", "public", true, 0),
   new MM("init`Streams`CharacterInputConverter:", "public", true, 0),
   new MM("Streams`CharacterInputConverter", "public", true, 0),
   new MM("Streams`CharacterInputConverter:", "public", true, 0),
   new MM("init`Streams`CharacterInputOutputConverter:", "public", true, 0),
   new MM("Streams`CharacterInputOutputConverter", "public", true, 0),
   new MM("Streams`CharacterInputOutputConverter:", "public", true, 0),
   new MM("init`Streams`CharacterOutput:", "public", true, 0),
   new MM("Streams`CharacterOutput", "public", true, 0),
   new MM("Streams`CharacterOutput:", "public", true, 0),
   new MM("init`Streams`CharacterOutputConverter:", "public", true, 0),
   new MM("Streams`CharacterOutputConverter", "public", true, 0),
   new MM("Streams`CharacterOutputConverter:", "public", true, 0),
   new MM("init`Streams`CharacterReadConverter:", "public", true, 0),
   new MM("Streams`CharacterReadConverter", "public", true, 0),
   new MM("Streams`CharacterReadConverter:", "public", true, 0),
   new MM("init`Streams`ExternalInputStream:", "public", true, 0),
   new MM("Streams`ExternalInputStream", "public", true, 0),
   new MM("Streams`ExternalInputStream:", "public", true, 0),
   new MM("init`Streams`ExternalOutputStream:", "public", true, 0),
   new MM("Streams`ExternalOutputStream", "public", true, 0),
   new MM("Streams`ExternalOutputStream:", "public", true, 0),
   new MM("init`Streams`ExternalReadStream:", "public", true, 0),
   new MM("Streams`ExternalReadStream", "public", true, 0),
   new MM("Streams`ExternalReadStream:", "public", true, 0),
   new MM("init`Streams`ExternalReadWriteStream:", "public", true, 0),
   new MM("Streams`ExternalReadWriteStream", "public", true, 0),
   new MM("Streams`ExternalReadWriteStream:", "public", true, 0),
   new MM("init`Streams`ExternalStream:", "public", true, 0),
   new MM("Streams`ExternalStream", "public", true, 0),
   new MM("Streams`ExternalStream:", "public", true, 0),
   new MM("init`Streams`SeqCltnReadStream:", "public", true, 0),
   new MM("Streams`SeqCltnReadStream", "public", true, 0),
   new MM("Streams`SeqCltnReadStream:", "public", true, 0),
   new MM("init`Streams`SeqCltnReadWriteStream:", "public", true, 0),
   new MM("Streams`SeqCltnReadWriteStream", "public", true, 0),
   new MM("Streams`SeqCltnReadWriteStream:", "public", true, 0),
   new MM("init`Streams`TempTranscript:", "public", true, 0),
   new MM("Streams`TempTranscript", "public", true, 0),
   new MM("Streams`TempTranscript:", "public", true, 0)
  ];
  this.nestedClasses = [
   "Streams`BasicInputStream",
   "Streams`BasicOutputStream",
   "Streams`BasicReadStream",
   "Streams`BasicReadWriteStream",
   "Streams`CharacterInput",
   "Streams`CharacterInputConverter",
   "Streams`CharacterInputOutputConverter",
   "Streams`CharacterOutput",
   "Streams`CharacterOutputConverter",
   "Streams`CharacterReadConverter",
   "Streams`ExternalInputStream",
   "Streams`ExternalOutputStream",
   "Streams`ExternalReadStream",
   "Streams`ExternalReadWriteStream",
   "Streams`ExternalStream",
   "Streams`SeqCltnReadStream",
   "Streams`SeqCltnReadWriteStream",
   "Streams`TempTranscript"
  ];
  this.applications = [];
  this.$superInit$Streams = function ($platform) {
   let self = this;
   self.$super$Streams$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($platform) {
   let self = this;
   self._$superInit$Streams($platform);
   $0.$init$BasicOutputReadStream$(self, self._$BasicOutputStream().$mixinApply$(self._$BasicReadStream()));
   $0.$init$CharacterIStream$(self, self._$CharacterInput().$mixinApply$(self._$BasicInputStream()));
   $0.$init$CharacterOStream$(self, self._$CharacterOutput().$mixinApply$(self._$BasicOutputStream()));
   $0.$init$CharacterConverterWithOutput$(self, self._$BasicOutputStream().$mixinApply$(self._$CharacterInputConverter()));
   $0.$init$OutputInputConverter$(self, self._$CharacterOutput().$mixinApply$($0.$CharacterConverterWithOutput(self)));
   $0.$init$BasicIExStream$(self, self._$BasicInputStream().$mixinApply$(self._$ExternalStream()));
   $0.$init$EIStream$(self, self._$BasicReadStream().$mixinApply$(self._$ExternalInputStream()));
   $0.$init$ReadExternalOutputStream$(self, self._$BasicOutputStream().$mixinApply$(self._$ExternalReadStream()));
   $0.$init$EOStream$(self, self._$BasicOutputStream().$mixinApply$(self._$ExternalStream()));
   $0.$init$EIOStream$(self, self._$ExternalOutputStream().$mixinApply$($0.$ReadExternalOutputStream(self)));
   return self;
  };
  this.$usingCrLfConvention = function () {
   let self = this;
   return true;
  };
  this.$BasicInputStream = function () {
   if (nil === this.$Streams$BasicInputStream$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    let mixin = $.$Streams$BasicInputStream;
    this.$Streams$BasicInputStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$BasicInputStream$slot;
  };
  this.$BasicOutputStream = function () {
   if (nil === this.$Streams$BasicOutputStream$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    let mixin = $.$Streams$BasicOutputStream;
    this.$Streams$BasicOutputStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$BasicOutputStream$slot;
  };
  this.$BasicReadStream = function () {
   if (nil === this.$Streams$BasicReadStream$slot) {
    let self = this;
    let superclass = self._$BasicInputStream();
    let enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    let mixin = $.$Streams$BasicReadStream;
    this.$Streams$BasicReadStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$BasicReadStream$slot;
  };
  this.$BasicReadWriteStream = function () {
   if (nil === this.$Streams$BasicReadWriteStream$slot) {
    let self = this;
    let superclass = $0.$BasicOutputReadStream(self);
    let enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    let mixin = $.$Streams$BasicReadWriteStream;
    this.$Streams$BasicReadWriteStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$BasicReadWriteStream$slot;
  };
  this.$CharacterInput = function () {
   if (nil === this.$Streams$CharacterInput$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    let mixin = $.$Streams$CharacterInput;
    this.$Streams$CharacterInput$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$CharacterInput$slot;
  };
  this.$CharacterInputConverter = function () {
   if (nil === this.$Streams$CharacterInputConverter$slot) {
    let self = this;
    let superclass = $0.$CharacterIStream(self);
    let enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    let mixin = $.$Streams$CharacterInputConverter;
    this.$Streams$CharacterInputConverter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$CharacterInputConverter$slot;
  };
  this.$CharacterInputOutputConverter = function () {
   if (nil === this.$Streams$CharacterInputOutputConverter$slot) {
    let self = this;
    let superclass = $0.$OutputInputConverter(self);
    let enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    let mixin = $.$Streams$CharacterInputOutputConverter;
    this.$Streams$CharacterInputOutputConverter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$CharacterInputOutputConverter$slot;
  };
  this.$CharacterOutput = function () {
   if (nil === this.$Streams$CharacterOutput$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    let mixin = $.$Streams$CharacterOutput;
    this.$Streams$CharacterOutput$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$CharacterOutput$slot;
  };
  this.$CharacterOutputConverter = function () {
   if (nil === this.$Streams$CharacterOutputConverter$slot) {
    let self = this;
    let superclass = $0.$CharacterOStream(self);
    let enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    let mixin = $.$Streams$CharacterOutputConverter;
    this.$Streams$CharacterOutputConverter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$CharacterOutputConverter$slot;
  };
  this.$CharacterReadConverter = function () {
   if (nil === this.$Streams$CharacterReadConverter$slot) {
    let self = this;
    let superclass = self._$CharacterInputConverter();
    let enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    let mixin = $.$Streams$CharacterReadConverter;
    this.$Streams$CharacterReadConverter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$CharacterReadConverter$slot;
  };
  this.$ExternalInputStream = function () {
   if (nil === this.$Streams$ExternalInputStream$slot) {
    let self = this;
    let superclass = $0.$BasicIExStream(self);
    let enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    let mixin = $.$Streams$ExternalInputStream;
    this.$Streams$ExternalInputStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$ExternalInputStream$slot;
  };
  this.$ExternalOutputStream = function () {
   if (nil === this.$Streams$ExternalOutputStream$slot) {
    let self = this;
    let superclass = $0.$EOStream(self);
    let enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    let mixin = $.$Streams$ExternalOutputStream;
    this.$Streams$ExternalOutputStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$ExternalOutputStream$slot;
  };
  this.$ExternalReadStream = function () {
   if (nil === this.$Streams$ExternalReadStream$slot) {
    let self = this;
    let superclass = $0.$EIStream(self);
    let enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    let mixin = $.$Streams$ExternalReadStream;
    this.$Streams$ExternalReadStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$ExternalReadStream$slot;
  };
  this.$ExternalReadWriteStream = function () {
   if (nil === this.$Streams$ExternalReadWriteStream$slot) {
    let self = this;
    let superclass = $0.$EIOStream(self);
    let enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    let mixin = $.$Streams$ExternalReadWriteStream;
    this.$Streams$ExternalReadWriteStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$ExternalReadWriteStream$slot;
  };
  this.$ExternalStream = function () {
   if (nil === this.$Streams$ExternalStream$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    let mixin = $.$Streams$ExternalStream;
    this.$Streams$ExternalStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$ExternalStream$slot;
  };
  this.$SeqCltnReadStream = function () {
   if (nil === this.$Streams$SeqCltnReadStream$slot) {
    let self = this;
    let superclass = self._$BasicReadStream();
    let enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    let mixin = $.$Streams$SeqCltnReadStream;
    this.$Streams$SeqCltnReadStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$SeqCltnReadStream$slot;
  };
  this.$SeqCltnReadWriteStream = function () {
   if (nil === this.$Streams$SeqCltnReadWriteStream$slot) {
    let self = this;
    let superclass = self._$BasicReadWriteStream();
    let enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    let mixin = $.$Streams$SeqCltnReadWriteStream;
    this.$Streams$SeqCltnReadWriteStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$SeqCltnReadWriteStream$slot;
  };
  this.$TempTranscript = function () {
   if (nil === this.$Streams$TempTranscript$slot) {
    let self = this;
    let superclass = $0.$CharacterOStream(self);
    let enclosingObjects = [this].concat(this.$enclosingObjects$Streams);
    let mixin = $.$Streams$TempTranscript;
    this.$Streams$TempTranscript$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Streams$TempTranscript$slot;
  };
  this.$init$BasicOutputReadStream$ = function (self, v) {
   self.$BasicOutputReadStream$slot = v;
   return self;
  };
  this.$BasicOutputReadStream = function (self) {
   return self.$BasicOutputReadStream$slot;
  };
  this.$init$CharacterIStream$ = function (self, v) {
   self.$CharacterIStream$slot = v;
   return self;
  };
  this.$CharacterIStream = function (self) {
   return self.$CharacterIStream$slot;
  };
  this.$init$CharacterOStream$ = function (self, v) {
   self.$CharacterOStream$slot = v;
   return self;
  };
  this.$CharacterOStream = function (self) {
   return self.$CharacterOStream$slot;
  };
  this.$init$CharacterConverterWithOutput$ = function (self, v) {
   self.$CharacterConverterWithOutput$slot = v;
   return self;
  };
  this.$CharacterConverterWithOutput = function (self) {
   return self.$CharacterConverterWithOutput$slot;
  };
  this.$init$OutputInputConverter$ = function (self, v) {
   self.$OutputInputConverter$slot = v;
   return self;
  };
  this.$OutputInputConverter = function (self) {
   return self.$OutputInputConverter$slot;
  };
  this.$init$BasicIExStream$ = function (self, v) {
   self.$BasicIExStream$slot = v;
   return self;
  };
  this.$BasicIExStream = function (self) {
   return self.$BasicIExStream$slot;
  };
  this.$init$EIStream$ = function (self, v) {
   self.$EIStream$slot = v;
   return self;
  };
  this.$EIStream = function (self) {
   return self.$EIStream$slot;
  };
  this.$init$ReadExternalOutputStream$ = function (self, v) {
   self.$ReadExternalOutputStream$slot = v;
   return self;
  };
  this.$ReadExternalOutputStream = function (self) {
   return self.$ReadExternalOutputStream$slot;
  };
  this.$init$EOStream$ = function (self, v) {
   self.$EOStream$slot = v;
   return self;
  };
  this.$EOStream = function (self) {
   return self.$EOStream$slot;
  };
  this.$init$EIOStream$ = function (self, v) {
   self.$EIOStream$slot = v;
   return self;
  };
  this.$EIOStream = function (self) {
   return self.$EIOStream$slot;
  };
  this.$init$Streams$BasicInputStream$ = function (v) {
   this.$Streams$BasicInputStream$slot = v;
   return this;
  };
  this.$Streams$BasicInputStream = function () {
   return this.$Streams$BasicInputStream$slot;
  };
  this.$Streams$BasicInputStream$ = function (v) {
   this.$Streams$BasicInputStream$slot = v;
   return this;
  };
  this.$init$Streams$BasicOutputStream$ = function (v) {
   this.$Streams$BasicOutputStream$slot = v;
   return this;
  };
  this.$Streams$BasicOutputStream = function () {
   return this.$Streams$BasicOutputStream$slot;
  };
  this.$Streams$BasicOutputStream$ = function (v) {
   this.$Streams$BasicOutputStream$slot = v;
   return this;
  };
  this.$init$Streams$BasicReadStream$ = function (v) {
   this.$Streams$BasicReadStream$slot = v;
   return this;
  };
  this.$Streams$BasicReadStream = function () {
   return this.$Streams$BasicReadStream$slot;
  };
  this.$Streams$BasicReadStream$ = function (v) {
   this.$Streams$BasicReadStream$slot = v;
   return this;
  };
  this.$init$Streams$BasicReadWriteStream$ = function (v) {
   this.$Streams$BasicReadWriteStream$slot = v;
   return this;
  };
  this.$Streams$BasicReadWriteStream = function () {
   return this.$Streams$BasicReadWriteStream$slot;
  };
  this.$Streams$BasicReadWriteStream$ = function (v) {
   this.$Streams$BasicReadWriteStream$slot = v;
   return this;
  };
  this.$init$Streams$CharacterInput$ = function (v) {
   this.$Streams$CharacterInput$slot = v;
   return this;
  };
  this.$Streams$CharacterInput = function () {
   return this.$Streams$CharacterInput$slot;
  };
  this.$Streams$CharacterInput$ = function (v) {
   this.$Streams$CharacterInput$slot = v;
   return this;
  };
  this.$init$Streams$CharacterInputConverter$ = function (v) {
   this.$Streams$CharacterInputConverter$slot = v;
   return this;
  };
  this.$Streams$CharacterInputConverter = function () {
   return this.$Streams$CharacterInputConverter$slot;
  };
  this.$Streams$CharacterInputConverter$ = function (v) {
   this.$Streams$CharacterInputConverter$slot = v;
   return this;
  };
  this.$init$Streams$CharacterInputOutputConverter$ = function (v) {
   this.$Streams$CharacterInputOutputConverter$slot = v;
   return this;
  };
  this.$Streams$CharacterInputOutputConverter = function () {
   return this.$Streams$CharacterInputOutputConverter$slot;
  };
  this.$Streams$CharacterInputOutputConverter$ = function (v) {
   this.$Streams$CharacterInputOutputConverter$slot = v;
   return this;
  };
  this.$init$Streams$CharacterOutput$ = function (v) {
   this.$Streams$CharacterOutput$slot = v;
   return this;
  };
  this.$Streams$CharacterOutput = function () {
   return this.$Streams$CharacterOutput$slot;
  };
  this.$Streams$CharacterOutput$ = function (v) {
   this.$Streams$CharacterOutput$slot = v;
   return this;
  };
  this.$init$Streams$CharacterOutputConverter$ = function (v) {
   this.$Streams$CharacterOutputConverter$slot = v;
   return this;
  };
  this.$Streams$CharacterOutputConverter = function () {
   return this.$Streams$CharacterOutputConverter$slot;
  };
  this.$Streams$CharacterOutputConverter$ = function (v) {
   this.$Streams$CharacterOutputConverter$slot = v;
   return this;
  };
  this.$init$Streams$CharacterReadConverter$ = function (v) {
   this.$Streams$CharacterReadConverter$slot = v;
   return this;
  };
  this.$Streams$CharacterReadConverter = function () {
   return this.$Streams$CharacterReadConverter$slot;
  };
  this.$Streams$CharacterReadConverter$ = function (v) {
   this.$Streams$CharacterReadConverter$slot = v;
   return this;
  };
  this.$init$Streams$ExternalInputStream$ = function (v) {
   this.$Streams$ExternalInputStream$slot = v;
   return this;
  };
  this.$Streams$ExternalInputStream = function () {
   return this.$Streams$ExternalInputStream$slot;
  };
  this.$Streams$ExternalInputStream$ = function (v) {
   this.$Streams$ExternalInputStream$slot = v;
   return this;
  };
  this.$init$Streams$ExternalOutputStream$ = function (v) {
   this.$Streams$ExternalOutputStream$slot = v;
   return this;
  };
  this.$Streams$ExternalOutputStream = function () {
   return this.$Streams$ExternalOutputStream$slot;
  };
  this.$Streams$ExternalOutputStream$ = function (v) {
   this.$Streams$ExternalOutputStream$slot = v;
   return this;
  };
  this.$init$Streams$ExternalReadStream$ = function (v) {
   this.$Streams$ExternalReadStream$slot = v;
   return this;
  };
  this.$Streams$ExternalReadStream = function () {
   return this.$Streams$ExternalReadStream$slot;
  };
  this.$Streams$ExternalReadStream$ = function (v) {
   this.$Streams$ExternalReadStream$slot = v;
   return this;
  };
  this.$init$Streams$ExternalReadWriteStream$ = function (v) {
   this.$Streams$ExternalReadWriteStream$slot = v;
   return this;
  };
  this.$Streams$ExternalReadWriteStream = function () {
   return this.$Streams$ExternalReadWriteStream$slot;
  };
  this.$Streams$ExternalReadWriteStream$ = function (v) {
   this.$Streams$ExternalReadWriteStream$slot = v;
   return this;
  };
  this.$init$Streams$ExternalStream$ = function (v) {
   this.$Streams$ExternalStream$slot = v;
   return this;
  };
  this.$Streams$ExternalStream = function () {
   return this.$Streams$ExternalStream$slot;
  };
  this.$Streams$ExternalStream$ = function (v) {
   this.$Streams$ExternalStream$slot = v;
   return this;
  };
  this.$init$Streams$SeqCltnReadStream$ = function (v) {
   this.$Streams$SeqCltnReadStream$slot = v;
   return this;
  };
  this.$Streams$SeqCltnReadStream = function () {
   return this.$Streams$SeqCltnReadStream$slot;
  };
  this.$Streams$SeqCltnReadStream$ = function (v) {
   this.$Streams$SeqCltnReadStream$slot = v;
   return this;
  };
  this.$init$Streams$SeqCltnReadWriteStream$ = function (v) {
   this.$Streams$SeqCltnReadWriteStream$slot = v;
   return this;
  };
  this.$Streams$SeqCltnReadWriteStream = function () {
   return this.$Streams$SeqCltnReadWriteStream$slot;
  };
  this.$Streams$SeqCltnReadWriteStream$ = function (v) {
   this.$Streams$SeqCltnReadWriteStream$slot = v;
   return this;
  };
  this.$init$Streams$TempTranscript$ = function (v) {
   this.$Streams$TempTranscript$slot = v;
   return this;
  };
  this.$Streams$TempTranscript = function () {
   return this.$Streams$TempTranscript$slot;
  };
  this.$Streams$TempTranscript$ = function (v) {
   this.$Streams$TempTranscript$slot = v;
   return this;
  };
  this.$Streams$BasicInputStream = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Streams`BasicInputStream";
   this.name = "Streams`BasicInputStream";
   this.header = 1023;
   this.slots = [
    new SM("havePeeked_0", "protected", true, false),
    new SM("peekVal", "protected", true, false)
   ];
   this.methods = [
    new MM("superInit`Streams`BasicInputStream", "protected", true, 1024),
    new MM("instance`initializer", "public", true, 1025),
    new MM("accumulateUntil:", "protected", false, 1026),
    new MM("actualAtEnd", "protected", false, 1027),
    new MM("actualNext", "protected", false, 1028),
    new MM("atEnd", "protected", false, 1029),
    new MM("atEndOrPeekIs:", "protected", false, 1030),
    new MM("close", "protected", false, 1031),
    new MM("contentsRemaining", "protected", false, 1032),
    new MM("defaultExpected", "protected", false, 1033),
    new MM("do:", "protected", false, 1034),
    new MM("havePeeked", "protected", false, 1035),
    new MM("havePeeked:", "protected", false, 1036),
    new MM("newBuildStream", "protected", false, 1037),
    new MM("newCollectionOfSize:", "protected", false, 1038),
    new MM("next", "protected", false, 1039),
    new MM("next:", "protected", false, 1040),
    new MM("nextFromPeek", "protected", false, 1041),
    new MM("nextIfAbsent:", "public", false, 1042),
    new MM("nextMatchFor:", "protected", false, 1043),
    new MM("noPeekVal", "protected", false, 1044),
    new MM("peek", "protected", false, 1045),
    new MM("peekFor:", "protected", false, 1046),
    new MM("peekIfAbsent:", "protected", false, 1047),
    new MM("printOn:", "public", false, 1048),
    new MM("skip:", "protected", false, 1049),
    new MM("skipTo:", "protected", false, 1050),
    new MM("upTo:", "protected", false, 1051),
    new MM("init`havePeeked_0:", "protected", true, 0),
    new MM("havePeeked_0", "protected", true, 0),
    new MM("havePeeked_0:", "protected", true, 0),
    new MM("init`peekVal:", "protected", true, 0),
    new MM("peekVal", "protected", true, 0),
    new MM("peekVal:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$BasicInputStream = function () {
    let self = this;
    self.$super$Streams$BasicInputStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Streams$BasicInputStream();
    self._$init$havePeeked_0$(false);
    return self;
   };
   this.$accumulateUntil$ = function ($predicate) {
    let self = this;
    let $build = nil;
    $build = self._$newBuildStream();
    {
     for (; !$predicate.$value(); ) {
      $build.$nextPut$(self._$next());
     };
    };
    return $build.$contentsWritten();
   };
   this.$actualAtEnd = function () {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$actualNext = function () {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$atEnd = function () {
    let self = this;
    return self._$havePeeked().$ifTrue$ifFalse$(function () {
     return false;
    }, function () {
     return self._$actualAtEnd();
    });
   };
   this.$atEndOrPeekIs$ = function ($delimiter) {
    let self = this;
    let NLR = new Object();
    try {
     {
      let t = self._$peekIfAbsent$(function () {
       {
        let t = true;
        if (NLR === null) {
         self.cannotReturn(self, t);
        };
        NLR.value = t;
        throw NLR;
       };
      }).$$equal($delimiter);
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$close = function () {
    let self = this;
    return self;
   };
   this.$contentsRemaining = function () {
    let self = this;
    return self._$accumulateUntil$(function () {
     return self._$atEnd();
    });
   };
   this.$defaultExpected = function () {
    let self = this;
    return 10;
   };
   this.$do$ = function ($f) {
    let self = this;
    {
     for (; !self._$atEnd(); ) {
      $f.$value$(self._$next());
     };
    };
    return self;
   };
   this.$havePeeked = function () {
    let self = this;
    return self._$havePeeked_0();
   };
   this.$havePeeked$ = function ($f) {
    let self = this;
    if (!$f) {
     self._$peekVal$(nil);
    };
    self._$havePeeked_0$($f);
    return self;
   };
   this.$newBuildStream = function () {
    let self = this;
    return self.$enclosingObjects$Streams$BasicInputStream[0]._$BasicReadWriteStream().$on$(self._$newCollectionOfSize$(self._$defaultExpected()));
   };
   this.$newCollectionOfSize$ = function ($n) {
    let self = this;
    return self._$Array().$new$($n);
   };
   this.$next = function () {
    let self = this;
    return self._$havePeeked().$ifTrue$ifFalse$(function () {
     return self._$nextFromPeek();
    }, function () {
     return self._$actualNext();
    });
   };
   this.$next$ = function ($nElements) {
    let self = this;
    let $cltn = nil;
    $cltn = self._$newCollectionOfSize$($nElements);
    {
     let $i = nil;
     let $$limit = nil;
     nil;
     $i = 1;
     $$limit = $nElements;
     for (; $$limit.$$greater$equal($i); ) {
      if (self._$atEnd()) {
       self._$error$("Not enough elements");
      };
      $cltn.$at$put$($i, self._$next());
      $i = (1).$$plus($i);
     };
    };
    return $cltn;
   };
   this.$nextFromPeek = function () {
    let self = this;
    let $v = nil;
    $v = self._$peekVal();
    self._$noPeekVal();
    return $v;
   };
   this.$nextIfAbsent$ = function ($f) {
    let self = this;
    return self._$havePeeked().$ifTrue$ifFalse$(function () {
     return self._$nextFromPeek();
    }, function () {
     return self._$actualAtEnd().$ifFalse$ifTrue$(function () {
      return self._$actualNext();
     }, function () {
      return $f.$value();
     });
    });
   };
   this.$nextMatchFor$ = function ($o) {
    let self = this;
    return self._$next().$$equal($o);
   };
   this.$noPeekVal = function () {
    let self = this;
    self._$havePeeked$(false);
    self._$peekVal$(nil);
    return self;
   };
   this.$peek = function () {
    let self = this;
    if (!self._$havePeeked()) {
     self._$peekVal$(self._$actualNext());
     self._$havePeeked$(true);
    };
    return self._$peekVal();
   };
   this.$peekFor$ = function ($o) {
    let self = this;
    return self._$peek().$$equal($o).$ifTrue$ifFalse$(function () {
     self._$next();
     return true;
    }, function () {
     return false;
    });
   };
   this.$peekIfAbsent$ = function ($f) {
    let self = this;
    if (!self._$havePeeked()) {
     if (self._$actualAtEnd()) {
      return $f.$value();
     };
     self._$peekVal$(self._$actualNext());
     self._$havePeeked$(true);
    };
    return self._$peekVal();
   };
   this.$printOn$ = function ($strm) {
    let self = this;
    $strm.$nextPutAll$(self._$class().$name());
    return self;
   };
   this.$skip$ = function ($nElements) {
    let self = this;
    {
     let $$i = nil;
     let $$limit = nil;
     nil;
     $$i = 1;
     $$limit = $nElements;
     for (; $$limit.$$greater$equal($$i); ) {
      self._$next();
      $$i = (1).$$plus($$i);
     };
    };
    return self;
   };
   this.$skipTo$ = function ($o) {
    let self = this;
    {
     for (; !self._$atEnd(); ) {
      if (self._$next().$$equal($o)) {
       return true;
      };
     };
    };
    return false;
   };
   this.$upTo$ = function ($delimiter) {
    let self = this;
    let $s = nil;
    $s = self._$accumulateUntil$(function () {
     return self._$atEndOrPeekIs$($delimiter);
    });
    self._$nextIfAbsent$(function () {
     return nil;
    });
    return $s;
   };
   this.$init$havePeeked_0$ = function (v) {
    this.$havePeeked_0$slot = v;
    return this;
   };
   this.$havePeeked_0 = function () {
    return this.$havePeeked_0$slot;
   };
   this.$havePeeked_0$ = function (v) {
    this.$havePeeked_0$slot = v;
    return this;
   };
   this.$init$peekVal$ = function (v) {
    this.$peekVal$slot = v;
    return this;
   };
   this.$peekVal = function () {
    return this.$peekVal$slot;
   };
   this.$peekVal$ = function (v) {
    this.$peekVal$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`BasicInputStream";
     this._$superInit$Streams$BasicInputStream = $.$superInit$Streams$BasicInputStream;
     this.$superInit$Streams$BasicInputStream = dnuCatcher("$superInit$Streams$BasicInputStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$accumulateUntil$ = $.$accumulateUntil$;
     this.$accumulateUntil$ = dnuCatcher("$accumulateUntil$");
     this._$actualAtEnd = $.$actualAtEnd;
     this.$actualAtEnd = dnuCatcher("$actualAtEnd");
     this._$actualNext = $.$actualNext;
     this.$actualNext = dnuCatcher("$actualNext");
     this._$atEnd = $.$atEnd;
     this.$atEnd = dnuCatcher("$atEnd");
     this._$atEndOrPeekIs$ = $.$atEndOrPeekIs$;
     this.$atEndOrPeekIs$ = dnuCatcher("$atEndOrPeekIs$");
     this._$close = $.$close;
     this.$close = dnuCatcher("$close");
     this._$contentsRemaining = $.$contentsRemaining;
     this.$contentsRemaining = dnuCatcher("$contentsRemaining");
     this._$defaultExpected = $.$defaultExpected;
     this.$defaultExpected = dnuCatcher("$defaultExpected");
     this._$do$ = $.$do$;
     this.$do$ = dnuCatcher("$do$");
     this._$havePeeked = $.$havePeeked;
     this.$havePeeked = dnuCatcher("$havePeeked");
     this._$havePeeked$ = $.$havePeeked$;
     this.$havePeeked$ = dnuCatcher("$havePeeked$");
     this._$newBuildStream = $.$newBuildStream;
     this.$newBuildStream = dnuCatcher("$newBuildStream");
     this._$newCollectionOfSize$ = $.$newCollectionOfSize$;
     this.$newCollectionOfSize$ = dnuCatcher("$newCollectionOfSize$");
     this._$next = $.$next;
     this.$next = dnuCatcher("$next");
     this._$next$ = $.$next$;
     this.$next$ = dnuCatcher("$next$");
     this._$nextFromPeek = $.$nextFromPeek;
     this.$nextFromPeek = dnuCatcher("$nextFromPeek");
     this.$nextIfAbsent$ = this._$nextIfAbsent$ = $.$nextIfAbsent$;
     this._$nextMatchFor$ = $.$nextMatchFor$;
     this.$nextMatchFor$ = dnuCatcher("$nextMatchFor$");
     this._$noPeekVal = $.$noPeekVal;
     this.$noPeekVal = dnuCatcher("$noPeekVal");
     this._$peek = $.$peek;
     this.$peek = dnuCatcher("$peek");
     this._$peekFor$ = $.$peekFor$;
     this.$peekFor$ = dnuCatcher("$peekFor$");
     this._$peekIfAbsent$ = $.$peekIfAbsent$;
     this.$peekIfAbsent$ = dnuCatcher("$peekIfAbsent$");
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this._$skip$ = $.$skip$;
     this.$skip$ = dnuCatcher("$skip$");
     this._$skipTo$ = $.$skipTo$;
     this.$skipTo$ = dnuCatcher("$skipTo$");
     this._$upTo$ = $.$upTo$;
     this.$upTo$ = dnuCatcher("$upTo$");
     this._$init$havePeeked_0$ = $.$init$havePeeked_0$;
     this.$init$havePeeked_0$ = dnuCatcher("$init$havePeeked_0$");
     this._$havePeeked_0 = $.$havePeeked_0;
     this.$havePeeked_0 = dnuCatcher("$havePeeked_0");
     this._$havePeeked_0$ = $.$havePeeked_0$;
     this.$havePeeked_0$ = dnuCatcher("$havePeeked_0$");
     this._$init$peekVal$ = $.$init$peekVal$;
     this.$init$peekVal$ = dnuCatcher("$init$peekVal$");
     this._$peekVal = $.$peekVal;
     this.$peekVal = dnuCatcher("$peekVal");
     this._$peekVal$ = $.$peekVal$;
     this.$peekVal$ = dnuCatcher("$peekVal$");
     this.$enclosingObjects$Streams$BasicInputStream = enclosingObjects;
     this.$super$Streams$BasicInputStream$slot = runtimeSuperclass;
     this["Streams`BasicInputStream"] = function () {
      superBasicNew.call(this);
      this.$havePeeked_0$slot = nil;
      this.$peekVal$slot = nil;
     };
     this.basicNew = this["Streams`BasicInputStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Streams`BasicInputStream";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`BasicInputStream";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Streams$BasicInputStream = enclosingObjects;
      this.$super$Streams$BasicInputStream$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$BasicOutputStream = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Streams`BasicOutputStream";
   this.name = "Streams`BasicOutputStream";
   this.header = 1052;
   this.slots = [];
   this.methods = [
    new MM("superInit`Streams`BasicOutputStream", "protected", true, 1053),
    new MM("instance`initializer", "public", true, 1054),
    new MM("externalFlush", "protected", false, 1055),
    new MM("flush", "public", false, 1056),
    new MM("next:put:", "protected", false, 1057),
    new MM("nextPut:", "public", false, 1058),
    new MM("nextPutAll:", "public", false, 1059),
    new MM("put:", "protected", false, 1060),
    new MM("putAll:", "protected", false, 1061),
    new MM("show:", "protected", false, 1062)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$BasicOutputStream = function () {
    let self = this;
    self.$super$Streams$BasicOutputStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Streams$BasicOutputStream();
    return self;
   };
   this.$externalFlush = function () {
    let self = this;
    self._$flush();
    return self;
   };
   this.$flush = function () {
    let self = this;
    return self;
   };
   this.$next$put$ = function ($nElements, $el) {
    let self = this;
    {
     let $$i = nil;
     let $$limit = nil;
     nil;
     $$i = 1;
     $$limit = $nElements;
     for (; $$limit.$$greater$equal($$i); ) {
      self._$nextPut$($el);
      $$i = (1).$$plus($$i);
     };
    };
    return $el;
   };
   this.$nextPut$ = function ($el) {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$nextPutAll$ = function ($els) {
    let self = this;
    $els.$do$(function ($el) {
     return self._$nextPut$($el);
    });
    return $els;
   };
   this.$put$ = function ($el) {
    let self = this;
    return self._$nextPut$($el);
   };
   this.$putAll$ = function ($els) {
    let self = this;
    return self._$nextPutAll$($els);
   };
   this.$show$ = function ($els) {
    let self = this;
    (function (cascadeReceiver) {
     cascadeReceiver.$nextPutAll$($els);
     return cascadeReceiver.$flush();
    })(self);
    return $els;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`BasicOutputStream";
     this._$superInit$Streams$BasicOutputStream = $.$superInit$Streams$BasicOutputStream;
     this.$superInit$Streams$BasicOutputStream = dnuCatcher("$superInit$Streams$BasicOutputStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$externalFlush = $.$externalFlush;
     this.$externalFlush = dnuCatcher("$externalFlush");
     this.$flush = this._$flush = $.$flush;
     this._$next$put$ = $.$next$put$;
     this.$next$put$ = dnuCatcher("$next$put$");
     this.$nextPut$ = this._$nextPut$ = $.$nextPut$;
     this.$nextPutAll$ = this._$nextPutAll$ = $.$nextPutAll$;
     this._$put$ = $.$put$;
     this.$put$ = dnuCatcher("$put$");
     this._$putAll$ = $.$putAll$;
     this.$putAll$ = dnuCatcher("$putAll$");
     this._$show$ = $.$show$;
     this.$show$ = dnuCatcher("$show$");
     this.$enclosingObjects$Streams$BasicOutputStream = enclosingObjects;
     this.$super$Streams$BasicOutputStream$slot = runtimeSuperclass;
     this["Streams`BasicOutputStream"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Streams`BasicOutputStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Streams`BasicOutputStream";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`BasicOutputStream";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Streams$BasicOutputStream = enclosingObjects;
      this.$super$Streams$BasicOutputStream$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$BasicReadStream = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Streams`BasicReadStream";
   this.name = "Streams`BasicReadStream";
   this.header = 1063;
   this.slots = [new SM("actualPosition_slot", "protected", true, false)];
   this.methods = [
    new MM("superInit`Streams`BasicReadStream", "protected", true, 1064),
    new MM("instance`initializer", "public", true, 1065),
    new MM("actualAtEnd", "protected", false, 1066),
    new MM("actualPosition", "protected", false, 1067),
    new MM("actualPosition:", "protected", false, 1068),
    new MM("at:", "protected", false, 1069),
    new MM("collection", "protected", false, 1070),
    new MM("contents", "public", false, 1071),
    new MM("contentsRemaining", "protected", false, 1072),
    new MM("copyFrom:to:", "protected", false, 1073),
    new MM("isEmpty", "protected", false, 1074),
    new MM("position", "public", false, 1075),
    new MM("position:", "public", false, 1076),
    new MM("repositioningAt:", "protected", false, 1077),
    new MM("reset", "protected", false, 1078),
    new MM("setToEnd", "protected", false, 1079),
    new MM("size", "protected", false, 1080),
    new MM("skip:", "protected", false, 1081),
    new MM("skipTo:", "protected", false, 1082),
    new MM("upTo:", "protected", false, 1083),
    new MM("init`actualPosition_slot:", "protected", true, 0),
    new MM("actualPosition_slot", "protected", true, 0),
    new MM("actualPosition_slot:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$BasicReadStream = function () {
    let self = this;
    self.$super$Streams$BasicReadStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Streams$BasicReadStream();
    self._$init$actualPosition_slot$(0);
    return self;
   };
   this.$actualAtEnd = function () {
    let self = this;
    return self._$actualPosition().$$greater$equal(self._$size());
   };
   this.$actualPosition = function () {
    let self = this;
    return self._$actualPosition_slot();
   };
   this.$actualPosition$ = function ($p) {
    let self = this;
    self._$actualPosition_slot$($p);
    return self;
   };
   this.$at$ = function ($index) {
    let self = this;
    let $pos = nil;
    let $result = nil;
    $pos = self._$position();
    self._$position$($index - 1);
    $result = self._$next();
    self._$position$($pos);
    return $result;
   };
   this.$collection = function () {
    let self = this;
    let $cltn = nil;
    let $origPos = nil;
    $cltn = self._$newCollectionOfSize$(self._$size());
    $origPos = self._$position();
    self._$position$(0);
    {
     let $i = nil;
     let $$limit = nil;
     nil;
     $i = 1;
     $$limit = self._$size();
     for (; $$limit.$$greater$equal($i); ) {
      $cltn.$at$put$($i, self._$next());
      $i = (1).$$plus($i);
     };
    };
    self._$position$($origPos);
    return $cltn;
   };
   this.$contents = function () {
    let self = this;
    return self._$collection();
   };
   this.$contentsRemaining = function () {
    let self = this;
    let $cltn = nil;
    let $n = nil;
    $n = self._$size() - self._$position();
    $cltn = self._$newCollectionOfSize$($n);
    {
     let $i = nil;
     let $$limit = nil;
     nil;
     $i = 1;
     $$limit = $n;
     for (; $$limit.$$greater$equal($i); ) {
      $cltn.$at$put$($i, self._$next());
      $i = (1).$$plus($i);
     };
    };
    return $cltn;
   };
   this.$copyFrom$to$ = function ($start, $stop) {
    let self = this;
    let $pos = nil;
    let $n = nil;
    let $result = nil;
    let $offset = nil;
    $pos = self._$position();
    $n = ($stop - $start) + 1;
    $result = self._$Array().$new$($n);
    $offset = $start - 1;
    {
     let $i = nil;
     let $$limit = nil;
     nil;
     $i = 1;
     $$limit = $n;
     for (; $$limit.$$greater$equal($i); ) {
      $result.$at$put$($i, self._$repositioningAt$($offset + $i));
      $i = (1).$$plus($i);
     };
    };
    self._$position$($pos);
    return $result;
   };
   this.$isEmpty = function () {
    let self = this;
    return self._$size().$$equal(0);
   };
   this.$position = function () {
    let self = this;
    return self._$havePeeked().$ifFalse$ifTrue$(function () {
     return self._$actualPosition();
    }, function () {
     return self._$actualPosition() - 1;
    });
   };
   this.$position$ = function ($p) {
    let self = this;
    self._$actualPosition$($p);
    self._$noPeekVal();
    return self;
   };
   this.$repositioningAt$ = function ($index) {
    let self = this;
    return self._$at$($index);
   };
   this.$reset = function () {
    let self = this;
    self._$position$(0);
    return self;
   };
   this.$setToEnd = function () {
    let self = this;
    self._$position$(self._$size());
    return self;
   };
   this.$size = function () {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$skip$ = function ($nElements) {
    let self = this;
    self._$position$((self._$position() + $nElements).$max$(self._$size()));
    return self;
   };
   this.$skipTo$ = function ($o) {
    let self = this;
    let $pos = nil;
    let $n = nil;
    let $sz = nil;
    $sz = self._$size();
    $pos = self._$position();
    {
     let $i = nil;
     let $$limit = nil;
     nil;
     $i = $pos + 1;
     $$limit = $sz;
     for (; $$limit.$$greater$equal($i); ) {
      if (self._$repositioningAt$($i).$$equal($o)) {
       self._$position$($i);
       return true;
      };
      $i = (1).$$plus($i);
     };
    };
    self._$position$($sz);
    return false;
   };
   this.$upTo$ = function ($delimiter) {
    let self = this;
    let $pos = nil;
    let $n = nil;
    let $result = nil;
    $pos = self._$position();
    return self._$skipTo$($delimiter).$ifTrue$ifFalse$(function () {
     return self._$copyFrom$to$($pos + 1, self._$position() - 1);
    }, function () {
     return self._$copyFrom$to$($pos + 1, self._$position());
    });
   };
   this.$init$actualPosition_slot$ = function (v) {
    this.$actualPosition_slot$slot = v;
    return this;
   };
   this.$actualPosition_slot = function () {
    return this.$actualPosition_slot$slot;
   };
   this.$actualPosition_slot$ = function (v) {
    this.$actualPosition_slot$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`BasicReadStream";
     this._$superInit$Streams$BasicReadStream = $.$superInit$Streams$BasicReadStream;
     this.$superInit$Streams$BasicReadStream = dnuCatcher("$superInit$Streams$BasicReadStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$actualAtEnd = $.$actualAtEnd;
     this.$actualAtEnd = dnuCatcher("$actualAtEnd");
     this._$actualPosition = $.$actualPosition;
     this.$actualPosition = dnuCatcher("$actualPosition");
     this._$actualPosition$ = $.$actualPosition$;
     this.$actualPosition$ = dnuCatcher("$actualPosition$");
     this._$at$ = $.$at$;
     this.$at$ = dnuCatcher("$at$");
     this._$collection = $.$collection;
     this.$collection = dnuCatcher("$collection");
     this.$contents = this._$contents = $.$contents;
     this._$contentsRemaining = $.$contentsRemaining;
     this.$contentsRemaining = dnuCatcher("$contentsRemaining");
     this._$copyFrom$to$ = $.$copyFrom$to$;
     this.$copyFrom$to$ = dnuCatcher("$copyFrom$to$");
     this._$isEmpty = $.$isEmpty;
     this.$isEmpty = dnuCatcher("$isEmpty");
     this.$position = this._$position = $.$position;
     this.$position$ = this._$position$ = $.$position$;
     this._$repositioningAt$ = $.$repositioningAt$;
     this.$repositioningAt$ = dnuCatcher("$repositioningAt$");
     this._$reset = $.$reset;
     this.$reset = dnuCatcher("$reset");
     this._$setToEnd = $.$setToEnd;
     this.$setToEnd = dnuCatcher("$setToEnd");
     this._$size = $.$size;
     this.$size = dnuCatcher("$size");
     this._$skip$ = $.$skip$;
     this.$skip$ = dnuCatcher("$skip$");
     this._$skipTo$ = $.$skipTo$;
     this.$skipTo$ = dnuCatcher("$skipTo$");
     this._$upTo$ = $.$upTo$;
     this.$upTo$ = dnuCatcher("$upTo$");
     this._$init$actualPosition_slot$ = $.$init$actualPosition_slot$;
     this.$init$actualPosition_slot$ = dnuCatcher("$init$actualPosition_slot$");
     this._$actualPosition_slot = $.$actualPosition_slot;
     this.$actualPosition_slot = dnuCatcher("$actualPosition_slot");
     this._$actualPosition_slot$ = $.$actualPosition_slot$;
     this.$actualPosition_slot$ = dnuCatcher("$actualPosition_slot$");
     this.$enclosingObjects$Streams$BasicReadStream = enclosingObjects;
     this.$super$Streams$BasicReadStream$slot = runtimeSuperclass;
     this["Streams`BasicReadStream"] = function () {
      superBasicNew.call(this);
      this.$actualPosition_slot$slot = nil;
     };
     this.basicNew = this["Streams`BasicReadStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Streams`BasicReadStream";
    this.slots = [];
    this.methods = [
     new MM("new", "public", true, 0),
     new MM("on:", "protected", false, 1084),
     new MM("on:from:to:", "protected", false, 1085)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.$on$ = function ($sc) {
     let self = this;
     return self.$enclosingObjects$Streams$BasicReadStream[0]._$SeqCltnReadStream().$on$($sc);
    };
    this.$on$from$to$ = function ($sc, $firstIndex, $lastIndex) {
     let self = this;
     return self._$on$($sc.$copyFrom$to$($firstIndex, $lastIndex));
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`BasicReadStream";
      this.$new = this._$new = $.$new;
      this._$on$ = $.$on$;
      this.$on$ = dnuCatcher("$on$");
      this._$on$from$to$ = $.$on$from$to$;
      this.$on$from$to$ = dnuCatcher("$on$from$to$");
      this.$enclosingObjects$Streams$BasicReadStream = enclosingObjects;
      this.$super$Streams$BasicReadStream$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$BasicReadWriteStream = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Streams`BasicReadWriteStream";
   this.name = "Streams`BasicReadWriteStream";
   this.header = 1086;
   this.slots = [new SM("size", "protected", true, false)];
   this.methods = [
    new MM("superInit`Streams`BasicReadWriteStream", "protected", true, 1087),
    new MM("instance`initializer", "public", true, 1088),
    new MM("contents", "public", false, 1089),
    new MM("contentsWritten", "public", false, 1090),
    new MM("nextPut:", "public", false, 1091),
    new MM("init`size:", "protected", true, 0),
    new MM("size", "protected", true, 0),
    new MM("size:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$BasicReadWriteStream = function () {
    let self = this;
    self.$super$Streams$BasicReadWriteStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Streams$BasicReadWriteStream();
    self._$init$size$(0);
    return self;
   };
   this.$contents = function () {
    let self = this;
    return self._$collection();
   };
   this.$contentsWritten = function () {
    let self = this;
    let $cltn = nil;
    let $origPos = nil;
    $cltn = self._$newCollectionOfSize$(self._$position());
    $origPos = self._$position();
    self._$position$(0);
    {
     let $i = nil;
     let $$limit = nil;
     nil;
     $i = 1;
     $$limit = $origPos;
     for (; $$limit.$$greater$equal($i); ) {
      $cltn.$at$put$($i, self._$next());
      $i = (1).$$plus($i);
     };
    };
    self._$position$($origPos);
    return $cltn;
   };
   this.$nextPut$ = function ($el) {
    let self = this;
    let $pos = nil;
    self._$position$($pos = self._$position() + 1);
    if ($pos.$$greater(self._$size())) {
     self._$size$($pos);
    };
    return $el;
   };
   this.$init$size$ = function (v) {
    this.$size$slot = v;
    return this;
   };
   this.$size = function () {
    return this.$size$slot;
   };
   this.$size$ = function (v) {
    this.$size$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`BasicReadWriteStream";
     this._$superInit$Streams$BasicReadWriteStream = $.$superInit$Streams$BasicReadWriteStream;
     this.$superInit$Streams$BasicReadWriteStream = dnuCatcher("$superInit$Streams$BasicReadWriteStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$contents = this._$contents = $.$contents;
     this.$contentsWritten = this._$contentsWritten = $.$contentsWritten;
     this.$nextPut$ = this._$nextPut$ = $.$nextPut$;
     this._$init$size$ = $.$init$size$;
     this.$init$size$ = dnuCatcher("$init$size$");
     this._$size = $.$size;
     this.$size = dnuCatcher("$size");
     this._$size$ = $.$size$;
     this.$size$ = dnuCatcher("$size$");
     this.$enclosingObjects$Streams$BasicReadWriteStream = enclosingObjects;
     this.$super$Streams$BasicReadWriteStream$slot = runtimeSuperclass;
     this["Streams`BasicReadWriteStream"] = function () {
      superBasicNew.call(this);
      this.$size$slot = nil;
     };
     this.basicNew = this["Streams`BasicReadWriteStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Streams`BasicReadWriteStream";
    this.slots = [];
    this.methods = [
     new MM("new", "public", true, 0),
     new MM("on:", "protected", false, 1092),
     new MM("on:numElements:", "protected", false, 1093)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.$on$ = function ($sc) {
     let self = this;
     return self._$on$numElements$($sc, 0);
    };
    this.$on$numElements$ = function ($sc, $n) {
     let self = this;
     return self.$enclosingObjects$Streams$BasicReadWriteStream[0]._$SeqCltnReadWriteStream().$on$numElements$($sc, $n);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`BasicReadWriteStream";
      this.$new = this._$new = $.$new;
      this._$on$ = $.$on$;
      this.$on$ = dnuCatcher("$on$");
      this._$on$numElements$ = $.$on$numElements$;
      this.$on$numElements$ = dnuCatcher("$on$numElements$");
      this.$enclosingObjects$Streams$BasicReadWriteStream = enclosingObjects;
      this.$super$Streams$BasicReadWriteStream$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$CharacterInput = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Streams`CharacterInput";
   this.name = "Streams`CharacterInput";
   this.header = 1094;
   this.slots = [];
   this.methods = [
    new MM("superInit`Streams`CharacterInput", "protected", true, 1095),
    new MM("instance`initializer", "public", true, 1096),
    new MM("contentsRemaining", "protected", false, 1097),
    new MM("newCollectionOfSize:", "protected", false, 1098),
    new MM("next:", "protected", false, 1099),
    new MM("upTo:", "protected", false, 1100)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$CharacterInput = function () {
    let self = this;
    self.$super$Streams$CharacterInput$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Streams$CharacterInput();
    return self;
   };
   this.$contentsRemaining = function () {
    let self = this;
    let $con = nil;
    $con = self.$super$Streams$CharacterInput$slot._$contentsRemaining.call(self);
    return $con.$isString().$ifTrue$ifFalse$(function () {
     return $con;
    }, function () {
     return self._$String().$withAll$($con);
    });
   };
   this.$newCollectionOfSize$ = function ($n) {
    let self = this;
    return self._$String().$new$($n);
   };
   this.$next$ = function ($nElements) {
    let self = this;
    let $con = nil;
    $con = self.$super$Streams$CharacterInput$slot._$next$.call(self, $nElements);
    return $con.$isString().$ifTrue$ifFalse$(function () {
     return $con;
    }, function () {
     return self._$String().$withAll$($con);
    });
   };
   this.$upTo$ = function ($o) {
    let self = this;
    let $con = nil;
    $con = self.$super$Streams$CharacterInput$slot._$upTo$.call(self, $o);
    return $con.$isString().$ifTrue$ifFalse$(function () {
     return $con;
    }, function () {
     return self._$String().$withAll$($con);
    });
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`CharacterInput";
     this._$superInit$Streams$CharacterInput = $.$superInit$Streams$CharacterInput;
     this.$superInit$Streams$CharacterInput = dnuCatcher("$superInit$Streams$CharacterInput");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$contentsRemaining = $.$contentsRemaining;
     this.$contentsRemaining = dnuCatcher("$contentsRemaining");
     this._$newCollectionOfSize$ = $.$newCollectionOfSize$;
     this.$newCollectionOfSize$ = dnuCatcher("$newCollectionOfSize$");
     this._$next$ = $.$next$;
     this.$next$ = dnuCatcher("$next$");
     this._$upTo$ = $.$upTo$;
     this.$upTo$ = dnuCatcher("$upTo$");
     this.$enclosingObjects$Streams$CharacterInput = enclosingObjects;
     this.$super$Streams$CharacterInput$slot = runtimeSuperclass;
     this["Streams`CharacterInput"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Streams`CharacterInput"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Streams`CharacterInput";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`CharacterInput";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Streams$CharacterInput = enclosingObjects;
      this.$super$Streams$CharacterInput$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$CharacterInputConverter = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Streams`CharacterInputConverter";
   this.name = "Streams`CharacterInputConverter";
   this.header = 1101;
   this.slots = [new SM("binaryStream", "protected", true, false)];
   this.methods = [
    new MM("superInit`Streams`CharacterInputConverter", "protected", true, 1102),
    new MM("instance`initializer", "public", true, 1103),
    new MM("actualAtEnd", "protected", false, 1104),
    new MM("actualNext", "protected", false, 1105),
    new MM("close", "protected", false, 1106),
    new MM("initBinaryStream:", "protected", false, 1107),
    new MM("upTo:", "protected", false, 1108),
    new MM("init`binaryStream:", "protected", true, 0),
    new MM("binaryStream", "protected", true, 0),
    new MM("binaryStream:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$CharacterInputConverter = function () {
    let self = this;
    self.$super$Streams$CharacterInputConverter$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Streams$CharacterInputConverter();
    return self;
   };
   this.$actualAtEnd = function () {
    let self = this;
    return self._$binaryStream().$atEnd();
   };
   this.$actualNext = function () {
    let self = this;
    let $c = nil;
    $c = self._$Character().$value$(self._$binaryStream().$next());
    if (self.$enclosingObjects$Streams$CharacterInputConverter[0]._$usingCrLfConvention() && $c.$$equal(self._$Character().$cr())) {
     if (!self._$binaryStream().$atEnd()) {
      if (self._$binaryStream().$peek().$$equal(self._$Character().$lf().$asciiValue())) {
       self._$binaryStream().$next();
      };
     };
    };
    return $c;
   };
   this.$close = function () {
    let self = this;
    self._$binaryStream().$close();
    return self;
   };
   this.$initBinaryStream$ = function ($binaryStrm) {
    let self = this;
    self._$binaryStream$($binaryStrm);
    return self;
   };
   this.$upTo$ = function ($del) {
    let self = this;
    let $bytes = nil;
    let $s = nil;
    let $lfs = nil;
    let $j = nil;
    let $delimiter = nil;
    if (self._$havePeeked() && (self._$peek() === $del)) {
     return self.$super$Streams$CharacterInputConverter$slot._$upTo$.call(self, $del);
    };
    $delimiter = self._$Character().$coerce$($del);
    $bytes = self._$binaryStream().$upTo$($delimiter.$asciiValue());
    if (self.$enclosingObjects$Streams$CharacterInputConverter[0]._$usingCrLfConvention()) {
     if ($delimiter === self._$Character().$cr()) {
      if (self._$binaryStream().$atEnd().$not() && (self._$binaryStream().$peek() === 10)) {
       self._$binaryStream().$next();
      };
     };
    } else {
     nil;
    };
    $lfs = 0;
    {
     let $ind = nil;
     let $$limit = nil;
     nil;
     $ind = 1;
     $$limit = $bytes.$size();
     for (; $$limit.$$greater$equal($ind); ) {
      if ($bytes.$at$($ind) === 10) {
       $lfs = $lfs + 1;
      };
      $ind = (1).$$plus($ind);
     };
    };
    if (!self._$havePeeked()) {
     $s = self._$String().$new$($bytes.$size() - $lfs);
     $j = 1;
    } else {
     $s = self._$String().$new$(($bytes.$size() - $lfs) + 1);
     $j = 2;
    };
    $bytes.$do$(function ($b) {
     return ($b === 10).$ifFalse$(function () {
      $s.$at$putUnicode$($j, $b);
      return $j = $j + 1;
     });
    });
    if (self._$havePeeked()) {
     $s.$at$put$(1, self._$next());
    };
    return $s;
   };
   this.$init$binaryStream$ = function (v) {
    this.$binaryStream$slot = v;
    return this;
   };
   this.$binaryStream = function () {
    return this.$binaryStream$slot;
   };
   this.$binaryStream$ = function (v) {
    this.$binaryStream$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`CharacterInputConverter";
     this._$superInit$Streams$CharacterInputConverter = $.$superInit$Streams$CharacterInputConverter;
     this.$superInit$Streams$CharacterInputConverter = dnuCatcher("$superInit$Streams$CharacterInputConverter");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$actualAtEnd = $.$actualAtEnd;
     this.$actualAtEnd = dnuCatcher("$actualAtEnd");
     this._$actualNext = $.$actualNext;
     this.$actualNext = dnuCatcher("$actualNext");
     this._$close = $.$close;
     this.$close = dnuCatcher("$close");
     this._$initBinaryStream$ = $.$initBinaryStream$;
     this.$initBinaryStream$ = dnuCatcher("$initBinaryStream$");
     this._$upTo$ = $.$upTo$;
     this.$upTo$ = dnuCatcher("$upTo$");
     this._$init$binaryStream$ = $.$init$binaryStream$;
     this.$init$binaryStream$ = dnuCatcher("$init$binaryStream$");
     this._$binaryStream = $.$binaryStream;
     this.$binaryStream = dnuCatcher("$binaryStream");
     this._$binaryStream$ = $.$binaryStream$;
     this.$binaryStream$ = dnuCatcher("$binaryStream$");
     this.$enclosingObjects$Streams$CharacterInputConverter = enclosingObjects;
     this.$super$Streams$CharacterInputConverter$slot = runtimeSuperclass;
     this["Streams`CharacterInputConverter"] = function () {
      superBasicNew.call(this);
      this.$binaryStream$slot = nil;
     };
     this.basicNew = this["Streams`CharacterInputConverter"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Streams`CharacterInputConverter";
    this.slots = [];
    this.methods = [
     new MM("new", "public", true, 0),
     new MM("on:", "protected", false, 1109)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.$on$ = function ($binaryStrm) {
     let self = this;
     return self._$new().$initBinaryStream$($binaryStrm);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`CharacterInputConverter";
      this.$new = this._$new = $.$new;
      this._$on$ = $.$on$;
      this.$on$ = dnuCatcher("$on$");
      this.$enclosingObjects$Streams$CharacterInputConverter = enclosingObjects;
      this.$super$Streams$CharacterInputConverter$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$CharacterInputOutputConverter = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Streams`CharacterInputOutputConverter";
   this.name = "Streams`CharacterInputOutputConverter";
   this.header = 1110;
   this.slots = [];
   this.methods = [
    new MM("superInit`Streams`CharacterInputOutputConverter", "protected", true, 1111),
    new MM("instance`initializer", "public", true, 1112),
    new MM("externalFlush", "protected", false, 1113),
    new MM("flush", "public", false, 1114),
    new MM("nextPut:", "public", false, 1115),
    new MM("position", "public", false, 1116),
    new MM("position:", "public", false, 1117),
    new MM("setToEnd", "protected", false, 1118)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$CharacterInputOutputConverter = function () {
    let self = this;
    self.$super$Streams$CharacterInputOutputConverter$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Streams$CharacterInputOutputConverter();
    return self;
   };
   this.$externalFlush = function () {
    let self = this;
    self._$binaryStream().$externalFlush();
    return self;
   };
   this.$flush = function () {
    let self = this;
    self._$binaryStream().$flush();
    return self;
   };
   this.$nextPut$ = function ($c) {
    let self = this;
    self._$binaryStream().$nextPut$($c.$asciiValue());
    if (self.$enclosingObjects$Streams$CharacterInputOutputConverter[0]._$usingCrLfConvention() && $c.$$equal(self._$Character().$cr())) {
     self._$binaryStream().$nextPut$(self._$Character().$lf().$asciiValue());
    };
    return $c;
   };
   this.$position = function () {
    let self = this;
    return self._$binaryStream().$position();
   };
   this.$position$ = function ($i) {
    let self = this;
    self._$binaryStream().$position$($i);
    self._$noPeekVal();
    return self;
   };
   this.$setToEnd = function () {
    let self = this;
    self._$binaryStream().$setToEnd();
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`CharacterInputOutputConverter";
     this._$superInit$Streams$CharacterInputOutputConverter = $.$superInit$Streams$CharacterInputOutputConverter;
     this.$superInit$Streams$CharacterInputOutputConverter = dnuCatcher("$superInit$Streams$CharacterInputOutputConverter");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$externalFlush = $.$externalFlush;
     this.$externalFlush = dnuCatcher("$externalFlush");
     this.$flush = this._$flush = $.$flush;
     this.$nextPut$ = this._$nextPut$ = $.$nextPut$;
     this.$position = this._$position = $.$position;
     this.$position$ = this._$position$ = $.$position$;
     this._$setToEnd = $.$setToEnd;
     this.$setToEnd = dnuCatcher("$setToEnd");
     this.$enclosingObjects$Streams$CharacterInputOutputConverter = enclosingObjects;
     this.$super$Streams$CharacterInputOutputConverter$slot = runtimeSuperclass;
     this["Streams`CharacterInputOutputConverter"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Streams`CharacterInputOutputConverter"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Streams`CharacterInputOutputConverter";
    this.slots = [];
    this.methods = [
     new MM("new", "public", true, 0),
     new MM("on:", "public", false, 1119)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.$on$ = function ($binaryStrm) {
     let self = this;
     return self._$new().$initBinaryStream$($binaryStrm);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`CharacterInputOutputConverter";
      this.$new = this._$new = $.$new;
      this.$on$ = this._$on$ = $.$on$;
      this.$enclosingObjects$Streams$CharacterInputOutputConverter = enclosingObjects;
      this.$super$Streams$CharacterInputOutputConverter$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$CharacterOutput = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Streams`CharacterOutput";
   this.name = "Streams`CharacterOutput";
   this.header = 1120;
   this.slots = [];
   this.methods = [
    new MM("superInit`Streams`CharacterOutput", "protected", true, 1121),
    new MM("instance`initializer", "public", true, 1122),
    new MM("cr", "public", false, 1123),
    new MM("crTab", "public", false, 1124),
    new MM("crTab:", "public", false, 1125),
    new MM("print:", "public", false, 1126),
    new MM("space", "public", false, 1127),
    new MM("tab", "public", false, 1128)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$CharacterOutput = function () {
    let self = this;
    self.$super$Streams$CharacterOutput$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Streams$CharacterOutput();
    return self;
   };
   this.$cr = function () {
    let self = this;
    self._$nextPut$(self._$Character().$cr());
    return self;
   };
   this.$crTab = function () {
    let self = this;
    self._$crTab$(1);
    return self;
   };
   this.$crTab$ = function ($count) {
    let self = this;
    {
     let $$i = nil;
     let $$limit = nil;
     nil;
     $$i = 1;
     $$limit = $count;
     for (; $$limit.$$greater$equal($$i); ) {
      (function (cascadeReceiver) {
       cascadeReceiver.$nextPut$(self._$Character().$cr());
       return cascadeReceiver.$nextPut$(self._$Character().$tab());
      })(self);
      $$i = (1).$$plus($$i);
     };
    };
    return self;
   };
   this.$print$ = function ($o) {
    let self = this;
    $o.$printOn$(self);
    return self;
   };
   this.$space = function () {
    let self = this;
    self._$nextPut$(self._$Character().$space());
    return self;
   };
   this.$tab = function () {
    let self = this;
    self._$nextPut$(self._$Character().$tab());
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`CharacterOutput";
     this._$superInit$Streams$CharacterOutput = $.$superInit$Streams$CharacterOutput;
     this.$superInit$Streams$CharacterOutput = dnuCatcher("$superInit$Streams$CharacterOutput");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$cr = this._$cr = $.$cr;
     this.$crTab = this._$crTab = $.$crTab;
     this.$crTab$ = this._$crTab$ = $.$crTab$;
     this.$print$ = this._$print$ = $.$print$;
     this.$space = this._$space = $.$space;
     this.$tab = this._$tab = $.$tab;
     this.$enclosingObjects$Streams$CharacterOutput = enclosingObjects;
     this.$super$Streams$CharacterOutput$slot = runtimeSuperclass;
     this["Streams`CharacterOutput"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Streams`CharacterOutput"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Streams`CharacterOutput";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`CharacterOutput";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Streams$CharacterOutput = enclosingObjects;
      this.$super$Streams$CharacterOutput$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$CharacterOutputConverter = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Streams`CharacterOutputConverter";
   this.name = "Streams`CharacterOutputConverter";
   this.header = 1129;
   this.slots = [new SM("binaryStream", "protected", true, false)];
   this.methods = [
    new MM("superInit`Streams`CharacterOutputConverter", "protected", true, 1130),
    new MM("instance`initializer", "public", true, 1131),
    new MM("close", "public", false, 1132),
    new MM("externalFlush", "protected", false, 1133),
    new MM("flush", "public", false, 1134),
    new MM("initBinaryStream:", "protected", false, 1135),
    new MM("nextPut:", "public", false, 1136),
    new MM("init`binaryStream:", "protected", true, 0),
    new MM("binaryStream", "protected", true, 0),
    new MM("binaryStream:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$CharacterOutputConverter = function () {
    let self = this;
    self.$super$Streams$CharacterOutputConverter$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Streams$CharacterOutputConverter();
    return self;
   };
   this.$close = function () {
    let self = this;
    self._$binaryStream().$close();
    return self;
   };
   this.$externalFlush = function () {
    let self = this;
    self._$binaryStream().$externalFlush();
    return self;
   };
   this.$flush = function () {
    let self = this;
    self._$binaryStream().$flush();
    return self;
   };
   this.$initBinaryStream$ = function ($binaryStrm) {
    let self = this;
    self._$binaryStream$($binaryStrm);
    return self;
   };
   this.$nextPut$ = function ($c) {
    let self = this;
    self._$binaryStream().$nextPut$($c.$asciiValue());
    if (self.$enclosingObjects$Streams$CharacterOutputConverter[0]._$usingCrLfConvention() && $c.$$equal(self._$Character().$cr())) {
     self._$binaryStream().$nextPut$(self._$Character().$lf().$asciiValue());
    };
    return $c;
   };
   this.$init$binaryStream$ = function (v) {
    this.$binaryStream$slot = v;
    return this;
   };
   this.$binaryStream = function () {
    return this.$binaryStream$slot;
   };
   this.$binaryStream$ = function (v) {
    this.$binaryStream$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`CharacterOutputConverter";
     this._$superInit$Streams$CharacterOutputConverter = $.$superInit$Streams$CharacterOutputConverter;
     this.$superInit$Streams$CharacterOutputConverter = dnuCatcher("$superInit$Streams$CharacterOutputConverter");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$close = this._$close = $.$close;
     this._$externalFlush = $.$externalFlush;
     this.$externalFlush = dnuCatcher("$externalFlush");
     this.$flush = this._$flush = $.$flush;
     this._$initBinaryStream$ = $.$initBinaryStream$;
     this.$initBinaryStream$ = dnuCatcher("$initBinaryStream$");
     this.$nextPut$ = this._$nextPut$ = $.$nextPut$;
     this._$init$binaryStream$ = $.$init$binaryStream$;
     this.$init$binaryStream$ = dnuCatcher("$init$binaryStream$");
     this._$binaryStream = $.$binaryStream;
     this.$binaryStream = dnuCatcher("$binaryStream");
     this._$binaryStream$ = $.$binaryStream$;
     this.$binaryStream$ = dnuCatcher("$binaryStream$");
     this.$enclosingObjects$Streams$CharacterOutputConverter = enclosingObjects;
     this.$super$Streams$CharacterOutputConverter$slot = runtimeSuperclass;
     this["Streams`CharacterOutputConverter"] = function () {
      superBasicNew.call(this);
      this.$binaryStream$slot = nil;
     };
     this.basicNew = this["Streams`CharacterOutputConverter"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Streams`CharacterOutputConverter";
    this.slots = [];
    this.methods = [
     new MM("new", "public", true, 0),
     new MM("on:", "public", false, 1137)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.$on$ = function ($binaryStrm) {
     let self = this;
     return self._$new().$initBinaryStream$($binaryStrm);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`CharacterOutputConverter";
      this.$new = this._$new = $.$new;
      this.$on$ = this._$on$ = $.$on$;
      this.$enclosingObjects$Streams$CharacterOutputConverter = enclosingObjects;
      this.$super$Streams$CharacterOutputConverter$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$CharacterReadConverter = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Streams`CharacterReadConverter";
   this.name = "Streams`CharacterReadConverter";
   this.header = 1138;
   this.slots = [];
   this.methods = [
    new MM("superInit`Streams`CharacterReadConverter", "protected", true, 1139),
    new MM("instance`initializer", "public", true, 1140),
    new MM("numCharsUpToAscii:", "protected", false, 1141),
    new MM("upTo:", "protected", false, 1142)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$CharacterReadConverter = function () {
    let self = this;
    self.$super$Streams$CharacterReadConverter$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Streams$CharacterReadConverter();
    return self;
   };
   this.$numCharsUpToAscii$ = function ($del) {
    let self = this;
    let $n = nil;
    let $sz = nil;
    $n = 0;
    $sz = self._$binaryStream().$size();
    {
     let $i = nil;
     let $$limit = nil;
     nil;
     $i = self._$binaryStream().$position() + 1;
     $$limit = $sz;
     for (; $$limit.$$greater$equal($i); ) {
      let $asc = nil;
      $asc = self._$binaryStream().$repositioningAt$($i);
      if (!(self.$enclosingObjects$Streams$CharacterReadConverter[0]._$usingCrLfConvention() && ($asc === 10))) {
       if ($asc === $del) {
        return $n;
       } else {
        $n = $n + 1;
       };
      };
      $i = (1).$$plus($i);
     };
    };
    return $n;
   };
   this.$upTo$ = function ($del) {
    let self = this;
    let $sz = nil;
    let $s = nil;
    let $lfs = nil;
    let $offset = nil;
    let $delimiter = nil;
    let $pos = nil;
    let $bsize = nil;
    let $i = nil;
    if (self._$havePeeked() && (self._$peek() === $del)) {
     return self.$super$Streams$CharacterReadConverter$slot._$upTo$.call(self, $del);
    };
    $delimiter = self._$Character().$coerce$($del).$asciiValue();
    $pos = self._$binaryStream().$position();
    $sz = self._$numCharsUpToAscii$($delimiter);
    if (!self._$havePeeked()) {
     $s = self._$String().$new$($sz);
     $offset = 0;
    } else {
     $s = self._$String().$new$($sz + 1);
     $s.$at$put$(1, self._$next());
     $offset = 1;
    };
    $pos = $pos + 1;
    $i = 1;
    {
     for (; $i.$$less$equal($sz); ) {
      let $code = nil;
      $code = self._$binaryStream().$repositioningAt$($pos);
      $s.$at$putUnicode$($i + $offset, $code);
      $i = $i + 1;
      if (($code === 13) && self.$enclosingObjects$Streams$CharacterReadConverter[0]._$usingCrLfConvention()) {
       $pos = $pos + 1;
      };
      $pos = $pos + 1;
     };
    };
    self._$binaryStream().$position$($pos - 1);
    if (!self._$binaryStream().$atEnd()) {
     self._$binaryStream().$next();
    };
    return $s;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`CharacterReadConverter";
     this._$superInit$Streams$CharacterReadConverter = $.$superInit$Streams$CharacterReadConverter;
     this.$superInit$Streams$CharacterReadConverter = dnuCatcher("$superInit$Streams$CharacterReadConverter");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$numCharsUpToAscii$ = $.$numCharsUpToAscii$;
     this.$numCharsUpToAscii$ = dnuCatcher("$numCharsUpToAscii$");
     this._$upTo$ = $.$upTo$;
     this.$upTo$ = dnuCatcher("$upTo$");
     this.$enclosingObjects$Streams$CharacterReadConverter = enclosingObjects;
     this.$super$Streams$CharacterReadConverter$slot = runtimeSuperclass;
     this["Streams`CharacterReadConverter"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Streams`CharacterReadConverter"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Streams`CharacterReadConverter";
    this.slots = [];
    this.methods = [
     new MM("new", "public", true, 0),
     new MM("on:", "public", false, 1143)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.$on$ = function ($binaryStrm) {
     let self = this;
     return self._$new().$initBinaryStream$($binaryStrm);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`CharacterReadConverter";
      this.$new = this._$new = $.$new;
      this.$on$ = this._$on$ = $.$on$;
      this.$enclosingObjects$Streams$CharacterReadConverter = enclosingObjects;
      this.$super$Streams$CharacterReadConverter$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$ExternalInputStream = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Streams`ExternalInputStream";
   this.name = "Streams`ExternalInputStream";
   this.header = 1144;
   this.slots = [];
   this.methods = [
    new MM("superInit`Streams`ExternalInputStream", "protected", true, 1145),
    new MM("instance`initializer", "public", true, 1146),
    new MM("actualAtEnd", "protected", false, 1147),
    new MM("actualNext", "protected", false, 1148),
    new MM("arrangeForFinalization", "protected", false, 1149),
    new MM("atEnd", "protected", false, 1150),
    new MM("close", "public", false, 1151),
    new MM("fillBuffer", "protected", false, 1152),
    new MM("initDescriptor:", "public", false, 1153),
    new MM("newCollectionOfSize:", "protected", false, 1154),
    new MM("next", "public", false, 1155),
    new MM("peek", "protected", false, 1156),
    new MM("peekIfAbsent:", "protected", false, 1157)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$ExternalInputStream = function () {
    let self = this;
    self.$super$Streams$ExternalInputStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Streams$ExternalInputStream();
    return self;
   };
   this.$actualAtEnd = function () {
    let self = this;
    return self._$nextBufferPosition().$$greater$equal(self._$bufferNumElements());
   };
   this.$actualNext = function () {
    let self = this;
    let $pos = nil;
    let $byte = nil;
    if (self._$actualAtEnd()) {
     self._$error$("attempt to read past the end of an external stream");
    };
    $pos = self._$nextBufferPosition();
    $byte = self._$buffer().$unsignedByteAt$($pos + 1);
    $pos = $pos + 1;
    if (!$pos.$$greater$equal(self._$bufferSize())) {
     self._$nextBufferPosition$($pos);
    } else {
     self._$advanceBuffer();
    };
    return $byte;
   };
   this.$arrangeForFinalization = function () {
    let self = this;
    return self;
   };
   this.$atEnd = function () {
    let self = this;
    return self._$actualAtEnd();
   };
   this.$close = function () {
    let self = this;
    self._$doClose();
    return self;
   };
   this.$fillBuffer = function () {
    let self = this;
    self._$bufferNumElements$(self._$descriptor().$readAt$ifFail$(self._$bufferOrigin(), function ($err) {
     return self._$error$($err);
    }));
    return self;
   };
   this.$initDescriptor$ = function ($d) {
    let self = this;
    "ACCESSBOGUS";
    self.$super$Streams$ExternalInputStream$slot._$initDescriptor$.call(self, $d);
    self._$fillBuffer();
    return self;
   };
   this.$newCollectionOfSize$ = function ($n) {
    let self = this;
    return self._$ByteArray().$new$($n);
   };
   this.$next = function () {
    let self = this;
    return self._$actualNext();
   };
   this.$peek = function () {
    let self = this;
    self._$assert$message$(function () {
     return self._$atEnd().$not();
    }, "Can't peak past the end of the stream");
    return self._$buffer().$unsignedByteAt$(self._$nextBufferPosition() + 1);
   };
   this.$peekIfAbsent$ = function ($f) {
    let self = this;
    return self._$atEnd().$ifTrue$ifFalse$(function () {
     return $f.$value();
    }, function () {
     return self._$buffer().$byteAt$(self._$nextBufferPosition());
    });
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`ExternalInputStream";
     this._$superInit$Streams$ExternalInputStream = $.$superInit$Streams$ExternalInputStream;
     this.$superInit$Streams$ExternalInputStream = dnuCatcher("$superInit$Streams$ExternalInputStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$actualAtEnd = $.$actualAtEnd;
     this.$actualAtEnd = dnuCatcher("$actualAtEnd");
     this._$actualNext = $.$actualNext;
     this.$actualNext = dnuCatcher("$actualNext");
     this._$arrangeForFinalization = $.$arrangeForFinalization;
     this.$arrangeForFinalization = dnuCatcher("$arrangeForFinalization");
     this._$atEnd = $.$atEnd;
     this.$atEnd = dnuCatcher("$atEnd");
     this.$close = this._$close = $.$close;
     this._$fillBuffer = $.$fillBuffer;
     this.$fillBuffer = dnuCatcher("$fillBuffer");
     this.$initDescriptor$ = this._$initDescriptor$ = $.$initDescriptor$;
     this._$newCollectionOfSize$ = $.$newCollectionOfSize$;
     this.$newCollectionOfSize$ = dnuCatcher("$newCollectionOfSize$");
     this.$next = this._$next = $.$next;
     this._$peek = $.$peek;
     this.$peek = dnuCatcher("$peek");
     this._$peekIfAbsent$ = $.$peekIfAbsent$;
     this.$peekIfAbsent$ = dnuCatcher("$peekIfAbsent$");
     this.$enclosingObjects$Streams$ExternalInputStream = enclosingObjects;
     this.$super$Streams$ExternalInputStream$slot = runtimeSuperclass;
     this["Streams`ExternalInputStream"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Streams`ExternalInputStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Streams`ExternalInputStream";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`ExternalInputStream";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Streams$ExternalInputStream = enclosingObjects;
      this.$super$Streams$ExternalInputStream$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$ExternalOutputStream = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Streams`ExternalOutputStream";
   this.name = "Streams`ExternalOutputStream";
   this.header = 1158;
   this.slots = [new SM("dirty", "protected", true, false)];
   this.methods = [
    new MM("superInit`Streams`ExternalOutputStream", "protected", true, 1159),
    new MM("instance`initializer", "public", true, 1160),
    new MM("advanceBufferLocation", "protected", false, 1161),
    new MM("arrangeForFinalization", "protected", false, 1162),
    new MM("close", "public", false, 1163),
    new MM("externalFlush", "protected", false, 1164),
    new MM("finalize", "protected", false, 1165),
    new MM("flush", "public", false, 1166),
    new MM("logicalFlush", "protected", false, 1167),
    new MM("nextPut:", "public", false, 1168),
    new MM("updateBufferLocationAfterFlush", "protected", false, 1169),
    new MM("writeBuffer", "public", false, 1170),
    new MM("init`dirty:", "protected", true, 0),
    new MM("dirty", "protected", true, 0),
    new MM("dirty:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$ExternalOutputStream = function () {
    let self = this;
    self.$super$Streams$ExternalOutputStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Streams$ExternalOutputStream();
    self._$init$dirty$(false);
    return self;
   };
   this.$advanceBufferLocation = function () {
    let self = this;
    (function (cascadeReceiver) {
     cascadeReceiver.$bufferOrigin$(self._$bufferOrigin() + self._$bufferNumElements());
     cascadeReceiver.$nextBufferPosition$(0);
     return cascadeReceiver.$bufferNumElements$(0);
    })(self);
    return self;
   };
   this.$arrangeForFinalization = function () {
    let self = this;
    return self;
   };
   this.$close = function () {
    let self = this;
    self._$flush();
    self.$super$Streams$ExternalOutputStream$slot._$close.call(self);
    return self;
   };
   this.$externalFlush = function () {
    let self = this;
    self._$flush();
    self._$descriptor().$flushIfFail$(function ($err) {
     return self._$error$($err);
    });
    return self;
   };
   this.$finalize = function () {
    let self = this;
    self._$close();
    return self;
   };
   this.$flush = function () {
    let self = this;
    if (self._$dirty()) {
     if (self._$bufferNumElements() > 0) {
      (function (cascadeReceiver) {
       cascadeReceiver.$writeBuffer();
       return cascadeReceiver.$updateBufferLocationAfterFlush();
      })(self);
     };
     self._$dirty$(false);
    };
    return self;
   };
   this.$logicalFlush = function () {
    let self = this;
    if (self._$dirty()) {
     if (self._$bufferNumElements() > 0) {
      (function (cascadeReceiver) {
       cascadeReceiver.$writeBuffer();
       return cascadeReceiver.$updateBufferLocationAfterFlush();
      })(self);
     };
     self._$dirty$(false);
    };
    return self;
   };
   this.$nextPut$ = function ($byte) {
    let self = this;
    let $pos = nil;
    $pos = self._$nextBufferPosition();
    self._$buffer().$unsignedByteAt$put$($pos + 1, $byte);
    $pos = $pos + 1;
    (function (cascadeReceiver) {
     cascadeReceiver.$nextBufferPosition$($pos);
     return cascadeReceiver.$bufferNumElements$($pos.$max$(self._$bufferNumElements()));
    })(self);
    if ($pos.$$greater$equal(self._$bufferSize())) {
     (function (cascadeReceiver) {
      cascadeReceiver.$writeBuffer();
      cascadeReceiver.$advanceBuffer();
      return cascadeReceiver.$dirty$(false);
     })(self);
    } else {
     self._$dirty$(true);
    };
    return $byte;
   };
   this.$updateBufferLocationAfterFlush = function () {
    let self = this;
    self._$advanceBufferLocation();
    return self;
   };
   this.$writeBuffer = function () {
    let self = this;
    self._$descriptor().$write$at$ifFail$(self._$bufferNumElements(), self._$bufferOrigin(), function ($err) {
     return self._$error$($err);
    });
    return self;
   };
   this.$init$dirty$ = function (v) {
    this.$dirty$slot = v;
    return this;
   };
   this.$dirty = function () {
    return this.$dirty$slot;
   };
   this.$dirty$ = function (v) {
    this.$dirty$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`ExternalOutputStream";
     this._$superInit$Streams$ExternalOutputStream = $.$superInit$Streams$ExternalOutputStream;
     this.$superInit$Streams$ExternalOutputStream = dnuCatcher("$superInit$Streams$ExternalOutputStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$advanceBufferLocation = $.$advanceBufferLocation;
     this.$advanceBufferLocation = dnuCatcher("$advanceBufferLocation");
     this._$arrangeForFinalization = $.$arrangeForFinalization;
     this.$arrangeForFinalization = dnuCatcher("$arrangeForFinalization");
     this.$close = this._$close = $.$close;
     this._$externalFlush = $.$externalFlush;
     this.$externalFlush = dnuCatcher("$externalFlush");
     this._$finalize = $.$finalize;
     this.$finalize = dnuCatcher("$finalize");
     this.$flush = this._$flush = $.$flush;
     this._$logicalFlush = $.$logicalFlush;
     this.$logicalFlush = dnuCatcher("$logicalFlush");
     this.$nextPut$ = this._$nextPut$ = $.$nextPut$;
     this._$updateBufferLocationAfterFlush = $.$updateBufferLocationAfterFlush;
     this.$updateBufferLocationAfterFlush = dnuCatcher("$updateBufferLocationAfterFlush");
     this.$writeBuffer = this._$writeBuffer = $.$writeBuffer;
     this._$init$dirty$ = $.$init$dirty$;
     this.$init$dirty$ = dnuCatcher("$init$dirty$");
     this._$dirty = $.$dirty;
     this.$dirty = dnuCatcher("$dirty");
     this._$dirty$ = $.$dirty$;
     this.$dirty$ = dnuCatcher("$dirty$");
     this.$enclosingObjects$Streams$ExternalOutputStream = enclosingObjects;
     this.$super$Streams$ExternalOutputStream$slot = runtimeSuperclass;
     this["Streams`ExternalOutputStream"] = function () {
      superBasicNew.call(this);
      this.$dirty$slot = nil;
     };
     this.basicNew = this["Streams`ExternalOutputStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Streams`ExternalOutputStream";
    this.slots = [];
    this.methods = [
     new MM("new", "public", true, 0),
     new MM("onDescriptor:", "public", false, 1171)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.$onDescriptor$ = function ($d) {
     let self = this;
     return self._$new().$initDescriptor$($d);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`ExternalOutputStream";
      this.$new = this._$new = $.$new;
      this.$onDescriptor$ = this._$onDescriptor$ = $.$onDescriptor$;
      this.$enclosingObjects$Streams$ExternalOutputStream = enclosingObjects;
      this.$super$Streams$ExternalOutputStream$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$ExternalReadStream = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Streams`ExternalReadStream";
   this.name = "Streams`ExternalReadStream";
   this.header = 1172;
   this.slots = [];
   this.methods = [
    new MM("superInit`Streams`ExternalReadStream", "protected", true, 1173),
    new MM("instance`initializer", "public", true, 1174),
    new MM("actualAtEnd", "protected", false, 1175),
    new MM("actualPosition", "protected", false, 1176),
    new MM("actualPosition:", "protected", false, 1177),
    new MM("at:", "protected", false, 1178),
    new MM("goodBufferOriginForPosition:", "protected", false, 1179),
    new MM("initializeActualPosition", "protected", false, 1180),
    new MM("repositioningAt:", "protected", false, 1181),
    new MM("size", "public", false, 1182),
    new MM("writeIfNeededBeforePositionChange", "protected", false, 1183)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$ExternalReadStream = function () {
    let self = this;
    self.$super$Streams$ExternalReadStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Streams$ExternalReadStream();
    return self;
   };
   this.$actualAtEnd = function () {
    let self = this;
    return self._$nextBufferPosition().$$greater$equal(self._$bufferNumElements());
   };
   this.$actualPosition = function () {
    let self = this;
    return self._$bufferOrigin() + self._$nextBufferPosition();
   };
   this.$actualPosition$ = function ($p) {
    let self = this;
    let $bufPos = nil;
    $bufPos = $p - self._$bufferOrigin();
    if (($bufPos >= 0) && $bufPos.$$less(self._$bufferNumElements())) {
     self._$nextBufferPosition$($bufPos);
    } else {
     self._$assert$message$(function () {
      return $p.$between$and$(0, self._$size());
     }, "");
     self._$writeIfNeededBeforePositionChange();
     self._$bufferOrigin$(self._$goodBufferOriginForPosition$($p));
     self._$descriptor().$position$(self._$bufferOrigin());
     self._$fillBuffer();
     self._$nextBufferPosition$($p - self._$bufferOrigin());
    };
    return self;
   };
   this.$at$ = function ($index) {
    let self = this;
    let $i = nil;
    $i = $index - self._$bufferOrigin();
    return (($i < 1) || $i.$$greater(self._$bufferNumElements())).$ifFalse$ifTrue$(function () {
     return self._$buffer().$byteAt$($i - 1);
    }, function () {
     let $pos = nil;
     let $result = nil;
     $pos = self._$position();
     self._$position$($index - 1);
     $result = self._$at$($index);
     self._$position$($pos);
     return $result;
    });
   };
   this.$goodBufferOriginForPosition$ = function ($nextPos) {
    let self = this;
    return $nextPos - $nextPos.$$back$back(self._$bufferSize());
   };
   this.$initializeActualPosition = function () {
    let self = this;
    return self;
   };
   this.$repositioningAt$ = function ($index) {
    let self = this;
    let $i = nil;
    $i = $index - self._$bufferOrigin();
    return (($i < 1) || $i.$$greater(self._$bufferNumElements())).$ifFalse$ifTrue$(function () {
     return self._$buffer().$byteAt$($i - 1);
    }, function () {
     self._$position$($index - 1);
     return self._$at$($index);
    });
   };
   this.$size = function () {
    let self = this;
    return self._$descriptor().$size();
   };
   this.$writeIfNeededBeforePositionChange = function () {
    let self = this;
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`ExternalReadStream";
     this._$superInit$Streams$ExternalReadStream = $.$superInit$Streams$ExternalReadStream;
     this.$superInit$Streams$ExternalReadStream = dnuCatcher("$superInit$Streams$ExternalReadStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$actualAtEnd = $.$actualAtEnd;
     this.$actualAtEnd = dnuCatcher("$actualAtEnd");
     this._$actualPosition = $.$actualPosition;
     this.$actualPosition = dnuCatcher("$actualPosition");
     this._$actualPosition$ = $.$actualPosition$;
     this.$actualPosition$ = dnuCatcher("$actualPosition$");
     this._$at$ = $.$at$;
     this.$at$ = dnuCatcher("$at$");
     this._$goodBufferOriginForPosition$ = $.$goodBufferOriginForPosition$;
     this.$goodBufferOriginForPosition$ = dnuCatcher("$goodBufferOriginForPosition$");
     this._$initializeActualPosition = $.$initializeActualPosition;
     this.$initializeActualPosition = dnuCatcher("$initializeActualPosition");
     this._$repositioningAt$ = $.$repositioningAt$;
     this.$repositioningAt$ = dnuCatcher("$repositioningAt$");
     this.$size = this._$size = $.$size;
     this._$writeIfNeededBeforePositionChange = $.$writeIfNeededBeforePositionChange;
     this.$writeIfNeededBeforePositionChange = dnuCatcher("$writeIfNeededBeforePositionChange");
     this.$enclosingObjects$Streams$ExternalReadStream = enclosingObjects;
     this.$super$Streams$ExternalReadStream$slot = runtimeSuperclass;
     this["Streams`ExternalReadStream"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Streams`ExternalReadStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Streams`ExternalReadStream";
    this.slots = [];
    this.methods = [
     new MM("new", "public", true, 0),
     new MM("onDescriptor:", "public", false, 1184)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.$onDescriptor$ = function ($d) {
     let self = this;
     return self._$new().$initDescriptor$($d);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`ExternalReadStream";
      this.$new = this._$new = $.$new;
      this.$onDescriptor$ = this._$onDescriptor$ = $.$onDescriptor$;
      this.$enclosingObjects$Streams$ExternalReadStream = enclosingObjects;
      this.$super$Streams$ExternalReadStream$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$ExternalReadWriteStream = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Streams`ExternalReadWriteStream";
   this.name = "Streams`ExternalReadWriteStream";
   this.header = 1185;
   this.slots = [];
   this.methods = [
    new MM("superInit`Streams`ExternalReadWriteStream", "protected", true, 1186),
    new MM("instance`initializer", "public", true, 1187),
    new MM("contents", "public", false, 1188),
    new MM("contentsWritten", "protected", false, 1189),
    new MM("size", "public", false, 1190),
    new MM("updateBufferLocationAfterFlush", "public", false, 1191),
    new MM("writeIfNeededBeforePositionChange", "protected", false, 1192)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$ExternalReadWriteStream = function () {
    let self = this;
    self.$super$Streams$ExternalReadWriteStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Streams$ExternalReadWriteStream();
    return self;
   };
   this.$contents = function () {
    let self = this;
    return self._$collection();
   };
   this.$contentsWritten = function () {
    let self = this;
    let $cltn = nil;
    let $origPos = nil;
    $cltn = self._$newCollectionOfSize$(self._$position());
    $origPos = self._$position();
    self._$position$(0);
    {
     let $i = nil;
     let $$limit = nil;
     nil;
     $i = 1;
     $$limit = $origPos;
     for (; $$limit.$$greater$equal($i); ) {
      $cltn.$at$put$($i, self._$next());
      $i = (1).$$plus($i);
     };
    };
    self._$position$($origPos);
    return $cltn;
   };
   this.$size = function () {
    let self = this;
    self._$flush();
    return self.$super$Streams$ExternalReadWriteStream$slot._$size.call(self);
   };
   this.$updateBufferLocationAfterFlush = function () {
    let self = this;
    "ACCESSBOGUS";
    return self;
   };
   this.$writeIfNeededBeforePositionChange = function () {
    let self = this;
    if (self._$dirty()) {
     (function (cascadeReceiver) {
      cascadeReceiver.$writeBuffer();
      return cascadeReceiver.$dirty$(false);
     })(self);
    };
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`ExternalReadWriteStream";
     this._$superInit$Streams$ExternalReadWriteStream = $.$superInit$Streams$ExternalReadWriteStream;
     this.$superInit$Streams$ExternalReadWriteStream = dnuCatcher("$superInit$Streams$ExternalReadWriteStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$contents = this._$contents = $.$contents;
     this._$contentsWritten = $.$contentsWritten;
     this.$contentsWritten = dnuCatcher("$contentsWritten");
     this.$size = this._$size = $.$size;
     this.$updateBufferLocationAfterFlush = this._$updateBufferLocationAfterFlush = $.$updateBufferLocationAfterFlush;
     this._$writeIfNeededBeforePositionChange = $.$writeIfNeededBeforePositionChange;
     this.$writeIfNeededBeforePositionChange = dnuCatcher("$writeIfNeededBeforePositionChange");
     this.$enclosingObjects$Streams$ExternalReadWriteStream = enclosingObjects;
     this.$super$Streams$ExternalReadWriteStream$slot = runtimeSuperclass;
     this["Streams`ExternalReadWriteStream"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Streams`ExternalReadWriteStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Streams`ExternalReadWriteStream";
    this.slots = [];
    this.methods = [
     new MM("new", "public", true, 0),
     new MM("onDescriptor:", "public", false, 1193)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.$onDescriptor$ = function ($d) {
     let self = this;
     return self._$new().$initDescriptor$($d);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`ExternalReadWriteStream";
      this.$new = this._$new = $.$new;
      this.$onDescriptor$ = this._$onDescriptor$ = $.$onDescriptor$;
      this.$enclosingObjects$Streams$ExternalReadWriteStream = enclosingObjects;
      this.$super$Streams$ExternalReadWriteStream$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$ExternalStream = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Streams`ExternalStream";
   this.name = "Streams`ExternalStream";
   this.header = 1194;
   this.slots = [
    new SM("descriptor", "protected", true, false),
    new SM("buffer", "protected", true, false),
    new SM("bufferSize", "protected", true, false),
    new SM("bufferOrigin", "protected", true, false),
    new SM("nextBufferPosition", "public", true, false),
    new SM("bufferNumElements", "public", true, false)
   ];
   this.methods = [
    new MM("superInit`Streams`ExternalStream", "protected", true, 1195),
    new MM("instance`initializer", "public", true, 1196),
    new MM("advanceBuffer", "protected", false, 1197),
    new MM("arrangeForFinalization", "protected", false, 1198),
    new MM("close", "public", false, 1199),
    new MM("doClose", "protected", false, 1200),
    new MM("fillBuffer", "protected", false, 1201),
    new MM("initBuffer", "protected", false, 1202),
    new MM("initDescriptor:", "protected", false, 1203),
    new MM("postCopy", "protected", false, 1204),
    new MM("init`descriptor:", "protected", true, 0),
    new MM("descriptor", "protected", true, 0),
    new MM("descriptor:", "protected", true, 0),
    new MM("init`buffer:", "protected", true, 0),
    new MM("buffer", "protected", true, 0),
    new MM("buffer:", "protected", true, 0),
    new MM("init`bufferSize:", "protected", true, 0),
    new MM("bufferSize", "protected", true, 0),
    new MM("bufferSize:", "protected", true, 0),
    new MM("init`bufferOrigin:", "protected", true, 0),
    new MM("bufferOrigin", "protected", true, 0),
    new MM("bufferOrigin:", "protected", true, 0),
    new MM("init`nextBufferPosition:", "public", true, 0),
    new MM("nextBufferPosition", "public", true, 0),
    new MM("nextBufferPosition:", "public", true, 0),
    new MM("init`bufferNumElements:", "public", true, 0),
    new MM("bufferNumElements", "public", true, 0),
    new MM("bufferNumElements:", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$ExternalStream = function () {
    let self = this;
    self.$super$Streams$ExternalStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Streams$ExternalStream();
    return self;
   };
   this.$advanceBuffer = function () {
    let self = this;
    self._$bufferOrigin$(self._$bufferOrigin() + self._$bufferSize());
    self._$fillBuffer();
    self._$nextBufferPosition$(0);
    return self;
   };
   this.$arrangeForFinalization = function () {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$close = function () {
    let self = this;
    self._$doClose();
    return self;
   };
   this.$doClose = function () {
    let self = this;
    self._$descriptor().$close();
    self._$buffer$(nil);
    return self;
   };
   this.$fillBuffer = function () {
    let self = this;
    self._$bufferNumElements$(0);
    return self;
   };
   this.$initBuffer = function () {
    let self = this;
    self._$buffer$(self._$descriptor().$buffer());
    self._$bufferSize$(self._$descriptor().$bufferSize());
    self._$arrangeForFinalization();
    return self;
   };
   this.$initDescriptor$ = function ($d) {
    let self = this;
    self._$descriptor$($d);
    self._$initBuffer();
    self._$bufferOrigin$(0);
    self._$bufferNumElements$(0);
    self._$nextBufferPosition$(0);
    return self;
   };
   this.$postCopy = function () {
    let self = this;
    self.$super$Streams$ExternalStream$slot._$postCopy.call(self);
    self._$descriptor$(self._$descriptor().$copy());
    self._$initBuffer();
    return self;
   };
   this.$init$descriptor$ = function (v) {
    this.$descriptor$slot = v;
    return this;
   };
   this.$descriptor = function () {
    return this.$descriptor$slot;
   };
   this.$descriptor$ = function (v) {
    this.$descriptor$slot = v;
    return this;
   };
   this.$init$buffer$ = function (v) {
    this.$buffer$slot = v;
    return this;
   };
   this.$buffer = function () {
    return this.$buffer$slot;
   };
   this.$buffer$ = function (v) {
    this.$buffer$slot = v;
    return this;
   };
   this.$init$bufferSize$ = function (v) {
    this.$bufferSize$slot = v;
    return this;
   };
   this.$bufferSize = function () {
    return this.$bufferSize$slot;
   };
   this.$bufferSize$ = function (v) {
    this.$bufferSize$slot = v;
    return this;
   };
   this.$init$bufferOrigin$ = function (v) {
    this.$bufferOrigin$slot = v;
    return this;
   };
   this.$bufferOrigin = function () {
    return this.$bufferOrigin$slot;
   };
   this.$bufferOrigin$ = function (v) {
    this.$bufferOrigin$slot = v;
    return this;
   };
   this.$init$nextBufferPosition$ = function (v) {
    this.$nextBufferPosition$slot = v;
    return this;
   };
   this.$nextBufferPosition = function () {
    return this.$nextBufferPosition$slot;
   };
   this.$nextBufferPosition$ = function (v) {
    this.$nextBufferPosition$slot = v;
    return this;
   };
   this.$init$bufferNumElements$ = function (v) {
    this.$bufferNumElements$slot = v;
    return this;
   };
   this.$bufferNumElements = function () {
    return this.$bufferNumElements$slot;
   };
   this.$bufferNumElements$ = function (v) {
    this.$bufferNumElements$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`ExternalStream";
     this._$superInit$Streams$ExternalStream = $.$superInit$Streams$ExternalStream;
     this.$superInit$Streams$ExternalStream = dnuCatcher("$superInit$Streams$ExternalStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$advanceBuffer = $.$advanceBuffer;
     this.$advanceBuffer = dnuCatcher("$advanceBuffer");
     this._$arrangeForFinalization = $.$arrangeForFinalization;
     this.$arrangeForFinalization = dnuCatcher("$arrangeForFinalization");
     this.$close = this._$close = $.$close;
     this._$doClose = $.$doClose;
     this.$doClose = dnuCatcher("$doClose");
     this._$fillBuffer = $.$fillBuffer;
     this.$fillBuffer = dnuCatcher("$fillBuffer");
     this._$initBuffer = $.$initBuffer;
     this.$initBuffer = dnuCatcher("$initBuffer");
     this._$initDescriptor$ = $.$initDescriptor$;
     this.$initDescriptor$ = dnuCatcher("$initDescriptor$");
     this._$postCopy = $.$postCopy;
     this.$postCopy = dnuCatcher("$postCopy");
     this._$init$descriptor$ = $.$init$descriptor$;
     this.$init$descriptor$ = dnuCatcher("$init$descriptor$");
     this._$descriptor = $.$descriptor;
     this.$descriptor = dnuCatcher("$descriptor");
     this._$descriptor$ = $.$descriptor$;
     this.$descriptor$ = dnuCatcher("$descriptor$");
     this._$init$buffer$ = $.$init$buffer$;
     this.$init$buffer$ = dnuCatcher("$init$buffer$");
     this._$buffer = $.$buffer;
     this.$buffer = dnuCatcher("$buffer");
     this._$buffer$ = $.$buffer$;
     this.$buffer$ = dnuCatcher("$buffer$");
     this._$init$bufferSize$ = $.$init$bufferSize$;
     this.$init$bufferSize$ = dnuCatcher("$init$bufferSize$");
     this._$bufferSize = $.$bufferSize;
     this.$bufferSize = dnuCatcher("$bufferSize");
     this._$bufferSize$ = $.$bufferSize$;
     this.$bufferSize$ = dnuCatcher("$bufferSize$");
     this._$init$bufferOrigin$ = $.$init$bufferOrigin$;
     this.$init$bufferOrigin$ = dnuCatcher("$init$bufferOrigin$");
     this._$bufferOrigin = $.$bufferOrigin;
     this.$bufferOrigin = dnuCatcher("$bufferOrigin");
     this._$bufferOrigin$ = $.$bufferOrigin$;
     this.$bufferOrigin$ = dnuCatcher("$bufferOrigin$");
     this.$init$nextBufferPosition$ = this._$init$nextBufferPosition$ = $.$init$nextBufferPosition$;
     this.$nextBufferPosition = this._$nextBufferPosition = $.$nextBufferPosition;
     this.$nextBufferPosition$ = this._$nextBufferPosition$ = $.$nextBufferPosition$;
     this.$init$bufferNumElements$ = this._$init$bufferNumElements$ = $.$init$bufferNumElements$;
     this.$bufferNumElements = this._$bufferNumElements = $.$bufferNumElements;
     this.$bufferNumElements$ = this._$bufferNumElements$ = $.$bufferNumElements$;
     this.$enclosingObjects$Streams$ExternalStream = enclosingObjects;
     this.$super$Streams$ExternalStream$slot = runtimeSuperclass;
     this["Streams`ExternalStream"] = function () {
      superBasicNew.call(this);
      this.$descriptor$slot = nil;
      this.$buffer$slot = nil;
      this.$bufferSize$slot = nil;
      this.$bufferOrigin$slot = nil;
      this.$nextBufferPosition$slot = nil;
      this.$bufferNumElements$slot = nil;
     };
     this.basicNew = this["Streams`ExternalStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Streams`ExternalStream";
    this.slots = [];
    this.methods = [
     new MM("new", "public", true, 0),
     new MM("onDescriptor:", "protected", false, 1205)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.$onDescriptor$ = function ($d) {
     let self = this;
     return self._$new().$initDescriptor$($d);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`ExternalStream";
      this.$new = this._$new = $.$new;
      this._$onDescriptor$ = $.$onDescriptor$;
      this.$onDescriptor$ = dnuCatcher("$onDescriptor$");
      this.$enclosingObjects$Streams$ExternalStream = enclosingObjects;
      this.$super$Streams$ExternalStream$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$SeqCltnReadStream = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Streams`SeqCltnReadStream";
   this.name = "Streams`SeqCltnReadStream";
   this.header = 1206;
   this.slots = [new SM("collection", "protected", true, false)];
   this.methods = [
    new MM("superInit`Streams`SeqCltnReadStream", "protected", true, 1207),
    new MM("instance`initializer", "public", true, 1208),
    new MM("accumulateUntil:", "protected", false, 1209),
    new MM("actualNext", "public", false, 1210),
    new MM("at:", "protected", false, 1211),
    new MM("atEnd", "public", false, 1212),
    new MM("initCollection:", "public", false, 1213),
    new MM("next", "public", false, 1214),
    new MM("nextFromPeek", "protected", false, 1215),
    new MM("nextIfAbsent:", "public", false, 1216),
    new MM("peek", "public", false, 1217),
    new MM("peekIfAbsent:", "protected", false, 1218),
    new MM("peekVal", "protected", false, 1219),
    new MM("position:", "public", false, 1220),
    new MM("printOn:", "public", false, 1221),
    new MM("size", "public", false, 1222),
    new MM("init`collection:", "protected", true, 0),
    new MM("collection", "protected", true, 0),
    new MM("collection:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$SeqCltnReadStream = function () {
    let self = this;
    self.$super$Streams$SeqCltnReadStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Streams$SeqCltnReadStream();
    return self;
   };
   this.$accumulateUntil$ = function ($predicate) {
    let self = this;
    let $start = nil;
    $start = self._$position();
    {
     for (; !$predicate.$value(); ) {
      self._$position$(self._$position() + 1);
     };
    };
    return self._$collection().$copyFrom$to$($start + 1, self._$position());
   };
   this.$actualNext = function () {
    let self = this;
    let $pos = nil;
    $pos = self._$actualPosition();
    $pos = $pos + 1;
    if ($pos.$$greater(self._$size())) {
     self._$error$("Attempt to read past the end of a stream");
    };
    self._$actualPosition$($pos);
    return self._$collection().$at$($pos);
   };
   this.$at$ = function ($index) {
    let self = this;
    return self._$collection().$at$($index);
   };
   this.$atEnd = function () {
    let self = this;
    return self._$actualAtEnd();
   };
   this.$initCollection$ = function ($sc) {
    let self = this;
    self._$collection$($sc);
    return self;
   };
   this.$next = function () {
    let self = this;
    return self._$actualNext();
   };
   this.$nextFromPeek = function () {
    let self = this;
    self._$shouldNotHappen();
    return self;
   };
   this.$nextIfAbsent$ = function ($f) {
    let self = this;
    let $pos = nil;
    $pos = self._$actualPosition();
    $pos = $pos + 1;
    if ($pos.$$greater(self._$size())) {
     return $f.$value();
    };
    self._$actualPosition$($pos);
    return self._$collection().$at$($pos);
   };
   this.$peek = function () {
    let self = this;
    let $pos = nil;
    $pos = self._$position();
    $pos = $pos + 1;
    if ($pos.$$greater(self._$size())) {
     self._$error$("Attempt to read past the end of a stream");
    };
    return self._$collection().$at$($pos);
   };
   this.$peekIfAbsent$ = function ($f) {
    let self = this;
    let $pos = nil;
    $pos = self._$position();
    $pos = $pos + 1;
    if ($pos.$$greater(self._$size())) {
     return $f.$value();
    };
    return self._$collection().$at$($pos);
   };
   this.$peekVal = function () {
    let self = this;
    self._$shouldNotHappen();
    return self;
   };
   this.$position$ = function ($p) {
    let self = this;
    self._$actualPosition$($p);
    return self;
   };
   this.$printOn$ = function ($strm) {
    let self = this;
    (function (cascadeReceiver) {
     cascadeReceiver.$nextPutAll$(self._$class().$name());
     cascadeReceiver.$nextPutAll$("(position=");
     cascadeReceiver.$print$(self._$position());
     cascadeReceiver.$nextPutAll$(" collection=");
     cascadeReceiver.$print$(self._$collection());
     return cascadeReceiver.$nextPut$(")");
    })($strm);
    return self;
   };
   this.$size = function () {
    let self = this;
    return self._$collection().$size();
   };
   this.$init$collection$ = function (v) {
    this.$collection$slot = v;
    return this;
   };
   this.$collection = function () {
    return this.$collection$slot;
   };
   this.$collection$ = function (v) {
    this.$collection$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`SeqCltnReadStream";
     this._$superInit$Streams$SeqCltnReadStream = $.$superInit$Streams$SeqCltnReadStream;
     this.$superInit$Streams$SeqCltnReadStream = dnuCatcher("$superInit$Streams$SeqCltnReadStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$accumulateUntil$ = $.$accumulateUntil$;
     this.$accumulateUntil$ = dnuCatcher("$accumulateUntil$");
     this.$actualNext = this._$actualNext = $.$actualNext;
     this._$at$ = $.$at$;
     this.$at$ = dnuCatcher("$at$");
     this.$atEnd = this._$atEnd = $.$atEnd;
     this.$initCollection$ = this._$initCollection$ = $.$initCollection$;
     this.$next = this._$next = $.$next;
     this._$nextFromPeek = $.$nextFromPeek;
     this.$nextFromPeek = dnuCatcher("$nextFromPeek");
     this.$nextIfAbsent$ = this._$nextIfAbsent$ = $.$nextIfAbsent$;
     this.$peek = this._$peek = $.$peek;
     this._$peekIfAbsent$ = $.$peekIfAbsent$;
     this.$peekIfAbsent$ = dnuCatcher("$peekIfAbsent$");
     this._$peekVal = $.$peekVal;
     this.$peekVal = dnuCatcher("$peekVal");
     this.$position$ = this._$position$ = $.$position$;
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this.$size = this._$size = $.$size;
     this._$init$collection$ = $.$init$collection$;
     this.$init$collection$ = dnuCatcher("$init$collection$");
     this._$collection = $.$collection;
     this.$collection = dnuCatcher("$collection");
     this._$collection$ = $.$collection$;
     this.$collection$ = dnuCatcher("$collection$");
     this.$enclosingObjects$Streams$SeqCltnReadStream = enclosingObjects;
     this.$super$Streams$SeqCltnReadStream$slot = runtimeSuperclass;
     this["Streams`SeqCltnReadStream"] = function () {
      superBasicNew.call(this);
      this.$collection$slot = nil;
     };
     this.basicNew = this["Streams`SeqCltnReadStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Streams`SeqCltnReadStream";
    this.slots = [];
    this.methods = [
     new MM("new", "public", true, 0),
     new MM("on:", "public", false, 1223),
     new MM("over:", "protected", false, 1224)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.$on$ = function ($sc) {
     let self = this;
     return self._$over$($sc);
    };
    this.$over$ = function ($sc) {
     let self = this;
     return self._$new().$initCollection$($sc);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`SeqCltnReadStream";
      this.$new = this._$new = $.$new;
      this.$on$ = this._$on$ = $.$on$;
      this._$over$ = $.$over$;
      this.$over$ = dnuCatcher("$over$");
      this.$enclosingObjects$Streams$SeqCltnReadStream = enclosingObjects;
      this.$super$Streams$SeqCltnReadStream$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$SeqCltnReadWriteStream = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Streams`SeqCltnReadWriteStream";
   this.name = "Streams`SeqCltnReadWriteStream";
   this.header = 1225;
   this.slots = [new SM("buffer", "protected", true, false)];
   this.methods = [
    new MM("superInit`Streams`SeqCltnReadWriteStream", "protected", true, 1226),
    new MM("instance`initializer", "public", true, 1227),
    new MM("accumulateUntil:", "protected", false, 1228),
    new MM("actualNext", "protected", false, 1229),
    new MM("at:", "protected", false, 1230),
    new MM("atEnd", "public", false, 1231),
    new MM("collection", "protected", false, 1232),
    new MM("contents", "public", false, 1233),
    new MM("initBuffer:", "public", false, 1234),
    new MM("next", "protected", false, 1235),
    new MM("nextFromPeek", "protected", false, 1236),
    new MM("nextIfAbsent:", "public", false, 1237),
    new MM("nextPut:", "protected", false, 1238),
    new MM("peek", "protected", false, 1239),
    new MM("peekIfAbsent:", "protected", false, 1240),
    new MM("peekVal", "protected", false, 1241),
    new MM("position:", "protected", false, 1242),
    new MM("printOn:", "public", false, 1243),
    new MM("init`buffer:", "protected", true, 0),
    new MM("buffer", "protected", true, 0),
    new MM("buffer:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$SeqCltnReadWriteStream = function () {
    let self = this;
    self.$super$Streams$SeqCltnReadWriteStream$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Streams$SeqCltnReadWriteStream();
    return self;
   };
   this.$accumulateUntil$ = function ($predicate) {
    let self = this;
    let $start = nil;
    $start = self._$position();
    {
     for (; !$predicate.$value(); ) {
      self._$position$(self._$position() + 1);
     };
    };
    return self._$buffer().$copyFrom$to$($start + 1, self._$position());
   };
   this.$actualNext = function () {
    let self = this;
    let $pos = nil;
    $pos = self._$actualPosition();
    $pos = $pos + 1;
    if ($pos.$$greater(self._$size())) {
     self._$error$("Attempt to read past the end of a stream");
    };
    self._$actualPosition$($pos);
    return self._$buffer().$at$($pos);
   };
   this.$at$ = function ($index) {
    let self = this;
    self._$assert$(function () {
     return $index.$$less$equal(self._$size());
    });
    return self._$buffer().$at$($index);
   };
   this.$atEnd = function () {
    let self = this;
    return self._$actualAtEnd();
   };
   this.$collection = function () {
    let self = this;
    return self._$buffer().$copyFrom$to$(1, self._$size());
   };
   this.$contents = function () {
    let self = this;
    return self._$collection();
   };
   this.$initBuffer$ = function ($sc) {
    let self = this;
    self._$buffer$($sc);
    return self;
   };
   this.$next = function () {
    let self = this;
    return self._$actualNext();
   };
   this.$nextFromPeek = function () {
    let self = this;
    self._$shouldNotHappen();
    return self;
   };
   this.$nextIfAbsent$ = function ($f) {
    let self = this;
    let $pos = nil;
    $pos = self._$actualPosition();
    $pos = $pos + 1;
    if ($pos.$$greater(self._$size())) {
     return $f.$value();
    };
    self._$actualPosition$($pos);
    return self._$buffer().$at$($pos);
   };
   this.$nextPut$ = function ($el) {
    let self = this;
    let $pos = nil;
    self.$super$Streams$SeqCltnReadWriteStream$slot._$nextPut$.call(self, $el);
    if (($pos = self._$position()).$$greater(self._$buffer().$size())) {
     self._$initBuffer$(self._$buffer().$copyWithSize$((self._$buffer().$size() * 2).$max$(8)));
    };
    self._$buffer().$at$put$($pos, $el);
    return $el;
   };
   this.$peek = function () {
    let self = this;
    let $pos = nil;
    $pos = self._$position();
    $pos = $pos + 1;
    if ($pos.$$greater(self._$size())) {
     self._$error$("Attempt to read past the end of a stream");
    };
    return self._$buffer().$at$($pos);
   };
   this.$peekIfAbsent$ = function ($f) {
    let self = this;
    let $pos = nil;
    $pos = self._$position();
    $pos = $pos + 1;
    if ($pos.$$greater(self._$size())) {
     return $f.$value();
    };
    return self._$buffer().$at$($pos);
   };
   this.$peekVal = function () {
    let self = this;
    self._$shouldNotHappen();
    return self;
   };
   this.$position$ = function ($p) {
    let self = this;
    self._$actualPosition$($p);
    return self;
   };
   this.$printOn$ = function ($strm) {
    let self = this;
    (function (cascadeReceiver) {
     cascadeReceiver.$nextPutAll$(self._$class().$name());
     cascadeReceiver.$nextPutAll$("(position=");
     cascadeReceiver.$print$(self._$position());
     cascadeReceiver.$nextPutAll$(" buffer=");
     cascadeReceiver.$print$(self._$buffer());
     return cascadeReceiver.$nextPut$(")");
    })($strm);
    return self;
   };
   this.$init$buffer$ = function (v) {
    this.$buffer$slot = v;
    return this;
   };
   this.$buffer = function () {
    return this.$buffer$slot;
   };
   this.$buffer$ = function (v) {
    this.$buffer$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`SeqCltnReadWriteStream";
     this._$superInit$Streams$SeqCltnReadWriteStream = $.$superInit$Streams$SeqCltnReadWriteStream;
     this.$superInit$Streams$SeqCltnReadWriteStream = dnuCatcher("$superInit$Streams$SeqCltnReadWriteStream");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$accumulateUntil$ = $.$accumulateUntil$;
     this.$accumulateUntil$ = dnuCatcher("$accumulateUntil$");
     this._$actualNext = $.$actualNext;
     this.$actualNext = dnuCatcher("$actualNext");
     this._$at$ = $.$at$;
     this.$at$ = dnuCatcher("$at$");
     this.$atEnd = this._$atEnd = $.$atEnd;
     this._$collection = $.$collection;
     this.$collection = dnuCatcher("$collection");
     this.$contents = this._$contents = $.$contents;
     this.$initBuffer$ = this._$initBuffer$ = $.$initBuffer$;
     this._$next = $.$next;
     this.$next = dnuCatcher("$next");
     this._$nextFromPeek = $.$nextFromPeek;
     this.$nextFromPeek = dnuCatcher("$nextFromPeek");
     this.$nextIfAbsent$ = this._$nextIfAbsent$ = $.$nextIfAbsent$;
     this._$nextPut$ = $.$nextPut$;
     this.$nextPut$ = dnuCatcher("$nextPut$");
     this._$peek = $.$peek;
     this.$peek = dnuCatcher("$peek");
     this._$peekIfAbsent$ = $.$peekIfAbsent$;
     this.$peekIfAbsent$ = dnuCatcher("$peekIfAbsent$");
     this._$peekVal = $.$peekVal;
     this.$peekVal = dnuCatcher("$peekVal");
     this._$position$ = $.$position$;
     this.$position$ = dnuCatcher("$position$");
     this.$printOn$ = this._$printOn$ = $.$printOn$;
     this._$init$buffer$ = $.$init$buffer$;
     this.$init$buffer$ = dnuCatcher("$init$buffer$");
     this._$buffer = $.$buffer;
     this.$buffer = dnuCatcher("$buffer");
     this._$buffer$ = $.$buffer$;
     this.$buffer$ = dnuCatcher("$buffer$");
     this.$enclosingObjects$Streams$SeqCltnReadWriteStream = enclosingObjects;
     this.$super$Streams$SeqCltnReadWriteStream$slot = runtimeSuperclass;
     this["Streams`SeqCltnReadWriteStream"] = function () {
      superBasicNew.call(this);
      this.$buffer$slot = nil;
     };
     this.basicNew = this["Streams`SeqCltnReadWriteStream"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Streams`SeqCltnReadWriteStream";
    this.slots = [];
    this.methods = [
     new MM("new", "public", true, 0),
     new MM("on:", "protected", false, 1244),
     new MM("on:numElements:", "protected", false, 1245),
     new MM("over:", "protected", false, 1246)
    ];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.$on$ = function ($sc) {
     let self = this;
     return self._$over$($sc);
    };
    this.$on$numElements$ = function ($sc, $n) {
     let self = this;
     return self._$over$($sc).$size$($n);
    };
    this.$over$ = function ($sc) {
     let self = this;
     return self._$new().$initBuffer$($sc);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`SeqCltnReadWriteStream";
      this.$new = this._$new = $.$new;
      this._$on$ = $.$on$;
      this.$on$ = dnuCatcher("$on$");
      this._$on$numElements$ = $.$on$numElements$;
      this.$on$numElements$ = dnuCatcher("$on$numElements$");
      this._$over$ = $.$over$;
      this.$over$ = dnuCatcher("$over$");
      this.$enclosingObjects$Streams$SeqCltnReadWriteStream = enclosingObjects;
      this.$super$Streams$SeqCltnReadWriteStream$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$TempTranscript = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Streams`TempTranscript";
   this.name = "Streams`TempTranscript";
   this.header = 1247;
   this.slots = [];
   this.methods = [
    new MM("superInit`Streams`TempTranscript", "protected", true, 1248),
    new MM("instance`initializer", "public", true, 1249),
    new MM("cr", "public", false, 1250),
    new MM("nextPut:", "public", false, 1251),
    new MM("show:", "public", false, 1252)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$Streams$TempTranscript = function () {
    let self = this;
    self.$super$Streams$TempTranscript$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$Streams$TempTranscript();
    return self;
   };
   this.$cr = function () {
    let self = this;
    self._$nextPut$(self._$Character().$lf());
    return self;
   };
   this.$nextPut$ = function ($c) {
    let self = this;
    $c.$unicodeValue().$printCharacter();
    if ($c === self._$Character().$cr()) {
     self._$Character().$lf().$unicodeValue().$printCharacter();
    };
    return self;
   };
   this.$show$ = function ($s) {
    let self = this;
    self._$nextPutAll$($s);
    return $s;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Streams`TempTranscript";
     this._$superInit$Streams$TempTranscript = $.$superInit$Streams$TempTranscript;
     this.$superInit$Streams$TempTranscript = dnuCatcher("$superInit$Streams$TempTranscript");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$cr = this._$cr = $.$cr;
     this.$nextPut$ = this._$nextPut$ = $.$nextPut$;
     this.$show$ = this._$show$ = $.$show$;
     this.$enclosingObjects$Streams$TempTranscript = enclosingObjects;
     this.$super$Streams$TempTranscript$slot = runtimeSuperclass;
     this["Streams`TempTranscript"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["Streams`TempTranscript"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Streams`TempTranscript";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Streams`TempTranscript";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$Streams$TempTranscript = enclosingObjects;
      this.$super$Streams$TempTranscript$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Streams$BasicInputStream.enclosingMixin = this;
  this.$Streams$BasicOutputStream.enclosingMixin = this;
  this.$Streams$BasicReadStream.enclosingMixin = this;
  this.$Streams$BasicReadWriteStream.enclosingMixin = this;
  this.$Streams$CharacterInput.enclosingMixin = this;
  this.$Streams$CharacterInputConverter.enclosingMixin = this;
  this.$Streams$CharacterInputOutputConverter.enclosingMixin = this;
  this.$Streams$CharacterOutput.enclosingMixin = this;
  this.$Streams$CharacterOutputConverter.enclosingMixin = this;
  this.$Streams$CharacterReadConverter.enclosingMixin = this;
  this.$Streams$ExternalInputStream.enclosingMixin = this;
  this.$Streams$ExternalOutputStream.enclosingMixin = this;
  this.$Streams$ExternalReadStream.enclosingMixin = this;
  this.$Streams$ExternalReadWriteStream.enclosingMixin = this;
  this.$Streams$ExternalStream.enclosingMixin = this;
  this.$Streams$SeqCltnReadStream.enclosingMixin = this;
  this.$Streams$SeqCltnReadWriteStream.enclosingMixin = this;
  this.$Streams$TempTranscript.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for Streams";
    this._$superInit$Streams = $.$superInit$Streams;
    this.$superInit$Streams = dnuCatcher("$superInit$Streams");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this._$usingCrLfConvention = $.$usingCrLfConvention;
    this.$usingCrLfConvention = dnuCatcher("$usingCrLfConvention");
    this.$BasicInputStream = this._$BasicInputStream = $.$BasicInputStream;
    this.$BasicOutputStream = this._$BasicOutputStream = $.$BasicOutputStream;
    this._$BasicReadStream = $.$BasicReadStream;
    this.$BasicReadStream = dnuCatcher("$BasicReadStream");
    this._$BasicReadWriteStream = $.$BasicReadWriteStream;
    this.$BasicReadWriteStream = dnuCatcher("$BasicReadWriteStream");
    this._$CharacterInput = $.$CharacterInput;
    this.$CharacterInput = dnuCatcher("$CharacterInput");
    this._$CharacterInputConverter = $.$CharacterInputConverter;
    this.$CharacterInputConverter = dnuCatcher("$CharacterInputConverter");
    this.$CharacterInputOutputConverter = this._$CharacterInputOutputConverter = $.$CharacterInputOutputConverter;
    this._$CharacterOutput = $.$CharacterOutput;
    this.$CharacterOutput = dnuCatcher("$CharacterOutput");
    this._$CharacterOutputConverter = $.$CharacterOutputConverter;
    this.$CharacterOutputConverter = dnuCatcher("$CharacterOutputConverter");
    this.$CharacterReadConverter = this._$CharacterReadConverter = $.$CharacterReadConverter;
    this._$ExternalInputStream = $.$ExternalInputStream;
    this.$ExternalInputStream = dnuCatcher("$ExternalInputStream");
    this.$ExternalOutputStream = this._$ExternalOutputStream = $.$ExternalOutputStream;
    this.$ExternalReadStream = this._$ExternalReadStream = $.$ExternalReadStream;
    this.$ExternalReadWriteStream = this._$ExternalReadWriteStream = $.$ExternalReadWriteStream;
    this._$ExternalStream = $.$ExternalStream;
    this.$ExternalStream = dnuCatcher("$ExternalStream");
    this.$SeqCltnReadStream = this._$SeqCltnReadStream = $.$SeqCltnReadStream;
    this.$SeqCltnReadWriteStream = this._$SeqCltnReadWriteStream = $.$SeqCltnReadWriteStream;
    this.$TempTranscript = this._$TempTranscript = $.$TempTranscript;
    this.$init$Streams$BasicInputStream$ = this._$init$Streams$BasicInputStream$ = $.$init$Streams$BasicInputStream$;
    this.$Streams$BasicInputStream = this._$Streams$BasicInputStream = $.$Streams$BasicInputStream;
    this.$Streams$BasicInputStream$ = this._$Streams$BasicInputStream$ = $.$Streams$BasicInputStream$;
    this.$init$Streams$BasicOutputStream$ = this._$init$Streams$BasicOutputStream$ = $.$init$Streams$BasicOutputStream$;
    this.$Streams$BasicOutputStream = this._$Streams$BasicOutputStream = $.$Streams$BasicOutputStream;
    this.$Streams$BasicOutputStream$ = this._$Streams$BasicOutputStream$ = $.$Streams$BasicOutputStream$;
    this.$init$Streams$BasicReadStream$ = this._$init$Streams$BasicReadStream$ = $.$init$Streams$BasicReadStream$;
    this.$Streams$BasicReadStream = this._$Streams$BasicReadStream = $.$Streams$BasicReadStream;
    this.$Streams$BasicReadStream$ = this._$Streams$BasicReadStream$ = $.$Streams$BasicReadStream$;
    this.$init$Streams$BasicReadWriteStream$ = this._$init$Streams$BasicReadWriteStream$ = $.$init$Streams$BasicReadWriteStream$;
    this.$Streams$BasicReadWriteStream = this._$Streams$BasicReadWriteStream = $.$Streams$BasicReadWriteStream;
    this.$Streams$BasicReadWriteStream$ = this._$Streams$BasicReadWriteStream$ = $.$Streams$BasicReadWriteStream$;
    this.$init$Streams$CharacterInput$ = this._$init$Streams$CharacterInput$ = $.$init$Streams$CharacterInput$;
    this.$Streams$CharacterInput = this._$Streams$CharacterInput = $.$Streams$CharacterInput;
    this.$Streams$CharacterInput$ = this._$Streams$CharacterInput$ = $.$Streams$CharacterInput$;
    this.$init$Streams$CharacterInputConverter$ = this._$init$Streams$CharacterInputConverter$ = $.$init$Streams$CharacterInputConverter$;
    this.$Streams$CharacterInputConverter = this._$Streams$CharacterInputConverter = $.$Streams$CharacterInputConverter;
    this.$Streams$CharacterInputConverter$ = this._$Streams$CharacterInputConverter$ = $.$Streams$CharacterInputConverter$;
    this.$init$Streams$CharacterInputOutputConverter$ = this._$init$Streams$CharacterInputOutputConverter$ = $.$init$Streams$CharacterInputOutputConverter$;
    this.$Streams$CharacterInputOutputConverter = this._$Streams$CharacterInputOutputConverter = $.$Streams$CharacterInputOutputConverter;
    this.$Streams$CharacterInputOutputConverter$ = this._$Streams$CharacterInputOutputConverter$ = $.$Streams$CharacterInputOutputConverter$;
    this.$init$Streams$CharacterOutput$ = this._$init$Streams$CharacterOutput$ = $.$init$Streams$CharacterOutput$;
    this.$Streams$CharacterOutput = this._$Streams$CharacterOutput = $.$Streams$CharacterOutput;
    this.$Streams$CharacterOutput$ = this._$Streams$CharacterOutput$ = $.$Streams$CharacterOutput$;
    this.$init$Streams$CharacterOutputConverter$ = this._$init$Streams$CharacterOutputConverter$ = $.$init$Streams$CharacterOutputConverter$;
    this.$Streams$CharacterOutputConverter = this._$Streams$CharacterOutputConverter = $.$Streams$CharacterOutputConverter;
    this.$Streams$CharacterOutputConverter$ = this._$Streams$CharacterOutputConverter$ = $.$Streams$CharacterOutputConverter$;
    this.$init$Streams$CharacterReadConverter$ = this._$init$Streams$CharacterReadConverter$ = $.$init$Streams$CharacterReadConverter$;
    this.$Streams$CharacterReadConverter = this._$Streams$CharacterReadConverter = $.$Streams$CharacterReadConverter;
    this.$Streams$CharacterReadConverter$ = this._$Streams$CharacterReadConverter$ = $.$Streams$CharacterReadConverter$;
    this.$init$Streams$ExternalInputStream$ = this._$init$Streams$ExternalInputStream$ = $.$init$Streams$ExternalInputStream$;
    this.$Streams$ExternalInputStream = this._$Streams$ExternalInputStream = $.$Streams$ExternalInputStream;
    this.$Streams$ExternalInputStream$ = this._$Streams$ExternalInputStream$ = $.$Streams$ExternalInputStream$;
    this.$init$Streams$ExternalOutputStream$ = this._$init$Streams$ExternalOutputStream$ = $.$init$Streams$ExternalOutputStream$;
    this.$Streams$ExternalOutputStream = this._$Streams$ExternalOutputStream = $.$Streams$ExternalOutputStream;
    this.$Streams$ExternalOutputStream$ = this._$Streams$ExternalOutputStream$ = $.$Streams$ExternalOutputStream$;
    this.$init$Streams$ExternalReadStream$ = this._$init$Streams$ExternalReadStream$ = $.$init$Streams$ExternalReadStream$;
    this.$Streams$ExternalReadStream = this._$Streams$ExternalReadStream = $.$Streams$ExternalReadStream;
    this.$Streams$ExternalReadStream$ = this._$Streams$ExternalReadStream$ = $.$Streams$ExternalReadStream$;
    this.$init$Streams$ExternalReadWriteStream$ = this._$init$Streams$ExternalReadWriteStream$ = $.$init$Streams$ExternalReadWriteStream$;
    this.$Streams$ExternalReadWriteStream = this._$Streams$ExternalReadWriteStream = $.$Streams$ExternalReadWriteStream;
    this.$Streams$ExternalReadWriteStream$ = this._$Streams$ExternalReadWriteStream$ = $.$Streams$ExternalReadWriteStream$;
    this.$init$Streams$ExternalStream$ = this._$init$Streams$ExternalStream$ = $.$init$Streams$ExternalStream$;
    this.$Streams$ExternalStream = this._$Streams$ExternalStream = $.$Streams$ExternalStream;
    this.$Streams$ExternalStream$ = this._$Streams$ExternalStream$ = $.$Streams$ExternalStream$;
    this.$init$Streams$SeqCltnReadStream$ = this._$init$Streams$SeqCltnReadStream$ = $.$init$Streams$SeqCltnReadStream$;
    this.$Streams$SeqCltnReadStream = this._$Streams$SeqCltnReadStream = $.$Streams$SeqCltnReadStream;
    this.$Streams$SeqCltnReadStream$ = this._$Streams$SeqCltnReadStream$ = $.$Streams$SeqCltnReadStream$;
    this.$init$Streams$SeqCltnReadWriteStream$ = this._$init$Streams$SeqCltnReadWriteStream$ = $.$init$Streams$SeqCltnReadWriteStream$;
    this.$Streams$SeqCltnReadWriteStream = this._$Streams$SeqCltnReadWriteStream = $.$Streams$SeqCltnReadWriteStream;
    this.$Streams$SeqCltnReadWriteStream$ = this._$Streams$SeqCltnReadWriteStream$ = $.$Streams$SeqCltnReadWriteStream$;
    this.$init$Streams$TempTranscript$ = this._$init$Streams$TempTranscript$ = $.$init$Streams$TempTranscript$;
    this.$Streams$TempTranscript = this._$Streams$TempTranscript = $.$Streams$TempTranscript;
    this.$Streams$TempTranscript$ = this._$Streams$TempTranscript$ = $.$Streams$TempTranscript$;
    this.$enclosingObjects$Streams = enclosingObjects;
    this.$super$Streams$slot = runtimeSuperclass;
    this.Streams = function () {
     superBasicNew.call(this);
     this.$BasicOutputReadStream$slot = nil;
     this.$CharacterIStream$slot = nil;
     this.$CharacterOStream$slot = nil;
     this.$CharacterConverterWithOutput$slot = nil;
     this.$OutputInputConverter$slot = nil;
     this.$BasicIExStream$slot = nil;
     this.$EIStream$slot = nil;
     this.$ReadExternalOutputStream$slot = nil;
     this.$EOStream$slot = nil;
     this.$EIOStream$slot = nil;
     this.$Streams$BasicInputStream$slot = nil;
     this.$Streams$BasicOutputStream$slot = nil;
     this.$Streams$BasicReadStream$slot = nil;
     this.$Streams$BasicReadWriteStream$slot = nil;
     this.$Streams$CharacterInput$slot = nil;
     this.$Streams$CharacterInputConverter$slot = nil;
     this.$Streams$CharacterInputOutputConverter$slot = nil;
     this.$Streams$CharacterOutput$slot = nil;
     this.$Streams$CharacterOutputConverter$slot = nil;
     this.$Streams$CharacterReadConverter$slot = nil;
     this.$Streams$ExternalInputStream$slot = nil;
     this.$Streams$ExternalOutputStream$slot = nil;
     this.$Streams$ExternalReadStream$slot = nil;
     this.$Streams$ExternalReadWriteStream$slot = nil;
     this.$Streams$ExternalStream$slot = nil;
     this.$Streams$SeqCltnReadStream$slot = nil;
     this.$Streams$SeqCltnReadWriteStream$slot = nil;
     this.$Streams$TempTranscript$slot = nil;
    };
    this.basicNew = this.Streams;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   let $ = this;
   this.debug = "Runtime meta mixin for Streams";
   this.slots = [];
   this.methods = [new MM("usingPlatform:", "public", true, 0)];
   this.nestedClasses = [];
   this.$usingPlatform$ = function ($platform) {
    let t = new this.nonMeta.basicNew();
    t.$instance$initializer($platform);
    return t;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for Streams";
     this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
     this.$enclosingObjects$Streams = enclosingObjects;
     this.$super$Streams$slot = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$Particles = new function () {
  let $ = this;
  let $0 = this;
  this.debug = "Runtime mixin for Particles";
  this.name = "Particles";
  this.header = 1253;
  this.slots = [
   new SM("hopscotchRuntime", "private", false, false),
   new SM("Particles`World", "public", true, true)
  ];
  this.methods = [
   new MM("superInit`Particles", "protected", true, 1254),
   new MM("instance`initializer", "public", true, 1255),
   new MM("main:args:", "public", false, 1256),
   new MM("World", "protected", true, 0),
   new MM("init`hopscotchRuntime:", "private", true, 0),
   new MM("hopscotchRuntime", "private", true, 0),
   new MM("init`Particles`World:", "public", true, 0),
   new MM("Particles`World", "public", true, 0),
   new MM("Particles`World:", "public", true, 0)
  ];
  this.nestedClasses = ["Particles`World"];
  this.applications = [];
  this.$superInit$Particles = function ($manifest) {
   let self = this;
   self.$super$Particles$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($manifest) {
   let self = this;
   self._$superInit$Particles($manifest);
   $0.$init$hopscotchRuntime$(self, $manifest.$HopscotchForHTML5Runtime().$packageUsing$($manifest));
   return self;
  };
  this.$main$args$ = function ($platform, $args) {
   let self = this;
   let $hopscotchPlatform = nil;
   let $world = nil;
   $hopscotchPlatform = $0.$hopscotchRuntime(self).$using$($platform);
   $world = self._$World().$usingPlatform$($hopscotchPlatform);
   $hopscotchPlatform.$hopscotch().$core().$HopscotchWindow().$openSubject$($world.$WorldSubject().$onModel$($world.$World().$withExtent$($hopscotchPlatform.$graphics().$Point().$x$y$(800, 600))));
   return self;
  };
  this.$World = function () {
   if (nil === this.$Particles$World$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$Particles);
    let mixin = $.$Particles$World;
    this.$Particles$World$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$Particles$World$slot;
  };
  this.$init$hopscotchRuntime$ = function (self, v) {
   self.$hopscotchRuntime$slot = v;
   return self;
  };
  this.$hopscotchRuntime = function (self) {
   return self.$hopscotchRuntime$slot;
  };
  this.$init$Particles$World$ = function (v) {
   this.$Particles$World$slot = v;
   return this;
  };
  this.$Particles$World = function () {
   return this.$Particles$World$slot;
  };
  this.$Particles$World$ = function (v) {
   this.$Particles$World$slot = v;
   return this;
  };
  this.$Particles$World = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for Particles`World";
   this.name = "Particles`World";
   this.header = 1257;
   this.slots = [
    new SM("Timer", "protected", false, false),
    new SM("Point", "protected", false, false),
    new SM("Color", "protected", false, false),
    new SM("List", "protected", false, false),
    new SM("Subject", "protected", false, false),
    new SM("Presenter", "protected", false, false),
    new SM("Math", "protected", false, false),
    new SM("tau", "protected", false, false),
    new SM("Particles`World`Atom", "public", true, true),
    new SM("Particles`World`World", "public", true, true),
    new SM("Particles`World`WorldPresenter", "public", true, true),
    new SM("Particles`World`WorldSubject", "public", true, true)
   ];
   this.methods = [
    new MM("superInit`Particles`World", "protected", true, 1258),
    new MM("instance`initializer", "public", true, 1259),
    new MM("Atom", "protected", true, 0),
    new MM("World", "public", true, 0),
    new MM("WorldPresenter", "protected", true, 0),
    new MM("WorldSubject", "public", true, 0),
    new MM("init`Timer:", "protected", true, 0),
    new MM("Timer", "protected", true, 0),
    new MM("init`Point:", "protected", true, 0),
    new MM("Point", "protected", true, 0),
    new MM("init`Color:", "protected", true, 0),
    new MM("Color", "protected", true, 0),
    new MM("init`List:", "protected", true, 0),
    new MM("List", "protected", true, 0),
    new MM("init`Subject:", "protected", true, 0),
    new MM("Subject", "protected", true, 0),
    new MM("init`Presenter:", "protected", true, 0),
    new MM("Presenter", "protected", true, 0),
    new MM("init`Math:", "protected", true, 0),
    new MM("Math", "protected", true, 0),
    new MM("init`tau:", "protected", true, 0),
    new MM("tau", "protected", true, 0),
    new MM("init`Particles`World`Atom:", "public", true, 0),
    new MM("Particles`World`Atom", "public", true, 0),
    new MM("Particles`World`Atom:", "public", true, 0),
    new MM("init`Particles`World`World:", "public", true, 0),
    new MM("Particles`World`World", "public", true, 0),
    new MM("Particles`World`World:", "public", true, 0),
    new MM("init`Particles`World`WorldPresenter:", "public", true, 0),
    new MM("Particles`World`WorldPresenter", "public", true, 0),
    new MM("Particles`World`WorldPresenter:", "public", true, 0),
    new MM("init`Particles`World`WorldSubject:", "public", true, 0),
    new MM("Particles`World`WorldSubject", "public", true, 0),
    new MM("Particles`World`WorldSubject:", "public", true, 0)
   ];
   this.nestedClasses = [
    "Particles`World`Atom",
    "Particles`World`World",
    "Particles`World`WorldPresenter",
    "Particles`World`WorldSubject"
   ];
   this.applications = [];
   this.$superInit$Particles$World = function ($p) {
    let self = this;
    self.$super$Particles$World$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($p) {
    let self = this;
    self._$superInit$Particles$World($p);
    self._$init$Timer$($p.$actors().$Timer());
    self._$init$Point$($p.$graphics().$Point());
    self._$init$Color$($p.$graphics().$Color());
    self._$init$List$($p.$collections().$List());
    self._$init$Subject$($p.$hopscotch().$core().$Subject());
    self._$init$Presenter$($p.$hopscotch().$core().$Presenter());
    self._$init$Math$($p.$js().$global().$at$("Math"));
    self._$init$tau$(((314159265359/50000000000)).$asFloat());
    return self;
   };
   this.$Atom = function () {
    if (nil === this.$Particles$World$Atom$slot) {
     let self = this;
     let superclass = self._$Object();
     let enclosingObjects = [this].concat(this.$enclosingObjects$Particles$World);
     let mixin = $.$Particles$World$Atom;
     this.$Particles$World$Atom$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$Particles$World$Atom$slot;
   };
   this.$World = function () {
    if (nil === this.$Particles$World$World$slot) {
     let self = this;
     let superclass = self._$Object();
     let enclosingObjects = [this].concat(this.$enclosingObjects$Particles$World);
     let mixin = $.$Particles$World$World;
     this.$Particles$World$World$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$Particles$World$World$slot;
   };
   this.$WorldPresenter = function () {
    if (nil === this.$Particles$World$WorldPresenter$slot) {
     let self = this;
     let superclass = self._$Presenter();
     let enclosingObjects = [this].concat(this.$enclosingObjects$Particles$World);
     let mixin = $.$Particles$World$WorldPresenter;
     this.$Particles$World$WorldPresenter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$Particles$World$WorldPresenter$slot;
   };
   this.$WorldSubject = function () {
    if (nil === this.$Particles$World$WorldSubject$slot) {
     let self = this;
     let superclass = self._$Subject();
     let enclosingObjects = [this].concat(this.$enclosingObjects$Particles$World);
     let mixin = $.$Particles$World$WorldSubject;
     this.$Particles$World$WorldSubject$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
    };
    return this.$Particles$World$WorldSubject$slot;
   };
   this.$init$Timer$ = function (v) {
    this.$Timer$slot = v;
    return this;
   };
   this.$Timer = function () {
    return this.$Timer$slot;
   };
   this.$init$Point$ = function (v) {
    this.$Point$slot = v;
    return this;
   };
   this.$Point = function () {
    return this.$Point$slot;
   };
   this.$init$Color$ = function (v) {
    this.$Color$slot = v;
    return this;
   };
   this.$Color = function () {
    return this.$Color$slot;
   };
   this.$init$List$ = function (v) {
    this.$List$slot = v;
    return this;
   };
   this.$List = function () {
    return this.$List$slot;
   };
   this.$init$Subject$ = function (v) {
    this.$Subject$slot = v;
    return this;
   };
   this.$Subject = function () {
    return this.$Subject$slot;
   };
   this.$init$Presenter$ = function (v) {
    this.$Presenter$slot = v;
    return this;
   };
   this.$Presenter = function () {
    return this.$Presenter$slot;
   };
   this.$init$Math$ = function (v) {
    this.$Math$slot = v;
    return this;
   };
   this.$Math = function () {
    return this.$Math$slot;
   };
   this.$init$tau$ = function (v) {
    this.$tau$slot = v;
    return this;
   };
   this.$tau = function () {
    return this.$tau$slot;
   };
   this.$init$Particles$World$Atom$ = function (v) {
    this.$Particles$World$Atom$slot = v;
    return this;
   };
   this.$Particles$World$Atom = function () {
    return this.$Particles$World$Atom$slot;
   };
   this.$Particles$World$Atom$ = function (v) {
    this.$Particles$World$Atom$slot = v;
    return this;
   };
   this.$init$Particles$World$World$ = function (v) {
    this.$Particles$World$World$slot = v;
    return this;
   };
   this.$Particles$World$World = function () {
    return this.$Particles$World$World$slot;
   };
   this.$Particles$World$World$ = function (v) {
    this.$Particles$World$World$slot = v;
    return this;
   };
   this.$init$Particles$World$WorldPresenter$ = function (v) {
    this.$Particles$World$WorldPresenter$slot = v;
    return this;
   };
   this.$Particles$World$WorldPresenter = function () {
    return this.$Particles$World$WorldPresenter$slot;
   };
   this.$Particles$World$WorldPresenter$ = function (v) {
    this.$Particles$World$WorldPresenter$slot = v;
    return this;
   };
   this.$init$Particles$World$WorldSubject$ = function (v) {
    this.$Particles$World$WorldSubject$slot = v;
    return this;
   };
   this.$Particles$World$WorldSubject = function () {
    return this.$Particles$World$WorldSubject$slot;
   };
   this.$Particles$World$WorldSubject$ = function (v) {
    this.$Particles$World$WorldSubject$slot = v;
    return this;
   };
   this.$Particles$World$Atom = new function () {
    let $ = this;
    let $2 = this;
    this.debug = "Runtime mixin for Particles`World`Atom";
    this.name = "Particles`World`Atom";
    this.header = 1260;
    this.slots = [
     new SM("x", "public", true, false),
     new SM("y", "public", true, false),
     new SM("vx", "public", true, false),
     new SM("vy", "public", true, false),
     new SM("m", "public", false, false),
     new SM("r", "public", false, false),
     new SM("color", "public", false, false)
    ];
    this.methods = [
     new MM("superInit`Particles`World`Atom", "protected", true, 1261),
     new MM("instance`initializer", "public", true, 1262),
     new MM("collideWith:", "public", false, 1263),
     new MM("drawOn:", "public", false, 1264),
     new MM("tick", "public", false, 1265),
     new MM("init`x:", "public", true, 0),
     new MM("x", "public", true, 0),
     new MM("x:", "public", true, 0),
     new MM("init`y:", "public", true, 0),
     new MM("y", "public", true, 0),
     new MM("y:", "public", true, 0),
     new MM("init`vx:", "public", true, 0),
     new MM("vx", "public", true, 0),
     new MM("vx:", "public", true, 0),
     new MM("init`vy:", "public", true, 0),
     new MM("vy", "public", true, 0),
     new MM("vy:", "public", true, 0),
     new MM("init`m:", "public", true, 0),
     new MM("m", "public", true, 0),
     new MM("init`r:", "public", true, 0),
     new MM("r", "public", true, 0),
     new MM("init`color:", "public", true, 0),
     new MM("color", "public", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$Particles$World$Atom = function () {
     let self = this;
     self.$super$Particles$World$Atom$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function () {
     let self = this;
     self._$superInit$Particles$World$Atom();
     self._$init$x$(self.$enclosingObjects$Particles$World$Atom[0]._$Math().$random() * 800);
     self._$init$y$(self.$enclosingObjects$Particles$World$Atom[0]._$Math().$random() * 600);
     self._$init$vx$((self.$enclosingObjects$Particles$World$Atom[0]._$Math().$random() - (1/2)) * 6);
     self._$init$vy$((self.$enclosingObjects$Particles$World$Atom[0]._$Math().$random() - (1/2)) * 6);
     self._$init$m$((self.$enclosingObjects$Particles$World$Atom[0]._$Math().$random() * 150) + 5);
     self._$init$r$(self._$m().$sqrt() + 1);
     self._$init$color$(self.$enclosingObjects$Particles$World$Atom[0]._$Color().$r$g$b$(self.$enclosingObjects$Particles$World$Atom[0]._$Math().$random(), self.$enclosingObjects$Particles$World$Atom[0]._$Math().$random(), self.$enclosingObjects$Particles$World$Atom[0]._$Math().$random()));
     return self;
    };
    this.$collideWith$ = function ($b) {
     let self = this;
     let $a = nil;
     let $dx = nil;
     let $dy = nil;
     let $R = nil;
     let $distance = nil;
     let $overlap = nil;
     let $ox = nil;
     let $oy = nil;
     let $e = nil;
     let $dvx = nil;
     let $dvy = nil;
     let $top = nil;
     let $bottom = nil;
     let $j = nil;
     $a = self;
     $dx = $a.$x() - $b.$x();
     $dy = $a.$y() - $b.$y();
     $R = $a.$r() + $b.$r();
     if ((($dx * $dx) + ($dy * $dy)).$$greater($R * $R)) {
      return self;
     };
     $distance = (($dx * $dx) + ($dy * $dy)).$sqrt();
     $overlap = $R - $distance;
     $ox = ($overlap * $dx) / $distance;
     $oy = ($overlap * $dy) / $distance;
     $a.$x$($a.$x() + ($ox / 2));
     $a.$y$($a.$y() + ($oy / 2));
     $b.$x$($b.$x() - ($ox / 2));
     $b.$y$($b.$y() - ($oy / 2));
     $dvx = $a.$vx() - $b.$vx();
     $dvy = $a.$vy() - $b.$vy();
     $e = 1;
     $top = (-1 * (1 + $e)) * (($dvx * $dx) + ($dvy * $dy));
     $bottom = ((1 / $a.$m()) + (1 / $b.$m())) * (($dx * $dx) + ($dy * $dy));
     $j = $top / $bottom;
     $a.$vx$($a.$vx() + (($j / $a.$m()) * $dx));
     $a.$vy$($a.$vy() + (($j / $a.$m()) * $dy));
     $b.$vx$($b.$vx() - (($j / $b.$m()) * $dx));
     $b.$vy$($b.$vy() - (($j / $b.$m()) * $dy));
     return self;
    };
    this.$drawOn$ = function ($gc) {
     let self = this;
     $gc.$fillStyle$(self._$color());
     $gc.$beginPath();
     $gc.$arcAt$radius$from$to$(self.$enclosingObjects$Particles$World$Atom[0]._$Point().$x$y$(self._$x(), self._$y()), self._$r(), 0, self.$enclosingObjects$Particles$World$Atom[0]._$tau());
     $gc.$fill();
     return self;
    };
    this.$tick = function () {
     let self = this;
     self._$x$(self._$x() + self._$vx());
     self._$y$(self._$y() + self._$vy());
     if (self._$x().$$less(self._$r())) {
      self._$vx$(self._$vx().$abs());
     };
     if (self._$x().$$greater(800 - self._$r())) {
      self._$vx$(self._$vx().$abs() * -1);
     };
     if (self._$y().$$less(self._$r())) {
      self._$vy$(self._$vy().$abs());
     };
     if (self._$y().$$greater(600 - self._$r())) {
      self._$vy$(self._$vy().$abs() * -1);
     };
     if (self._$vx().$abs() > 16) {
      self._$vx$(self._$vx() * (9/10));
     };
     if (self._$vy().$abs() > 16) {
      self._$vy$(self._$vy() * (9/10));
     };
     return self;
    };
    this.$init$x$ = function (v) {
     this.$x$slot = v;
     return this;
    };
    this.$x = function () {
     return this.$x$slot;
    };
    this.$x$ = function (v) {
     this.$x$slot = v;
     return this;
    };
    this.$init$y$ = function (v) {
     this.$y$slot = v;
     return this;
    };
    this.$y = function () {
     return this.$y$slot;
    };
    this.$y$ = function (v) {
     this.$y$slot = v;
     return this;
    };
    this.$init$vx$ = function (v) {
     this.$vx$slot = v;
     return this;
    };
    this.$vx = function () {
     return this.$vx$slot;
    };
    this.$vx$ = function (v) {
     this.$vx$slot = v;
     return this;
    };
    this.$init$vy$ = function (v) {
     this.$vy$slot = v;
     return this;
    };
    this.$vy = function () {
     return this.$vy$slot;
    };
    this.$vy$ = function (v) {
     this.$vy$slot = v;
     return this;
    };
    this.$init$m$ = function (v) {
     this.$m$slot = v;
     return this;
    };
    this.$m = function () {
     return this.$m$slot;
    };
    this.$init$r$ = function (v) {
     this.$r$slot = v;
     return this;
    };
    this.$r = function () {
     return this.$r$slot;
    };
    this.$init$color$ = function (v) {
     this.$color$slot = v;
     return this;
    };
    this.$color = function () {
     return this.$color$slot;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for Particles`World`Atom";
      this._$superInit$Particles$World$Atom = $.$superInit$Particles$World$Atom;
      this.$superInit$Particles$World$Atom = dnuCatcher("$superInit$Particles$World$Atom");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$collideWith$ = this._$collideWith$ = $.$collideWith$;
      this.$drawOn$ = this._$drawOn$ = $.$drawOn$;
      this.$tick = this._$tick = $.$tick;
      this.$init$x$ = this._$init$x$ = $.$init$x$;
      this.$x = this._$x = $.$x;
      this.$x$ = this._$x$ = $.$x$;
      this.$init$y$ = this._$init$y$ = $.$init$y$;
      this.$y = this._$y = $.$y;
      this.$y$ = this._$y$ = $.$y$;
      this.$init$vx$ = this._$init$vx$ = $.$init$vx$;
      this.$vx = this._$vx = $.$vx;
      this.$vx$ = this._$vx$ = $.$vx$;
      this.$init$vy$ = this._$init$vy$ = $.$init$vy$;
      this.$vy = this._$vy = $.$vy;
      this.$vy$ = this._$vy$ = $.$vy$;
      this.$init$m$ = this._$init$m$ = $.$init$m$;
      this.$m = this._$m = $.$m;
      this.$init$r$ = this._$init$r$ = $.$init$r$;
      this.$r = this._$r = $.$r;
      this.$init$color$ = this._$init$color$ = $.$init$color$;
      this.$color = this._$color = $.$color;
      this.$enclosingObjects$Particles$World$Atom = enclosingObjects;
      this.$super$Particles$World$Atom$slot = runtimeSuperclass;
      this["Particles`World`Atom"] = function () {
       superBasicNew.call(this);
       this.$x$slot = nil;
       this.$y$slot = nil;
       this.$vx$slot = nil;
       this.$vy$slot = nil;
       this.$m$slot = nil;
       this.$r$slot = nil;
       this.$color$slot = nil;
      };
      this.basicNew = this["Particles`World`Atom"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     let $ = this;
     this.debug = "Runtime meta mixin for Particles`World`Atom";
     this.slots = [];
     this.methods = [new MM("new", "public", true, 0)];
     this.nestedClasses = [];
     this.$new = function () {
      let t = new this.nonMeta.basicNew();
      t.$instance$initializer();
      return t;
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for Particles`World`Atom";
       this.$new = this._$new = $.$new;
       this.$enclosingObjects$Particles$World$Atom = enclosingObjects;
       this.$super$Particles$World$Atom$slot = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$Particles$World$World = new function () {
    let $ = this;
    let $2 = this;
    this.debug = "Runtime mixin for Particles`World`World";
    this.name = "Particles`World`World";
    this.header = 1266;
    this.slots = [
     new SM("extent", "protected", false, false),
     new SM("atoms", "public", false, false),
     new SM("timer", "protected", true, false)
    ];
    this.methods = [
     new MM("superInit`Particles`World`World", "protected", true, 1267),
     new MM("instance`initializer", "public", true, 1268),
     new MM("drawOn:", "public", false, 1269),
     new MM("tick", "public", false, 1270),
     new MM("init`extent:", "protected", true, 0),
     new MM("extent", "protected", true, 0),
     new MM("init`atoms:", "public", true, 0),
     new MM("atoms", "public", true, 0),
     new MM("init`timer:", "protected", true, 0),
     new MM("timer", "protected", true, 0),
     new MM("timer:", "protected", true, 0)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$Particles$World$World = function ($e) {
     let self = this;
     self.$super$Particles$World$World$slot._$instance$initializer.call(self);
     return self;
    };
    this.$instance$initializer = function ($e) {
     let self = this;
     self._$superInit$Particles$World$World($e);
     self._$init$extent$($e);
     self._$init$atoms$(self.$enclosingObjects$Particles$World$World[0]._$List().$new());
     {
      let $$i = nil;
      nil;
      $$i = 1;
      for (; (10).$$greater$equal($$i); ) {
       self._$atoms().$add$(self.$enclosingObjects$Particles$World$World[0]._$Atom().$new());
       $$i = (1).$$plus($$i);
      };
     };
     return self;
    };
    this.$drawOn$ = function ($gc) {
     let self = this;
     $gc.$fillStyle$(self.$enclosingObjects$Particles$World$World[0]._$Color().$r$g$b$a$(0, 0, 0, ((3/25)).$asFloat()));
     $gc.$beginPath();
     $gc.$rectangle$(self.$enclosingObjects$Particles$World$World[0]._$Point().$x$y$(0, 0).$corner$(self._$extent()));
     $gc.$fill();
     self._$atoms().$do$(function ($atom) {
      return $atom.$drawOn$($gc);
     });
     return self;
    };
    this.$tick = function () {
     let self = this;
     {
      let $i = nil;
      let $$limit = nil;
      nil;
      $i = 1;
      $$limit = self._$atoms().$size() - 1;
      for (; $$limit.$$greater$equal($i); ) {
       {
        let $j = nil;
        let $$limit = nil;
        nil;
        $j = $i + 1;
        $$limit = self._$atoms().$size();
        for (; $$limit.$$greater$equal($j); ) {
         self._$atoms().$at$($i).$collideWith$(self._$atoms().$at$($j));
         $j = (1).$$plus($j);
        };
       };
       $i = (1).$$plus($i);
      };
     };
     self._$atoms().$do$(function ($atom) {
      return $atom.$tick();
     });
     return self;
    };
    this.$init$extent$ = function (v) {
     this.$extent$slot = v;
     return this;
    };
    this.$extent = function () {
     return this.$extent$slot;
    };
    this.$init$atoms$ = function (v) {
     this.$atoms$slot = v;
     return this;
    };
    this.$atoms = function () {
     return this.$atoms$slot;
    };
    this.$init$timer$ = function (v) {
     this.$timer$slot = v;
     return this;
    };
    this.$timer = function () {
     return this.$timer$slot;
    };
    this.$timer$ = function (v) {
     this.$timer$slot = v;
     return this;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for Particles`World`World";
      this._$superInit$Particles$World$World = $.$superInit$Particles$World$World;
      this.$superInit$Particles$World$World = dnuCatcher("$superInit$Particles$World$World");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this.$drawOn$ = this._$drawOn$ = $.$drawOn$;
      this.$tick = this._$tick = $.$tick;
      this._$init$extent$ = $.$init$extent$;
      this.$init$extent$ = dnuCatcher("$init$extent$");
      this._$extent = $.$extent;
      this.$extent = dnuCatcher("$extent");
      this.$init$atoms$ = this._$init$atoms$ = $.$init$atoms$;
      this.$atoms = this._$atoms = $.$atoms;
      this._$init$timer$ = $.$init$timer$;
      this.$init$timer$ = dnuCatcher("$init$timer$");
      this._$timer = $.$timer;
      this.$timer = dnuCatcher("$timer");
      this._$timer$ = $.$timer$;
      this.$timer$ = dnuCatcher("$timer$");
      this.$enclosingObjects$Particles$World$World = enclosingObjects;
      this.$super$Particles$World$World$slot = runtimeSuperclass;
      this["Particles`World`World"] = function () {
       superBasicNew.call(this);
       this.$extent$slot = nil;
       this.$atoms$slot = nil;
       this.$timer$slot = nil;
      };
      this.basicNew = this["Particles`World`World"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     let $ = this;
     this.debug = "Runtime meta mixin for Particles`World`World";
     this.slots = [];
     this.methods = [new MM("withExtent:", "public", true, 0)];
     this.nestedClasses = [];
     this.$withExtent$ = function ($e) {
      let t = new this.nonMeta.basicNew();
      t.$instance$initializer($e);
      return t;
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for Particles`World`World";
       this.$withExtent$ = this._$withExtent$ = $.$withExtent$;
       this.$enclosingObjects$Particles$World$World = enclosingObjects;
       this.$super$Particles$World$World$slot = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$Particles$World$WorldPresenter = new function () {
    let $ = this;
    let $2 = this;
    this.debug = "Runtime mixin for Particles`World`WorldPresenter";
    this.name = "Particles`World`WorldPresenter";
    this.header = 1271;
    this.slots = [];
    this.methods = [
     new MM("superInit`Particles`World`WorldPresenter", "protected", true, 1272),
     new MM("instance`initializer", "public", true, 1273),
     new MM("definition", "protected", false, 1274)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$Particles$World$WorldPresenter = function ($s) {
     let self = this;
     self.$super$Particles$World$WorldPresenter$slot._$instance$initializer.call(self, $s);
     return self;
    };
    this.$instance$initializer = function ($s) {
     let self = this;
     self._$superInit$Particles$World$WorldPresenter($s);
     return self;
    };
    this.$definition = function () {
     let self = this;
     let $c = nil;
     $c = self._$canvas$(self.$enclosingObjects$Particles$World$WorldPresenter[0]._$Point().$x$y$(800, 600));
     self.$enclosingObjects$Particles$World$WorldPresenter[0]._$Timer().$every$do$(30, function ($timer) {
      self._$subject().$model().$tick();
      return self._$subject().$model().$drawOn$($c.$context());
     });
     return self._$column$([
      $c,
      self._$link$action$("Add Atom", function () {
       return self._$subject().$model().$atoms().$add$(self.$enclosingObjects$Particles$World$WorldPresenter[0]._$Atom().$new());
      }),
      self._$link$action$("Remove Atom", function () {
       return self._$subject().$model().$atoms().$removeFirst();
      })
     ]);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for Particles`World`WorldPresenter";
      this._$superInit$Particles$World$WorldPresenter = $.$superInit$Particles$World$WorldPresenter;
      this.$superInit$Particles$World$WorldPresenter = dnuCatcher("$superInit$Particles$World$WorldPresenter");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this._$definition = $.$definition;
      this.$definition = dnuCatcher("$definition");
      this.$enclosingObjects$Particles$World$WorldPresenter = enclosingObjects;
      this.$super$Particles$World$WorldPresenter$slot = runtimeSuperclass;
      this["Particles`World`WorldPresenter"] = function () {
       superBasicNew.call(this);
      };
      this.basicNew = this["Particles`World`WorldPresenter"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     let $ = this;
     this.debug = "Runtime meta mixin for Particles`World`WorldPresenter";
     this.slots = [];
     this.methods = [new MM("onSubject:", "public", true, 0)];
     this.nestedClasses = [];
     this.$onSubject$ = function ($s) {
      let t = new this.nonMeta.basicNew();
      t.$instance$initializer($s);
      return t;
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for Particles`World`WorldPresenter";
       this.$onSubject$ = this._$onSubject$ = $.$onSubject$;
       this.$enclosingObjects$Particles$World$WorldPresenter = enclosingObjects;
       this.$super$Particles$World$WorldPresenter$slot = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$Particles$World$WorldSubject = new function () {
    let $ = this;
    let $2 = this;
    this.debug = "Runtime mixin for Particles`World`WorldSubject";
    this.name = "Particles`World`WorldSubject";
    this.header = 1275;
    this.slots = [];
    this.methods = [
     new MM("superInit`Particles`World`WorldSubject", "protected", true, 1276),
     new MM("instance`initializer", "public", true, 1277),
     new MM("createPresenter", "protected", false, 1278),
     new MM("model", "public", false, 1279)
    ];
    this.nestedClasses = [];
    this.applications = [];
    this.$superInit$Particles$World$WorldSubject = function ($m) {
     let self = this;
     self.$super$Particles$World$WorldSubject$slot._$instance$initializer.call(self, $m);
     return self;
    };
    this.$instance$initializer = function ($m) {
     let self = this;
     self._$superInit$Particles$World$WorldSubject($m);
     return self;
    };
    this.$createPresenter = function () {
     let self = this;
     return self.$enclosingObjects$Particles$World$WorldSubject[0]._$WorldPresenter().$onSubject$(self);
    };
    this.$model = function () {
     let self = this;
     return self.$super$Particles$World$WorldSubject$slot._$model.call(self);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime class for Particles`World`WorldSubject";
      this._$superInit$Particles$World$WorldSubject = $.$superInit$Particles$World$WorldSubject;
      this.$superInit$Particles$World$WorldSubject = dnuCatcher("$superInit$Particles$World$WorldSubject");
      this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
      this._$createPresenter = $.$createPresenter;
      this.$createPresenter = dnuCatcher("$createPresenter");
      this.$model = this._$model = $.$model;
      this.$enclosingObjects$Particles$World$WorldSubject = enclosingObjects;
      this.$super$Particles$World$WorldSubject$slot = runtimeSuperclass;
      this["Particles`World`WorldSubject"] = function () {
       superBasicNew.call(this);
      };
      this.basicNew = this["Particles`World`WorldSubject"];
      this.basicNew.prototype = this;
      this.meta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
    this.meta = new function () {
     let $ = this;
     this.debug = "Runtime meta mixin for Particles`World`WorldSubject";
     this.slots = [];
     this.methods = [new MM("onModel:", "public", true, 0)];
     this.nestedClasses = [];
     this.$onModel$ = function ($m) {
      let t = new this.nonMeta.basicNew();
      t.$instance$initializer($m);
      return t;
     };
     this.invoke = function (runtimeSuperclass, enclosingObjects) {
      function constructRuntimeClass (superBasicNew) {
       this.debug = "Runtime meta class for Particles`World`WorldSubject";
       this.$onModel$ = this._$onModel$ = $.$onModel$;
       this.$enclosingObjects$Particles$World$WorldSubject = enclosingObjects;
       this.$super$Particles$World$WorldSubject$slot = runtimeSuperclass;
       this.basicNew = function () {
        superBasicNew.call(this);
       };
       this.basicNew.prototype = this;
       this.nonMeta = null;
       this.newspeakClass = null;
      };
      constructRuntimeClass.prototype = runtimeSuperclass;
      return new constructRuntimeClass(runtimeSuperclass.basicNew);
     };
    }();
    this.meta.nonMeta = this;
   }();
   this.$Particles$World$Atom.enclosingMixin = this;
   this.$Particles$World$World.enclosingMixin = this;
   this.$Particles$World$WorldPresenter.enclosingMixin = this;
   this.$Particles$World$WorldSubject.enclosingMixin = this;
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for Particles`World";
     this._$superInit$Particles$World = $.$superInit$Particles$World;
     this.$superInit$Particles$World = dnuCatcher("$superInit$Particles$World");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$Atom = $.$Atom;
     this.$Atom = dnuCatcher("$Atom");
     this.$World = this._$World = $.$World;
     this._$WorldPresenter = $.$WorldPresenter;
     this.$WorldPresenter = dnuCatcher("$WorldPresenter");
     this.$WorldSubject = this._$WorldSubject = $.$WorldSubject;
     this._$init$Timer$ = $.$init$Timer$;
     this.$init$Timer$ = dnuCatcher("$init$Timer$");
     this._$Timer = $.$Timer;
     this.$Timer = dnuCatcher("$Timer");
     this._$init$Point$ = $.$init$Point$;
     this.$init$Point$ = dnuCatcher("$init$Point$");
     this._$Point = $.$Point;
     this.$Point = dnuCatcher("$Point");
     this._$init$Color$ = $.$init$Color$;
     this.$init$Color$ = dnuCatcher("$init$Color$");
     this._$Color = $.$Color;
     this.$Color = dnuCatcher("$Color");
     this._$init$List$ = $.$init$List$;
     this.$init$List$ = dnuCatcher("$init$List$");
     this._$List = $.$List;
     this.$List = dnuCatcher("$List");
     this._$init$Subject$ = $.$init$Subject$;
     this.$init$Subject$ = dnuCatcher("$init$Subject$");
     this._$Subject = $.$Subject;
     this.$Subject = dnuCatcher("$Subject");
     this._$init$Presenter$ = $.$init$Presenter$;
     this.$init$Presenter$ = dnuCatcher("$init$Presenter$");
     this._$Presenter = $.$Presenter;
     this.$Presenter = dnuCatcher("$Presenter");
     this._$init$Math$ = $.$init$Math$;
     this.$init$Math$ = dnuCatcher("$init$Math$");
     this._$Math = $.$Math;
     this.$Math = dnuCatcher("$Math");
     this._$init$tau$ = $.$init$tau$;
     this.$init$tau$ = dnuCatcher("$init$tau$");
     this._$tau = $.$tau;
     this.$tau = dnuCatcher("$tau");
     this.$init$Particles$World$Atom$ = this._$init$Particles$World$Atom$ = $.$init$Particles$World$Atom$;
     this.$Particles$World$Atom = this._$Particles$World$Atom = $.$Particles$World$Atom;
     this.$Particles$World$Atom$ = this._$Particles$World$Atom$ = $.$Particles$World$Atom$;
     this.$init$Particles$World$World$ = this._$init$Particles$World$World$ = $.$init$Particles$World$World$;
     this.$Particles$World$World = this._$Particles$World$World = $.$Particles$World$World;
     this.$Particles$World$World$ = this._$Particles$World$World$ = $.$Particles$World$World$;
     this.$init$Particles$World$WorldPresenter$ = this._$init$Particles$World$WorldPresenter$ = $.$init$Particles$World$WorldPresenter$;
     this.$Particles$World$WorldPresenter = this._$Particles$World$WorldPresenter = $.$Particles$World$WorldPresenter;
     this.$Particles$World$WorldPresenter$ = this._$Particles$World$WorldPresenter$ = $.$Particles$World$WorldPresenter$;
     this.$init$Particles$World$WorldSubject$ = this._$init$Particles$World$WorldSubject$ = $.$init$Particles$World$WorldSubject$;
     this.$Particles$World$WorldSubject = this._$Particles$World$WorldSubject = $.$Particles$World$WorldSubject;
     this.$Particles$World$WorldSubject$ = this._$Particles$World$WorldSubject$ = $.$Particles$World$WorldSubject$;
     this.$enclosingObjects$Particles$World = enclosingObjects;
     this.$super$Particles$World$slot = runtimeSuperclass;
     this["Particles`World"] = function () {
      superBasicNew.call(this);
      this.$Timer$slot = nil;
      this.$Point$slot = nil;
      this.$Color$slot = nil;
      this.$List$slot = nil;
      this.$Subject$slot = nil;
      this.$Presenter$slot = nil;
      this.$Math$slot = nil;
      this.$tau$slot = nil;
      this.$Particles$World$Atom$slot = nil;
      this.$Particles$World$World$slot = nil;
      this.$Particles$World$WorldPresenter$slot = nil;
      this.$Particles$World$WorldSubject$slot = nil;
     };
     this.basicNew = this["Particles`World"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for Particles`World";
    this.slots = [];
    this.methods = [new MM("usingPlatform:", "public", true, 0)];
    this.nestedClasses = [];
    this.$usingPlatform$ = function ($p) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($p);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for Particles`World";
      this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
      this.$enclosingObjects$Particles$World = enclosingObjects;
      this.$super$Particles$World$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$Particles$World.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for Particles";
    this._$superInit$Particles = $.$superInit$Particles;
    this.$superInit$Particles = dnuCatcher("$superInit$Particles");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this.$main$args$ = this._$main$args$ = $.$main$args$;
    this._$World = $.$World;
    this.$World = dnuCatcher("$World");
    this.$init$Particles$World$ = this._$init$Particles$World$ = $.$init$Particles$World$;
    this.$Particles$World = this._$Particles$World = $.$Particles$World;
    this.$Particles$World$ = this._$Particles$World$ = $.$Particles$World$;
    this.$enclosingObjects$Particles = enclosingObjects;
    this.$super$Particles$slot = runtimeSuperclass;
    this.Particles = function () {
     superBasicNew.call(this);
     this.$hopscotchRuntime$slot = nil;
     this.$Particles$World$slot = nil;
    };
    this.basicNew = this.Particles;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   let $ = this;
   this.debug = "Runtime meta mixin for Particles";
   this.slots = [];
   this.methods = [new MM("packageUsing:", "public", true, 0)];
   this.nestedClasses = [];
   this.$packageUsing$ = function ($manifest) {
    let t = new this.nonMeta.basicNew();
    t.$instance$initializer($manifest);
    return t;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for Particles";
     this.$packageUsing$ = this._$packageUsing$ = $.$packageUsing$;
     this.$enclosingObjects$Particles = enclosingObjects;
     this.$super$Particles$slot = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$HopscotchForHTML5Runtime = new function () {
  let $ = this;
  let $0 = this;
  this.debug = "Runtime mixin for HopscotchForHTML5Runtime";
  this.name = "HopscotchForHTML5Runtime";
  this.header = 1280;
  this.slots = [
   new SM("Graphics", "private", false, false),
   new SM("TextModule", "private", false, false),
   new SM("Hopscotch", "private", false, false),
   new SM("images", "private", false, false),
   new SM("HopscotchForHTML5Runtime`Images", "public", true, true),
   new SM("HopscotchForHTML5Runtime`PlatformWithHopscotch", "public", true, true)
  ];
  this.methods = [
   new MM("superInit`HopscotchForHTML5Runtime", "protected", true, 1281),
   new MM("instance`initializer", "public", true, 1282),
   new MM("using:", "public", false, 1283),
   new MM("Images", "protected", true, 0),
   new MM("PlatformWithHopscotch", "protected", true, 0),
   new MM("init`Graphics:", "private", true, 0),
   new MM("Graphics", "private", true, 0),
   new MM("init`TextModule:", "private", true, 0),
   new MM("TextModule", "private", true, 0),
   new MM("init`Hopscotch:", "private", true, 0),
   new MM("Hopscotch", "private", true, 0),
   new MM("init`images:", "private", true, 0),
   new MM("images", "private", true, 0),
   new MM("init`HopscotchForHTML5Runtime`Images:", "public", true, 0),
   new MM("HopscotchForHTML5Runtime`Images", "public", true, 0),
   new MM("HopscotchForHTML5Runtime`Images:", "public", true, 0),
   new MM("init`HopscotchForHTML5Runtime`PlatformWithHopscotch:", "public", true, 0),
   new MM("HopscotchForHTML5Runtime`PlatformWithHopscotch", "public", true, 0),
   new MM("HopscotchForHTML5Runtime`PlatformWithHopscotch:", "public", true, 0)
  ];
  this.nestedClasses = [
   "HopscotchForHTML5Runtime`Images",
   "HopscotchForHTML5Runtime`PlatformWithHopscotch"
  ];
  this.applications = [];
  this.$superInit$HopscotchForHTML5Runtime = function ($manifest) {
   let self = this;
   self.$super$HopscotchForHTML5Runtime$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($manifest) {
   let self = this;
   self._$superInit$HopscotchForHTML5Runtime($manifest);
   $0.$init$Graphics$(self, $manifest.$GraphicsForHTML5());
   $0.$init$TextModule$(self, $manifest.$TextModule());
   $0.$init$Hopscotch$(self, $manifest.$HopscotchForHTML5());
   $0.$init$images$(self, self._$Images().$packageUsing$($manifest));
   return self;
  };
  this.$using$ = function ($platform) {
   let self = this;
   return self._$PlatformWithHopscotch().$usingPlatform$($platform);
  };
  this.$Images = function () {
   if (nil === this.$HopscotchForHTML5Runtime$Images$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5Runtime);
    let mixin = $.$HopscotchForHTML5Runtime$Images;
    this.$HopscotchForHTML5Runtime$Images$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5Runtime$Images$slot;
  };
  this.$PlatformWithHopscotch = function () {
   if (nil === this.$HopscotchForHTML5Runtime$PlatformWithHopscotch$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5Runtime);
    let mixin = $.$HopscotchForHTML5Runtime$PlatformWithHopscotch;
    this.$HopscotchForHTML5Runtime$PlatformWithHopscotch$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5Runtime$PlatformWithHopscotch$slot;
  };
  this.$init$Graphics$ = function (self, v) {
   self.$Graphics$slot = v;
   return self;
  };
  this.$Graphics = function (self) {
   return self.$Graphics$slot;
  };
  this.$init$TextModule$ = function (self, v) {
   self.$TextModule$slot = v;
   return self;
  };
  this.$TextModule = function (self) {
   return self.$TextModule$slot;
  };
  this.$init$Hopscotch$ = function (self, v) {
   self.$Hopscotch$slot = v;
   return self;
  };
  this.$Hopscotch = function (self) {
   return self.$Hopscotch$slot;
  };
  this.$init$images$ = function (self, v) {
   self.$images$slot = v;
   return self;
  };
  this.$images = function (self) {
   return self.$images$slot;
  };
  this.$init$HopscotchForHTML5Runtime$Images$ = function (v) {
   this.$HopscotchForHTML5Runtime$Images$slot = v;
   return this;
  };
  this.$HopscotchForHTML5Runtime$Images = function () {
   return this.$HopscotchForHTML5Runtime$Images$slot;
  };
  this.$HopscotchForHTML5Runtime$Images$ = function (v) {
   this.$HopscotchForHTML5Runtime$Images$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5Runtime$PlatformWithHopscotch$ = function (v) {
   this.$HopscotchForHTML5Runtime$PlatformWithHopscotch$slot = v;
   return this;
  };
  this.$HopscotchForHTML5Runtime$PlatformWithHopscotch = function () {
   return this.$HopscotchForHTML5Runtime$PlatformWithHopscotch$slot;
  };
  this.$HopscotchForHTML5Runtime$PlatformWithHopscotch$ = function (v) {
   this.$HopscotchForHTML5Runtime$PlatformWithHopscotch$slot = v;
   return this;
  };
  this.$HopscotchForHTML5Runtime$Images = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5Runtime`Images";
   this.name = "HopscotchForHTML5Runtime`Images";
   this.header = 1284;
   this.slots = [
    new SM("accept16px", "public", false, false),
    new SM("cancel16px", "public", false, false),
    new SM("disclosureClosedImage", "public", false, false),
    new SM("disclosureTransitionImage", "public", false, false),
    new SM("disclosureOpenImage", "public", false, false),
    new SM("dropDownImage", "public", false, false),
    new SM("dropDownOutImage", "public", false, false),
    new SM("dropDownOverImage", "public", false, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5Runtime`Images", "protected", true, 1285),
    new MM("instance`initializer", "public", true, 1286),
    new MM("init`accept16px:", "public", true, 0),
    new MM("accept16px", "public", true, 0),
    new MM("init`cancel16px:", "public", true, 0),
    new MM("cancel16px", "public", true, 0),
    new MM("init`disclosureClosedImage:", "public", true, 0),
    new MM("disclosureClosedImage", "public", true, 0),
    new MM("init`disclosureTransitionImage:", "public", true, 0),
    new MM("disclosureTransitionImage", "public", true, 0),
    new MM("init`disclosureOpenImage:", "public", true, 0),
    new MM("disclosureOpenImage", "public", true, 0),
    new MM("init`dropDownImage:", "public", true, 0),
    new MM("dropDownImage", "public", true, 0),
    new MM("init`dropDownOutImage:", "public", true, 0),
    new MM("dropDownOutImage", "public", true, 0),
    new MM("init`dropDownOverImage:", "public", true, 0),
    new MM("dropDownOverImage", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5Runtime$Images = function ($manifest) {
    let self = this;
    self.$super$HopscotchForHTML5Runtime$Images$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($manifest) {
    let self = this;
    self._$superInit$HopscotchForHTML5Runtime$Images($manifest);
    self._$init$accept16px$($manifest.$accept16px());
    self._$init$cancel16px$($manifest.$cancel16px());
    self._$init$disclosureClosedImage$($manifest.$disclosureClosedImage());
    self._$init$disclosureTransitionImage$($manifest.$disclosureTransitionImage());
    self._$init$disclosureOpenImage$($manifest.$disclosureOpenImage());
    self._$init$dropDownImage$($manifest.$hsDropdownImage());
    self._$init$dropDownOutImage$($manifest.$hsDropdownOutImage());
    self._$init$dropDownOverImage$($manifest.$hsDropdownOverImage());
    return self;
   };
   this.$init$accept16px$ = function (v) {
    this.$accept16px$slot = v;
    return this;
   };
   this.$accept16px = function () {
    return this.$accept16px$slot;
   };
   this.$init$cancel16px$ = function (v) {
    this.$cancel16px$slot = v;
    return this;
   };
   this.$cancel16px = function () {
    return this.$cancel16px$slot;
   };
   this.$init$disclosureClosedImage$ = function (v) {
    this.$disclosureClosedImage$slot = v;
    return this;
   };
   this.$disclosureClosedImage = function () {
    return this.$disclosureClosedImage$slot;
   };
   this.$init$disclosureTransitionImage$ = function (v) {
    this.$disclosureTransitionImage$slot = v;
    return this;
   };
   this.$disclosureTransitionImage = function () {
    return this.$disclosureTransitionImage$slot;
   };
   this.$init$disclosureOpenImage$ = function (v) {
    this.$disclosureOpenImage$slot = v;
    return this;
   };
   this.$disclosureOpenImage = function () {
    return this.$disclosureOpenImage$slot;
   };
   this.$init$dropDownImage$ = function (v) {
    this.$dropDownImage$slot = v;
    return this;
   };
   this.$dropDownImage = function () {
    return this.$dropDownImage$slot;
   };
   this.$init$dropDownOutImage$ = function (v) {
    this.$dropDownOutImage$slot = v;
    return this;
   };
   this.$dropDownOutImage = function () {
    return this.$dropDownOutImage$slot;
   };
   this.$init$dropDownOverImage$ = function (v) {
    this.$dropDownOverImage$slot = v;
    return this;
   };
   this.$dropDownOverImage = function () {
    return this.$dropDownOverImage$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5Runtime`Images";
     this._$superInit$HopscotchForHTML5Runtime$Images = $.$superInit$HopscotchForHTML5Runtime$Images;
     this.$superInit$HopscotchForHTML5Runtime$Images = dnuCatcher("$superInit$HopscotchForHTML5Runtime$Images");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$init$accept16px$ = this._$init$accept16px$ = $.$init$accept16px$;
     this.$accept16px = this._$accept16px = $.$accept16px;
     this.$init$cancel16px$ = this._$init$cancel16px$ = $.$init$cancel16px$;
     this.$cancel16px = this._$cancel16px = $.$cancel16px;
     this.$init$disclosureClosedImage$ = this._$init$disclosureClosedImage$ = $.$init$disclosureClosedImage$;
     this.$disclosureClosedImage = this._$disclosureClosedImage = $.$disclosureClosedImage;
     this.$init$disclosureTransitionImage$ = this._$init$disclosureTransitionImage$ = $.$init$disclosureTransitionImage$;
     this.$disclosureTransitionImage = this._$disclosureTransitionImage = $.$disclosureTransitionImage;
     this.$init$disclosureOpenImage$ = this._$init$disclosureOpenImage$ = $.$init$disclosureOpenImage$;
     this.$disclosureOpenImage = this._$disclosureOpenImage = $.$disclosureOpenImage;
     this.$init$dropDownImage$ = this._$init$dropDownImage$ = $.$init$dropDownImage$;
     this.$dropDownImage = this._$dropDownImage = $.$dropDownImage;
     this.$init$dropDownOutImage$ = this._$init$dropDownOutImage$ = $.$init$dropDownOutImage$;
     this.$dropDownOutImage = this._$dropDownOutImage = $.$dropDownOutImage;
     this.$init$dropDownOverImage$ = this._$init$dropDownOverImage$ = $.$init$dropDownOverImage$;
     this.$dropDownOverImage = this._$dropDownOverImage = $.$dropDownOverImage;
     this.$enclosingObjects$HopscotchForHTML5Runtime$Images = enclosingObjects;
     this.$super$HopscotchForHTML5Runtime$Images$slot = runtimeSuperclass;
     this["HopscotchForHTML5Runtime`Images"] = function () {
      superBasicNew.call(this);
      this.$accept16px$slot = nil;
      this.$cancel16px$slot = nil;
      this.$disclosureClosedImage$slot = nil;
      this.$disclosureTransitionImage$slot = nil;
      this.$disclosureOpenImage$slot = nil;
      this.$dropDownImage$slot = nil;
      this.$dropDownOutImage$slot = nil;
      this.$dropDownOverImage$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5Runtime`Images"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5Runtime`Images";
    this.slots = [];
    this.methods = [new MM("packageUsing:", "public", true, 0)];
    this.nestedClasses = [];
    this.$packageUsing$ = function ($manifest) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($manifest);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5Runtime`Images";
      this.$packageUsing$ = this._$packageUsing$ = $.$packageUsing$;
      this.$enclosingObjects$HopscotchForHTML5Runtime$Images = enclosingObjects;
      this.$super$HopscotchForHTML5Runtime$Images$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5Runtime$PlatformWithHopscotch = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5Runtime`PlatformWithHopscotch";
   this.name = "HopscotchForHTML5Runtime`PlatformWithHopscotch";
   this.header = 1287;
   this.slots = [
    new SM("platform", "private", false, false),
    new SM("graphics", "public", false, false),
    new SM("text", "public", false, false),
    new SM("hopscotch", "public", false, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5Runtime`PlatformWithHopscotch", "protected", true, 1288),
    new MM("instance`initializer", "public", true, 1289),
    new MM("actors", "public", false, 1290),
    new MM("collections", "public", false, 1291),
    new MM("js", "public", false, 1292),
    new MM("kernel", "public", false, 1293),
    new MM("mirrors", "public", false, 1294),
    new MM("operatingSystem", "public", false, 1295),
    new MM("init`platform:", "private", true, 0),
    new MM("platform", "private", true, 0),
    new MM("init`graphics:", "public", true, 0),
    new MM("graphics", "public", true, 0),
    new MM("init`text:", "public", true, 0),
    new MM("text", "public", true, 0),
    new MM("init`hopscotch:", "public", true, 0),
    new MM("hopscotch", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5Runtime$PlatformWithHopscotch = function ($platform) {
    let self = this;
    self.$super$HopscotchForHTML5Runtime$PlatformWithHopscotch$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($platform) {
    let self = this;
    self._$superInit$HopscotchForHTML5Runtime$PlatformWithHopscotch($platform);
    $1.$init$platform$(self, $platform);
    self._$init$graphics$($0.$Graphics(self.$enclosingObjects$HopscotchForHTML5Runtime$PlatformWithHopscotch[0]).$usingPlatform$(self));
    self._$init$text$($0.$TextModule(self.$enclosingObjects$HopscotchForHTML5Runtime$PlatformWithHopscotch[0]).$usingPlatform$(self));
    self._$init$hopscotch$($0.$Hopscotch(self.$enclosingObjects$HopscotchForHTML5Runtime$PlatformWithHopscotch[0]).$usingPlatform$images$(self, $0.$images(self.$enclosingObjects$HopscotchForHTML5Runtime$PlatformWithHopscotch[0])));
    return self;
   };
   this.$actors = function () {
    let self = this;
    return $1.$platform(self).$actors();
   };
   this.$collections = function () {
    let self = this;
    return $1.$platform(self).$collections();
   };
   this.$js = function () {
    let self = this;
    return $1.$platform(self).$js();
   };
   this.$kernel = function () {
    let self = this;
    return $1.$platform(self).$kernel();
   };
   this.$mirrors = function () {
    let self = this;
    return $1.$platform(self).$mirrors();
   };
   this.$operatingSystem = function () {
    let self = this;
    return $1.$platform(self).$operatingSystem();
   };
   this.$init$platform$ = function (self, v) {
    self.$platform$slot = v;
    return self;
   };
   this.$platform = function (self) {
    return self.$platform$slot;
   };
   this.$init$graphics$ = function (v) {
    this.$graphics$slot = v;
    return this;
   };
   this.$graphics = function () {
    return this.$graphics$slot;
   };
   this.$init$text$ = function (v) {
    this.$text$slot = v;
    return this;
   };
   this.$text = function () {
    return this.$text$slot;
   };
   this.$init$hopscotch$ = function (v) {
    this.$hopscotch$slot = v;
    return this;
   };
   this.$hopscotch = function () {
    return this.$hopscotch$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5Runtime`PlatformWithHopscotch";
     this._$superInit$HopscotchForHTML5Runtime$PlatformWithHopscotch = $.$superInit$HopscotchForHTML5Runtime$PlatformWithHopscotch;
     this.$superInit$HopscotchForHTML5Runtime$PlatformWithHopscotch = dnuCatcher("$superInit$HopscotchForHTML5Runtime$PlatformWithHopscotch");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$actors = this._$actors = $.$actors;
     this.$collections = this._$collections = $.$collections;
     this.$js = this._$js = $.$js;
     this.$kernel = this._$kernel = $.$kernel;
     this.$mirrors = this._$mirrors = $.$mirrors;
     this.$operatingSystem = this._$operatingSystem = $.$operatingSystem;
     this.$init$graphics$ = this._$init$graphics$ = $.$init$graphics$;
     this.$graphics = this._$graphics = $.$graphics;
     this.$init$text$ = this._$init$text$ = $.$init$text$;
     this.$text = this._$text = $.$text;
     this.$init$hopscotch$ = this._$init$hopscotch$ = $.$init$hopscotch$;
     this.$hopscotch = this._$hopscotch = $.$hopscotch;
     this.$enclosingObjects$HopscotchForHTML5Runtime$PlatformWithHopscotch = enclosingObjects;
     this.$super$HopscotchForHTML5Runtime$PlatformWithHopscotch$slot = runtimeSuperclass;
     this["HopscotchForHTML5Runtime`PlatformWithHopscotch"] = function () {
      superBasicNew.call(this);
      this.$platform$slot = nil;
      this.$graphics$slot = nil;
      this.$text$slot = nil;
      this.$hopscotch$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5Runtime`PlatformWithHopscotch"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5Runtime`PlatformWithHopscotch";
    this.slots = [];
    this.methods = [new MM("usingPlatform:", "public", true, 0)];
    this.nestedClasses = [];
    this.$usingPlatform$ = function ($platform) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($platform);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5Runtime`PlatformWithHopscotch";
      this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
      this.$enclosingObjects$HopscotchForHTML5Runtime$PlatformWithHopscotch = enclosingObjects;
      this.$super$HopscotchForHTML5Runtime$PlatformWithHopscotch$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5Runtime$Images.enclosingMixin = this;
  this.$HopscotchForHTML5Runtime$PlatformWithHopscotch.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for HopscotchForHTML5Runtime";
    this._$superInit$HopscotchForHTML5Runtime = $.$superInit$HopscotchForHTML5Runtime;
    this.$superInit$HopscotchForHTML5Runtime = dnuCatcher("$superInit$HopscotchForHTML5Runtime");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this.$using$ = this._$using$ = $.$using$;
    this._$Images = $.$Images;
    this.$Images = dnuCatcher("$Images");
    this._$PlatformWithHopscotch = $.$PlatformWithHopscotch;
    this.$PlatformWithHopscotch = dnuCatcher("$PlatformWithHopscotch");
    this.$init$HopscotchForHTML5Runtime$Images$ = this._$init$HopscotchForHTML5Runtime$Images$ = $.$init$HopscotchForHTML5Runtime$Images$;
    this.$HopscotchForHTML5Runtime$Images = this._$HopscotchForHTML5Runtime$Images = $.$HopscotchForHTML5Runtime$Images;
    this.$HopscotchForHTML5Runtime$Images$ = this._$HopscotchForHTML5Runtime$Images$ = $.$HopscotchForHTML5Runtime$Images$;
    this.$init$HopscotchForHTML5Runtime$PlatformWithHopscotch$ = this._$init$HopscotchForHTML5Runtime$PlatformWithHopscotch$ = $.$init$HopscotchForHTML5Runtime$PlatformWithHopscotch$;
    this.$HopscotchForHTML5Runtime$PlatformWithHopscotch = this._$HopscotchForHTML5Runtime$PlatformWithHopscotch = $.$HopscotchForHTML5Runtime$PlatformWithHopscotch;
    this.$HopscotchForHTML5Runtime$PlatformWithHopscotch$ = this._$HopscotchForHTML5Runtime$PlatformWithHopscotch$ = $.$HopscotchForHTML5Runtime$PlatformWithHopscotch$;
    this.$enclosingObjects$HopscotchForHTML5Runtime = enclosingObjects;
    this.$super$HopscotchForHTML5Runtime$slot = runtimeSuperclass;
    this.HopscotchForHTML5Runtime = function () {
     superBasicNew.call(this);
     this.$Graphics$slot = nil;
     this.$TextModule$slot = nil;
     this.$Hopscotch$slot = nil;
     this.$images$slot = nil;
     this.$HopscotchForHTML5Runtime$Images$slot = nil;
     this.$HopscotchForHTML5Runtime$PlatformWithHopscotch$slot = nil;
    };
    this.basicNew = this.HopscotchForHTML5Runtime;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   let $ = this;
   this.debug = "Runtime meta mixin for HopscotchForHTML5Runtime";
   this.slots = [];
   this.methods = [new MM("packageUsing:", "public", true, 0)];
   this.nestedClasses = [];
   this.$packageUsing$ = function ($manifest) {
    let t = new this.nonMeta.basicNew();
    t.$instance$initializer($manifest);
    return t;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for HopscotchForHTML5Runtime";
     this.$packageUsing$ = this._$packageUsing$ = $.$packageUsing$;
     this.$enclosingObjects$HopscotchForHTML5Runtime = enclosingObjects;
     this.$super$HopscotchForHTML5Runtime$slot = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$GraphicsForHTML5 = new function () {
  let $ = this;
  let $0 = this;
  this.debug = "Runtime mixin for GraphicsForHTML5";
  this.name = "GraphicsForHTML5";
  this.header = 1296;
  this.slots = [
   new SM("document", "protected", false, false),
   new SM("GraphicsForHTML5`Canvas", "public", true, true),
   new SM("GraphicsForHTML5`Color", "public", true, true),
   new SM("GraphicsForHTML5`Context", "public", true, true),
   new SM("GraphicsForHTML5`Point", "public", true, true),
   new SM("GraphicsForHTML5`Rectangle", "public", true, true)
  ];
  this.methods = [
   new MM("superInit`GraphicsForHTML5", "protected", true, 1297),
   new MM("instance`initializer", "public", true, 1298),
   new MM("Canvas", "public", true, 0),
   new MM("Color", "public", true, 0),
   new MM("Context", "public", true, 0),
   new MM("Point", "public", true, 0),
   new MM("Rectangle", "public", true, 0),
   new MM("init`document:", "protected", true, 0),
   new MM("document", "protected", true, 0),
   new MM("init`GraphicsForHTML5`Canvas:", "public", true, 0),
   new MM("GraphicsForHTML5`Canvas", "public", true, 0),
   new MM("GraphicsForHTML5`Canvas:", "public", true, 0),
   new MM("init`GraphicsForHTML5`Color:", "public", true, 0),
   new MM("GraphicsForHTML5`Color", "public", true, 0),
   new MM("GraphicsForHTML5`Color:", "public", true, 0),
   new MM("init`GraphicsForHTML5`Context:", "public", true, 0),
   new MM("GraphicsForHTML5`Context", "public", true, 0),
   new MM("GraphicsForHTML5`Context:", "public", true, 0),
   new MM("init`GraphicsForHTML5`Point:", "public", true, 0),
   new MM("GraphicsForHTML5`Point", "public", true, 0),
   new MM("GraphicsForHTML5`Point:", "public", true, 0),
   new MM("init`GraphicsForHTML5`Rectangle:", "public", true, 0),
   new MM("GraphicsForHTML5`Rectangle", "public", true, 0),
   new MM("GraphicsForHTML5`Rectangle:", "public", true, 0)
  ];
  this.nestedClasses = [
   "GraphicsForHTML5`Canvas",
   "GraphicsForHTML5`Color",
   "GraphicsForHTML5`Context",
   "GraphicsForHTML5`Point",
   "GraphicsForHTML5`Rectangle"
  ];
  this.applications = [];
  this.$superInit$GraphicsForHTML5 = function ($p) {
   let self = this;
   self.$super$GraphicsForHTML5$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($p) {
   let self = this;
   self._$superInit$GraphicsForHTML5($p);
   self._$init$document$($p.$js().$global().$at$("document"));
   return self;
  };
  this.$Canvas = function () {
   if (nil === this.$GraphicsForHTML5$Canvas$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$GraphicsForHTML5);
    let mixin = $.$GraphicsForHTML5$Canvas;
    this.$GraphicsForHTML5$Canvas$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$GraphicsForHTML5$Canvas$slot;
  };
  this.$Color = function () {
   if (nil === this.$GraphicsForHTML5$Color$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$GraphicsForHTML5);
    let mixin = $.$GraphicsForHTML5$Color;
    this.$GraphicsForHTML5$Color$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$GraphicsForHTML5$Color$slot;
  };
  this.$Context = function () {
   if (nil === this.$GraphicsForHTML5$Context$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$GraphicsForHTML5);
    let mixin = $.$GraphicsForHTML5$Context;
    this.$GraphicsForHTML5$Context$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$GraphicsForHTML5$Context$slot;
  };
  this.$Point = function () {
   if (nil === this.$GraphicsForHTML5$Point$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$GraphicsForHTML5);
    let mixin = $.$GraphicsForHTML5$Point;
    this.$GraphicsForHTML5$Point$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$GraphicsForHTML5$Point$slot;
  };
  this.$Rectangle = function () {
   if (nil === this.$GraphicsForHTML5$Rectangle$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$GraphicsForHTML5);
    let mixin = $.$GraphicsForHTML5$Rectangle;
    this.$GraphicsForHTML5$Rectangle$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$GraphicsForHTML5$Rectangle$slot;
  };
  this.$init$document$ = function (v) {
   this.$document$slot = v;
   return this;
  };
  this.$document = function () {
   return this.$document$slot;
  };
  this.$init$GraphicsForHTML5$Canvas$ = function (v) {
   this.$GraphicsForHTML5$Canvas$slot = v;
   return this;
  };
  this.$GraphicsForHTML5$Canvas = function () {
   return this.$GraphicsForHTML5$Canvas$slot;
  };
  this.$GraphicsForHTML5$Canvas$ = function (v) {
   this.$GraphicsForHTML5$Canvas$slot = v;
   return this;
  };
  this.$init$GraphicsForHTML5$Color$ = function (v) {
   this.$GraphicsForHTML5$Color$slot = v;
   return this;
  };
  this.$GraphicsForHTML5$Color = function () {
   return this.$GraphicsForHTML5$Color$slot;
  };
  this.$GraphicsForHTML5$Color$ = function (v) {
   this.$GraphicsForHTML5$Color$slot = v;
   return this;
  };
  this.$init$GraphicsForHTML5$Context$ = function (v) {
   this.$GraphicsForHTML5$Context$slot = v;
   return this;
  };
  this.$GraphicsForHTML5$Context = function () {
   return this.$GraphicsForHTML5$Context$slot;
  };
  this.$GraphicsForHTML5$Context$ = function (v) {
   this.$GraphicsForHTML5$Context$slot = v;
   return this;
  };
  this.$init$GraphicsForHTML5$Point$ = function (v) {
   this.$GraphicsForHTML5$Point$slot = v;
   return this;
  };
  this.$GraphicsForHTML5$Point = function () {
   return this.$GraphicsForHTML5$Point$slot;
  };
  this.$GraphicsForHTML5$Point$ = function (v) {
   this.$GraphicsForHTML5$Point$slot = v;
   return this;
  };
  this.$init$GraphicsForHTML5$Rectangle$ = function (v) {
   this.$GraphicsForHTML5$Rectangle$slot = v;
   return this;
  };
  this.$GraphicsForHTML5$Rectangle = function () {
   return this.$GraphicsForHTML5$Rectangle$slot;
  };
  this.$GraphicsForHTML5$Rectangle$ = function (v) {
   this.$GraphicsForHTML5$Rectangle$slot = v;
   return this;
  };
  this.$GraphicsForHTML5$Canvas = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for GraphicsForHTML5`Canvas";
   this.name = "GraphicsForHTML5`Canvas";
   this.header = 1299;
   this.slots = [new SM("alien", "private", true, false)];
   this.methods = [
    new MM("superInit`GraphicsForHTML5`Canvas", "protected", true, 1300),
    new MM("instance`initializer", "public", true, 1301),
    new MM("context", "public", false, 1302),
    new MM("mouseDownAction:", "public", false, 1303),
    new MM("mouseMovedAction:", "public", false, 1304),
    new MM("init`alien:", "private", true, 0),
    new MM("alien", "private", true, 0),
    new MM("alien:", "private", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$GraphicsForHTML5$Canvas = function ($w, $h) {
    let self = this;
    self.$super$GraphicsForHTML5$Canvas$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($w, $h) {
    let self = this;
    self._$superInit$GraphicsForHTML5$Canvas($w, $h);
    $1.$init$alien$(self, self.$enclosingObjects$GraphicsForHTML5$Canvas[0]._$document().$createElement$("canvas"));
    $1.$alien(self).$at$put$("width", $w);
    $1.$alien(self).$at$put$("height", $h);
    $1.$alien(self).$at$("style").$at$put$("position", "relative");
    return self;
   };
   this.$context = function () {
    let self = this;
    return self.$enclosingObjects$GraphicsForHTML5$Canvas[0]._$Context().$on$($1.$alien(self).$getContext$("2d"));
   };
   this.$mouseDownAction$ = function ($onMouseDown) {
    let self = this;
    $1.$alien(self).$addEventListener$action$("mousedown", function ($event) {
     $onMouseDown.$value$(self.$enclosingObjects$GraphicsForHTML5$Canvas[0]._$Point().$x$y$($event.$at$("offsetX"), $event.$at$("offsetY")));
     return nil;
    });
    return self;
   };
   this.$mouseMovedAction$ = function ($onMouseMoved) {
    let self = this;
    $1.$alien(self).$addEventListener$action$("mousemove", function ($event) {
     $onMouseMoved.$value$(self.$enclosingObjects$GraphicsForHTML5$Canvas[0]._$Point().$x$y$($event.$at$("offsetX"), $event.$at$("offsetY")));
     return nil;
    });
    return self;
   };
   this.$init$alien$ = function (self, v) {
    self.$alien$slot = v;
    return self;
   };
   this.$alien = function (self) {
    return self.$alien$slot;
   };
   this.$alien$ = function (self, v) {
    self.$alien$slot = v;
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for GraphicsForHTML5`Canvas";
     this._$superInit$GraphicsForHTML5$Canvas = $.$superInit$GraphicsForHTML5$Canvas;
     this.$superInit$GraphicsForHTML5$Canvas = dnuCatcher("$superInit$GraphicsForHTML5$Canvas");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$context = this._$context = $.$context;
     this.$mouseDownAction$ = this._$mouseDownAction$ = $.$mouseDownAction$;
     this.$mouseMovedAction$ = this._$mouseMovedAction$ = $.$mouseMovedAction$;
     this.$enclosingObjects$GraphicsForHTML5$Canvas = enclosingObjects;
     this.$super$GraphicsForHTML5$Canvas$slot = runtimeSuperclass;
     this["GraphicsForHTML5`Canvas"] = function () {
      superBasicNew.call(this);
      this.$alien$slot = nil;
     };
     this.basicNew = this["GraphicsForHTML5`Canvas"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for GraphicsForHTML5`Canvas";
    this.slots = [];
    this.methods = [new MM("width:height:", "public", true, 0)];
    this.nestedClasses = [];
    this.$width$height$ = function ($w, $h) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($w, $h);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for GraphicsForHTML5`Canvas";
      this.$width$height$ = this._$width$height$ = $.$width$height$;
      this.$enclosingObjects$GraphicsForHTML5$Canvas = enclosingObjects;
      this.$super$GraphicsForHTML5$Canvas$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$GraphicsForHTML5$Color = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for GraphicsForHTML5`Color";
   this.name = "GraphicsForHTML5`Color";
   this.header = 1305;
   this.slots = [
    new SM("red", "public", false, false),
    new SM("green", "public", false, false),
    new SM("blue", "public", false, false),
    new SM("alpha", "public", false, false)
   ];
   this.methods = [
    new MM("superInit`GraphicsForHTML5`Color", "protected", true, 1306),
    new MM("instance`initializer", "public", true, 1307),
    new MM("applyToStyle:", "public", false, 1308),
    new MM("asCSSString", "public", false, 1309),
    new MM("init`red:", "public", true, 0),
    new MM("red", "public", true, 0),
    new MM("init`green:", "public", true, 0),
    new MM("green", "public", true, 0),
    new MM("init`blue:", "public", true, 0),
    new MM("blue", "public", true, 0),
    new MM("init`alpha:", "public", true, 0),
    new MM("alpha", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$GraphicsForHTML5$Color = function ($r, $g, $b, $a) {
    let self = this;
    self.$super$GraphicsForHTML5$Color$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($r, $g, $b, $a) {
    let self = this;
    self._$superInit$GraphicsForHTML5$Color($r, $g, $b, $a);
    self._$init$red$($r);
    self._$init$green$($g);
    self._$init$blue$($b);
    self._$init$alpha$($a);
    return self;
   };
   this.$applyToStyle$ = function ($style) {
    let self = this;
    $style.$setProperty$to$("background-color", self._$asCSSString());
    return self;
   };
   this.$asCSSString = function () {
    let self = this;
    return "rgba(".$$comma(self._$red().$printString()).$$comma(",").$$comma(self._$green().$printString()).$$comma(",").$$comma(self._$blue().$printString()).$$comma(",").$$comma(self._$alpha().$printString()).$$comma(")");
   };
   this.$init$red$ = function (v) {
    this.$red$slot = v;
    return this;
   };
   this.$red = function () {
    return this.$red$slot;
   };
   this.$init$green$ = function (v) {
    this.$green$slot = v;
    return this;
   };
   this.$green = function () {
    return this.$green$slot;
   };
   this.$init$blue$ = function (v) {
    this.$blue$slot = v;
    return this;
   };
   this.$blue = function () {
    return this.$blue$slot;
   };
   this.$init$alpha$ = function (v) {
    this.$alpha$slot = v;
    return this;
   };
   this.$alpha = function () {
    return this.$alpha$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for GraphicsForHTML5`Color";
     this._$superInit$GraphicsForHTML5$Color = $.$superInit$GraphicsForHTML5$Color;
     this.$superInit$GraphicsForHTML5$Color = dnuCatcher("$superInit$GraphicsForHTML5$Color");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$applyToStyle$ = this._$applyToStyle$ = $.$applyToStyle$;
     this.$asCSSString = this._$asCSSString = $.$asCSSString;
     this.$init$red$ = this._$init$red$ = $.$init$red$;
     this.$red = this._$red = $.$red;
     this.$init$green$ = this._$init$green$ = $.$init$green$;
     this.$green = this._$green = $.$green;
     this.$init$blue$ = this._$init$blue$ = $.$init$blue$;
     this.$blue = this._$blue = $.$blue;
     this.$init$alpha$ = this._$init$alpha$ = $.$init$alpha$;
     this.$alpha = this._$alpha = $.$alpha;
     this.$enclosingObjects$GraphicsForHTML5$Color = enclosingObjects;
     this.$super$GraphicsForHTML5$Color$slot = runtimeSuperclass;
     this["GraphicsForHTML5`Color"] = function () {
      superBasicNew.call(this);
      this.$red$slot = nil;
      this.$green$slot = nil;
      this.$blue$slot = nil;
      this.$alpha$slot = nil;
     };
     this.basicNew = this["GraphicsForHTML5`Color"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for GraphicsForHTML5`Color";
    this.slots = [];
    this.methods = [
     new MM("scaledR:g:b:a:", "public", true, 0),
     new MM("black", "public", false, 1310),
     new MM("blue", "public", false, 1311),
     new MM("blue:", "public", false, 1312),
     new MM("gray", "public", false, 1313),
     new MM("gray:", "public", false, 1314),
     new MM("h:s:v:", "public", false, 1315),
     new MM("magenta", "public", false, 1316),
     new MM("orange", "public", false, 1317),
     new MM("r:g:b:", "public", false, 1318),
     new MM("r:g:b:a:", "public", false, 1319),
     new MM("red", "public", false, 1320),
     new MM("red:", "public", false, 1321),
     new MM("white", "public", false, 1322)
    ];
    this.nestedClasses = [];
    this.$scaledR$g$b$a$ = function ($r, $g, $b, $a) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($r, $g, $b, $a);
     return t;
    };
    this.$black = function () {
     let self = this;
     return self._$scaledR$g$b$a$(0, 0, 0, 255);
    };
    this.$blue = function () {
     let self = this;
     return self._$scaledR$g$b$a$(0, 0, 255, 255);
    };
    this.$blue$ = function ($brightness) {
     let self = this;
     return self._$scaledR$g$b$a$(0, 0, $brightness, 255);
    };
    this.$gray = function () {
     let self = this;
     return self._$r$g$b$((1/2), (1/2), (1/2));
    };
    this.$gray$ = function ($brightness) {
     let self = this;
     return self._$r$g$b$($brightness, $brightness, $brightness);
    };
    this.$h$s$v$ = function ($hue, $saturation, $brightness) {
     let self = this;
     let $s = nil;
     let $v = nil;
     let $hf = nil;
     let $i = nil;
     let $f = nil;
     let $p = nil;
     let $q = nil;
     let $t = nil;
     $s = $saturation.$asFloat().$max$(0).$min$(1);
     $v = $brightness.$asFloat().$max$(0).$min$(1);
     if ($s.$$equal(0)) {
      return self._$r$g$b$($v, $v, $v);
     };
     $hf = $hue.$asFloat();
     if (($hf < 0) || ($hf >= 360)) {
      $hf = $hf.$$back$back(360);
     };
     $hf = $hf / 60;
     $i = $hf.$asInteger();
     $f = $hf - $i;
     $p = (1 - $s) * $v;
     $q = (1 - ($s * $f)) * $v;
     $t = (1 - ($s * (1 - $f))) * $v;
     if ((0).$$equal($i)) {
      return self._$r$g$b$($v, $t, $p);
     };
     if ((1).$$equal($i)) {
      return self._$r$g$b$($q, $v, $p);
     };
     if ((2).$$equal($i)) {
      return self._$r$g$b$($p, $v, $t);
     };
     if ((3).$$equal($i)) {
      return self._$r$g$b$($p, $q, $v);
     };
     if ((4).$$equal($i)) {
      return self._$r$g$b$($t, $p, $v);
     };
     if ((5).$$equal($i)) {
      return self._$r$g$b$($v, $p, $q);
     };
     self._$Error().$signal$("implementation error");
     return self;
    };
    this.$magenta = function () {
     let self = this;
     return self._$r$g$b$a$(139, 0, 139, 255);
    };
    this.$orange = function () {
     let self = this;
     return self._$scaledR$g$b$a$(255, 165, 0, 255);
    };
    this.$r$g$b$ = function ($r, $g, $b) {
     let self = this;
     return self._$scaledR$g$b$a$(($r * 255).$floor(), ($g * 255).$floor(), ($b * 255).$floor(), 255);
    };
    this.$r$g$b$a$ = function ($r, $g, $b, $a) {
     let self = this;
     return self._$scaledR$g$b$a$(($r * 255).$floor(), ($g * 255).$floor(), ($b * 255).$floor(), $a);
    };
    this.$red = function () {
     let self = this;
     return self._$scaledR$g$b$a$(255, 0, 0, 255);
    };
    this.$red$ = function ($brightness) {
     let self = this;
     return self._$scaledR$g$b$a$($brightness, 0, 0, 255);
    };
    this.$white = function () {
     let self = this;
     return self._$scaledR$g$b$a$(255, 255, 255, 255);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for GraphicsForHTML5`Color";
      this.$scaledR$g$b$a$ = this._$scaledR$g$b$a$ = $.$scaledR$g$b$a$;
      this.$black = this._$black = $.$black;
      this.$blue = this._$blue = $.$blue;
      this.$blue$ = this._$blue$ = $.$blue$;
      this.$gray = this._$gray = $.$gray;
      this.$gray$ = this._$gray$ = $.$gray$;
      this.$h$s$v$ = this._$h$s$v$ = $.$h$s$v$;
      this.$magenta = this._$magenta = $.$magenta;
      this.$orange = this._$orange = $.$orange;
      this.$r$g$b$ = this._$r$g$b$ = $.$r$g$b$;
      this.$r$g$b$a$ = this._$r$g$b$a$ = $.$r$g$b$a$;
      this.$red = this._$red = $.$red;
      this.$red$ = this._$red$ = $.$red$;
      this.$white = this._$white = $.$white;
      this.$enclosingObjects$GraphicsForHTML5$Color = enclosingObjects;
      this.$super$GraphicsForHTML5$Color$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$GraphicsForHTML5$Context = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for GraphicsForHTML5`Context";
   this.name = "GraphicsForHTML5`Context";
   this.header = 1323;
   this.slots = [new SM("alien", "protected", false, false)];
   this.methods = [
    new MM("superInit`GraphicsForHTML5`Context", "protected", true, 1324),
    new MM("instance`initializer", "public", true, 1325),
    new MM("arcAt:radius:from:to:", "public", false, 1326),
    new MM("beginPath", "public", false, 1327),
    new MM("fill", "public", false, 1328),
    new MM("fillStyle:", "public", false, 1329),
    new MM("fillText:at:", "public", false, 1330),
    new MM("lineTo:", "public", false, 1331),
    new MM("moveTo:", "public", false, 1332),
    new MM("rectangle:", "public", false, 1333),
    new MM("stroke", "public", false, 1334),
    new MM("strokeStyle:", "public", false, 1335),
    new MM("init`alien:", "protected", true, 0),
    new MM("alien", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$GraphicsForHTML5$Context = function ($a) {
    let self = this;
    self.$super$GraphicsForHTML5$Context$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($a) {
    let self = this;
    self._$superInit$GraphicsForHTML5$Context($a);
    self._$init$alien$($a);
    return self;
   };
   this.$arcAt$radius$from$to$ = function ($center, $radius, $startAngle, $stopAngle) {
    let self = this;
    self._$alien().$arc$with$with$with$with$($center.$x(), $center.$y(), $radius, $startAngle, $stopAngle);
    return self;
   };
   this.$beginPath = function () {
    let self = this;
    self._$alien().$beginPath();
    return self;
   };
   this.$fill = function () {
    let self = this;
    self._$alien().$fill();
    return self;
   };
   this.$fillStyle$ = function ($c) {
    let self = this;
    self._$alien().$at$put$("fillStyle", $c.$asCSSString());
    return self;
   };
   this.$fillText$at$ = function ($string, $p) {
    let self = this;
    self._$alien().$fillText$with$with$($string, $p.$x(), $p.$y());
    return self;
   };
   this.$lineTo$ = function ($p) {
    let self = this;
    self._$alien().$lineTo$with$($p.$x(), $p.$y());
    return self;
   };
   this.$moveTo$ = function ($p) {
    let self = this;
    self._$alien().$moveTo$with$($p.$x(), $p.$y());
    return self;
   };
   this.$rectangle$ = function ($r) {
    let self = this;
    self._$alien().$rect$with$with$with$($r.$origin().$x(), $r.$origin().$y(), $r.$extent().$x(), $r.$extent().$y());
    return self;
   };
   this.$stroke = function () {
    let self = this;
    self._$alien().$stroke();
    return self;
   };
   this.$strokeStyle$ = function ($c) {
    let self = this;
    self._$alien().$at$put$("strokeStyle", $c.$asCSSString());
    return self;
   };
   this.$init$alien$ = function (v) {
    this.$alien$slot = v;
    return this;
   };
   this.$alien = function () {
    return this.$alien$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for GraphicsForHTML5`Context";
     this._$superInit$GraphicsForHTML5$Context = $.$superInit$GraphicsForHTML5$Context;
     this.$superInit$GraphicsForHTML5$Context = dnuCatcher("$superInit$GraphicsForHTML5$Context");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$arcAt$radius$from$to$ = this._$arcAt$radius$from$to$ = $.$arcAt$radius$from$to$;
     this.$beginPath = this._$beginPath = $.$beginPath;
     this.$fill = this._$fill = $.$fill;
     this.$fillStyle$ = this._$fillStyle$ = $.$fillStyle$;
     this.$fillText$at$ = this._$fillText$at$ = $.$fillText$at$;
     this.$lineTo$ = this._$lineTo$ = $.$lineTo$;
     this.$moveTo$ = this._$moveTo$ = $.$moveTo$;
     this.$rectangle$ = this._$rectangle$ = $.$rectangle$;
     this.$stroke = this._$stroke = $.$stroke;
     this.$strokeStyle$ = this._$strokeStyle$ = $.$strokeStyle$;
     this._$init$alien$ = $.$init$alien$;
     this.$init$alien$ = dnuCatcher("$init$alien$");
     this._$alien = $.$alien;
     this.$alien = dnuCatcher("$alien");
     this.$enclosingObjects$GraphicsForHTML5$Context = enclosingObjects;
     this.$super$GraphicsForHTML5$Context$slot = runtimeSuperclass;
     this["GraphicsForHTML5`Context"] = function () {
      superBasicNew.call(this);
      this.$alien$slot = nil;
     };
     this.basicNew = this["GraphicsForHTML5`Context"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for GraphicsForHTML5`Context";
    this.slots = [];
    this.methods = [new MM("on:", "public", true, 0)];
    this.nestedClasses = [];
    this.$on$ = function ($a) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($a);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for GraphicsForHTML5`Context";
      this.$on$ = this._$on$ = $.$on$;
      this.$enclosingObjects$GraphicsForHTML5$Context = enclosingObjects;
      this.$super$GraphicsForHTML5$Context$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$GraphicsForHTML5$Point = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for GraphicsForHTML5`Point";
   this.name = "GraphicsForHTML5`Point";
   this.header = 1336;
   this.slots = [
    new SM("x", "public", false, false),
    new SM("y", "public", false, false)
   ];
   this.methods = [
    new MM("superInit`GraphicsForHTML5`Point", "protected", true, 1337),
    new MM("instance`initializer", "public", true, 1338),
    new MM("=", "public", false, 1339),
    new MM("corner:", "public", false, 1340),
    new MM("extent:", "public", false, 1341),
    new MM("hash", "public", false, 1342),
    new MM("isPoint", "public", false, 1343),
    new MM("printString", "public", false, 1344),
    new MM("r", "public", false, 1345),
    new MM("theta", "public", false, 1346),
    new MM("init`x:", "public", true, 0),
    new MM("x", "public", true, 0),
    new MM("init`y:", "public", true, 0),
    new MM("y", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$GraphicsForHTML5$Point = function ($xCoord, $yCoord) {
    let self = this;
    self.$super$GraphicsForHTML5$Point$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($xCoord, $yCoord) {
    let self = this;
    self._$superInit$GraphicsForHTML5$Point($xCoord, $yCoord);
    self._$init$x$($xCoord);
    self._$init$y$($yCoord);
    return self;
   };
   this.$$equal = function ($other) {
    let self = this;
    return $other.$isPoint() && (self._$x().$$equal($other.$x()) && self._$y().$$equal($other.$y()));
   };
   this.$corner$ = function ($corner) {
    let self = this;
    return self.$enclosingObjects$GraphicsForHTML5$Point[0]._$Rectangle().$origin$corner$(self, $corner);
   };
   this.$extent$ = function ($extent) {
    let self = this;
    return self.$enclosingObjects$GraphicsForHTML5$Point[0]._$Rectangle().$origin$extent$(self, $extent);
   };
   this.$hash = function () {
    let self = this;
    return self._$x().$hash().$bitXor$(self._$y().$hash());
   };
   this.$isPoint = function () {
    let self = this;
    return true;
   };
   this.$printString = function () {
    let self = this;
    return self._$x().$printString().$$comma(" @ ").$$comma(self._$y().$printString());
   };
   this.$r = function () {
    let self = this;
    return ((self._$x() * self._$x()) + (self._$y() * self._$y())).$sqrt();
   };
   this.$theta = function () {
    let self = this;
    self._$Error().$signal$("Unimplemented");
    return self;
   };
   this.$init$x$ = function (v) {
    this.$x$slot = v;
    return this;
   };
   this.$x = function () {
    return this.$x$slot;
   };
   this.$init$y$ = function (v) {
    this.$y$slot = v;
    return this;
   };
   this.$y = function () {
    return this.$y$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for GraphicsForHTML5`Point";
     this._$superInit$GraphicsForHTML5$Point = $.$superInit$GraphicsForHTML5$Point;
     this.$superInit$GraphicsForHTML5$Point = dnuCatcher("$superInit$GraphicsForHTML5$Point");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$$equal = this._$$equal = $.$$equal;
     this.$corner$ = this._$corner$ = $.$corner$;
     this.$extent$ = this._$extent$ = $.$extent$;
     this.$hash = this._$hash = $.$hash;
     this.$isPoint = this._$isPoint = $.$isPoint;
     this.$printString = this._$printString = $.$printString;
     this.$r = this._$r = $.$r;
     this.$theta = this._$theta = $.$theta;
     this.$init$x$ = this._$init$x$ = $.$init$x$;
     this.$x = this._$x = $.$x;
     this.$init$y$ = this._$init$y$ = $.$init$y$;
     this.$y = this._$y = $.$y;
     this.$enclosingObjects$GraphicsForHTML5$Point = enclosingObjects;
     this.$super$GraphicsForHTML5$Point$slot = runtimeSuperclass;
     this["GraphicsForHTML5`Point"] = function () {
      superBasicNew.call(this);
      this.$x$slot = nil;
      this.$y$slot = nil;
     };
     this.basicNew = this["GraphicsForHTML5`Point"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for GraphicsForHTML5`Point";
    this.slots = [];
    this.methods = [
     new MM("x:y:", "public", true, 0),
     new MM("r:theta:", "public", false, 1347),
     new MM("zero", "public", false, 1348)
    ];
    this.nestedClasses = [];
    this.$x$y$ = function ($xCoord, $yCoord) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($xCoord, $yCoord);
     return t;
    };
    this.$r$theta$ = function ($r, $theta) {
     let self = this;
     return self._$x$y$($r * $theta.$cos(), $r * $theta.$sin());
    };
    this.$zero = function () {
     let self = this;
     return self._$x$y$(0, 0);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for GraphicsForHTML5`Point";
      this.$x$y$ = this._$x$y$ = $.$x$y$;
      this.$r$theta$ = this._$r$theta$ = $.$r$theta$;
      this.$zero = this._$zero = $.$zero;
      this.$enclosingObjects$GraphicsForHTML5$Point = enclosingObjects;
      this.$super$GraphicsForHTML5$Point$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$GraphicsForHTML5$Rectangle = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for GraphicsForHTML5`Rectangle";
   this.name = "GraphicsForHTML5`Rectangle";
   this.header = 1349;
   this.slots = [
    new SM("origin", "public", false, false),
    new SM("corner", "public", false, false)
   ];
   this.methods = [
    new MM("superInit`GraphicsForHTML5`Rectangle", "protected", true, 1350),
    new MM("instance`initializer", "public", true, 1351),
    new MM("=", "public", false, 1352),
    new MM("center", "public", false, 1353),
    new MM("containsPoint:", "public", false, 1354),
    new MM("extent", "public", false, 1355),
    new MM("hash", "public", false, 1356),
    new MM("insetBy:", "public", false, 1357),
    new MM("isRectangle", "public", false, 1358),
    new MM("printString", "public", false, 1359),
    new MM("init`origin:", "public", true, 0),
    new MM("origin", "public", true, 0),
    new MM("init`corner:", "public", true, 0),
    new MM("corner", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$GraphicsForHTML5$Rectangle = function ($o, $c) {
    let self = this;
    self.$super$GraphicsForHTML5$Rectangle$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($o, $c) {
    let self = this;
    self._$superInit$GraphicsForHTML5$Rectangle($o, $c);
    self._$init$origin$($o);
    self._$init$corner$($c);
    return self;
   };
   this.$$equal = function ($other) {
    let self = this;
    return $other.$isRectangle() && (self._$origin().$$equal($other.$origin()) && self._$corner().$$equal($other.$corner()));
   };
   this.$center = function () {
    let self = this;
    return self.$enclosingObjects$GraphicsForHTML5$Rectangle[0]._$Point().$x$y$(self._$origin().$x() + ((self._$corner().$x() - self._$origin().$x()) / 2), self._$origin().$y() + ((self._$corner().$y() - self._$origin().$y()) / 2));
   };
   this.$containsPoint$ = function ($p) {
    let self = this;
    return ((self._$origin().$x().$$less$equal($p.$x()) && self._$origin().$y().$$less$equal($p.$y())) && self._$corner().$x().$$greater$equal($p.$x())) && self._$corner().$y().$$greater$equal($p.$y());
   };
   this.$extent = function () {
    let self = this;
    return self.$enclosingObjects$GraphicsForHTML5$Rectangle[0]._$Point().$x$y$(self._$corner().$x() - self._$origin().$x(), self._$corner().$y() - self._$origin().$y());
   };
   this.$hash = function () {
    let self = this;
    return self._$origin().$hash().$bitXor$(self._$corner().$hash());
   };
   this.$insetBy$ = function ($delta) {
    let self = this;
    return self.$enclosingObjects$GraphicsForHTML5$Rectangle[0]._$Rectangle().$origin$corner$(self.$enclosingObjects$GraphicsForHTML5$Rectangle[0]._$Point().$x$y$(self._$origin().$x() + $delta.$x(), self._$origin().$y() + $delta.$y()), self.$enclosingObjects$GraphicsForHTML5$Rectangle[0]._$Point().$x$y$(self._$corner().$x() - $delta.$x(), self._$corner().$y() - $delta.$y()));
   };
   this.$isRectangle = function () {
    let self = this;
    return true;
   };
   this.$printString = function () {
    let self = this;
    return "Rectangle origin: ".$$comma(self._$origin().$printString()).$$comma(" corner: ").$$comma(self._$corner().$printString());
   };
   this.$init$origin$ = function (v) {
    this.$origin$slot = v;
    return this;
   };
   this.$origin = function () {
    return this.$origin$slot;
   };
   this.$init$corner$ = function (v) {
    this.$corner$slot = v;
    return this;
   };
   this.$corner = function () {
    return this.$corner$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for GraphicsForHTML5`Rectangle";
     this._$superInit$GraphicsForHTML5$Rectangle = $.$superInit$GraphicsForHTML5$Rectangle;
     this.$superInit$GraphicsForHTML5$Rectangle = dnuCatcher("$superInit$GraphicsForHTML5$Rectangle");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$$equal = this._$$equal = $.$$equal;
     this.$center = this._$center = $.$center;
     this.$containsPoint$ = this._$containsPoint$ = $.$containsPoint$;
     this.$extent = this._$extent = $.$extent;
     this.$hash = this._$hash = $.$hash;
     this.$insetBy$ = this._$insetBy$ = $.$insetBy$;
     this.$isRectangle = this._$isRectangle = $.$isRectangle;
     this.$printString = this._$printString = $.$printString;
     this.$init$origin$ = this._$init$origin$ = $.$init$origin$;
     this.$origin = this._$origin = $.$origin;
     this.$init$corner$ = this._$init$corner$ = $.$init$corner$;
     this.$corner = this._$corner = $.$corner;
     this.$enclosingObjects$GraphicsForHTML5$Rectangle = enclosingObjects;
     this.$super$GraphicsForHTML5$Rectangle$slot = runtimeSuperclass;
     this["GraphicsForHTML5`Rectangle"] = function () {
      superBasicNew.call(this);
      this.$origin$slot = nil;
      this.$corner$slot = nil;
     };
     this.basicNew = this["GraphicsForHTML5`Rectangle"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for GraphicsForHTML5`Rectangle";
    this.slots = [];
    this.methods = [
     new MM("origin:corner:", "public", true, 0),
     new MM("origin:extent:", "public", false, 1360)
    ];
    this.nestedClasses = [];
    this.$origin$corner$ = function ($o, $c) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($o, $c);
     return t;
    };
    this.$origin$extent$ = function ($o, $e) {
     let self = this;
     return self._$origin$corner$($o, self.$enclosingObjects$GraphicsForHTML5$Rectangle[0]._$Point().$x$y$($o.$x() + $e.$x(), $o.$y() + $e.$y()));
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for GraphicsForHTML5`Rectangle";
      this.$origin$corner$ = this._$origin$corner$ = $.$origin$corner$;
      this.$origin$extent$ = this._$origin$extent$ = $.$origin$extent$;
      this.$enclosingObjects$GraphicsForHTML5$Rectangle = enclosingObjects;
      this.$super$GraphicsForHTML5$Rectangle$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$GraphicsForHTML5$Canvas.enclosingMixin = this;
  this.$GraphicsForHTML5$Color.enclosingMixin = this;
  this.$GraphicsForHTML5$Context.enclosingMixin = this;
  this.$GraphicsForHTML5$Point.enclosingMixin = this;
  this.$GraphicsForHTML5$Rectangle.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for GraphicsForHTML5";
    this._$superInit$GraphicsForHTML5 = $.$superInit$GraphicsForHTML5;
    this.$superInit$GraphicsForHTML5 = dnuCatcher("$superInit$GraphicsForHTML5");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this.$Canvas = this._$Canvas = $.$Canvas;
    this.$Color = this._$Color = $.$Color;
    this.$Context = this._$Context = $.$Context;
    this.$Point = this._$Point = $.$Point;
    this.$Rectangle = this._$Rectangle = $.$Rectangle;
    this._$init$document$ = $.$init$document$;
    this.$init$document$ = dnuCatcher("$init$document$");
    this._$document = $.$document;
    this.$document = dnuCatcher("$document");
    this.$init$GraphicsForHTML5$Canvas$ = this._$init$GraphicsForHTML5$Canvas$ = $.$init$GraphicsForHTML5$Canvas$;
    this.$GraphicsForHTML5$Canvas = this._$GraphicsForHTML5$Canvas = $.$GraphicsForHTML5$Canvas;
    this.$GraphicsForHTML5$Canvas$ = this._$GraphicsForHTML5$Canvas$ = $.$GraphicsForHTML5$Canvas$;
    this.$init$GraphicsForHTML5$Color$ = this._$init$GraphicsForHTML5$Color$ = $.$init$GraphicsForHTML5$Color$;
    this.$GraphicsForHTML5$Color = this._$GraphicsForHTML5$Color = $.$GraphicsForHTML5$Color;
    this.$GraphicsForHTML5$Color$ = this._$GraphicsForHTML5$Color$ = $.$GraphicsForHTML5$Color$;
    this.$init$GraphicsForHTML5$Context$ = this._$init$GraphicsForHTML5$Context$ = $.$init$GraphicsForHTML5$Context$;
    this.$GraphicsForHTML5$Context = this._$GraphicsForHTML5$Context = $.$GraphicsForHTML5$Context;
    this.$GraphicsForHTML5$Context$ = this._$GraphicsForHTML5$Context$ = $.$GraphicsForHTML5$Context$;
    this.$init$GraphicsForHTML5$Point$ = this._$init$GraphicsForHTML5$Point$ = $.$init$GraphicsForHTML5$Point$;
    this.$GraphicsForHTML5$Point = this._$GraphicsForHTML5$Point = $.$GraphicsForHTML5$Point;
    this.$GraphicsForHTML5$Point$ = this._$GraphicsForHTML5$Point$ = $.$GraphicsForHTML5$Point$;
    this.$init$GraphicsForHTML5$Rectangle$ = this._$init$GraphicsForHTML5$Rectangle$ = $.$init$GraphicsForHTML5$Rectangle$;
    this.$GraphicsForHTML5$Rectangle = this._$GraphicsForHTML5$Rectangle = $.$GraphicsForHTML5$Rectangle;
    this.$GraphicsForHTML5$Rectangle$ = this._$GraphicsForHTML5$Rectangle$ = $.$GraphicsForHTML5$Rectangle$;
    this.$enclosingObjects$GraphicsForHTML5 = enclosingObjects;
    this.$super$GraphicsForHTML5$slot = runtimeSuperclass;
    this.GraphicsForHTML5 = function () {
     superBasicNew.call(this);
     this.$document$slot = nil;
     this.$GraphicsForHTML5$Canvas$slot = nil;
     this.$GraphicsForHTML5$Color$slot = nil;
     this.$GraphicsForHTML5$Context$slot = nil;
     this.$GraphicsForHTML5$Point$slot = nil;
     this.$GraphicsForHTML5$Rectangle$slot = nil;
    };
    this.basicNew = this.GraphicsForHTML5;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   let $ = this;
   this.debug = "Runtime meta mixin for GraphicsForHTML5";
   this.slots = [];
   this.methods = [new MM("usingPlatform:", "public", true, 0)];
   this.nestedClasses = [];
   this.$usingPlatform$ = function ($p) {
    let t = new this.nonMeta.basicNew();
    t.$instance$initializer($p);
    return t;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for GraphicsForHTML5";
     this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
     this.$enclosingObjects$GraphicsForHTML5 = enclosingObjects;
     this.$super$GraphicsForHTML5$slot = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$TextModule = new function () {
  let $ = this;
  let $0 = this;
  this.debug = "Runtime mixin for TextModule";
  this.name = "TextModule";
  this.header = 1361;
  this.slots = [
   new SM("TextModule`Text", "public", true, true),
   new SM("TextModule`TextBlock", "public", true, true),
   new SM("TextModule`TextProperties", "public", true, true),
   new SM("TextModule`TextString", "public", true, true)
  ];
  this.methods = [
   new MM("superInit`TextModule", "protected", true, 1362),
   new MM("instance`initializer", "public", true, 1363),
   new MM("Text", "public", true, 0),
   new MM("TextBlock", "public", true, 0),
   new MM("TextProperties", "public", true, 0),
   new MM("TextString", "public", true, 0),
   new MM("init`TextModule`Text:", "public", true, 0),
   new MM("TextModule`Text", "public", true, 0),
   new MM("TextModule`Text:", "public", true, 0),
   new MM("init`TextModule`TextBlock:", "public", true, 0),
   new MM("TextModule`TextBlock", "public", true, 0),
   new MM("TextModule`TextBlock:", "public", true, 0),
   new MM("init`TextModule`TextProperties:", "public", true, 0),
   new MM("TextModule`TextProperties", "public", true, 0),
   new MM("TextModule`TextProperties:", "public", true, 0),
   new MM("init`TextModule`TextString:", "public", true, 0),
   new MM("TextModule`TextString", "public", true, 0),
   new MM("TextModule`TextString:", "public", true, 0)
  ];
  this.nestedClasses = [
   "TextModule`Text",
   "TextModule`TextBlock",
   "TextModule`TextProperties",
   "TextModule`TextString"
  ];
  this.applications = [];
  this.$superInit$TextModule = function ($p) {
   let self = this;
   self.$super$TextModule$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($p) {
   let self = this;
   self._$superInit$TextModule($p);
   return self;
  };
  this.$Text = function () {
   if (nil === this.$TextModule$Text$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$TextModule);
    let mixin = $.$TextModule$Text;
    this.$TextModule$Text$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$TextModule$Text$slot;
  };
  this.$TextBlock = function () {
   if (nil === this.$TextModule$TextBlock$slot) {
    let self = this;
    let superclass = self._$Text();
    let enclosingObjects = [this].concat(this.$enclosingObjects$TextModule);
    let mixin = $.$TextModule$TextBlock;
    this.$TextModule$TextBlock$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$TextModule$TextBlock$slot;
  };
  this.$TextProperties = function () {
   if (nil === this.$TextModule$TextProperties$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$TextModule);
    let mixin = $.$TextModule$TextProperties;
    this.$TextModule$TextProperties$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$TextModule$TextProperties$slot;
  };
  this.$TextString = function () {
   if (nil === this.$TextModule$TextString$slot) {
    let self = this;
    let superclass = self._$Text();
    let enclosingObjects = [this].concat(this.$enclosingObjects$TextModule);
    let mixin = $.$TextModule$TextString;
    this.$TextModule$TextString$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$TextModule$TextString$slot;
  };
  this.$init$TextModule$Text$ = function (v) {
   this.$TextModule$Text$slot = v;
   return this;
  };
  this.$TextModule$Text = function () {
   return this.$TextModule$Text$slot;
  };
  this.$TextModule$Text$ = function (v) {
   this.$TextModule$Text$slot = v;
   return this;
  };
  this.$init$TextModule$TextBlock$ = function (v) {
   this.$TextModule$TextBlock$slot = v;
   return this;
  };
  this.$TextModule$TextBlock = function () {
   return this.$TextModule$TextBlock$slot;
  };
  this.$TextModule$TextBlock$ = function (v) {
   this.$TextModule$TextBlock$slot = v;
   return this;
  };
  this.$init$TextModule$TextProperties$ = function (v) {
   this.$TextModule$TextProperties$slot = v;
   return this;
  };
  this.$TextModule$TextProperties = function () {
   return this.$TextModule$TextProperties$slot;
  };
  this.$TextModule$TextProperties$ = function (v) {
   this.$TextModule$TextProperties$slot = v;
   return this;
  };
  this.$init$TextModule$TextString$ = function (v) {
   this.$TextModule$TextString$slot = v;
   return this;
  };
  this.$TextModule$TextString = function () {
   return this.$TextModule$TextString$slot;
  };
  this.$TextModule$TextString$ = function (v) {
   this.$TextModule$TextString$slot = v;
   return this;
  };
  this.$TextModule$Text = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for TextModule`Text";
   this.name = "TextModule`Text";
   this.header = 1364;
   this.slots = [new SM("textProperties", "public", false, false)];
   this.methods = [
    new MM("superInit`TextModule`Text", "protected", true, 1365),
    new MM("instance`initializer", "public", true, 1366),
    new MM("isKindOfText", "public", false, 1367),
    new MM("textUnits", "public", false, 1368),
    new MM("init`textProperties:", "public", true, 0),
    new MM("textProperties", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$TextModule$Text = function ($tps) {
    let self = this;
    self.$super$TextModule$Text$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($tps) {
    let self = this;
    self._$superInit$TextModule$Text($tps);
    self._$init$textProperties$($tps);
    return self;
   };
   this.$isKindOfText = function () {
    let self = this;
    return true;
   };
   this.$textUnits = function () {
    let self = this;
    return self._$subclassResponsibility();
   };
   this.$init$textProperties$ = function (v) {
    this.$textProperties$slot = v;
    return this;
   };
   this.$textProperties = function () {
    return this.$textProperties$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for TextModule`Text";
     this._$superInit$TextModule$Text = $.$superInit$TextModule$Text;
     this.$superInit$TextModule$Text = dnuCatcher("$superInit$TextModule$Text");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$isKindOfText = this._$isKindOfText = $.$isKindOfText;
     this.$textUnits = this._$textUnits = $.$textUnits;
     this.$init$textProperties$ = this._$init$textProperties$ = $.$init$textProperties$;
     this.$textProperties = this._$textProperties = $.$textProperties;
     this.$enclosingObjects$TextModule$Text = enclosingObjects;
     this.$super$TextModule$Text$slot = runtimeSuperclass;
     this["TextModule`Text"] = function () {
      superBasicNew.call(this);
      this.$textProperties$slot = nil;
     };
     this.basicNew = this["TextModule`Text"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for TextModule`Text";
    this.slots = [];
    this.methods = [new MM("properties:", "public", true, 0)];
    this.nestedClasses = [];
    this.$properties$ = function ($tps) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($tps);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for TextModule`Text";
      this.$properties$ = this._$properties$ = $.$properties$;
      this.$enclosingObjects$TextModule$Text = enclosingObjects;
      this.$super$TextModule$Text$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$TextModule$TextBlock = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for TextModule`TextBlock";
   this.name = "TextModule`TextBlock";
   this.header = 1369;
   this.slots = [new SM("textUnits", "public", false, false)];
   this.methods = [
    new MM("superInit`TextModule`TextBlock", "protected", true, 1370),
    new MM("instance`initializer", "public", true, 1371),
    new MM("cloneWithDefaultProperties:", "public", false, 1372),
    new MM("elementaryTextUnits", "public", false, 1373),
    new MM("isKindOfTextBlock", "public", false, 1374),
    new MM("string", "public", false, 1375),
    new MM("init`textUnits:", "public", true, 0),
    new MM("textUnits", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$TextModule$TextBlock = function ($tus, $tps) {
    let self = this;
    self.$super$TextModule$TextBlock$slot._$instance$initializer.call(self, $tps);
    return self;
   };
   this.$instance$initializer = function ($tus, $tps) {
    let self = this;
    self._$superInit$TextModule$TextBlock($tus, $tps);
    self._$init$textUnits$($tus);
    return self;
   };
   this.$cloneWithDefaultProperties$ = function ($tps) {
    let self = this;
    return self._$class().$units$properties$(self._$immediateTextUnits(), $tps.$supplyDefaultsFor$(self._$textProperties()));
   };
   this.$elementaryTextUnits = function () {
    let self = this;
    return self._$textUnits().$flatMap$(function ($u) {
     return $u.$isKindOfText().$ifTrue$ifFalse$(function () {
      return $u.$cloneWithDefaultProperties$(self._$textProperties()).$elementaryTextUnits();
     }, function () {
      return $u;
     });
    });
   };
   this.$isKindOfTextBlock = function () {
    let self = this;
    return true;
   };
   this.$string = function () {
    let self = this;
    return self._$textUnits().$inject$into$("", function ($s1, $s2) {
     return $s1.$$comma($s2.$string());
    });
   };
   this.$init$textUnits$ = function (v) {
    this.$textUnits$slot = v;
    return this;
   };
   this.$textUnits = function () {
    return this.$textUnits$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for TextModule`TextBlock";
     this._$superInit$TextModule$TextBlock = $.$superInit$TextModule$TextBlock;
     this.$superInit$TextModule$TextBlock = dnuCatcher("$superInit$TextModule$TextBlock");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$cloneWithDefaultProperties$ = this._$cloneWithDefaultProperties$ = $.$cloneWithDefaultProperties$;
     this.$elementaryTextUnits = this._$elementaryTextUnits = $.$elementaryTextUnits;
     this.$isKindOfTextBlock = this._$isKindOfTextBlock = $.$isKindOfTextBlock;
     this.$string = this._$string = $.$string;
     this.$init$textUnits$ = this._$init$textUnits$ = $.$init$textUnits$;
     this.$textUnits = this._$textUnits = $.$textUnits;
     this.$enclosingObjects$TextModule$TextBlock = enclosingObjects;
     this.$super$TextModule$TextBlock$slot = runtimeSuperclass;
     this["TextModule`TextBlock"] = function () {
      superBasicNew.call(this);
      this.$textUnits$slot = nil;
     };
     this.basicNew = this["TextModule`TextBlock"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for TextModule`TextBlock";
    this.slots = [];
    this.methods = [
     new MM("units:properties:", "public", true, 0),
     new MM("forString:", "public", false, 1376),
     new MM("units:", "public", false, 1377)
    ];
    this.nestedClasses = [];
    this.$units$properties$ = function ($tus, $tps) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($tus, $tps);
     return t;
    };
    this.$forString$ = function ($s) {
     let self = this;
     return self._$units$([self.$enclosingObjects$TextModule$TextBlock[0]._$TextString().$forString$($s)]);
    };
    this.$units$ = function ($tus) {
     let self = this;
     return self._$units$properties$($tus, self.$enclosingObjects$TextModule$TextBlock[0]._$TextProperties().$new());
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for TextModule`TextBlock";
      this.$units$properties$ = this._$units$properties$ = $.$units$properties$;
      this.$forString$ = this._$forString$ = $.$forString$;
      this.$units$ = this._$units$ = $.$units$;
      this.$enclosingObjects$TextModule$TextBlock = enclosingObjects;
      this.$super$TextModule$TextBlock$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$TextModule$TextProperties = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for TextModule`TextProperties";
   this.name = "TextModule`TextProperties";
   this.header = 1378;
   this.slots = [
    new SM("font", "public", true, false),
    new SM("weight", "public", true, false),
    new SM("style", "public", true, false),
    new SM("pointSize", "public", true, false),
    new SM("color", "public", true, false),
    new SM("strikeThrough", "public", true, false),
    new SM("underline", "public", true, false)
   ];
   this.methods = [
    new MM("superInit`TextModule`TextProperties", "protected", true, 1379),
    new MM("instance`initializer", "public", true, 1380),
    new MM("applyTo:", "public", false, 1381),
    new MM("applyToText:", "public", false, 1382),
    new MM("clone", "public", false, 1383),
    new MM("supplyDefaultsFor:", "public", false, 1384),
    new MM("init`font:", "public", true, 0),
    new MM("font", "public", true, 0),
    new MM("font:", "public", true, 0),
    new MM("init`weight:", "public", true, 0),
    new MM("weight", "public", true, 0),
    new MM("weight:", "public", true, 0),
    new MM("init`style:", "public", true, 0),
    new MM("style", "public", true, 0),
    new MM("style:", "public", true, 0),
    new MM("init`pointSize:", "public", true, 0),
    new MM("pointSize", "public", true, 0),
    new MM("pointSize:", "public", true, 0),
    new MM("init`color:", "public", true, 0),
    new MM("color", "public", true, 0),
    new MM("color:", "public", true, 0),
    new MM("init`strikeThrough:", "public", true, 0),
    new MM("strikeThrough", "public", true, 0),
    new MM("strikeThrough:", "public", true, 0),
    new MM("init`underline:", "public", true, 0),
    new MM("underline", "public", true, 0),
    new MM("underline:", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$TextModule$TextProperties = function () {
    let self = this;
    self.$super$TextModule$TextProperties$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$TextModule$TextProperties();
    return self;
   };
   this.$applyTo$ = function ($element) {
    let self = this;
    let $styleElement = nil;
    $styleElement = $element.$at$("style");
    $styleElement.$setProperty$to$("white-space", "pre-wrap");
    if (!self._$font().$isNil()) {
     $styleElement.$setProperty$to$("font-family", self._$font());
    };
    if (!self._$pointSize().$isNil()) {
     $styleElement.$setProperty$to$("font-size", self._$pointSize().$printString().$$comma("pt"));
    };
    if (!self._$weight().$isNil()) {
     $styleElement.$setProperty$to$("font-weight", self._$weight());
    };
    if (!self._$style().$isNil()) {
     $styleElement.$setProperty$to$("font-style", self._$style());
    };
    if (!self._$color().$isNil()) {
     $styleElement.$setProperty$to$("color", "rgb(".$$comma(self._$color().$red().$printString()).$$comma(", ").$$comma(self._$color().$green().$printString()).$$comma(", ").$$comma(self._$color().$blue().$printString()).$$comma(")"));
    };
    if (!self._$strikeThrough().$isNil()) {
     if (self._$strikeThrough()) {
      $styleElement.$setProperty$to$("text-decoration", "line-through");
     };
    };
    if (!self._$underline().$isNil()) {
     if (self._$underline()) {
      $styleElement.$setProperty$to$("text-decoration", "underline");
     };
    };
    return self;
   };
   this.$applyToText$ = function ($t) {
    let self = this;
    let $tProperties = nil;
    $tProperties = $t.$textProperties();
    if ($tProperties.$font().$isNil()) {
     $tProperties.$font$(self._$font());
    };
    if ($tProperties.$weight().$isNil()) {
     $tProperties.$weight$(self._$weight());
    };
    if ($tProperties.$pointSize().$isNil()) {
     $tProperties.$pointSize$(self._$pointSize());
    };
    if ($tProperties.$color().$isNil()) {
     $tProperties.$color$(self._$color());
    };
    if ($tProperties.$strikeThrough().$isNil()) {
     $tProperties.$strikeThrough$(self._$strikeThrough());
    };
    if ($tProperties.$underline().$isNil()) {
     $tProperties.$underline$(self._$underline());
    };
    return self;
   };
   this.$clone = function () {
    let self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$font$(self._$font());
     cascadeReceiver.$weight$(self._$weight());
     cascadeReceiver.$pointSize$(self._$pointSize());
     cascadeReceiver.$color$(self._$color());
     cascadeReceiver.$strikeThrough$(self._$strikeThrough());
     cascadeReceiver.$underline$(self._$underline());
     return cascadeReceiver.$yourself();
    })(self._$class().$new());
   };
   this.$supplyDefaultsFor$ = function ($tps) {
    let self = this;
    let $tProperties = nil;
    $tProperties = $tps.$clone();
    if ($tProperties.$font().$isNil()) {
     $tProperties.$font$(self._$font());
    };
    if ($tProperties.$weight().$isNil()) {
     $tProperties.$weight$(self._$weight());
    };
    if ($tProperties.$pointSize().$isNil()) {
     $tProperties.$pointSize$(self._$pointSize());
    };
    if ($tProperties.$color().$isNil()) {
     $tProperties.$color$(self._$color());
    };
    if ($tProperties.$strikeThrough().$isNil()) {
     $tProperties.$strikeThrough$(self._$strikeThrough());
    };
    if ($tProperties.$underline().$isNil()) {
     $tProperties.$underline$(self._$underline());
    };
    return self;
   };
   this.$init$font$ = function (v) {
    this.$font$slot = v;
    return this;
   };
   this.$font = function () {
    return this.$font$slot;
   };
   this.$font$ = function (v) {
    this.$font$slot = v;
    return this;
   };
   this.$init$weight$ = function (v) {
    this.$weight$slot = v;
    return this;
   };
   this.$weight = function () {
    return this.$weight$slot;
   };
   this.$weight$ = function (v) {
    this.$weight$slot = v;
    return this;
   };
   this.$init$style$ = function (v) {
    this.$style$slot = v;
    return this;
   };
   this.$style = function () {
    return this.$style$slot;
   };
   this.$style$ = function (v) {
    this.$style$slot = v;
    return this;
   };
   this.$init$pointSize$ = function (v) {
    this.$pointSize$slot = v;
    return this;
   };
   this.$pointSize = function () {
    return this.$pointSize$slot;
   };
   this.$pointSize$ = function (v) {
    this.$pointSize$slot = v;
    return this;
   };
   this.$init$color$ = function (v) {
    this.$color$slot = v;
    return this;
   };
   this.$color = function () {
    return this.$color$slot;
   };
   this.$color$ = function (v) {
    this.$color$slot = v;
    return this;
   };
   this.$init$strikeThrough$ = function (v) {
    this.$strikeThrough$slot = v;
    return this;
   };
   this.$strikeThrough = function () {
    return this.$strikeThrough$slot;
   };
   this.$strikeThrough$ = function (v) {
    this.$strikeThrough$slot = v;
    return this;
   };
   this.$init$underline$ = function (v) {
    this.$underline$slot = v;
    return this;
   };
   this.$underline = function () {
    return this.$underline$slot;
   };
   this.$underline$ = function (v) {
    this.$underline$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for TextModule`TextProperties";
     this._$superInit$TextModule$TextProperties = $.$superInit$TextModule$TextProperties;
     this.$superInit$TextModule$TextProperties = dnuCatcher("$superInit$TextModule$TextProperties");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$applyTo$ = this._$applyTo$ = $.$applyTo$;
     this.$applyToText$ = this._$applyToText$ = $.$applyToText$;
     this.$clone = this._$clone = $.$clone;
     this.$supplyDefaultsFor$ = this._$supplyDefaultsFor$ = $.$supplyDefaultsFor$;
     this.$init$font$ = this._$init$font$ = $.$init$font$;
     this.$font = this._$font = $.$font;
     this.$font$ = this._$font$ = $.$font$;
     this.$init$weight$ = this._$init$weight$ = $.$init$weight$;
     this.$weight = this._$weight = $.$weight;
     this.$weight$ = this._$weight$ = $.$weight$;
     this.$init$style$ = this._$init$style$ = $.$init$style$;
     this.$style = this._$style = $.$style;
     this.$style$ = this._$style$ = $.$style$;
     this.$init$pointSize$ = this._$init$pointSize$ = $.$init$pointSize$;
     this.$pointSize = this._$pointSize = $.$pointSize;
     this.$pointSize$ = this._$pointSize$ = $.$pointSize$;
     this.$init$color$ = this._$init$color$ = $.$init$color$;
     this.$color = this._$color = $.$color;
     this.$color$ = this._$color$ = $.$color$;
     this.$init$strikeThrough$ = this._$init$strikeThrough$ = $.$init$strikeThrough$;
     this.$strikeThrough = this._$strikeThrough = $.$strikeThrough;
     this.$strikeThrough$ = this._$strikeThrough$ = $.$strikeThrough$;
     this.$init$underline$ = this._$init$underline$ = $.$init$underline$;
     this.$underline = this._$underline = $.$underline;
     this.$underline$ = this._$underline$ = $.$underline$;
     this.$enclosingObjects$TextModule$TextProperties = enclosingObjects;
     this.$super$TextModule$TextProperties$slot = runtimeSuperclass;
     this["TextModule`TextProperties"] = function () {
      superBasicNew.call(this);
      this.$font$slot = nil;
      this.$weight$slot = nil;
      this.$style$slot = nil;
      this.$pointSize$slot = nil;
      this.$color$slot = nil;
      this.$strikeThrough$slot = nil;
      this.$underline$slot = nil;
     };
     this.basicNew = this["TextModule`TextProperties"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for TextModule`TextProperties";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for TextModule`TextProperties";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$TextModule$TextProperties = enclosingObjects;
      this.$super$TextModule$TextProperties$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$TextModule$TextString = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for TextModule`TextString";
   this.name = "TextModule`TextString";
   this.header = 1385;
   this.slots = [new SM("string", "public", false, false)];
   this.methods = [
    new MM("superInit`TextModule`TextString", "protected", true, 1386),
    new MM("instance`initializer", "public", true, 1387),
    new MM("cloneWithDefaultProperties:", "public", false, 1388),
    new MM("elementaryTextUnits", "public", false, 1389),
    new MM("isKindOfTextString", "public", false, 1390),
    new MM("init`string:", "public", true, 0),
    new MM("string", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$TextModule$TextString = function ($s, $tps) {
    let self = this;
    self.$super$TextModule$TextString$slot._$instance$initializer.call(self, $tps);
    return self;
   };
   this.$instance$initializer = function ($s, $tps) {
    let self = this;
    self._$superInit$TextModule$TextString($s, $tps);
    self._$init$string$($s);
    return self;
   };
   this.$cloneWithDefaultProperties$ = function ($tps) {
    let self = this;
    return self._$class().$forString$properties$(self._$string(), $tps.$supplyDefaultsFor$(self._$textProperties()));
   };
   this.$elementaryTextUnits = function () {
    let self = this;
    return [self];
   };
   this.$isKindOfTextString = function () {
    let self = this;
    return true;
   };
   this.$init$string$ = function (v) {
    this.$string$slot = v;
    return this;
   };
   this.$string = function () {
    return this.$string$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for TextModule`TextString";
     this._$superInit$TextModule$TextString = $.$superInit$TextModule$TextString;
     this.$superInit$TextModule$TextString = dnuCatcher("$superInit$TextModule$TextString");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$cloneWithDefaultProperties$ = this._$cloneWithDefaultProperties$ = $.$cloneWithDefaultProperties$;
     this.$elementaryTextUnits = this._$elementaryTextUnits = $.$elementaryTextUnits;
     this.$isKindOfTextString = this._$isKindOfTextString = $.$isKindOfTextString;
     this.$init$string$ = this._$init$string$ = $.$init$string$;
     this.$string = this._$string = $.$string;
     this.$enclosingObjects$TextModule$TextString = enclosingObjects;
     this.$super$TextModule$TextString$slot = runtimeSuperclass;
     this["TextModule`TextString"] = function () {
      superBasicNew.call(this);
      this.$string$slot = nil;
     };
     this.basicNew = this["TextModule`TextString"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for TextModule`TextString";
    this.slots = [];
    this.methods = [
     new MM("forString:properties:", "public", true, 0),
     new MM("forString:", "public", false, 1391)
    ];
    this.nestedClasses = [];
    this.$forString$properties$ = function ($s, $tps) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($s, $tps);
     return t;
    };
    this.$forString$ = function ($s) {
     let self = this;
     return self._$forString$properties$($s, self.$enclosingObjects$TextModule$TextString[0]._$TextProperties().$new());
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for TextModule`TextString";
      this.$forString$properties$ = this._$forString$properties$ = $.$forString$properties$;
      this.$forString$ = this._$forString$ = $.$forString$;
      this.$enclosingObjects$TextModule$TextString = enclosingObjects;
      this.$super$TextModule$TextString$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$TextModule$Text.enclosingMixin = this;
  this.$TextModule$TextBlock.enclosingMixin = this;
  this.$TextModule$TextProperties.enclosingMixin = this;
  this.$TextModule$TextString.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for TextModule";
    this._$superInit$TextModule = $.$superInit$TextModule;
    this.$superInit$TextModule = dnuCatcher("$superInit$TextModule");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this.$Text = this._$Text = $.$Text;
    this.$TextBlock = this._$TextBlock = $.$TextBlock;
    this.$TextProperties = this._$TextProperties = $.$TextProperties;
    this.$TextString = this._$TextString = $.$TextString;
    this.$init$TextModule$Text$ = this._$init$TextModule$Text$ = $.$init$TextModule$Text$;
    this.$TextModule$Text = this._$TextModule$Text = $.$TextModule$Text;
    this.$TextModule$Text$ = this._$TextModule$Text$ = $.$TextModule$Text$;
    this.$init$TextModule$TextBlock$ = this._$init$TextModule$TextBlock$ = $.$init$TextModule$TextBlock$;
    this.$TextModule$TextBlock = this._$TextModule$TextBlock = $.$TextModule$TextBlock;
    this.$TextModule$TextBlock$ = this._$TextModule$TextBlock$ = $.$TextModule$TextBlock$;
    this.$init$TextModule$TextProperties$ = this._$init$TextModule$TextProperties$ = $.$init$TextModule$TextProperties$;
    this.$TextModule$TextProperties = this._$TextModule$TextProperties = $.$TextModule$TextProperties;
    this.$TextModule$TextProperties$ = this._$TextModule$TextProperties$ = $.$TextModule$TextProperties$;
    this.$init$TextModule$TextString$ = this._$init$TextModule$TextString$ = $.$init$TextModule$TextString$;
    this.$TextModule$TextString = this._$TextModule$TextString = $.$TextModule$TextString;
    this.$TextModule$TextString$ = this._$TextModule$TextString$ = $.$TextModule$TextString$;
    this.$enclosingObjects$TextModule = enclosingObjects;
    this.$super$TextModule$slot = runtimeSuperclass;
    this.TextModule = function () {
     superBasicNew.call(this);
     this.$TextModule$Text$slot = nil;
     this.$TextModule$TextBlock$slot = nil;
     this.$TextModule$TextProperties$slot = nil;
     this.$TextModule$TextString$slot = nil;
    };
    this.basicNew = this.TextModule;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   let $ = this;
   this.debug = "Runtime meta mixin for TextModule";
   this.slots = [];
   this.methods = [new MM("usingPlatform:", "public", true, 0)];
   this.nestedClasses = [];
   this.$usingPlatform$ = function ($p) {
    let t = new this.nonMeta.basicNew();
    t.$instance$initializer($p);
    return t;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for TextModule";
     this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
     this.$enclosingObjects$TextModule = enclosingObjects;
     this.$super$TextModule$slot = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
 this.$HopscotchForHTML5 = new function () {
  let $ = this;
  let $0 = this;
  this.debug = "Runtime mixin for HopscotchForHTML5";
  this.name = "HopscotchForHTML5";
  this.header = 1392;
  this.slots = [
   new SM("Color", "private", false, false),
   new SM("Context", "private", false, false),
   new SM("Timer", "private", false, false),
   new SM("List", "private", false, false),
   new SM("Map", "private", false, false),
   new SM("Set", "private", false, false),
   new SM("TextBlock", "private", false, false),
   new SM("TextProperties", "private", false, false),
   new SM("TextString", "private", false, false),
   new SM("window", "private", false, false),
   new SM("document", "private", false, false),
   new SM("JSObject", "protected", false, false),
   new SM("CodeMirror", "private", false, false),
   new SM("body", "private", false, false),
   new SM("history", "private", false, false),
   new SM("sharedNavigationHistory", "protected", true, false),
   new SM("embeddedWindowMap", "protected", false, false),
   new SM("sharedBackButtonListener", "protected", true, false),
   new SM("currentHopscotchWindow", "protected", true, false),
   new SM("accept16px", "private", false, false),
   new SM("cancel16px", "private", false, false),
   new SM("disclosureClosedImage", "private", false, false),
   new SM("disclosureTransitionImage", "private", false, false),
   new SM("disclosureOpenImage", "private", false, false),
   new SM("dropDownImage", "public", false, false),
   new SM("dropDownOutImage", "public", false, false),
   new SM("dropDownOverImage", "public", false, false),
   new SM("deferredContentQueue", "private", false, false),
   new SM("core", "public", false, false),
   new SM("fragments", "public", false, false),
   new SM("HopscotchForHTML5`BlankFragment", "public", true, true),
   new SM("HopscotchForHTML5`ButtonFragment", "public", true, true),
   new SM("HopscotchForHTML5`CanvasFragment", "public", true, true),
   new SM("HopscotchForHTML5`CodeMirrorFragment", "public", true, true),
   new SM("HopscotchForHTML5`ColorDecorator", "public", true, true),
   new SM("HopscotchForHTML5`ColumnComposer", "public", true, true),
   new SM("HopscotchForHTML5`Composer", "public", true, true),
   new SM("HopscotchForHTML5`Decorator", "public", true, true),
   new SM("HopscotchForHTML5`DeferredContentComposer", "public", true, true),
   new SM("HopscotchForHTML5`DropDownMenuFragment", "public", true, true),
   new SM("HopscotchForHTML5`EmbeddedHopscotchWindow", "public", true, true),
   new SM("HopscotchForHTML5`Fragment", "public", true, true),
   new SM("HopscotchForHTML5`Gradient", "public", true, true),
   new SM("HopscotchForHTML5`HolderComposer", "public", true, true),
   new SM("HopscotchForHTML5`HopscotchShell", "public", true, true),
   new SM("HopscotchForHTML5`HopscotchWindow", "public", true, true),
   new SM("HopscotchForHTML5`HyperlinkFragment", "public", true, true),
   new SM("HopscotchForHTML5`HyperlinkImageFragment", "public", true, true),
   new SM("HopscotchForHTML5`ImageButtonFragment", "public", true, true),
   new SM("HopscotchForHTML5`LeafFragment", "public", true, true),
   new SM("HopscotchForHTML5`LocalNavigationHistory", "public", true, true),
   new SM("HopscotchForHTML5`NavigationHistory", "public", true, true),
   new SM("HopscotchForHTML5`PaddedFrameComposer", "public", true, true),
   new SM("HopscotchForHTML5`Presenter", "public", true, true),
   new SM("HopscotchForHTML5`PresenterList", "public", true, true),
   new SM("HopscotchForHTML5`RowComposer", "public", true, true),
   new SM("HopscotchForHTML5`SequenceComposer", "public", true, true),
   new SM("HopscotchForHTML5`StaticImageFragment", "public", true, true),
   new SM("HopscotchForHTML5`StaticLabelFragment", "public", true, true),
   new SM("HopscotchForHTML5`Subject", "public", true, true),
   new SM("HopscotchForHTML5`TextBlockFragment", "public", true, true),
   new SM("HopscotchForHTML5`TextDisplayFragment", "public", true, true),
   new SM("HopscotchForHTML5`TextEditorFragment", "public", true, true),
   new SM("HopscotchForHTML5`TextFragment", "public", true, true),
   new SM("HopscotchForHTML5`TextStringFragment", "public", true, true),
   new SM("HopscotchForHTML5`ToggleComposer", "public", true, true),
   new SM("HopscotchForHTML5`ZebraDecorator", "public", true, true)
  ];
  this.methods = [
   new MM("superInit`HopscotchForHTML5", "protected", true, 1393),
   new MM("instance`initializer", "public", true, 1394),
   new MM("computeContentForMenu:", "protected", false, 1395),
   new MM("contentFor:within:", "protected", false, 1396),
   new MM("deferAction:", "protected", false, 1397),
   new MM("nextDeferredAction", "protected", false, 1398),
   new MM("nextFrameDo:", "protected", false, 1399),
   new MM("sharedNavigator", "protected", false, 1400),
   new MM("BlankFragment", "protected", true, 0),
   new MM("ButtonFragment", "protected", true, 0),
   new MM("CanvasFragment", "protected", true, 0),
   new MM("CodeMirrorFragment", "public", true, 0),
   new MM("ColorDecorator", "protected", true, 0),
   new MM("ColumnComposer", "protected", true, 0),
   new MM("Composer", "protected", true, 0),
   new MM("Decorator", "public", true, 0),
   new MM("DeferredContentComposer", "protected", true, 0),
   new MM("DropDownMenuFragment", "protected", true, 0),
   new MM("EmbeddedHopscotchWindow", "public", true, 0),
   new MM("Fragment", "protected", true, 0),
   new MM("Gradient", "public", true, 0),
   new MM("HolderComposer", "protected", true, 0),
   new MM("HopscotchShell", "protected", true, 0),
   new MM("HopscotchWindow", "public", true, 0),
   new MM("HyperlinkFragment", "protected", true, 0),
   new MM("HyperlinkImageFragment", "protected", true, 0),
   new MM("ImageButtonFragment", "protected", true, 0),
   new MM("LeafFragment", "protected", true, 0),
   new MM("LocalNavigationHistory", "protected", true, 0),
   new MM("NavigationHistory", "protected", true, 0),
   new MM("PaddedFrameComposer", "protected", true, 0),
   new MM("Presenter", "public", true, 0),
   new MM("PresenterList", "protected", true, 0),
   new MM("RowComposer", "protected", true, 0),
   new MM("SequenceComposer", "protected", true, 0),
   new MM("StaticImageFragment", "protected", true, 0),
   new MM("StaticLabelFragment", "protected", true, 0),
   new MM("Subject", "public", true, 0),
   new MM("TextBlockFragment", "protected", true, 0),
   new MM("TextDisplayFragment", "protected", true, 0),
   new MM("TextEditorFragment", "public", true, 0),
   new MM("TextFragment", "protected", true, 0),
   new MM("TextStringFragment", "protected", true, 0),
   new MM("ToggleComposer", "protected", true, 0),
   new MM("ZebraDecorator", "public", true, 0),
   new MM("init`Color:", "private", true, 0),
   new MM("Color", "private", true, 0),
   new MM("init`Context:", "private", true, 0),
   new MM("Context", "private", true, 0),
   new MM("init`Timer:", "private", true, 0),
   new MM("Timer", "private", true, 0),
   new MM("init`List:", "private", true, 0),
   new MM("List", "private", true, 0),
   new MM("init`Map:", "private", true, 0),
   new MM("Map", "private", true, 0),
   new MM("init`Set:", "private", true, 0),
   new MM("Set", "private", true, 0),
   new MM("init`TextBlock:", "private", true, 0),
   new MM("TextBlock", "private", true, 0),
   new MM("init`TextProperties:", "private", true, 0),
   new MM("TextProperties", "private", true, 0),
   new MM("init`TextString:", "private", true, 0),
   new MM("TextString", "private", true, 0),
   new MM("init`window:", "private", true, 0),
   new MM("window", "private", true, 0),
   new MM("init`document:", "private", true, 0),
   new MM("document", "private", true, 0),
   new MM("init`JSObject:", "protected", true, 0),
   new MM("JSObject", "protected", true, 0),
   new MM("init`CodeMirror:", "private", true, 0),
   new MM("CodeMirror", "private", true, 0),
   new MM("init`body:", "private", true, 0),
   new MM("body", "private", true, 0),
   new MM("init`history:", "private", true, 0),
   new MM("history", "private", true, 0),
   new MM("init`sharedNavigationHistory:", "protected", true, 0),
   new MM("sharedNavigationHistory", "protected", true, 0),
   new MM("sharedNavigationHistory:", "protected", true, 0),
   new MM("init`embeddedWindowMap:", "protected", true, 0),
   new MM("embeddedWindowMap", "protected", true, 0),
   new MM("init`sharedBackButtonListener:", "protected", true, 0),
   new MM("sharedBackButtonListener", "protected", true, 0),
   new MM("sharedBackButtonListener:", "protected", true, 0),
   new MM("init`currentHopscotchWindow:", "protected", true, 0),
   new MM("currentHopscotchWindow", "protected", true, 0),
   new MM("currentHopscotchWindow:", "protected", true, 0),
   new MM("init`accept16px:", "private", true, 0),
   new MM("accept16px", "private", true, 0),
   new MM("init`cancel16px:", "private", true, 0),
   new MM("cancel16px", "private", true, 0),
   new MM("init`disclosureClosedImage:", "private", true, 0),
   new MM("disclosureClosedImage", "private", true, 0),
   new MM("init`disclosureTransitionImage:", "private", true, 0),
   new MM("disclosureTransitionImage", "private", true, 0),
   new MM("init`disclosureOpenImage:", "private", true, 0),
   new MM("disclosureOpenImage", "private", true, 0),
   new MM("init`dropDownImage:", "public", true, 0),
   new MM("dropDownImage", "public", true, 0),
   new MM("init`dropDownOutImage:", "public", true, 0),
   new MM("dropDownOutImage", "public", true, 0),
   new MM("init`dropDownOverImage:", "public", true, 0),
   new MM("dropDownOverImage", "public", true, 0),
   new MM("init`deferredContentQueue:", "private", true, 0),
   new MM("deferredContentQueue", "private", true, 0),
   new MM("init`core:", "public", true, 0),
   new MM("core", "public", true, 0),
   new MM("init`fragments:", "public", true, 0),
   new MM("fragments", "public", true, 0),
   new MM("init`HopscotchForHTML5`BlankFragment:", "public", true, 0),
   new MM("HopscotchForHTML5`BlankFragment", "public", true, 0),
   new MM("HopscotchForHTML5`BlankFragment:", "public", true, 0),
   new MM("init`HopscotchForHTML5`ButtonFragment:", "public", true, 0),
   new MM("HopscotchForHTML5`ButtonFragment", "public", true, 0),
   new MM("HopscotchForHTML5`ButtonFragment:", "public", true, 0),
   new MM("init`HopscotchForHTML5`CanvasFragment:", "public", true, 0),
   new MM("HopscotchForHTML5`CanvasFragment", "public", true, 0),
   new MM("HopscotchForHTML5`CanvasFragment:", "public", true, 0),
   new MM("init`HopscotchForHTML5`CodeMirrorFragment:", "public", true, 0),
   new MM("HopscotchForHTML5`CodeMirrorFragment", "public", true, 0),
   new MM("HopscotchForHTML5`CodeMirrorFragment:", "public", true, 0),
   new MM("init`HopscotchForHTML5`ColorDecorator:", "public", true, 0),
   new MM("HopscotchForHTML5`ColorDecorator", "public", true, 0),
   new MM("HopscotchForHTML5`ColorDecorator:", "public", true, 0),
   new MM("init`HopscotchForHTML5`ColumnComposer:", "public", true, 0),
   new MM("HopscotchForHTML5`ColumnComposer", "public", true, 0),
   new MM("HopscotchForHTML5`ColumnComposer:", "public", true, 0),
   new MM("init`HopscotchForHTML5`Composer:", "public", true, 0),
   new MM("HopscotchForHTML5`Composer", "public", true, 0),
   new MM("HopscotchForHTML5`Composer:", "public", true, 0),
   new MM("init`HopscotchForHTML5`Decorator:", "public", true, 0),
   new MM("HopscotchForHTML5`Decorator", "public", true, 0),
   new MM("HopscotchForHTML5`Decorator:", "public", true, 0),
   new MM("init`HopscotchForHTML5`DeferredContentComposer:", "public", true, 0),
   new MM("HopscotchForHTML5`DeferredContentComposer", "public", true, 0),
   new MM("HopscotchForHTML5`DeferredContentComposer:", "public", true, 0),
   new MM("init`HopscotchForHTML5`DropDownMenuFragment:", "public", true, 0),
   new MM("HopscotchForHTML5`DropDownMenuFragment", "public", true, 0),
   new MM("HopscotchForHTML5`DropDownMenuFragment:", "public", true, 0),
   new MM("init`HopscotchForHTML5`EmbeddedHopscotchWindow:", "public", true, 0),
   new MM("HopscotchForHTML5`EmbeddedHopscotchWindow", "public", true, 0),
   new MM("HopscotchForHTML5`EmbeddedHopscotchWindow:", "public", true, 0),
   new MM("init`HopscotchForHTML5`Fragment:", "public", true, 0),
   new MM("HopscotchForHTML5`Fragment", "public", true, 0),
   new MM("HopscotchForHTML5`Fragment:", "public", true, 0),
   new MM("init`HopscotchForHTML5`Gradient:", "public", true, 0),
   new MM("HopscotchForHTML5`Gradient", "public", true, 0),
   new MM("HopscotchForHTML5`Gradient:", "public", true, 0),
   new MM("init`HopscotchForHTML5`HolderComposer:", "public", true, 0),
   new MM("HopscotchForHTML5`HolderComposer", "public", true, 0),
   new MM("HopscotchForHTML5`HolderComposer:", "public", true, 0),
   new MM("init`HopscotchForHTML5`HopscotchShell:", "public", true, 0),
   new MM("HopscotchForHTML5`HopscotchShell", "public", true, 0),
   new MM("HopscotchForHTML5`HopscotchShell:", "public", true, 0),
   new MM("init`HopscotchForHTML5`HopscotchWindow:", "public", true, 0),
   new MM("HopscotchForHTML5`HopscotchWindow", "public", true, 0),
   new MM("HopscotchForHTML5`HopscotchWindow:", "public", true, 0),
   new MM("init`HopscotchForHTML5`HyperlinkFragment:", "public", true, 0),
   new MM("HopscotchForHTML5`HyperlinkFragment", "public", true, 0),
   new MM("HopscotchForHTML5`HyperlinkFragment:", "public", true, 0),
   new MM("init`HopscotchForHTML5`HyperlinkImageFragment:", "public", true, 0),
   new MM("HopscotchForHTML5`HyperlinkImageFragment", "public", true, 0),
   new MM("HopscotchForHTML5`HyperlinkImageFragment:", "public", true, 0),
   new MM("init`HopscotchForHTML5`ImageButtonFragment:", "public", true, 0),
   new MM("HopscotchForHTML5`ImageButtonFragment", "public", true, 0),
   new MM("HopscotchForHTML5`ImageButtonFragment:", "public", true, 0),
   new MM("init`HopscotchForHTML5`LeafFragment:", "public", true, 0),
   new MM("HopscotchForHTML5`LeafFragment", "public", true, 0),
   new MM("HopscotchForHTML5`LeafFragment:", "public", true, 0),
   new MM("init`HopscotchForHTML5`LocalNavigationHistory:", "public", true, 0),
   new MM("HopscotchForHTML5`LocalNavigationHistory", "public", true, 0),
   new MM("HopscotchForHTML5`LocalNavigationHistory:", "public", true, 0),
   new MM("init`HopscotchForHTML5`NavigationHistory:", "public", true, 0),
   new MM("HopscotchForHTML5`NavigationHistory", "public", true, 0),
   new MM("HopscotchForHTML5`NavigationHistory:", "public", true, 0),
   new MM("init`HopscotchForHTML5`PaddedFrameComposer:", "public", true, 0),
   new MM("HopscotchForHTML5`PaddedFrameComposer", "public", true, 0),
   new MM("HopscotchForHTML5`PaddedFrameComposer:", "public", true, 0),
   new MM("init`HopscotchForHTML5`Presenter:", "public", true, 0),
   new MM("HopscotchForHTML5`Presenter", "public", true, 0),
   new MM("HopscotchForHTML5`Presenter:", "public", true, 0),
   new MM("init`HopscotchForHTML5`PresenterList:", "public", true, 0),
   new MM("HopscotchForHTML5`PresenterList", "public", true, 0),
   new MM("HopscotchForHTML5`PresenterList:", "public", true, 0),
   new MM("init`HopscotchForHTML5`RowComposer:", "public", true, 0),
   new MM("HopscotchForHTML5`RowComposer", "public", true, 0),
   new MM("HopscotchForHTML5`RowComposer:", "public", true, 0),
   new MM("init`HopscotchForHTML5`SequenceComposer:", "public", true, 0),
   new MM("HopscotchForHTML5`SequenceComposer", "public", true, 0),
   new MM("HopscotchForHTML5`SequenceComposer:", "public", true, 0),
   new MM("init`HopscotchForHTML5`StaticImageFragment:", "public", true, 0),
   new MM("HopscotchForHTML5`StaticImageFragment", "public", true, 0),
   new MM("HopscotchForHTML5`StaticImageFragment:", "public", true, 0),
   new MM("init`HopscotchForHTML5`StaticLabelFragment:", "public", true, 0),
   new MM("HopscotchForHTML5`StaticLabelFragment", "public", true, 0),
   new MM("HopscotchForHTML5`StaticLabelFragment:", "public", true, 0),
   new MM("init`HopscotchForHTML5`Subject:", "public", true, 0),
   new MM("HopscotchForHTML5`Subject", "public", true, 0),
   new MM("HopscotchForHTML5`Subject:", "public", true, 0),
   new MM("init`HopscotchForHTML5`TextBlockFragment:", "public", true, 0),
   new MM("HopscotchForHTML5`TextBlockFragment", "public", true, 0),
   new MM("HopscotchForHTML5`TextBlockFragment:", "public", true, 0),
   new MM("init`HopscotchForHTML5`TextDisplayFragment:", "public", true, 0),
   new MM("HopscotchForHTML5`TextDisplayFragment", "public", true, 0),
   new MM("HopscotchForHTML5`TextDisplayFragment:", "public", true, 0),
   new MM("init`HopscotchForHTML5`TextEditorFragment:", "public", true, 0),
   new MM("HopscotchForHTML5`TextEditorFragment", "public", true, 0),
   new MM("HopscotchForHTML5`TextEditorFragment:", "public", true, 0),
   new MM("init`HopscotchForHTML5`TextFragment:", "public", true, 0),
   new MM("HopscotchForHTML5`TextFragment", "public", true, 0),
   new MM("HopscotchForHTML5`TextFragment:", "public", true, 0),
   new MM("init`HopscotchForHTML5`TextStringFragment:", "public", true, 0),
   new MM("HopscotchForHTML5`TextStringFragment", "public", true, 0),
   new MM("HopscotchForHTML5`TextStringFragment:", "public", true, 0),
   new MM("init`HopscotchForHTML5`ToggleComposer:", "public", true, 0),
   new MM("HopscotchForHTML5`ToggleComposer", "public", true, 0),
   new MM("HopscotchForHTML5`ToggleComposer:", "public", true, 0),
   new MM("init`HopscotchForHTML5`ZebraDecorator:", "public", true, 0),
   new MM("HopscotchForHTML5`ZebraDecorator", "public", true, 0),
   new MM("HopscotchForHTML5`ZebraDecorator:", "public", true, 0)
  ];
  this.nestedClasses = [
   "HopscotchForHTML5`BlankFragment",
   "HopscotchForHTML5`ButtonFragment",
   "HopscotchForHTML5`CanvasFragment",
   "HopscotchForHTML5`CodeMirrorFragment",
   "HopscotchForHTML5`ColorDecorator",
   "HopscotchForHTML5`ColumnComposer",
   "HopscotchForHTML5`Composer",
   "HopscotchForHTML5`Decorator",
   "HopscotchForHTML5`DeferredContentComposer",
   "HopscotchForHTML5`DropDownMenuFragment",
   "HopscotchForHTML5`EmbeddedHopscotchWindow",
   "HopscotchForHTML5`Fragment",
   "HopscotchForHTML5`Gradient",
   "HopscotchForHTML5`HolderComposer",
   "HopscotchForHTML5`HopscotchShell",
   "HopscotchForHTML5`HopscotchWindow",
   "HopscotchForHTML5`HyperlinkFragment",
   "HopscotchForHTML5`HyperlinkImageFragment",
   "HopscotchForHTML5`ImageButtonFragment",
   "HopscotchForHTML5`LeafFragment",
   "HopscotchForHTML5`LocalNavigationHistory",
   "HopscotchForHTML5`NavigationHistory",
   "HopscotchForHTML5`PaddedFrameComposer",
   "HopscotchForHTML5`Presenter",
   "HopscotchForHTML5`PresenterList",
   "HopscotchForHTML5`RowComposer",
   "HopscotchForHTML5`SequenceComposer",
   "HopscotchForHTML5`StaticImageFragment",
   "HopscotchForHTML5`StaticLabelFragment",
   "HopscotchForHTML5`Subject",
   "HopscotchForHTML5`TextBlockFragment",
   "HopscotchForHTML5`TextDisplayFragment",
   "HopscotchForHTML5`TextEditorFragment",
   "HopscotchForHTML5`TextFragment",
   "HopscotchForHTML5`TextStringFragment",
   "HopscotchForHTML5`ToggleComposer",
   "HopscotchForHTML5`ZebraDecorator"
  ];
  this.applications = [];
  this.$superInit$HopscotchForHTML5 = function ($p, $images) {
   let self = this;
   self.$super$HopscotchForHTML5$slot._$instance$initializer.call(self);
   return self;
  };
  this.$instance$initializer = function ($p, $images) {
   let self = this;
   self._$superInit$HopscotchForHTML5($p, $images);
   $0.$init$Color$(self, $p.$graphics().$Color());
   $0.$init$Context$(self, $p.$graphics().$Context());
   $0.$init$Timer$(self, $p.$actors().$Timer());
   $0.$init$List$(self, $p.$collections().$List());
   $0.$init$Map$(self, $p.$collections().$Map());
   $0.$init$Set$(self, $p.$collections().$Set());
   $0.$init$TextBlock$(self, $p.$text().$TextBlock());
   $0.$init$TextProperties$(self, $p.$text().$TextProperties());
   $0.$init$TextString$(self, $p.$text().$TextString());
   $0.$init$window$(self, $p.$js().$global());
   $0.$init$document$(self, $0.$window(self).$at$("document"));
   self._$init$JSObject$($p.$js().$global().$at$("Object"));
   $0.$init$CodeMirror$(self, $0.$window(self).$at$("CodeMirror"));
   $0.$init$body$(self, $0.$document(self).$at$("body"));
   $0.$init$history$(self, $0.$window(self).$at$("history"));
   self._$init$embeddedWindowMap$($0.$Map(self).$new());
   $0.$init$accept16px$(self, $images.$accept16px());
   $0.$init$cancel16px$(self, $images.$cancel16px());
   $0.$init$disclosureClosedImage$(self, $images.$disclosureClosedImage());
   $0.$init$disclosureTransitionImage$(self, $images.$disclosureTransitionImage());
   $0.$init$disclosureOpenImage$(self, $images.$disclosureOpenImage());
   self._$init$dropDownImage$($images.$dropDownImage());
   self._$init$dropDownOutImage$($images.$dropDownOutImage());
   self._$init$dropDownOverImage$($images.$dropDownOverImage());
   $0.$init$deferredContentQueue$(self, $0.$List(self).$new());
   self._$init$core$(self);
   self._$init$fragments$(self);
   return self;
  };
  this.$computeContentForMenu$ = function ($menuSupplier) {
   let self = this;
   let $dropDownContent = nil;
   $dropDownContent = $0.$document(self).$createElement$("div");
   (function (cascadeReceiver) {
    cascadeReceiver.$at$put$("color", "black");
    cascadeReceiver.$at$put$("backgroundColor", "lightgray");
    cascadeReceiver.$at$put$("position", "absolute");
    cascadeReceiver.$at$put$("z-index", 1);
    cascadeReceiver.$at$put$("padding-left", "6px");
    cascadeReceiver.$at$put$("padding-right", "10px");
    cascadeReceiver.$at$put$("border-radius", "5px");
    cascadeReceiver.$at$put$("box-shadow", "5px 5px 5px darkgrey");
    return cascadeReceiver.$at$put$("display", "none");
   })($dropDownContent.$at$("style"));
   $menuSupplier.$value().$do$(function ($menuItem) {
    let $itemContent = nil;
    $itemContent = self._$contentFor$within$($menuItem, $dropDownContent);
    return $dropDownContent.$appendChild$($itemContent);
   });
   return $dropDownContent;
  };
  this.$contentFor$within$ = function ($menuItem, $dropDownContent) {
   let self = this;
   let $entry = nil;
   if ($menuItem.$$equal("separator")) {
    return $0.$document(self).$createElement$("hr");
   };
   $entry = $0.$document(self).$createElement$("div");
   $entry.$at$put$("textContent", $menuItem.$first());
   (function (cascadeReceiver) {
    cascadeReceiver.$addEventListener$action$("mouseover", function ($event) {
     $entry.$at$("style").$at$put$("background-color", "darkgrey");
     return nil;
    });
    cascadeReceiver.$addEventListener$action$("mouseout", function ($event) {
     $entry.$at$("style").$at$put$("background-color", "lightgrey");
     return nil;
    });
    return cascadeReceiver.$addEventListener$action$("click", function ($event) {
     $menuItem.$last().$value();
     return nil;
    });
   })($entry);
   return $entry;
  };
  this.$deferAction$ = function ($action) {
   let self = this;
   $0.$deferredContentQueue(self).$add$($action);
   if ($0.$deferredContentQueue(self).$size().$$equal(1)) {
    self._$nextFrameDo$(function () {
     return self._$nextDeferredAction();
    });
   };
   return self;
  };
  this.$nextDeferredAction = function () {
   let self = this;
   let $action = nil;
   $action = $0.$deferredContentQueue(self).$removeFirst();
   if ($0.$deferredContentQueue(self).$size() > 0) {
    self._$nextFrameDo$(function () {
     return self._$nextDeferredAction();
    });
   };
   $action.$value();
   return self;
  };
  this.$nextFrameDo$ = function ($action) {
   let self = this;
   if ($0.$window(self).$at$("requestAnimationFrame").$isUndefined()) {
    $0.$Timer(self).$after$do$(200, $action);
    return self;
   };
   $0.$window(self).$requestAnimationFrame$(function ($time1) {
    return $0.$window(self).$requestAnimationFrame$(function ($time2) {
     return $0.$window(self).$requestAnimationFrame$(function ($time3) {
      $action.$value();
      return nil;
     });
    });
   });
   return self;
  };
  this.$sharedNavigator = function () {
   let self = this;
   if (nil.$$equal(self._$sharedNavigationHistory())) {
    self._$sharedNavigationHistory$(self._$NavigationHistory().$new());
   };
   return self._$sharedNavigationHistory();
  };
  this.$BlankFragment = function () {
   if (nil === this.$HopscotchForHTML5$BlankFragment$slot) {
    let self = this;
    let superclass = self._$LeafFragment();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$BlankFragment;
    this.$HopscotchForHTML5$BlankFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$BlankFragment$slot;
  };
  this.$ButtonFragment = function () {
   if (nil === this.$HopscotchForHTML5$ButtonFragment$slot) {
    let self = this;
    let superclass = self._$LeafFragment();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$ButtonFragment;
    this.$HopscotchForHTML5$ButtonFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$ButtonFragment$slot;
  };
  this.$CanvasFragment = function () {
   if (nil === this.$HopscotchForHTML5$CanvasFragment$slot) {
    let self = this;
    let superclass = self._$LeafFragment();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$CanvasFragment;
    this.$HopscotchForHTML5$CanvasFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$CanvasFragment$slot;
  };
  this.$CodeMirrorFragment = function () {
   if (nil === this.$HopscotchForHTML5$CodeMirrorFragment$slot) {
    let self = this;
    let superclass = self._$LeafFragment();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$CodeMirrorFragment;
    this.$HopscotchForHTML5$CodeMirrorFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$CodeMirrorFragment$slot;
  };
  this.$ColorDecorator = function () {
   if (nil === this.$HopscotchForHTML5$ColorDecorator$slot) {
    let self = this;
    let superclass = self._$Decorator();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$ColorDecorator;
    this.$HopscotchForHTML5$ColorDecorator$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$ColorDecorator$slot;
  };
  this.$ColumnComposer = function () {
   if (nil === this.$HopscotchForHTML5$ColumnComposer$slot) {
    let self = this;
    let superclass = self._$SequenceComposer();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$ColumnComposer;
    this.$HopscotchForHTML5$ColumnComposer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$ColumnComposer$slot;
  };
  this.$Composer = function () {
   if (nil === this.$HopscotchForHTML5$Composer$slot) {
    let self = this;
    let superclass = self._$Fragment();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$Composer;
    this.$HopscotchForHTML5$Composer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$Composer$slot;
  };
  this.$Decorator = function () {
   if (nil === this.$HopscotchForHTML5$Decorator$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$Decorator;
    this.$HopscotchForHTML5$Decorator$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$Decorator$slot;
  };
  this.$DeferredContentComposer = function () {
   if (nil === this.$HopscotchForHTML5$DeferredContentComposer$slot) {
    let self = this;
    let superclass = self._$Composer();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$DeferredContentComposer;
    this.$HopscotchForHTML5$DeferredContentComposer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$DeferredContentComposer$slot;
  };
  this.$DropDownMenuFragment = function () {
   if (nil === this.$HopscotchForHTML5$DropDownMenuFragment$slot) {
    let self = this;
    let superclass = self._$ImageButtonFragment();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$DropDownMenuFragment;
    this.$HopscotchForHTML5$DropDownMenuFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$DropDownMenuFragment$slot;
  };
  this.$EmbeddedHopscotchWindow = function () {
   if (nil === this.$HopscotchForHTML5$EmbeddedHopscotchWindow$slot) {
    let self = this;
    let superclass = self._$HopscotchShell();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$EmbeddedHopscotchWindow;
    this.$HopscotchForHTML5$EmbeddedHopscotchWindow$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$EmbeddedHopscotchWindow$slot;
  };
  this.$Fragment = function () {
   if (nil === this.$HopscotchForHTML5$Fragment$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$Fragment;
    this.$HopscotchForHTML5$Fragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$Fragment$slot;
  };
  this.$Gradient = function () {
   if (nil === this.$HopscotchForHTML5$Gradient$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$Gradient;
    this.$HopscotchForHTML5$Gradient$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$Gradient$slot;
  };
  this.$HolderComposer = function () {
   if (nil === this.$HopscotchForHTML5$HolderComposer$slot) {
    let self = this;
    let superclass = self._$Composer();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$HolderComposer;
    this.$HopscotchForHTML5$HolderComposer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$HolderComposer$slot;
  };
  this.$HopscotchShell = function () {
   if (nil === this.$HopscotchForHTML5$HopscotchShell$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$HopscotchShell;
    this.$HopscotchForHTML5$HopscotchShell$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$HopscotchShell$slot;
  };
  this.$HopscotchWindow = function () {
   if (nil === this.$HopscotchForHTML5$HopscotchWindow$slot) {
    let self = this;
    let superclass = self._$HopscotchShell();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$HopscotchWindow;
    this.$HopscotchForHTML5$HopscotchWindow$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$HopscotchWindow$slot;
  };
  this.$HyperlinkFragment = function () {
   if (nil === this.$HopscotchForHTML5$HyperlinkFragment$slot) {
    let self = this;
    let superclass = self._$LeafFragment();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$HyperlinkFragment;
    this.$HopscotchForHTML5$HyperlinkFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$HyperlinkFragment$slot;
  };
  this.$HyperlinkImageFragment = function () {
   if (nil === this.$HopscotchForHTML5$HyperlinkImageFragment$slot) {
    let self = this;
    let superclass = self._$LeafFragment();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$HyperlinkImageFragment;
    this.$HopscotchForHTML5$HyperlinkImageFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$HyperlinkImageFragment$slot;
  };
  this.$ImageButtonFragment = function () {
   if (nil === this.$HopscotchForHTML5$ImageButtonFragment$slot) {
    let self = this;
    let superclass = self._$LeafFragment();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$ImageButtonFragment;
    this.$HopscotchForHTML5$ImageButtonFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$ImageButtonFragment$slot;
  };
  this.$LeafFragment = function () {
   if (nil === this.$HopscotchForHTML5$LeafFragment$slot) {
    let self = this;
    let superclass = self._$Fragment();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$LeafFragment;
    this.$HopscotchForHTML5$LeafFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$LeafFragment$slot;
  };
  this.$LocalNavigationHistory = function () {
   if (nil === this.$HopscotchForHTML5$LocalNavigationHistory$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$LocalNavigationHistory;
    this.$HopscotchForHTML5$LocalNavigationHistory$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$LocalNavigationHistory$slot;
  };
  this.$NavigationHistory = function () {
   if (nil === this.$HopscotchForHTML5$NavigationHistory$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$NavigationHistory;
    this.$HopscotchForHTML5$NavigationHistory$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$NavigationHistory$slot;
  };
  this.$PaddedFrameComposer = function () {
   if (nil === this.$HopscotchForHTML5$PaddedFrameComposer$slot) {
    let self = this;
    let superclass = self._$Composer();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$PaddedFrameComposer;
    this.$HopscotchForHTML5$PaddedFrameComposer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$PaddedFrameComposer$slot;
  };
  this.$Presenter = function () {
   if (nil === this.$HopscotchForHTML5$Presenter$slot) {
    let self = this;
    let superclass = self._$Fragment();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$Presenter;
    this.$HopscotchForHTML5$Presenter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$Presenter$slot;
  };
  this.$PresenterList = function () {
   if (nil === this.$HopscotchForHTML5$PresenterList$slot) {
    let self = this;
    let superclass = self._$Fragment();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$PresenterList;
    this.$HopscotchForHTML5$PresenterList$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$PresenterList$slot;
  };
  this.$RowComposer = function () {
   if (nil === this.$HopscotchForHTML5$RowComposer$slot) {
    let self = this;
    let superclass = self._$SequenceComposer();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$RowComposer;
    this.$HopscotchForHTML5$RowComposer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$RowComposer$slot;
  };
  this.$SequenceComposer = function () {
   if (nil === this.$HopscotchForHTML5$SequenceComposer$slot) {
    let self = this;
    let superclass = self._$Composer();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$SequenceComposer;
    this.$HopscotchForHTML5$SequenceComposer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$SequenceComposer$slot;
  };
  this.$StaticImageFragment = function () {
   if (nil === this.$HopscotchForHTML5$StaticImageFragment$slot) {
    let self = this;
    let superclass = self._$LeafFragment();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$StaticImageFragment;
    this.$HopscotchForHTML5$StaticImageFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$StaticImageFragment$slot;
  };
  this.$StaticLabelFragment = function () {
   if (nil === this.$HopscotchForHTML5$StaticLabelFragment$slot) {
    let self = this;
    let superclass = self._$LeafFragment();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$StaticLabelFragment;
    this.$HopscotchForHTML5$StaticLabelFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$StaticLabelFragment$slot;
  };
  this.$Subject = function () {
   if (nil === this.$HopscotchForHTML5$Subject$slot) {
    let self = this;
    let superclass = self._$Object();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$Subject;
    this.$HopscotchForHTML5$Subject$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$Subject$slot;
  };
  this.$TextBlockFragment = function () {
   if (nil === this.$HopscotchForHTML5$TextBlockFragment$slot) {
    let self = this;
    let superclass = self._$TextFragment();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$TextBlockFragment;
    this.$HopscotchForHTML5$TextBlockFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$TextBlockFragment$slot;
  };
  this.$TextDisplayFragment = function () {
   if (nil === this.$HopscotchForHTML5$TextDisplayFragment$slot) {
    let self = this;
    let superclass = self._$LeafFragment();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$TextDisplayFragment;
    this.$HopscotchForHTML5$TextDisplayFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$TextDisplayFragment$slot;
  };
  this.$TextEditorFragment = function () {
   if (nil === this.$HopscotchForHTML5$TextEditorFragment$slot) {
    let self = this;
    let superclass = self._$LeafFragment();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$TextEditorFragment;
    this.$HopscotchForHTML5$TextEditorFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$TextEditorFragment$slot;
  };
  this.$TextFragment = function () {
   if (nil === this.$HopscotchForHTML5$TextFragment$slot) {
    let self = this;
    let superclass = self._$Fragment();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$TextFragment;
    this.$HopscotchForHTML5$TextFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$TextFragment$slot;
  };
  this.$TextStringFragment = function () {
   if (nil === this.$HopscotchForHTML5$TextStringFragment$slot) {
    let self = this;
    let superclass = self._$TextFragment();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$TextStringFragment;
    this.$HopscotchForHTML5$TextStringFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$TextStringFragment$slot;
  };
  this.$ToggleComposer = function () {
   if (nil === this.$HopscotchForHTML5$ToggleComposer$slot) {
    let self = this;
    let superclass = self._$Composer();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$ToggleComposer;
    this.$HopscotchForHTML5$ToggleComposer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$ToggleComposer$slot;
  };
  this.$ZebraDecorator = function () {
   if (nil === this.$HopscotchForHTML5$ZebraDecorator$slot) {
    let self = this;
    let superclass = self._$Decorator();
    let enclosingObjects = [this].concat(this.$enclosingObjects$HopscotchForHTML5);
    let mixin = $.$HopscotchForHTML5$ZebraDecorator;
    this.$HopscotchForHTML5$ZebraDecorator$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
   };
   return this.$HopscotchForHTML5$ZebraDecorator$slot;
  };
  this.$init$Color$ = function (self, v) {
   self.$Color$slot = v;
   return self;
  };
  this.$Color = function (self) {
   return self.$Color$slot;
  };
  this.$init$Context$ = function (self, v) {
   self.$Context$slot = v;
   return self;
  };
  this.$Context = function (self) {
   return self.$Context$slot;
  };
  this.$init$Timer$ = function (self, v) {
   self.$Timer$slot = v;
   return self;
  };
  this.$Timer = function (self) {
   return self.$Timer$slot;
  };
  this.$init$List$ = function (self, v) {
   self.$List$slot = v;
   return self;
  };
  this.$List = function (self) {
   return self.$List$slot;
  };
  this.$init$Map$ = function (self, v) {
   self.$Map$slot = v;
   return self;
  };
  this.$Map = function (self) {
   return self.$Map$slot;
  };
  this.$init$Set$ = function (self, v) {
   self.$Set$slot = v;
   return self;
  };
  this.$Set = function (self) {
   return self.$Set$slot;
  };
  this.$init$TextBlock$ = function (self, v) {
   self.$TextBlock$slot = v;
   return self;
  };
  this.$TextBlock = function (self) {
   return self.$TextBlock$slot;
  };
  this.$init$TextProperties$ = function (self, v) {
   self.$TextProperties$slot = v;
   return self;
  };
  this.$TextProperties = function (self) {
   return self.$TextProperties$slot;
  };
  this.$init$TextString$ = function (self, v) {
   self.$TextString$slot = v;
   return self;
  };
  this.$TextString = function (self) {
   return self.$TextString$slot;
  };
  this.$init$window$ = function (self, v) {
   self.$window$slot = v;
   return self;
  };
  this.$window = function (self) {
   return self.$window$slot;
  };
  this.$init$document$ = function (self, v) {
   self.$document$slot = v;
   return self;
  };
  this.$document = function (self) {
   return self.$document$slot;
  };
  this.$init$JSObject$ = function (v) {
   this.$JSObject$slot = v;
   return this;
  };
  this.$JSObject = function () {
   return this.$JSObject$slot;
  };
  this.$init$CodeMirror$ = function (self, v) {
   self.$CodeMirror$slot = v;
   return self;
  };
  this.$CodeMirror = function (self) {
   return self.$CodeMirror$slot;
  };
  this.$init$body$ = function (self, v) {
   self.$body$slot = v;
   return self;
  };
  this.$body = function (self) {
   return self.$body$slot;
  };
  this.$init$history$ = function (self, v) {
   self.$history$slot = v;
   return self;
  };
  this.$history = function (self) {
   return self.$history$slot;
  };
  this.$init$sharedNavigationHistory$ = function (v) {
   this.$sharedNavigationHistory$slot = v;
   return this;
  };
  this.$sharedNavigationHistory = function () {
   return this.$sharedNavigationHistory$slot;
  };
  this.$sharedNavigationHistory$ = function (v) {
   this.$sharedNavigationHistory$slot = v;
   return this;
  };
  this.$init$embeddedWindowMap$ = function (v) {
   this.$embeddedWindowMap$slot = v;
   return this;
  };
  this.$embeddedWindowMap = function () {
   return this.$embeddedWindowMap$slot;
  };
  this.$init$sharedBackButtonListener$ = function (v) {
   this.$sharedBackButtonListener$slot = v;
   return this;
  };
  this.$sharedBackButtonListener = function () {
   return this.$sharedBackButtonListener$slot;
  };
  this.$sharedBackButtonListener$ = function (v) {
   this.$sharedBackButtonListener$slot = v;
   return this;
  };
  this.$init$currentHopscotchWindow$ = function (v) {
   this.$currentHopscotchWindow$slot = v;
   return this;
  };
  this.$currentHopscotchWindow = function () {
   return this.$currentHopscotchWindow$slot;
  };
  this.$currentHopscotchWindow$ = function (v) {
   this.$currentHopscotchWindow$slot = v;
   return this;
  };
  this.$init$accept16px$ = function (self, v) {
   self.$accept16px$slot = v;
   return self;
  };
  this.$accept16px = function (self) {
   return self.$accept16px$slot;
  };
  this.$init$cancel16px$ = function (self, v) {
   self.$cancel16px$slot = v;
   return self;
  };
  this.$cancel16px = function (self) {
   return self.$cancel16px$slot;
  };
  this.$init$disclosureClosedImage$ = function (self, v) {
   self.$disclosureClosedImage$slot = v;
   return self;
  };
  this.$disclosureClosedImage = function (self) {
   return self.$disclosureClosedImage$slot;
  };
  this.$init$disclosureTransitionImage$ = function (self, v) {
   self.$disclosureTransitionImage$slot = v;
   return self;
  };
  this.$disclosureTransitionImage = function (self) {
   return self.$disclosureTransitionImage$slot;
  };
  this.$init$disclosureOpenImage$ = function (self, v) {
   self.$disclosureOpenImage$slot = v;
   return self;
  };
  this.$disclosureOpenImage = function (self) {
   return self.$disclosureOpenImage$slot;
  };
  this.$init$dropDownImage$ = function (v) {
   this.$dropDownImage$slot = v;
   return this;
  };
  this.$dropDownImage = function () {
   return this.$dropDownImage$slot;
  };
  this.$init$dropDownOutImage$ = function (v) {
   this.$dropDownOutImage$slot = v;
   return this;
  };
  this.$dropDownOutImage = function () {
   return this.$dropDownOutImage$slot;
  };
  this.$init$dropDownOverImage$ = function (v) {
   this.$dropDownOverImage$slot = v;
   return this;
  };
  this.$dropDownOverImage = function () {
   return this.$dropDownOverImage$slot;
  };
  this.$init$deferredContentQueue$ = function (self, v) {
   self.$deferredContentQueue$slot = v;
   return self;
  };
  this.$deferredContentQueue = function (self) {
   return self.$deferredContentQueue$slot;
  };
  this.$init$core$ = function (v) {
   this.$core$slot = v;
   return this;
  };
  this.$core = function () {
   return this.$core$slot;
  };
  this.$init$fragments$ = function (v) {
   this.$fragments$slot = v;
   return this;
  };
  this.$fragments = function () {
   return this.$fragments$slot;
  };
  this.$init$HopscotchForHTML5$BlankFragment$ = function (v) {
   this.$HopscotchForHTML5$BlankFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$BlankFragment = function () {
   return this.$HopscotchForHTML5$BlankFragment$slot;
  };
  this.$HopscotchForHTML5$BlankFragment$ = function (v) {
   this.$HopscotchForHTML5$BlankFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$ButtonFragment$ = function (v) {
   this.$HopscotchForHTML5$ButtonFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$ButtonFragment = function () {
   return this.$HopscotchForHTML5$ButtonFragment$slot;
  };
  this.$HopscotchForHTML5$ButtonFragment$ = function (v) {
   this.$HopscotchForHTML5$ButtonFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$CanvasFragment$ = function (v) {
   this.$HopscotchForHTML5$CanvasFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$CanvasFragment = function () {
   return this.$HopscotchForHTML5$CanvasFragment$slot;
  };
  this.$HopscotchForHTML5$CanvasFragment$ = function (v) {
   this.$HopscotchForHTML5$CanvasFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$CodeMirrorFragment$ = function (v) {
   this.$HopscotchForHTML5$CodeMirrorFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$CodeMirrorFragment = function () {
   return this.$HopscotchForHTML5$CodeMirrorFragment$slot;
  };
  this.$HopscotchForHTML5$CodeMirrorFragment$ = function (v) {
   this.$HopscotchForHTML5$CodeMirrorFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$ColorDecorator$ = function (v) {
   this.$HopscotchForHTML5$ColorDecorator$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$ColorDecorator = function () {
   return this.$HopscotchForHTML5$ColorDecorator$slot;
  };
  this.$HopscotchForHTML5$ColorDecorator$ = function (v) {
   this.$HopscotchForHTML5$ColorDecorator$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$ColumnComposer$ = function (v) {
   this.$HopscotchForHTML5$ColumnComposer$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$ColumnComposer = function () {
   return this.$HopscotchForHTML5$ColumnComposer$slot;
  };
  this.$HopscotchForHTML5$ColumnComposer$ = function (v) {
   this.$HopscotchForHTML5$ColumnComposer$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$Composer$ = function (v) {
   this.$HopscotchForHTML5$Composer$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$Composer = function () {
   return this.$HopscotchForHTML5$Composer$slot;
  };
  this.$HopscotchForHTML5$Composer$ = function (v) {
   this.$HopscotchForHTML5$Composer$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$Decorator$ = function (v) {
   this.$HopscotchForHTML5$Decorator$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$Decorator = function () {
   return this.$HopscotchForHTML5$Decorator$slot;
  };
  this.$HopscotchForHTML5$Decorator$ = function (v) {
   this.$HopscotchForHTML5$Decorator$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$DeferredContentComposer$ = function (v) {
   this.$HopscotchForHTML5$DeferredContentComposer$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$DeferredContentComposer = function () {
   return this.$HopscotchForHTML5$DeferredContentComposer$slot;
  };
  this.$HopscotchForHTML5$DeferredContentComposer$ = function (v) {
   this.$HopscotchForHTML5$DeferredContentComposer$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$DropDownMenuFragment$ = function (v) {
   this.$HopscotchForHTML5$DropDownMenuFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$DropDownMenuFragment = function () {
   return this.$HopscotchForHTML5$DropDownMenuFragment$slot;
  };
  this.$HopscotchForHTML5$DropDownMenuFragment$ = function (v) {
   this.$HopscotchForHTML5$DropDownMenuFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$EmbeddedHopscotchWindow$ = function (v) {
   this.$HopscotchForHTML5$EmbeddedHopscotchWindow$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$EmbeddedHopscotchWindow = function () {
   return this.$HopscotchForHTML5$EmbeddedHopscotchWindow$slot;
  };
  this.$HopscotchForHTML5$EmbeddedHopscotchWindow$ = function (v) {
   this.$HopscotchForHTML5$EmbeddedHopscotchWindow$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$Fragment$ = function (v) {
   this.$HopscotchForHTML5$Fragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$Fragment = function () {
   return this.$HopscotchForHTML5$Fragment$slot;
  };
  this.$HopscotchForHTML5$Fragment$ = function (v) {
   this.$HopscotchForHTML5$Fragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$Gradient$ = function (v) {
   this.$HopscotchForHTML5$Gradient$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$Gradient = function () {
   return this.$HopscotchForHTML5$Gradient$slot;
  };
  this.$HopscotchForHTML5$Gradient$ = function (v) {
   this.$HopscotchForHTML5$Gradient$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$HolderComposer$ = function (v) {
   this.$HopscotchForHTML5$HolderComposer$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$HolderComposer = function () {
   return this.$HopscotchForHTML5$HolderComposer$slot;
  };
  this.$HopscotchForHTML5$HolderComposer$ = function (v) {
   this.$HopscotchForHTML5$HolderComposer$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$HopscotchShell$ = function (v) {
   this.$HopscotchForHTML5$HopscotchShell$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$HopscotchShell = function () {
   return this.$HopscotchForHTML5$HopscotchShell$slot;
  };
  this.$HopscotchForHTML5$HopscotchShell$ = function (v) {
   this.$HopscotchForHTML5$HopscotchShell$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$HopscotchWindow$ = function (v) {
   this.$HopscotchForHTML5$HopscotchWindow$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$HopscotchWindow = function () {
   return this.$HopscotchForHTML5$HopscotchWindow$slot;
  };
  this.$HopscotchForHTML5$HopscotchWindow$ = function (v) {
   this.$HopscotchForHTML5$HopscotchWindow$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$HyperlinkFragment$ = function (v) {
   this.$HopscotchForHTML5$HyperlinkFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$HyperlinkFragment = function () {
   return this.$HopscotchForHTML5$HyperlinkFragment$slot;
  };
  this.$HopscotchForHTML5$HyperlinkFragment$ = function (v) {
   this.$HopscotchForHTML5$HyperlinkFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$HyperlinkImageFragment$ = function (v) {
   this.$HopscotchForHTML5$HyperlinkImageFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$HyperlinkImageFragment = function () {
   return this.$HopscotchForHTML5$HyperlinkImageFragment$slot;
  };
  this.$HopscotchForHTML5$HyperlinkImageFragment$ = function (v) {
   this.$HopscotchForHTML5$HyperlinkImageFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$ImageButtonFragment$ = function (v) {
   this.$HopscotchForHTML5$ImageButtonFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$ImageButtonFragment = function () {
   return this.$HopscotchForHTML5$ImageButtonFragment$slot;
  };
  this.$HopscotchForHTML5$ImageButtonFragment$ = function (v) {
   this.$HopscotchForHTML5$ImageButtonFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$LeafFragment$ = function (v) {
   this.$HopscotchForHTML5$LeafFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$LeafFragment = function () {
   return this.$HopscotchForHTML5$LeafFragment$slot;
  };
  this.$HopscotchForHTML5$LeafFragment$ = function (v) {
   this.$HopscotchForHTML5$LeafFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$LocalNavigationHistory$ = function (v) {
   this.$HopscotchForHTML5$LocalNavigationHistory$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$LocalNavigationHistory = function () {
   return this.$HopscotchForHTML5$LocalNavigationHistory$slot;
  };
  this.$HopscotchForHTML5$LocalNavigationHistory$ = function (v) {
   this.$HopscotchForHTML5$LocalNavigationHistory$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$NavigationHistory$ = function (v) {
   this.$HopscotchForHTML5$NavigationHistory$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$NavigationHistory = function () {
   return this.$HopscotchForHTML5$NavigationHistory$slot;
  };
  this.$HopscotchForHTML5$NavigationHistory$ = function (v) {
   this.$HopscotchForHTML5$NavigationHistory$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$PaddedFrameComposer$ = function (v) {
   this.$HopscotchForHTML5$PaddedFrameComposer$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$PaddedFrameComposer = function () {
   return this.$HopscotchForHTML5$PaddedFrameComposer$slot;
  };
  this.$HopscotchForHTML5$PaddedFrameComposer$ = function (v) {
   this.$HopscotchForHTML5$PaddedFrameComposer$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$Presenter$ = function (v) {
   this.$HopscotchForHTML5$Presenter$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$Presenter = function () {
   return this.$HopscotchForHTML5$Presenter$slot;
  };
  this.$HopscotchForHTML5$Presenter$ = function (v) {
   this.$HopscotchForHTML5$Presenter$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$PresenterList$ = function (v) {
   this.$HopscotchForHTML5$PresenterList$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$PresenterList = function () {
   return this.$HopscotchForHTML5$PresenterList$slot;
  };
  this.$HopscotchForHTML5$PresenterList$ = function (v) {
   this.$HopscotchForHTML5$PresenterList$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$RowComposer$ = function (v) {
   this.$HopscotchForHTML5$RowComposer$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$RowComposer = function () {
   return this.$HopscotchForHTML5$RowComposer$slot;
  };
  this.$HopscotchForHTML5$RowComposer$ = function (v) {
   this.$HopscotchForHTML5$RowComposer$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$SequenceComposer$ = function (v) {
   this.$HopscotchForHTML5$SequenceComposer$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$SequenceComposer = function () {
   return this.$HopscotchForHTML5$SequenceComposer$slot;
  };
  this.$HopscotchForHTML5$SequenceComposer$ = function (v) {
   this.$HopscotchForHTML5$SequenceComposer$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$StaticImageFragment$ = function (v) {
   this.$HopscotchForHTML5$StaticImageFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$StaticImageFragment = function () {
   return this.$HopscotchForHTML5$StaticImageFragment$slot;
  };
  this.$HopscotchForHTML5$StaticImageFragment$ = function (v) {
   this.$HopscotchForHTML5$StaticImageFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$StaticLabelFragment$ = function (v) {
   this.$HopscotchForHTML5$StaticLabelFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$StaticLabelFragment = function () {
   return this.$HopscotchForHTML5$StaticLabelFragment$slot;
  };
  this.$HopscotchForHTML5$StaticLabelFragment$ = function (v) {
   this.$HopscotchForHTML5$StaticLabelFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$Subject$ = function (v) {
   this.$HopscotchForHTML5$Subject$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$Subject = function () {
   return this.$HopscotchForHTML5$Subject$slot;
  };
  this.$HopscotchForHTML5$Subject$ = function (v) {
   this.$HopscotchForHTML5$Subject$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$TextBlockFragment$ = function (v) {
   this.$HopscotchForHTML5$TextBlockFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$TextBlockFragment = function () {
   return this.$HopscotchForHTML5$TextBlockFragment$slot;
  };
  this.$HopscotchForHTML5$TextBlockFragment$ = function (v) {
   this.$HopscotchForHTML5$TextBlockFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$TextDisplayFragment$ = function (v) {
   this.$HopscotchForHTML5$TextDisplayFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$TextDisplayFragment = function () {
   return this.$HopscotchForHTML5$TextDisplayFragment$slot;
  };
  this.$HopscotchForHTML5$TextDisplayFragment$ = function (v) {
   this.$HopscotchForHTML5$TextDisplayFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$TextEditorFragment$ = function (v) {
   this.$HopscotchForHTML5$TextEditorFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$TextEditorFragment = function () {
   return this.$HopscotchForHTML5$TextEditorFragment$slot;
  };
  this.$HopscotchForHTML5$TextEditorFragment$ = function (v) {
   this.$HopscotchForHTML5$TextEditorFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$TextFragment$ = function (v) {
   this.$HopscotchForHTML5$TextFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$TextFragment = function () {
   return this.$HopscotchForHTML5$TextFragment$slot;
  };
  this.$HopscotchForHTML5$TextFragment$ = function (v) {
   this.$HopscotchForHTML5$TextFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$TextStringFragment$ = function (v) {
   this.$HopscotchForHTML5$TextStringFragment$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$TextStringFragment = function () {
   return this.$HopscotchForHTML5$TextStringFragment$slot;
  };
  this.$HopscotchForHTML5$TextStringFragment$ = function (v) {
   this.$HopscotchForHTML5$TextStringFragment$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$ToggleComposer$ = function (v) {
   this.$HopscotchForHTML5$ToggleComposer$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$ToggleComposer = function () {
   return this.$HopscotchForHTML5$ToggleComposer$slot;
  };
  this.$HopscotchForHTML5$ToggleComposer$ = function (v) {
   this.$HopscotchForHTML5$ToggleComposer$slot = v;
   return this;
  };
  this.$init$HopscotchForHTML5$ZebraDecorator$ = function (v) {
   this.$HopscotchForHTML5$ZebraDecorator$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$ZebraDecorator = function () {
   return this.$HopscotchForHTML5$ZebraDecorator$slot;
  };
  this.$HopscotchForHTML5$ZebraDecorator$ = function (v) {
   this.$HopscotchForHTML5$ZebraDecorator$slot = v;
   return this;
  };
  this.$HopscotchForHTML5$BlankFragment = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`BlankFragment";
   this.name = "HopscotchForHTML5`BlankFragment";
   this.header = 1401;
   this.slots = [];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`BlankFragment", "protected", true, 1402),
    new MM("instance`initializer", "public", true, 1403),
    new MM("createVisual", "protected", false, 1404)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$BlankFragment = function () {
    let self = this;
    self.$super$HopscotchForHTML5$BlankFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$HopscotchForHTML5$BlankFragment();
    return self;
   };
   this.$createVisual = function () {
    let self = this;
    return $0.$document(self.$enclosingObjects$HopscotchForHTML5$BlankFragment[0]).$createElement$("div");
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`BlankFragment";
     this._$superInit$HopscotchForHTML5$BlankFragment = $.$superInit$HopscotchForHTML5$BlankFragment;
     this.$superInit$HopscotchForHTML5$BlankFragment = dnuCatcher("$superInit$HopscotchForHTML5$BlankFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this.$enclosingObjects$HopscotchForHTML5$BlankFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$BlankFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`BlankFragment"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["HopscotchForHTML5`BlankFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`BlankFragment";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`BlankFragment";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$HopscotchForHTML5$BlankFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$BlankFragment$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$ButtonFragment = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`ButtonFragment";
   this.name = "HopscotchForHTML5`ButtonFragment";
   this.header = 1405;
   this.slots = [
    new SM("label", "protected", false, false),
    new SM("action", "protected", false, false),
    new SM("enabled", "public", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`ButtonFragment", "protected", true, 1406),
    new MM("instance`initializer", "public", true, 1407),
    new MM("createVisual", "protected", false, 1408),
    new MM("init`label:", "protected", true, 0),
    new MM("label", "protected", true, 0),
    new MM("init`action:", "protected", true, 0),
    new MM("action", "protected", true, 0),
    new MM("init`enabled:", "public", true, 0),
    new MM("enabled", "public", true, 0),
    new MM("enabled:", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$ButtonFragment = function ($l, $a) {
    let self = this;
    self.$super$HopscotchForHTML5$ButtonFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($l, $a) {
    let self = this;
    self._$superInit$HopscotchForHTML5$ButtonFragment($l, $a);
    self._$init$label$($l);
    self._$init$action$($a);
    self._$init$enabled$(true);
    return self;
   };
   this.$createVisual = function () {
    let self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$appendChild$($0.$document(self.$enclosingObjects$HopscotchForHTML5$ButtonFragment[0]).$createTextNode$(self._$label()));
     cascadeReceiver.$at$put$("onclick", function ($event) {
      self._$action().$value();
      return false;
     });
     cascadeReceiver.$at$put$("disabled", self._$enabled().$not());
     return cascadeReceiver.$yourself();
    })($0.$document(self.$enclosingObjects$HopscotchForHTML5$ButtonFragment[0]).$createElement$("button"));
   };
   this.$init$label$ = function (v) {
    this.$label$slot = v;
    return this;
   };
   this.$label = function () {
    return this.$label$slot;
   };
   this.$init$action$ = function (v) {
    this.$action$slot = v;
    return this;
   };
   this.$action = function () {
    return this.$action$slot;
   };
   this.$init$enabled$ = function (v) {
    this.$enabled$slot = v;
    return this;
   };
   this.$enabled = function () {
    return this.$enabled$slot;
   };
   this.$enabled$ = function (v) {
    this.$enabled$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`ButtonFragment";
     this._$superInit$HopscotchForHTML5$ButtonFragment = $.$superInit$HopscotchForHTML5$ButtonFragment;
     this.$superInit$HopscotchForHTML5$ButtonFragment = dnuCatcher("$superInit$HopscotchForHTML5$ButtonFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this._$init$label$ = $.$init$label$;
     this.$init$label$ = dnuCatcher("$init$label$");
     this._$label = $.$label;
     this.$label = dnuCatcher("$label");
     this._$init$action$ = $.$init$action$;
     this.$init$action$ = dnuCatcher("$init$action$");
     this._$action = $.$action;
     this.$action = dnuCatcher("$action");
     this.$init$enabled$ = this._$init$enabled$ = $.$init$enabled$;
     this.$enabled = this._$enabled = $.$enabled;
     this.$enabled$ = this._$enabled$ = $.$enabled$;
     this.$enclosingObjects$HopscotchForHTML5$ButtonFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$ButtonFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`ButtonFragment"] = function () {
      superBasicNew.call(this);
      this.$label$slot = nil;
      this.$action$slot = nil;
      this.$enabled$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`ButtonFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`ButtonFragment";
    this.slots = [];
    this.methods = [new MM("label:action:", "public", true, 0)];
    this.nestedClasses = [];
    this.$label$action$ = function ($l, $a) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($l, $a);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`ButtonFragment";
      this.$label$action$ = this._$label$action$ = $.$label$action$;
      this.$enclosingObjects$HopscotchForHTML5$ButtonFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$ButtonFragment$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$CanvasFragment = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`CanvasFragment";
   this.name = "HopscotchForHTML5`CanvasFragment";
   this.header = 1409;
   this.slots = [new SM("alien", "private", false, false)];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`CanvasFragment", "protected", true, 1410),
    new MM("instance`initializer", "public", true, 1411),
    new MM("context", "public", false, 1412),
    new MM("createVisual", "protected", false, 1413),
    new MM("keyDownAction:", "public", false, 1414),
    new MM("mouseDownAction:", "public", false, 1415),
    new MM("mouseMovedAction:", "public", false, 1416),
    new MM("init`alien:", "private", true, 0),
    new MM("alien", "private", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$CanvasFragment = function ($e) {
    let self = this;
    self.$super$HopscotchForHTML5$CanvasFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($e) {
    let self = this;
    self._$superInit$HopscotchForHTML5$CanvasFragment($e);
    $1.$init$alien$(self, $0.$document(self.$enclosingObjects$HopscotchForHTML5$CanvasFragment[0]).$createElement$("canvas"));
    $1.$alien(self).$at$put$("width", $e.$x());
    $1.$alien(self).$at$put$("height", $e.$y());
    $1.$alien(self).$at$("style").$at$put$("position", "relative");
    return self;
   };
   this.$context = function () {
    let self = this;
    return $0.$Context(self.$enclosingObjects$HopscotchForHTML5$CanvasFragment[0]).$on$($1.$alien(self).$getContext$("2d"));
   };
   this.$createVisual = function () {
    let self = this;
    return $1.$alien(self);
   };
   this.$keyDownAction$ = function ($onKeyPressed) {
    let self = this;
    $0.$body(self.$enclosingObjects$HopscotchForHTML5$CanvasFragment[0]).$addEventListener$action$("keydown", function ($event) {
     $onKeyPressed.$value$(self._$String().$fromCharCode$($event.$at$("keyCode")));
     return nil;
    });
    return self;
   };
   this.$mouseDownAction$ = function ($onMouseDown) {
    let self = this;
    $1.$alien(self).$addEventListener$action$("mousedown", function ($event) {
     $onMouseDown.$value$($event.$at$("offsetX").$$at($event.$at$("offsetY")));
     return nil;
    });
    return self;
   };
   this.$mouseMovedAction$ = function ($onMouseMoved) {
    let self = this;
    $1.$alien(self).$addEventListener$action$("mousemove", function ($event) {
     $onMouseMoved.$value$($event.$at$("offsetX").$$at($event.$at$("offsetY")));
     return nil;
    });
    return self;
   };
   this.$init$alien$ = function (self, v) {
    self.$alien$slot = v;
    return self;
   };
   this.$alien = function (self) {
    return self.$alien$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`CanvasFragment";
     this._$superInit$HopscotchForHTML5$CanvasFragment = $.$superInit$HopscotchForHTML5$CanvasFragment;
     this.$superInit$HopscotchForHTML5$CanvasFragment = dnuCatcher("$superInit$HopscotchForHTML5$CanvasFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$context = this._$context = $.$context;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this.$keyDownAction$ = this._$keyDownAction$ = $.$keyDownAction$;
     this.$mouseDownAction$ = this._$mouseDownAction$ = $.$mouseDownAction$;
     this.$mouseMovedAction$ = this._$mouseMovedAction$ = $.$mouseMovedAction$;
     this.$enclosingObjects$HopscotchForHTML5$CanvasFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$CanvasFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`CanvasFragment"] = function () {
      superBasicNew.call(this);
      this.$alien$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`CanvasFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`CanvasFragment";
    this.slots = [];
    this.methods = [new MM("withExtent:", "public", true, 0)];
    this.nestedClasses = [];
    this.$withExtent$ = function ($e) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($e);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`CanvasFragment";
      this.$withExtent$ = this._$withExtent$ = $.$withExtent$;
      this.$enclosingObjects$HopscotchForHTML5$CanvasFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$CanvasFragment$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$CodeMirrorFragment = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`CodeMirrorFragment";
   this.name = "HopscotchForHTML5`CodeMirrorFragment";
   this.header = 1417;
   this.slots = [
    new SM("editor", "public", true, false),
    new SM("textSlot", "protected", true, false),
    new SM("counterfactualBar", "protected", true, false),
    new SM("isInEditState", "protected", true, false),
    new SM("changeResponse", "public", true, false),
    new SM("acceptResponse", "public", true, false),
    new SM("cancelResponse", "public", true, false),
    new SM("styles", "protected", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`CodeMirrorFragment", "protected", true, 1418),
    new MM("instance`initializer", "public", true, 1419),
    new MM("applyStyle:", "protected", false, 1420),
    new MM("applyStyles", "protected", false, 1421),
    new MM("controlBarColor", "protected", false, 1422),
    new MM("createVisual", "protected", false, 1423),
    new MM("defaultAcceptResponse", "public", false, 1424),
    new MM("defaultCancelResponse", "protected", false, 1425),
    new MM("defaultChangeResponse", "protected", false, 1426),
    new MM("enterEditState", "public", false, 1427),
    new MM("leaveEditState", "public", false, 1428),
    new MM("noticeExposure", "public", false, 1429),
    new MM("refresh", "public", false, 1430),
    new MM("respondToAccept:", "protected", false, 1431),
    new MM("respondToCancel", "protected", false, 1432),
    new MM("respondToChange:", "protected", false, 1433),
    new MM("showMessage:", "public", false, 1434),
    new MM("style:from:to:", "public", false, 1435),
    new MM("text:", "public", false, 1436),
    new MM("textBeingAccepted", "public", false, 1437),
    new MM("init`editor:", "public", true, 0),
    new MM("editor", "public", true, 0),
    new MM("editor:", "public", true, 0),
    new MM("init`textSlot:", "protected", true, 0),
    new MM("textSlot", "protected", true, 0),
    new MM("textSlot:", "protected", true, 0),
    new MM("init`counterfactualBar:", "protected", true, 0),
    new MM("counterfactualBar", "protected", true, 0),
    new MM("counterfactualBar:", "protected", true, 0),
    new MM("init`isInEditState:", "protected", true, 0),
    new MM("isInEditState", "protected", true, 0),
    new MM("isInEditState:", "protected", true, 0),
    new MM("init`changeResponse:", "public", true, 0),
    new MM("changeResponse", "public", true, 0),
    new MM("changeResponse:", "public", true, 0),
    new MM("init`acceptResponse:", "public", true, 0),
    new MM("acceptResponse", "public", true, 0),
    new MM("acceptResponse:", "public", true, 0),
    new MM("init`cancelResponse:", "public", true, 0),
    new MM("cancelResponse", "public", true, 0),
    new MM("cancelResponse:", "public", true, 0),
    new MM("init`styles:", "protected", true, 0),
    new MM("styles", "protected", true, 0),
    new MM("styles:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$CodeMirrorFragment = function ($t) {
    let self = this;
    self.$super$HopscotchForHTML5$CodeMirrorFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($t) {
    let self = this;
    self._$superInit$HopscotchForHTML5$CodeMirrorFragment($t);
    self._$init$textSlot$($t);
    self._$init$isInEditState$(false);
    self._$init$styles$($0.$List(self.$enclosingObjects$HopscotchForHTML5$CodeMirrorFragment[0]).$new());
    return self;
   };
   this.$applyStyle$ = function ($style) {
    let self = this;
    let $s = nil;
    let $e = nil;
    $s = self._$editor().$posFromIndex$($style.$at$(1) - 1);
    $e = self._$editor().$posFromIndex$($style.$at$(2));
    self._$editor().$markText$to$style$($s, $e, $style.$at$(3));
    return self;
   };
   this.$applyStyles = function () {
    let self = this;
    if (!nil.$$equal(self._$editor())) {
     self._$styles().$do$(function ($s) {
      return self._$applyStyle$($s);
     });
     self._$styles$($0.$List(self.$enclosingObjects$HopscotchForHTML5$CodeMirrorFragment[0]).$new());
     self._$editor().$refresh();
    };
    return self;
   };
   this.$controlBarColor = function () {
    let self = this;
    return $0.$Color(self.$enclosingObjects$HopscotchForHTML5$CodeMirrorFragment[0]).$r$g$b$((19/20), (99/125), (19/40));
   };
   this.$createVisual = function () {
    let self = this;
    let $frame = nil;
    let $accept = nil;
    let $cancel = nil;
    let $textArea = nil;
    let $options = nil;
    $frame = $0.$document(self.$enclosingObjects$HopscotchForHTML5$CodeMirrorFragment[0]).$createElement$("div");
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("display", "flex");
     return cascadeReceiver.$at$put$("opacity", 1);
    })($frame.$at$("style"));
    self._$counterfactualBar$($0.$document(self.$enclosingObjects$HopscotchForHTML5$CodeMirrorFragment[0]).$createElement$("span"));
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("backgroundColor", self._$controlBarColor().$asCSSString());
     return cascadeReceiver.$at$put$("flex", "none");
    })(self._$counterfactualBar().$at$("style"));
    $accept = $0.$document(self.$enclosingObjects$HopscotchForHTML5$CodeMirrorFragment[0]).$createElement$("img");
    $accept.$at$put$("src", $0.$accept16px(self.$enclosingObjects$HopscotchForHTML5$CodeMirrorFragment[0]).$yourself().$at$("src"));
    $accept.$at$("style").$at$put$("margin", "3px");
    $accept.$at$put$("onclick", function ($event) {
     self._$respondToAccept$($event);
     return nil;
    });
    $cancel = $0.$document(self.$enclosingObjects$HopscotchForHTML5$CodeMirrorFragment[0]).$createElement$("img");
    $cancel.$at$put$("src", $0.$cancel16px(self.$enclosingObjects$HopscotchForHTML5$CodeMirrorFragment[0]).$yourself().$at$("src"));
    $cancel.$at$("style").$at$put$("margin", "3px");
    $cancel.$at$put$("onclick", function ($event) {
     self._$respondToCancel();
     return nil;
    });
    self._$counterfactualBar().$appendChild$($accept);
    self._$counterfactualBar().$appendChild$($cancel);
    $textArea = $0.$document(self.$enclosingObjects$HopscotchForHTML5$CodeMirrorFragment[0]).$createElement$("textarea");
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("value", self._$textSlot());
     return cascadeReceiver.$at$put$("resize", true);
    })($textArea);
    $frame.$appendChild$($textArea);
    $options = self.$enclosingObjects$HopscotchForHTML5$CodeMirrorFragment[0]._$JSObject().$new();
    $options.$at$put$("lineWrapping", true);
    self._$editor$($0.$CodeMirror(self.$enclosingObjects$HopscotchForHTML5$CodeMirrorFragment[0]).$fromTextArea$with$($textArea, $options));
    self._$editor().$on$respondToChange$("change", function ($codeMirror, $change) {
     self._$respondToChange$($codeMirror);
     return nil;
    });
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("height", "unset");
     cascadeReceiver.$at$put$("width", "100%");
     cascadeReceiver.$at$put$("fontFamily", "TimesNewRoman");
     cascadeReceiver.$at$put$("borderStyle", "solid");
     cascadeReceiver.$at$put$("borderWidth", "1px");
     return cascadeReceiver.$at$put$("borderColor", "gray");
    })($textArea.$at$("nextSibling").$at$("style"));
    return $frame;
   };
   this.$defaultAcceptResponse = function () {
    let self = this;
    self._$textSlot$(self._$editor().$getValue());
    self._$leaveEditState();
    return self;
   };
   this.$defaultCancelResponse = function () {
    let self = this;
    self._$editor().$setValue$(self._$textSlot());
    self._$leaveEditState();
    return self;
   };
   this.$defaultChangeResponse = function () {
    let self = this;
    self._$enterEditState();
    return self;
   };
   this.$enterEditState = function () {
    let self = this;
    if (!self._$isInEditState()) {
     self._$visual().$appendChild$(self._$counterfactualBar());
     self._$isInEditState$(true);
    };
    self._$visual().$scrollIntoView$(true);
    return self;
   };
   this.$leaveEditState = function () {
    let self = this;
    if (self._$isInEditState()) {
     self._$visualX().$removeChild$(self._$counterfactualBar());
     self._$isInEditState$(false);
    };
    return self;
   };
   this.$noticeExposure = function () {
    let self = this;
    self._$refresh();
    return self;
   };
   this.$refresh = function () {
    let self = this;
    self._$applyStyles();
    return self;
   };
   this.$respondToAccept$ = function ($event) {
    let self = this;
    if (nil.$$equal(self._$acceptResponse())) {
     self._$defaultAcceptResponse();
    } else {
     self._$acceptResponse().$cull$cull$(self, $event);
    };
    return self;
   };
   this.$respondToCancel = function () {
    let self = this;
    if (nil.$$equal(self._$cancelResponse())) {
     self._$defaultCancelResponse();
    } else {
     self._$cancelResponse().$cull$(self);
    };
    return self;
   };
   this.$respondToChange$ = function ($event) {
    let self = this;
    if (nil.$$equal(self._$changeResponse())) {
     self._$defaultChangeResponse();
    } else {
     self._$changeResponse().$cull$cull$(self, $event);
    };
    return self;
   };
   this.$showMessage$ = function ($message) {
    let self = this;
    $message.$out();
    return self;
   };
   this.$style$from$to$ = function ($style, $start, $end) {
    let self = this;
    self._$styles().$add$([
     $start,
     $end,
     $style
    ]);
    self._$applyStyles();
    return self;
   };
   this.$text$ = function ($t) {
    let self = this;
    self._$textSlot$($t);
    if (self._$hasVisual()) {
     self._$editor().$setValue$($t);
    };
    return self;
   };
   this.$textBeingAccepted = function () {
    let self = this;
    return self._$editor().$getValue();
   };
   this.$init$editor$ = function (v) {
    this.$editor$slot = v;
    return this;
   };
   this.$editor = function () {
    return this.$editor$slot;
   };
   this.$editor$ = function (v) {
    this.$editor$slot = v;
    return this;
   };
   this.$init$textSlot$ = function (v) {
    this.$textSlot$slot = v;
    return this;
   };
   this.$textSlot = function () {
    return this.$textSlot$slot;
   };
   this.$textSlot$ = function (v) {
    this.$textSlot$slot = v;
    return this;
   };
   this.$init$counterfactualBar$ = function (v) {
    this.$counterfactualBar$slot = v;
    return this;
   };
   this.$counterfactualBar = function () {
    return this.$counterfactualBar$slot;
   };
   this.$counterfactualBar$ = function (v) {
    this.$counterfactualBar$slot = v;
    return this;
   };
   this.$init$isInEditState$ = function (v) {
    this.$isInEditState$slot = v;
    return this;
   };
   this.$isInEditState = function () {
    return this.$isInEditState$slot;
   };
   this.$isInEditState$ = function (v) {
    this.$isInEditState$slot = v;
    return this;
   };
   this.$init$changeResponse$ = function (v) {
    this.$changeResponse$slot = v;
    return this;
   };
   this.$changeResponse = function () {
    return this.$changeResponse$slot;
   };
   this.$changeResponse$ = function (v) {
    this.$changeResponse$slot = v;
    return this;
   };
   this.$init$acceptResponse$ = function (v) {
    this.$acceptResponse$slot = v;
    return this;
   };
   this.$acceptResponse = function () {
    return this.$acceptResponse$slot;
   };
   this.$acceptResponse$ = function (v) {
    this.$acceptResponse$slot = v;
    return this;
   };
   this.$init$cancelResponse$ = function (v) {
    this.$cancelResponse$slot = v;
    return this;
   };
   this.$cancelResponse = function () {
    return this.$cancelResponse$slot;
   };
   this.$cancelResponse$ = function (v) {
    this.$cancelResponse$slot = v;
    return this;
   };
   this.$init$styles$ = function (v) {
    this.$styles$slot = v;
    return this;
   };
   this.$styles = function () {
    return this.$styles$slot;
   };
   this.$styles$ = function (v) {
    this.$styles$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`CodeMirrorFragment";
     this._$superInit$HopscotchForHTML5$CodeMirrorFragment = $.$superInit$HopscotchForHTML5$CodeMirrorFragment;
     this.$superInit$HopscotchForHTML5$CodeMirrorFragment = dnuCatcher("$superInit$HopscotchForHTML5$CodeMirrorFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$applyStyle$ = $.$applyStyle$;
     this.$applyStyle$ = dnuCatcher("$applyStyle$");
     this._$applyStyles = $.$applyStyles;
     this.$applyStyles = dnuCatcher("$applyStyles");
     this._$controlBarColor = $.$controlBarColor;
     this.$controlBarColor = dnuCatcher("$controlBarColor");
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this.$defaultAcceptResponse = this._$defaultAcceptResponse = $.$defaultAcceptResponse;
     this._$defaultCancelResponse = $.$defaultCancelResponse;
     this.$defaultCancelResponse = dnuCatcher("$defaultCancelResponse");
     this._$defaultChangeResponse = $.$defaultChangeResponse;
     this.$defaultChangeResponse = dnuCatcher("$defaultChangeResponse");
     this.$enterEditState = this._$enterEditState = $.$enterEditState;
     this.$leaveEditState = this._$leaveEditState = $.$leaveEditState;
     this.$noticeExposure = this._$noticeExposure = $.$noticeExposure;
     this.$refresh = this._$refresh = $.$refresh;
     this._$respondToAccept$ = $.$respondToAccept$;
     this.$respondToAccept$ = dnuCatcher("$respondToAccept$");
     this._$respondToCancel = $.$respondToCancel;
     this.$respondToCancel = dnuCatcher("$respondToCancel");
     this._$respondToChange$ = $.$respondToChange$;
     this.$respondToChange$ = dnuCatcher("$respondToChange$");
     this.$showMessage$ = this._$showMessage$ = $.$showMessage$;
     this.$style$from$to$ = this._$style$from$to$ = $.$style$from$to$;
     this.$text$ = this._$text$ = $.$text$;
     this.$textBeingAccepted = this._$textBeingAccepted = $.$textBeingAccepted;
     this.$init$editor$ = this._$init$editor$ = $.$init$editor$;
     this.$editor = this._$editor = $.$editor;
     this.$editor$ = this._$editor$ = $.$editor$;
     this._$init$textSlot$ = $.$init$textSlot$;
     this.$init$textSlot$ = dnuCatcher("$init$textSlot$");
     this._$textSlot = $.$textSlot;
     this.$textSlot = dnuCatcher("$textSlot");
     this._$textSlot$ = $.$textSlot$;
     this.$textSlot$ = dnuCatcher("$textSlot$");
     this._$init$counterfactualBar$ = $.$init$counterfactualBar$;
     this.$init$counterfactualBar$ = dnuCatcher("$init$counterfactualBar$");
     this._$counterfactualBar = $.$counterfactualBar;
     this.$counterfactualBar = dnuCatcher("$counterfactualBar");
     this._$counterfactualBar$ = $.$counterfactualBar$;
     this.$counterfactualBar$ = dnuCatcher("$counterfactualBar$");
     this._$init$isInEditState$ = $.$init$isInEditState$;
     this.$init$isInEditState$ = dnuCatcher("$init$isInEditState$");
     this._$isInEditState = $.$isInEditState;
     this.$isInEditState = dnuCatcher("$isInEditState");
     this._$isInEditState$ = $.$isInEditState$;
     this.$isInEditState$ = dnuCatcher("$isInEditState$");
     this.$init$changeResponse$ = this._$init$changeResponse$ = $.$init$changeResponse$;
     this.$changeResponse = this._$changeResponse = $.$changeResponse;
     this.$changeResponse$ = this._$changeResponse$ = $.$changeResponse$;
     this.$init$acceptResponse$ = this._$init$acceptResponse$ = $.$init$acceptResponse$;
     this.$acceptResponse = this._$acceptResponse = $.$acceptResponse;
     this.$acceptResponse$ = this._$acceptResponse$ = $.$acceptResponse$;
     this.$init$cancelResponse$ = this._$init$cancelResponse$ = $.$init$cancelResponse$;
     this.$cancelResponse = this._$cancelResponse = $.$cancelResponse;
     this.$cancelResponse$ = this._$cancelResponse$ = $.$cancelResponse$;
     this._$init$styles$ = $.$init$styles$;
     this.$init$styles$ = dnuCatcher("$init$styles$");
     this._$styles = $.$styles;
     this.$styles = dnuCatcher("$styles");
     this._$styles$ = $.$styles$;
     this.$styles$ = dnuCatcher("$styles$");
     this.$enclosingObjects$HopscotchForHTML5$CodeMirrorFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$CodeMirrorFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`CodeMirrorFragment"] = function () {
      superBasicNew.call(this);
      this.$editor$slot = nil;
      this.$textSlot$slot = nil;
      this.$counterfactualBar$slot = nil;
      this.$isInEditState$slot = nil;
      this.$changeResponse$slot = nil;
      this.$acceptResponse$slot = nil;
      this.$cancelResponse$slot = nil;
      this.$styles$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`CodeMirrorFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`CodeMirrorFragment";
    this.slots = [];
    this.methods = [new MM("onText:", "public", true, 0)];
    this.nestedClasses = [];
    this.$onText$ = function ($t) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($t);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`CodeMirrorFragment";
      this.$onText$ = this._$onText$ = $.$onText$;
      this.$enclosingObjects$HopscotchForHTML5$CodeMirrorFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$CodeMirrorFragment$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$ColorDecorator = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`ColorDecorator";
   this.name = "HopscotchForHTML5`ColorDecorator";
   this.header = 1438;
   this.slots = [new SM("color", "protected", false, false)];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`ColorDecorator", "protected", true, 1439),
    new MM("instance`initializer", "public", true, 1440),
    new MM("decorate:", "public", false, 1441),
    new MM("init`color:", "protected", true, 0),
    new MM("color", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$ColorDecorator = function ($c) {
    let self = this;
    self.$super$HopscotchForHTML5$ColorDecorator$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($c) {
    let self = this;
    self._$superInit$HopscotchForHTML5$ColorDecorator($c);
    self._$init$color$($c);
    return self;
   };
   this.$decorate$ = function ($aVisual) {
    let self = this;
    self._$color().$applyToStyle$($aVisual.$at$("style"));
    return $aVisual;
   };
   this.$init$color$ = function (v) {
    this.$color$slot = v;
    return this;
   };
   this.$color = function () {
    return this.$color$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`ColorDecorator";
     this._$superInit$HopscotchForHTML5$ColorDecorator = $.$superInit$HopscotchForHTML5$ColorDecorator;
     this.$superInit$HopscotchForHTML5$ColorDecorator = dnuCatcher("$superInit$HopscotchForHTML5$ColorDecorator");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$decorate$ = this._$decorate$ = $.$decorate$;
     this._$init$color$ = $.$init$color$;
     this.$init$color$ = dnuCatcher("$init$color$");
     this._$color = $.$color;
     this.$color = dnuCatcher("$color");
     this.$enclosingObjects$HopscotchForHTML5$ColorDecorator = enclosingObjects;
     this.$super$HopscotchForHTML5$ColorDecorator$slot = runtimeSuperclass;
     this["HopscotchForHTML5`ColorDecorator"] = function () {
      superBasicNew.call(this);
      this.$color$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`ColorDecorator"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`ColorDecorator";
    this.slots = [];
    this.methods = [new MM("color:", "public", true, 0)];
    this.nestedClasses = [];
    this.$color$ = function ($c) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($c);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`ColorDecorator";
      this.$color$ = this._$color$ = $.$color$;
      this.$enclosingObjects$HopscotchForHTML5$ColorDecorator = enclosingObjects;
      this.$super$HopscotchForHTML5$ColorDecorator$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$ColumnComposer = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`ColumnComposer";
   this.name = "HopscotchForHTML5`ColumnComposer";
   this.header = 1442;
   this.slots = [];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`ColumnComposer", "protected", true, 1443),
    new MM("instance`initializer", "public", true, 1444),
    new MM("flexDirection", "protected", false, 1445)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$ColumnComposer = function ($fs) {
    let self = this;
    self.$super$HopscotchForHTML5$ColumnComposer$slot._$instance$initializer.call(self, $fs);
    return self;
   };
   this.$instance$initializer = function ($fs) {
    let self = this;
    self._$superInit$HopscotchForHTML5$ColumnComposer($fs);
    self._$crossAxisStretch();
    return self;
   };
   this.$flexDirection = function () {
    let self = this;
    return "column";
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`ColumnComposer";
     this._$superInit$HopscotchForHTML5$ColumnComposer = $.$superInit$HopscotchForHTML5$ColumnComposer;
     this.$superInit$HopscotchForHTML5$ColumnComposer = dnuCatcher("$superInit$HopscotchForHTML5$ColumnComposer");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$flexDirection = $.$flexDirection;
     this.$flexDirection = dnuCatcher("$flexDirection");
     this.$enclosingObjects$HopscotchForHTML5$ColumnComposer = enclosingObjects;
     this.$super$HopscotchForHTML5$ColumnComposer$slot = runtimeSuperclass;
     this["HopscotchForHTML5`ColumnComposer"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["HopscotchForHTML5`ColumnComposer"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`ColumnComposer";
    this.slots = [];
    this.methods = [new MM("definitions:", "public", true, 0)];
    this.nestedClasses = [];
    this.$definitions$ = function ($fs) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($fs);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`ColumnComposer";
      this.$definitions$ = this._$definitions$ = $.$definitions$;
      this.$enclosingObjects$HopscotchForHTML5$ColumnComposer = enclosingObjects;
      this.$super$HopscotchForHTML5$ColumnComposer$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$Composer = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`Composer";
   this.name = "HopscotchForHTML5`Composer";
   this.header = 1446;
   this.slots = [];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`Composer", "protected", true, 1447),
    new MM("instance`initializer", "public", true, 1448)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$Composer = function () {
    let self = this;
    self.$super$HopscotchForHTML5$Composer$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$HopscotchForHTML5$Composer();
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`Composer";
     this._$superInit$HopscotchForHTML5$Composer = $.$superInit$HopscotchForHTML5$Composer;
     this.$superInit$HopscotchForHTML5$Composer = dnuCatcher("$superInit$HopscotchForHTML5$Composer");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$enclosingObjects$HopscotchForHTML5$Composer = enclosingObjects;
     this.$super$HopscotchForHTML5$Composer$slot = runtimeSuperclass;
     this["HopscotchForHTML5`Composer"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["HopscotchForHTML5`Composer"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`Composer";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`Composer";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$HopscotchForHTML5$Composer = enclosingObjects;
      this.$super$HopscotchForHTML5$Composer$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$Decorator = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`Decorator";
   this.name = "HopscotchForHTML5`Decorator";
   this.header = 1449;
   this.slots = [];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`Decorator", "protected", true, 1450),
    new MM("instance`initializer", "public", true, 1451),
    new MM("decorate:", "public", false, 1452)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$Decorator = function () {
    let self = this;
    self.$super$HopscotchForHTML5$Decorator$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$HopscotchForHTML5$Decorator();
    return self;
   };
   this.$decorate$ = function ($aVisual) {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`Decorator";
     this._$superInit$HopscotchForHTML5$Decorator = $.$superInit$HopscotchForHTML5$Decorator;
     this.$superInit$HopscotchForHTML5$Decorator = dnuCatcher("$superInit$HopscotchForHTML5$Decorator");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$decorate$ = this._$decorate$ = $.$decorate$;
     this.$enclosingObjects$HopscotchForHTML5$Decorator = enclosingObjects;
     this.$super$HopscotchForHTML5$Decorator$slot = runtimeSuperclass;
     this["HopscotchForHTML5`Decorator"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["HopscotchForHTML5`Decorator"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`Decorator";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`Decorator";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$HopscotchForHTML5$Decorator = enclosingObjects;
      this.$super$HopscotchForHTML5$Decorator$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$DeferredContentComposer = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`DeferredContentComposer";
   this.name = "HopscotchForHTML5`DeferredContentComposer";
   this.header = 1453;
   this.slots = [
    new SM("initialContent", "protected", false, false),
    new SM("contentSource", "protected", false, false),
    new SM("contentFragment", "protected", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`DeferredContentComposer", "protected", true, 1454),
    new MM("instance`initializer", "public", true, 1455),
    new MM("childrenDo:", "public", false, 1456),
    new MM("createVisual", "protected", false, 1457),
    new MM("init`initialContent:", "protected", true, 0),
    new MM("initialContent", "protected", true, 0),
    new MM("init`contentSource:", "protected", true, 0),
    new MM("contentSource", "protected", true, 0),
    new MM("init`contentFragment:", "protected", true, 0),
    new MM("contentFragment", "protected", true, 0),
    new MM("contentFragment:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$DeferredContentComposer = function ($ic, $cs) {
    let self = this;
    self.$super$HopscotchForHTML5$DeferredContentComposer$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($ic, $cs) {
    let self = this;
    self._$superInit$HopscotchForHTML5$DeferredContentComposer($ic, $cs);
    self._$init$initialContent$($ic);
    self._$init$contentSource$($cs);
    return self;
   };
   this.$childrenDo$ = function ($aBlock) {
    let self = this;
    if (!nil.$$equal(self._$contentFragment())) {
     $aBlock.$value$(self._$contentFragment());
    } else {
     $aBlock.$value$(self._$initialContent());
    };
    return self;
   };
   this.$createVisual = function () {
    let self = this;
    let $div = nil;
    let $initialVisual = nil;
    $div = $0.$document(self.$enclosingObjects$HopscotchForHTML5$DeferredContentComposer[0]).$createElement$("div");
    $div.$at$("style").$at$put$("align-self", "center");
    $initialVisual = self._$initialContent().$visual();
    $div.$appendChild$($initialVisual);
    self.$enclosingObjects$HopscotchForHTML5$DeferredContentComposer[0]._$deferAction$(function () {
     let $deferredFragment = nil;
     $deferredFragment = self._$contentSource().$value();
     $deferredFragment.$parent$(self);
     self._$contentFragment$($deferredFragment);
     return $div.$replaceChild$with$($deferredFragment.$visual(), $initialVisual);
    });
    return $div;
   };
   this.$init$initialContent$ = function (v) {
    this.$initialContent$slot = v;
    return this;
   };
   this.$initialContent = function () {
    return this.$initialContent$slot;
   };
   this.$init$contentSource$ = function (v) {
    this.$contentSource$slot = v;
    return this;
   };
   this.$contentSource = function () {
    return this.$contentSource$slot;
   };
   this.$init$contentFragment$ = function (v) {
    this.$contentFragment$slot = v;
    return this;
   };
   this.$contentFragment = function () {
    return this.$contentFragment$slot;
   };
   this.$contentFragment$ = function (v) {
    this.$contentFragment$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`DeferredContentComposer";
     this._$superInit$HopscotchForHTML5$DeferredContentComposer = $.$superInit$HopscotchForHTML5$DeferredContentComposer;
     this.$superInit$HopscotchForHTML5$DeferredContentComposer = dnuCatcher("$superInit$HopscotchForHTML5$DeferredContentComposer");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$childrenDo$ = this._$childrenDo$ = $.$childrenDo$;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this._$init$initialContent$ = $.$init$initialContent$;
     this.$init$initialContent$ = dnuCatcher("$init$initialContent$");
     this._$initialContent = $.$initialContent;
     this.$initialContent = dnuCatcher("$initialContent");
     this._$init$contentSource$ = $.$init$contentSource$;
     this.$init$contentSource$ = dnuCatcher("$init$contentSource$");
     this._$contentSource = $.$contentSource;
     this.$contentSource = dnuCatcher("$contentSource");
     this._$init$contentFragment$ = $.$init$contentFragment$;
     this.$init$contentFragment$ = dnuCatcher("$init$contentFragment$");
     this._$contentFragment = $.$contentFragment;
     this.$contentFragment = dnuCatcher("$contentFragment");
     this._$contentFragment$ = $.$contentFragment$;
     this.$contentFragment$ = dnuCatcher("$contentFragment$");
     this.$enclosingObjects$HopscotchForHTML5$DeferredContentComposer = enclosingObjects;
     this.$super$HopscotchForHTML5$DeferredContentComposer$slot = runtimeSuperclass;
     this["HopscotchForHTML5`DeferredContentComposer"] = function () {
      superBasicNew.call(this);
      this.$initialContent$slot = nil;
      this.$contentSource$slot = nil;
      this.$contentFragment$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`DeferredContentComposer"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`DeferredContentComposer";
    this.slots = [];
    this.methods = [new MM("initialContent:contentSource:", "public", true, 0)];
    this.nestedClasses = [];
    this.$initialContent$contentSource$ = function ($ic, $cs) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($ic, $cs);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`DeferredContentComposer";
      this.$initialContent$contentSource$ = this._$initialContent$contentSource$ = $.$initialContent$contentSource$;
      this.$enclosingObjects$HopscotchForHTML5$DeferredContentComposer = enclosingObjects;
      this.$super$HopscotchForHTML5$DeferredContentComposer$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$DropDownMenuFragment = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`DropDownMenuFragment";
   this.name = "HopscotchForHTML5`DropDownMenuFragment";
   this.header = 1458;
   this.slots = [
    new SM("menuSupplier", "protected", false, false),
    new SM("menuActive", "protected", true, false),
    new SM("alignment", "protected", false, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`DropDownMenuFragment", "protected", true, 1459),
    new MM("instance`initializer", "public", true, 1460),
    new MM("createVisual", "protected", false, 1461),
    new MM("removeContent", "protected", false, 1462),
    new MM("toggleContent", "protected", false, 1463),
    new MM("updateContent", "protected", false, 1464),
    new MM("init`menuSupplier:", "protected", true, 0),
    new MM("menuSupplier", "protected", true, 0),
    new MM("init`menuActive:", "protected", true, 0),
    new MM("menuActive", "protected", true, 0),
    new MM("menuActive:", "protected", true, 0),
    new MM("init`alignment:", "protected", true, 0),
    new MM("alignment", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$DropDownMenuFragment = function ($ms, $ims, $side) {
    let self = this;
    self.$super$HopscotchForHTML5$DropDownMenuFragment$slot._$instance$initializer.call(self, $ims);
    return self;
   };
   this.$instance$initializer = function ($ms, $ims, $side) {
    let self = this;
    self._$superInit$HopscotchForHTML5$DropDownMenuFragment($ms, $ims, $side);
    self._$init$menuSupplier$($ms);
    self._$init$menuActive$(false);
    self._$init$alignment$($side.$asString());
    self._$action$(function () {
     return nil;
    });
    return self;
   };
   this.$createVisual = function () {
    let self = this;
    let $column = nil;
    $column = self.$super$HopscotchForHTML5$DropDownMenuFragment$slot._$createVisual.call(self);
    $column.$addEventListener$action$("click", function ($event) {
     self._$toggleContent();
     return nil;
    });
    $column.$at$("style").$at$put$("cursor", "pointer");
    return $column;
   };
   this.$removeContent = function () {
    let self = this;
    return self._$visual().$removeChild$(self._$visual().$at$("lastChild"));
   };
   this.$toggleContent = function () {
    let self = this;
    if (self._$menuActive()) {
     self._$removeContent();
    } else {
     self._$updateContent();
    };
    self._$menuActive$(self._$menuActive().$not());
    return self;
   };
   this.$updateContent = function () {
    let self = this;
    let $menuContent = nil;
    $menuContent = self.$enclosingObjects$HopscotchForHTML5$DropDownMenuFragment[0]._$computeContentForMenu$(self._$menuSupplier());
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$(self._$alignment(), 0);
     return cascadeReceiver.$at$put$("display", "block");
    })($menuContent.$at$("style"));
    self._$visual().$appendChild$($menuContent);
    return $menuContent;
   };
   this.$init$menuSupplier$ = function (v) {
    this.$menuSupplier$slot = v;
    return this;
   };
   this.$menuSupplier = function () {
    return this.$menuSupplier$slot;
   };
   this.$init$menuActive$ = function (v) {
    this.$menuActive$slot = v;
    return this;
   };
   this.$menuActive = function () {
    return this.$menuActive$slot;
   };
   this.$menuActive$ = function (v) {
    this.$menuActive$slot = v;
    return this;
   };
   this.$init$alignment$ = function (v) {
    this.$alignment$slot = v;
    return this;
   };
   this.$alignment = function () {
    return this.$alignment$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`DropDownMenuFragment";
     this._$superInit$HopscotchForHTML5$DropDownMenuFragment = $.$superInit$HopscotchForHTML5$DropDownMenuFragment;
     this.$superInit$HopscotchForHTML5$DropDownMenuFragment = dnuCatcher("$superInit$HopscotchForHTML5$DropDownMenuFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this._$removeContent = $.$removeContent;
     this.$removeContent = dnuCatcher("$removeContent");
     this._$toggleContent = $.$toggleContent;
     this.$toggleContent = dnuCatcher("$toggleContent");
     this._$updateContent = $.$updateContent;
     this.$updateContent = dnuCatcher("$updateContent");
     this._$init$menuSupplier$ = $.$init$menuSupplier$;
     this.$init$menuSupplier$ = dnuCatcher("$init$menuSupplier$");
     this._$menuSupplier = $.$menuSupplier;
     this.$menuSupplier = dnuCatcher("$menuSupplier");
     this._$init$menuActive$ = $.$init$menuActive$;
     this.$init$menuActive$ = dnuCatcher("$init$menuActive$");
     this._$menuActive = $.$menuActive;
     this.$menuActive = dnuCatcher("$menuActive");
     this._$menuActive$ = $.$menuActive$;
     this.$menuActive$ = dnuCatcher("$menuActive$");
     this._$init$alignment$ = $.$init$alignment$;
     this.$init$alignment$ = dnuCatcher("$init$alignment$");
     this._$alignment = $.$alignment;
     this.$alignment = dnuCatcher("$alignment");
     this.$enclosingObjects$HopscotchForHTML5$DropDownMenuFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$DropDownMenuFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`DropDownMenuFragment"] = function () {
      superBasicNew.call(this);
      this.$menuSupplier$slot = nil;
      this.$menuActive$slot = nil;
      this.$alignment$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`DropDownMenuFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`DropDownMenuFragment";
    this.slots = [];
    this.methods = [
     new MM("menu:images:alignment:", "public", true, 0),
     new MM("menu:", "public", false, 1465),
     new MM("menu:alignment:", "public", false, 1466),
     new MM("menu:images:", "public", false, 1467)
    ];
    this.nestedClasses = [];
    this.$menu$images$alignment$ = function ($ms, $ims, $side) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($ms, $ims, $side);
     return t;
    };
    this.$menu$ = function ($ms) {
     let self = this;
     return self._$menu$images$alignment$($ms, [
      self.$enclosingObjects$HopscotchForHTML5$DropDownMenuFragment[0]._$dropDownImage(),
      self.$enclosingObjects$HopscotchForHTML5$DropDownMenuFragment[0]._$dropDownOverImage(),
      self.$enclosingObjects$HopscotchForHTML5$DropDownMenuFragment[0]._$dropDownOutImage()
     ], "right");
    };
    this.$menu$alignment$ = function ($ms, $side) {
     let self = this;
     return self._$menu$images$alignment$($ms, [
      self.$enclosingObjects$HopscotchForHTML5$DropDownMenuFragment[0]._$dropDownImage(),
      self.$enclosingObjects$HopscotchForHTML5$DropDownMenuFragment[0]._$dropDownOverImage(),
      self.$enclosingObjects$HopscotchForHTML5$DropDownMenuFragment[0]._$dropDownOutImage()
     ], $side);
    };
    this.$menu$images$ = function ($ms, $ims) {
     let self = this;
     return self._$menu$images$alignment$($ms, $ims, "right");
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`DropDownMenuFragment";
      this.$menu$images$alignment$ = this._$menu$images$alignment$ = $.$menu$images$alignment$;
      this.$menu$ = this._$menu$ = $.$menu$;
      this.$menu$alignment$ = this._$menu$alignment$ = $.$menu$alignment$;
      this.$menu$images$ = this._$menu$images$ = $.$menu$images$;
      this.$enclosingObjects$HopscotchForHTML5$DropDownMenuFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$DropDownMenuFragment$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$EmbeddedHopscotchWindow = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`EmbeddedHopscotchWindow";
   this.name = "HopscotchForHTML5`EmbeddedHopscotchWindow";
   this.header = 1468;
   this.slots = [new SM("localNavigator", "protected", false, false)];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`EmbeddedHopscotchWindow", "protected", true, 1469),
    new MM("instance`initializer", "public", true, 1470),
    new MM("displayPresenter:", "public", false, 1471),
    new MM("enterPresenter:", "public", false, 1472),
    new MM("enterSubject:fromSnippet:", "public", false, 1473),
    new MM("goBack", "public", false, 1474),
    new MM("listenForBackButton", "protected", false, 1475),
    new MM("navigationHistory", "protected", false, 1476),
    new MM("init`localNavigator:", "protected", true, 0),
    new MM("localNavigator", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$EmbeddedHopscotchWindow = function ($container, $s) {
    let self = this;
    self.$super$HopscotchForHTML5$EmbeddedHopscotchWindow$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($container, $s) {
    let self = this;
    self._$superInit$HopscotchForHTML5$EmbeddedHopscotchWindow($container, $s);
    self._$init$localNavigator$(self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]._$LocalNavigationHistory().$new());
    $container.$appendChild$(self._$contentHolder());
    self._$enterSubject$($s);
    return self;
   };
   this.$displayPresenter$ = function ($p) {
    let self = this;
    self.$super$HopscotchForHTML5$EmbeddedHopscotchWindow$slot._$displayPresenter$.call(self, $p);
    return self;
   };
   this.$enterPresenter$ = function ($p) {
    let self = this;
    self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]._$currentHopscotchWindow$(self);
    self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]._$embeddedWindowMap().$at$ifAbsentPut$($p, function () {
     return self;
    });
    self._$localNavigator().$visit$($p);
    self.$super$HopscotchForHTML5$EmbeddedHopscotchWindow$slot._$enterPresenter$.call(self, $p);
    return self;
   };
   this.$enterSubject$fromSnippet$ = function ($s, $snippet) {
    let self = this;
    self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]._$embeddedWindowMap().$at$ifAbsentPut$($snippet.$presenter(), function () {
     return self;
    });
    self._$enterSubject$($s);
    return self;
   };
   this.$goBack = function () {
    let self = this;
    self._$localNavigator().$goBack();
    self._$displayPresenter$(self._$localNavigator().$current());
    return self;
   };
   this.$listenForBackButton = function () {
    let self = this;
    if (!nil.$$equal(self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]._$sharedBackButtonListener())) {
     return self;
    };
    self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]._$sharedBackButtonListener$(function ($event) {
     let $p = nil;
     let $priorWindow = nil;
     $p = self._$navigator().$presenterFor$($event.$at$("state"));
     $priorWindow = self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]._$embeddedWindowMap().$at$($p);
     self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]._$currentHopscotchWindow().$goBack();
     return (function ($setter_arg) {
      self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]._$currentHopscotchWindow$($setter_arg);
      return $setter_arg;
     }).$value$($priorWindow);
    });
    $0.$window(self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]).$at$put$("onpopstate", self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]._$sharedBackButtonListener());
    return self;
   };
   this.$navigationHistory = function () {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]._$sharedNavigator();
   };
   this.$init$localNavigator$ = function (v) {
    this.$localNavigator$slot = v;
    return this;
   };
   this.$localNavigator = function () {
    return this.$localNavigator$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`EmbeddedHopscotchWindow";
     this._$superInit$HopscotchForHTML5$EmbeddedHopscotchWindow = $.$superInit$HopscotchForHTML5$EmbeddedHopscotchWindow;
     this.$superInit$HopscotchForHTML5$EmbeddedHopscotchWindow = dnuCatcher("$superInit$HopscotchForHTML5$EmbeddedHopscotchWindow");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$displayPresenter$ = this._$displayPresenter$ = $.$displayPresenter$;
     this.$enterPresenter$ = this._$enterPresenter$ = $.$enterPresenter$;
     this.$enterSubject$fromSnippet$ = this._$enterSubject$fromSnippet$ = $.$enterSubject$fromSnippet$;
     this.$goBack = this._$goBack = $.$goBack;
     this._$listenForBackButton = $.$listenForBackButton;
     this.$listenForBackButton = dnuCatcher("$listenForBackButton");
     this._$navigationHistory = $.$navigationHistory;
     this.$navigationHistory = dnuCatcher("$navigationHistory");
     this._$init$localNavigator$ = $.$init$localNavigator$;
     this.$init$localNavigator$ = dnuCatcher("$init$localNavigator$");
     this._$localNavigator = $.$localNavigator;
     this.$localNavigator = dnuCatcher("$localNavigator");
     this.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow = enclosingObjects;
     this.$super$HopscotchForHTML5$EmbeddedHopscotchWindow$slot = runtimeSuperclass;
     this["HopscotchForHTML5`EmbeddedHopscotchWindow"] = function () {
      superBasicNew.call(this);
      this.$localNavigator$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`EmbeddedHopscotchWindow"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`EmbeddedHopscotchWindow";
    this.slots = [];
    this.methods = [
     new MM("into:openSubject:", "public", true, 0),
     new MM("openSubject:", "public", false, 1477)
    ];
    this.nestedClasses = [];
    this.$into$openSubject$ = function ($container, $s) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($container, $s);
     return t;
    };
    this.$openSubject$ = function ($s) {
     let self = this;
     return self._$into$openSubject$($0.$body(self.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow[0]), $s);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`EmbeddedHopscotchWindow";
      this.$into$openSubject$ = this._$into$openSubject$ = $.$into$openSubject$;
      this.$openSubject$ = this._$openSubject$ = $.$openSubject$;
      this.$enclosingObjects$HopscotchForHTML5$EmbeddedHopscotchWindow = enclosingObjects;
      this.$super$HopscotchForHTML5$EmbeddedHopscotchWindow$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$Fragment = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`Fragment";
   this.name = "HopscotchForHTML5`Fragment";
   this.header = 1478;
   this.slots = [
    new SM("visualX", "protected", true, false),
    new SM("parent", "public", true, false),
    new SM("size", "public", true, false),
    new SM("expansibility", "public", true, false),
    new SM("compressibility", "public", true, false),
    new SM("decorators", "protected", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`Fragment", "protected", true, 1479),
    new MM("instance`initializer", "public", true, 1480),
    new MM("addDecorator:", "public", false, 1481),
    new MM("createVisual", "protected", false, 1482),
    new MM("decorate:", "public", false, 1483),
    new MM("elasticity:", "public", false, 1484),
    new MM("hasVisual", "public", false, 1485),
    new MM("noticeExposure", "public", false, 1486),
    new MM("refresh", "public", false, 1487),
    new MM("shell", "public", false, 1488),
    new MM("value", "public", false, 1489),
    new MM("visual", "public", false, 1490),
    new MM("width:elasticity:", "public", false, 1491),
    new MM("init`visualX:", "protected", true, 0),
    new MM("visualX", "protected", true, 0),
    new MM("visualX:", "protected", true, 0),
    new MM("init`parent:", "public", true, 0),
    new MM("parent", "public", true, 0),
    new MM("parent:", "public", true, 0),
    new MM("init`size:", "public", true, 0),
    new MM("size", "public", true, 0),
    new MM("size:", "public", true, 0),
    new MM("init`expansibility:", "public", true, 0),
    new MM("expansibility", "public", true, 0),
    new MM("expansibility:", "public", true, 0),
    new MM("init`compressibility:", "public", true, 0),
    new MM("compressibility", "public", true, 0),
    new MM("compressibility:", "public", true, 0),
    new MM("init`decorators:", "protected", true, 0),
    new MM("decorators", "protected", true, 0),
    new MM("decorators:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$Fragment = function () {
    let self = this;
    self.$super$HopscotchForHTML5$Fragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$HopscotchForHTML5$Fragment();
    self._$init$size$(nil);
    self._$init$expansibility$(0);
    self._$init$compressibility$(0);
    return self;
   };
   this.$addDecorator$ = function ($newDecorator) {
    let self = this;
    if (nil.$$equal(self._$decorators())) {
     self._$decorators$($0.$List(self.$enclosingObjects$HopscotchForHTML5$Fragment[0]).$new());
    };
    self._$decorators().$addLast$($newDecorator);
    return self;
   };
   this.$createVisual = function () {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$decorate$ = function ($aVisual) {
    let self = this;
    let $decorated = nil;
    $decorated = $aVisual;
    if (!nil.$$equal(self._$decorators())) {
     self._$decorators().$do$(function ($each) {
      return $decorated = $each.$decorate$($decorated);
     });
    };
    return $decorated;
   };
   this.$elasticity$ = function ($x) {
    let self = this;
    self._$expansibility$($x);
    self._$compressibility$($x);
    return self;
   };
   this.$hasVisual = function () {
    let self = this;
    return self._$visualX().$isNil().$not();
   };
   this.$noticeExposure = function () {
    let self = this;
    self._$childrenDo$(function ($each) {
     return $each.$noticeExposure();
    });
    return self;
   };
   this.$refresh = function () {
    let self = this;
    self._$childrenDo$(function ($each) {
     return $each.$refresh();
    });
    return self;
   };
   this.$shell = function () {
    let self = this;
    return self._$parent().$isNil().$ifTrue$ifFalse$(function () {
     return self._$Error().$signal$("hierarchy not installed in a shell :".$$comma(self._$printString()));
    }, function () {
     return self._$parent().$shell();
    });
   };
   this.$value = function () {
    let self = this;
    return self;
   };
   this.$visual = function () {
    let self = this;
    if (self._$visualX().$isNil()) {
     self._$visualX$(self._$decorate$(self._$createVisual()));
    };
    return self._$visualX();
   };
   this.$width$elasticity$ = function ($w, $e) {
    let self = this;
    self._$size$($w);
    self._$expansibility$($e);
    self._$compressibility$($e);
    return self;
   };
   this.$init$visualX$ = function (v) {
    this.$visualX$slot = v;
    return this;
   };
   this.$visualX = function () {
    return this.$visualX$slot;
   };
   this.$visualX$ = function (v) {
    this.$visualX$slot = v;
    return this;
   };
   this.$init$parent$ = function (v) {
    this.$parent$slot = v;
    return this;
   };
   this.$parent = function () {
    return this.$parent$slot;
   };
   this.$parent$ = function (v) {
    this.$parent$slot = v;
    return this;
   };
   this.$init$size$ = function (v) {
    this.$size$slot = v;
    return this;
   };
   this.$size = function () {
    return this.$size$slot;
   };
   this.$size$ = function (v) {
    this.$size$slot = v;
    return this;
   };
   this.$init$expansibility$ = function (v) {
    this.$expansibility$slot = v;
    return this;
   };
   this.$expansibility = function () {
    return this.$expansibility$slot;
   };
   this.$expansibility$ = function (v) {
    this.$expansibility$slot = v;
    return this;
   };
   this.$init$compressibility$ = function (v) {
    this.$compressibility$slot = v;
    return this;
   };
   this.$compressibility = function () {
    return this.$compressibility$slot;
   };
   this.$compressibility$ = function (v) {
    this.$compressibility$slot = v;
    return this;
   };
   this.$init$decorators$ = function (v) {
    this.$decorators$slot = v;
    return this;
   };
   this.$decorators = function () {
    return this.$decorators$slot;
   };
   this.$decorators$ = function (v) {
    this.$decorators$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`Fragment";
     this._$superInit$HopscotchForHTML5$Fragment = $.$superInit$HopscotchForHTML5$Fragment;
     this.$superInit$HopscotchForHTML5$Fragment = dnuCatcher("$superInit$HopscotchForHTML5$Fragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$addDecorator$ = this._$addDecorator$ = $.$addDecorator$;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this.$decorate$ = this._$decorate$ = $.$decorate$;
     this.$elasticity$ = this._$elasticity$ = $.$elasticity$;
     this.$hasVisual = this._$hasVisual = $.$hasVisual;
     this.$noticeExposure = this._$noticeExposure = $.$noticeExposure;
     this.$refresh = this._$refresh = $.$refresh;
     this.$shell = this._$shell = $.$shell;
     this.$value = this._$value = $.$value;
     this.$visual = this._$visual = $.$visual;
     this.$width$elasticity$ = this._$width$elasticity$ = $.$width$elasticity$;
     this._$init$visualX$ = $.$init$visualX$;
     this.$init$visualX$ = dnuCatcher("$init$visualX$");
     this._$visualX = $.$visualX;
     this.$visualX = dnuCatcher("$visualX");
     this._$visualX$ = $.$visualX$;
     this.$visualX$ = dnuCatcher("$visualX$");
     this.$init$parent$ = this._$init$parent$ = $.$init$parent$;
     this.$parent = this._$parent = $.$parent;
     this.$parent$ = this._$parent$ = $.$parent$;
     this.$init$size$ = this._$init$size$ = $.$init$size$;
     this.$size = this._$size = $.$size;
     this.$size$ = this._$size$ = $.$size$;
     this.$init$expansibility$ = this._$init$expansibility$ = $.$init$expansibility$;
     this.$expansibility = this._$expansibility = $.$expansibility;
     this.$expansibility$ = this._$expansibility$ = $.$expansibility$;
     this.$init$compressibility$ = this._$init$compressibility$ = $.$init$compressibility$;
     this.$compressibility = this._$compressibility = $.$compressibility;
     this.$compressibility$ = this._$compressibility$ = $.$compressibility$;
     this._$init$decorators$ = $.$init$decorators$;
     this.$init$decorators$ = dnuCatcher("$init$decorators$");
     this._$decorators = $.$decorators;
     this.$decorators = dnuCatcher("$decorators");
     this._$decorators$ = $.$decorators$;
     this.$decorators$ = dnuCatcher("$decorators$");
     this.$enclosingObjects$HopscotchForHTML5$Fragment = enclosingObjects;
     this.$super$HopscotchForHTML5$Fragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`Fragment"] = function () {
      superBasicNew.call(this);
      this.$visualX$slot = nil;
      this.$parent$slot = nil;
      this.$size$slot = nil;
      this.$expansibility$slot = nil;
      this.$compressibility$slot = nil;
      this.$decorators$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`Fragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`Fragment";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`Fragment";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$HopscotchForHTML5$Fragment = enclosingObjects;
      this.$super$HopscotchForHTML5$Fragment$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$Gradient = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`Gradient";
   this.name = "HopscotchForHTML5`Gradient";
   this.header = 1492;
   this.slots = [
    new SM("topColor", "protected", false, false),
    new SM("bottomColor", "protected", false, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`Gradient", "protected", true, 1493),
    new MM("instance`initializer", "public", true, 1494),
    new MM("applyToStyle:", "public", false, 1495),
    new MM("init`topColor:", "protected", true, 0),
    new MM("topColor", "protected", true, 0),
    new MM("init`bottomColor:", "protected", true, 0),
    new MM("bottomColor", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$Gradient = function ($a, $b) {
    let self = this;
    self.$super$HopscotchForHTML5$Gradient$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($a, $b) {
    let self = this;
    self._$superInit$HopscotchForHTML5$Gradient($a, $b);
    self._$init$topColor$($a);
    self._$init$bottomColor$($b);
    return self;
   };
   this.$applyToStyle$ = function ($style) {
    let self = this;
    let $value = nil;
    $value = "(top,".$$comma(self._$topColor().$asCSSString()).$$comma(",").$$comma(self._$bottomColor().$asCSSString()).$$comma(")");
    $style.$setProperty$to$("background-image", "-webkit-linear-gradient".$$comma($value));
    $style.$setProperty$to$("background-image", "-moz-linear-gradient".$$comma($value));
    return self;
   };
   this.$init$topColor$ = function (v) {
    this.$topColor$slot = v;
    return this;
   };
   this.$topColor = function () {
    return this.$topColor$slot;
   };
   this.$init$bottomColor$ = function (v) {
    this.$bottomColor$slot = v;
    return this;
   };
   this.$bottomColor = function () {
    return this.$bottomColor$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`Gradient";
     this._$superInit$HopscotchForHTML5$Gradient = $.$superInit$HopscotchForHTML5$Gradient;
     this.$superInit$HopscotchForHTML5$Gradient = dnuCatcher("$superInit$HopscotchForHTML5$Gradient");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$applyToStyle$ = this._$applyToStyle$ = $.$applyToStyle$;
     this._$init$topColor$ = $.$init$topColor$;
     this.$init$topColor$ = dnuCatcher("$init$topColor$");
     this._$topColor = $.$topColor;
     this.$topColor = dnuCatcher("$topColor");
     this._$init$bottomColor$ = $.$init$bottomColor$;
     this.$init$bottomColor$ = dnuCatcher("$init$bottomColor$");
     this._$bottomColor = $.$bottomColor;
     this.$bottomColor = dnuCatcher("$bottomColor");
     this.$enclosingObjects$HopscotchForHTML5$Gradient = enclosingObjects;
     this.$super$HopscotchForHTML5$Gradient$slot = runtimeSuperclass;
     this["HopscotchForHTML5`Gradient"] = function () {
      superBasicNew.call(this);
      this.$topColor$slot = nil;
      this.$bottomColor$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`Gradient"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`Gradient";
    this.slots = [];
    this.methods = [new MM("from:to:", "public", true, 0)];
    this.nestedClasses = [];
    this.$from$to$ = function ($a, $b) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($a, $b);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`Gradient";
      this.$from$to$ = this._$from$to$ = $.$from$to$;
      this.$enclosingObjects$HopscotchForHTML5$Gradient = enclosingObjects;
      this.$super$HopscotchForHTML5$Gradient$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$HolderComposer = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`HolderComposer";
   this.name = "HopscotchForHTML5`HolderComposer";
   this.header = 1496;
   this.slots = [
    new SM("contentSource", "protected", true, false),
    new SM("actualContent", "protected", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`HolderComposer", "protected", true, 1497),
    new MM("instance`initializer", "public", true, 1498),
    new MM("childrenDo:", "public", false, 1499),
    new MM("content", "public", false, 1500),
    new MM("content:", "public", false, 1501),
    new MM("createVisual", "protected", false, 1502),
    new MM("noticeExposure", "public", false, 1503),
    new MM("refresh", "public", false, 1504),
    new MM("init`contentSource:", "protected", true, 0),
    new MM("contentSource", "protected", true, 0),
    new MM("contentSource:", "protected", true, 0),
    new MM("init`actualContent:", "protected", true, 0),
    new MM("actualContent", "protected", true, 0),
    new MM("actualContent:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$HolderComposer = function ($definition) {
    let self = this;
    self.$super$HopscotchForHTML5$HolderComposer$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($definition) {
    let self = this;
    self._$superInit$HopscotchForHTML5$HolderComposer($definition);
    self._$init$contentSource$($definition);
    return self;
   };
   this.$childrenDo$ = function ($aBlock) {
    let self = this;
    if (!nil.$$equal(self._$actualContent())) {
     $aBlock.$value$(self._$actualContent());
    };
    return self;
   };
   this.$content = function () {
    let self = this;
    if (nil.$$equal(self._$actualContent())) {
     self._$actualContent$(self._$contentSource().$value());
     self._$actualContent().$parent$(self);
    };
    return self._$actualContent();
   };
   this.$content$ = function ($fragment) {
    let self = this;
    $fragment.$parent$(self);
    if (self._$hasVisual()) {
     let $oldContent = nil;
     let $newContent = nil;
     $oldContent = self._$actualContent();
     $newContent = (function ($setter_arg) {
      self._$actualContent$($setter_arg);
      return $setter_arg;
     }).$value$($fragment);
     self._$visual().$replaceChild$with$($newContent.$visual(), $oldContent.$visual());
    } else {
     self._$actualContent$($fragment);
    };
    return self;
   };
   this.$createVisual = function () {
    let self = this;
    let $div = nil;
    $div = $0.$document(self.$enclosingObjects$HopscotchForHTML5$HolderComposer[0]).$createElement$("div");
    $div.$appendChild$(self._$content().$visual());
    return $div;
   };
   this.$noticeExposure = function () {
    let self = this;
    self._$refresh();
    return self;
   };
   this.$refresh = function () {
    let self = this;
    if (self._$contentSource().$isKindOfClosure() && self._$hasVisual()) {
     let $oldContent = nil;
     let $newContent = nil;
     $oldContent = self._$actualContent();
     self._$actualContent$(nil);
     $newContent = self._$content();
     self._$visual().$replaceChild$with$($newContent.$visual(), $oldContent.$visual());
    } else {
     self._$actualContent().$refresh();
    };
    return self;
   };
   this.$init$contentSource$ = function (v) {
    this.$contentSource$slot = v;
    return this;
   };
   this.$contentSource = function () {
    return this.$contentSource$slot;
   };
   this.$contentSource$ = function (v) {
    this.$contentSource$slot = v;
    return this;
   };
   this.$init$actualContent$ = function (v) {
    this.$actualContent$slot = v;
    return this;
   };
   this.$actualContent = function () {
    return this.$actualContent$slot;
   };
   this.$actualContent$ = function (v) {
    this.$actualContent$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`HolderComposer";
     this._$superInit$HopscotchForHTML5$HolderComposer = $.$superInit$HopscotchForHTML5$HolderComposer;
     this.$superInit$HopscotchForHTML5$HolderComposer = dnuCatcher("$superInit$HopscotchForHTML5$HolderComposer");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$childrenDo$ = this._$childrenDo$ = $.$childrenDo$;
     this.$content = this._$content = $.$content;
     this.$content$ = this._$content$ = $.$content$;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this.$noticeExposure = this._$noticeExposure = $.$noticeExposure;
     this.$refresh = this._$refresh = $.$refresh;
     this._$init$contentSource$ = $.$init$contentSource$;
     this.$init$contentSource$ = dnuCatcher("$init$contentSource$");
     this._$contentSource = $.$contentSource;
     this.$contentSource = dnuCatcher("$contentSource");
     this._$contentSource$ = $.$contentSource$;
     this.$contentSource$ = dnuCatcher("$contentSource$");
     this._$init$actualContent$ = $.$init$actualContent$;
     this.$init$actualContent$ = dnuCatcher("$init$actualContent$");
     this._$actualContent = $.$actualContent;
     this.$actualContent = dnuCatcher("$actualContent");
     this._$actualContent$ = $.$actualContent$;
     this.$actualContent$ = dnuCatcher("$actualContent$");
     this.$enclosingObjects$HopscotchForHTML5$HolderComposer = enclosingObjects;
     this.$super$HopscotchForHTML5$HolderComposer$slot = runtimeSuperclass;
     this["HopscotchForHTML5`HolderComposer"] = function () {
      superBasicNew.call(this);
      this.$contentSource$slot = nil;
      this.$actualContent$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`HolderComposer"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`HolderComposer";
    this.slots = [];
    this.methods = [new MM("withContent:", "public", true, 0)];
    this.nestedClasses = [];
    this.$withContent$ = function ($definition) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($definition);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`HolderComposer";
      this.$withContent$ = this._$withContent$ = $.$withContent$;
      this.$enclosingObjects$HopscotchForHTML5$HolderComposer = enclosingObjects;
      this.$super$HopscotchForHTML5$HolderComposer$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$HopscotchShell = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`HopscotchShell";
   this.name = "HopscotchForHTML5`HopscotchShell";
   this.header = 1505;
   this.slots = [
    new SM("navigator", "protected", false, false),
    new SM("currentPresenterX", "protected", true, false),
    new SM("contentHolder", "protected", false, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`HopscotchShell", "protected", true, 1506),
    new MM("instance`initializer", "public", true, 1507),
    new MM("childrenDo:", "public", false, 1508),
    new MM("currentPresenter", "public", false, 1509),
    new MM("displayPresenter:", "public", false, 1510),
    new MM("enterPresenter:", "public", false, 1511),
    new MM("enterSubject:", "public", false, 1512),
    new MM("listenForBackButton", "protected", false, 1513),
    new MM("navigationHistory", "protected", false, 1514),
    new MM("refresh", "public", false, 1515),
    new MM("shell", "public", false, 1516),
    new MM("userBack:", "protected", false, 1517),
    new MM("init`navigator:", "protected", true, 0),
    new MM("navigator", "protected", true, 0),
    new MM("init`currentPresenterX:", "protected", true, 0),
    new MM("currentPresenterX", "protected", true, 0),
    new MM("currentPresenterX:", "protected", true, 0),
    new MM("init`contentHolder:", "protected", true, 0),
    new MM("contentHolder", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$HopscotchShell = function () {
    let self = this;
    self.$super$HopscotchForHTML5$HopscotchShell$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$HopscotchForHTML5$HopscotchShell();
    self._$init$navigator$(self._$navigationHistory());
    self._$init$contentHolder$($0.$document(self.$enclosingObjects$HopscotchForHTML5$HopscotchShell[0]).$createElement$("div"));
    self._$listenForBackButton();
    return self;
   };
   this.$childrenDo$ = function ($aBlock) {
    let self = this;
    $aBlock.$value$(self._$currentPresenter());
    return self;
   };
   this.$currentPresenter = function () {
    let self = this;
    return self._$currentPresenterX();
   };
   this.$displayPresenter$ = function ($p) {
    let self = this;
    self._$currentPresenterX$($p);
    $p.$parent$(self);
    if (self._$contentHolder().$hasChildNodes()) {
     self._$contentHolder().$replaceChild$from$($p.$visual(), self._$contentHolder().$at$("firstChild"));
    } else {
     self._$contentHolder().$appendChild$($p.$visual());
    };
    $p.$noticeExposure();
    return self;
   };
   this.$enterPresenter$ = function ($presenter) {
    let self = this;
    if (!$presenter.$isTransient()) {
     if (nil.$$equal(self._$currentPresenterX())) {
      self._$navigator().$recordFirst$($presenter);
     } else {
      $0.$history(self.$enclosingObjects$HopscotchForHTML5$HopscotchShell[0]).$pushState$title$(self._$navigator().$idFor$($presenter), $presenter.$title());
     };
    };
    self._$displayPresenter$($presenter);
    return self;
   };
   this.$enterSubject$ = function ($s) {
    let self = this;
    self._$enterPresenter$($s.$presenter());
    return self;
   };
   this.$listenForBackButton = function () {
    let self = this;
    $0.$window(self.$enclosingObjects$HopscotchForHTML5$HopscotchShell[0]).$at$put$("onpopstate", function ($event) {
     self._$userBack$($event);
     return nil;
    });
    return self;
   };
   this.$navigationHistory = function () {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$HopscotchShell[0]._$NavigationHistory().$new();
   };
   this.$refresh = function () {
    let self = this;
    let $newSubject = nil;
    $newSubject = self._$currentPresenter().$subject().$refreshmentSubject();
    self._$displayPresenter$($newSubject.$presenter());
    return self;
   };
   this.$shell = function () {
    let self = this;
    return self;
   };
   this.$userBack$ = function ($event) {
    let self = this;
    self._$displayPresenter$(self._$navigator().$presenterFor$($event.$at$("state")));
    return self;
   };
   this.$init$navigator$ = function (v) {
    this.$navigator$slot = v;
    return this;
   };
   this.$navigator = function () {
    return this.$navigator$slot;
   };
   this.$init$currentPresenterX$ = function (v) {
    this.$currentPresenterX$slot = v;
    return this;
   };
   this.$currentPresenterX = function () {
    return this.$currentPresenterX$slot;
   };
   this.$currentPresenterX$ = function (v) {
    this.$currentPresenterX$slot = v;
    return this;
   };
   this.$init$contentHolder$ = function (v) {
    this.$contentHolder$slot = v;
    return this;
   };
   this.$contentHolder = function () {
    return this.$contentHolder$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`HopscotchShell";
     this._$superInit$HopscotchForHTML5$HopscotchShell = $.$superInit$HopscotchForHTML5$HopscotchShell;
     this.$superInit$HopscotchForHTML5$HopscotchShell = dnuCatcher("$superInit$HopscotchForHTML5$HopscotchShell");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$childrenDo$ = this._$childrenDo$ = $.$childrenDo$;
     this.$currentPresenter = this._$currentPresenter = $.$currentPresenter;
     this.$displayPresenter$ = this._$displayPresenter$ = $.$displayPresenter$;
     this.$enterPresenter$ = this._$enterPresenter$ = $.$enterPresenter$;
     this.$enterSubject$ = this._$enterSubject$ = $.$enterSubject$;
     this._$listenForBackButton = $.$listenForBackButton;
     this.$listenForBackButton = dnuCatcher("$listenForBackButton");
     this._$navigationHistory = $.$navigationHistory;
     this.$navigationHistory = dnuCatcher("$navigationHistory");
     this.$refresh = this._$refresh = $.$refresh;
     this.$shell = this._$shell = $.$shell;
     this._$userBack$ = $.$userBack$;
     this.$userBack$ = dnuCatcher("$userBack$");
     this._$init$navigator$ = $.$init$navigator$;
     this.$init$navigator$ = dnuCatcher("$init$navigator$");
     this._$navigator = $.$navigator;
     this.$navigator = dnuCatcher("$navigator");
     this._$init$currentPresenterX$ = $.$init$currentPresenterX$;
     this.$init$currentPresenterX$ = dnuCatcher("$init$currentPresenterX$");
     this._$currentPresenterX = $.$currentPresenterX;
     this.$currentPresenterX = dnuCatcher("$currentPresenterX");
     this._$currentPresenterX$ = $.$currentPresenterX$;
     this.$currentPresenterX$ = dnuCatcher("$currentPresenterX$");
     this._$init$contentHolder$ = $.$init$contentHolder$;
     this.$init$contentHolder$ = dnuCatcher("$init$contentHolder$");
     this._$contentHolder = $.$contentHolder;
     this.$contentHolder = dnuCatcher("$contentHolder");
     this.$enclosingObjects$HopscotchForHTML5$HopscotchShell = enclosingObjects;
     this.$super$HopscotchForHTML5$HopscotchShell$slot = runtimeSuperclass;
     this["HopscotchForHTML5`HopscotchShell"] = function () {
      superBasicNew.call(this);
      this.$navigator$slot = nil;
      this.$currentPresenterX$slot = nil;
      this.$contentHolder$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`HopscotchShell"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`HopscotchShell";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`HopscotchShell";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$HopscotchForHTML5$HopscotchShell = enclosingObjects;
      this.$super$HopscotchForHTML5$HopscotchShell$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$HopscotchWindow = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`HopscotchWindow";
   this.name = "HopscotchForHTML5`HopscotchWindow";
   this.header = 1518;
   this.slots = [];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`HopscotchWindow", "protected", true, 1519),
    new MM("instance`initializer", "public", true, 1520),
    new MM("displayPresenter:", "public", false, 1521)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$HopscotchWindow = function ($container, $s) {
    let self = this;
    self.$super$HopscotchForHTML5$HopscotchWindow$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($container, $s) {
    let self = this;
    self._$superInit$HopscotchForHTML5$HopscotchWindow($container, $s);
    $container.$appendChild$(self._$contentHolder());
    self._$enterSubject$($s);
    return self;
   };
   this.$displayPresenter$ = function ($p) {
    let self = this;
    self.$super$HopscotchForHTML5$HopscotchWindow$slot._$displayPresenter$.call(self, $p);
    $0.$document(self.$enclosingObjects$HopscotchForHTML5$HopscotchWindow[0]).$at$put$("title", $p.$title());
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`HopscotchWindow";
     this._$superInit$HopscotchForHTML5$HopscotchWindow = $.$superInit$HopscotchForHTML5$HopscotchWindow;
     this.$superInit$HopscotchForHTML5$HopscotchWindow = dnuCatcher("$superInit$HopscotchForHTML5$HopscotchWindow");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$displayPresenter$ = this._$displayPresenter$ = $.$displayPresenter$;
     this.$enclosingObjects$HopscotchForHTML5$HopscotchWindow = enclosingObjects;
     this.$super$HopscotchForHTML5$HopscotchWindow$slot = runtimeSuperclass;
     this["HopscotchForHTML5`HopscotchWindow"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["HopscotchForHTML5`HopscotchWindow"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`HopscotchWindow";
    this.slots = [];
    this.methods = [
     new MM("into:openSubject:", "public", true, 0),
     new MM("openSubject:", "public", false, 1522)
    ];
    this.nestedClasses = [];
    this.$into$openSubject$ = function ($container, $s) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($container, $s);
     return t;
    };
    this.$openSubject$ = function ($s) {
     let self = this;
     return self._$into$openSubject$($0.$body(self.$enclosingObjects$HopscotchForHTML5$HopscotchWindow[0]), $s);
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`HopscotchWindow";
      this.$into$openSubject$ = this._$into$openSubject$ = $.$into$openSubject$;
      this.$openSubject$ = this._$openSubject$ = $.$openSubject$;
      this.$enclosingObjects$HopscotchForHTML5$HopscotchWindow = enclosingObjects;
      this.$super$HopscotchForHTML5$HopscotchWindow$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$HyperlinkFragment = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`HyperlinkFragment";
   this.name = "HopscotchForHTML5`HyperlinkFragment";
   this.header = 1523;
   this.slots = [
    new SM("label", "protected", false, false),
    new SM("action", "protected", false, false),
    new SM("color", "public", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`HyperlinkFragment", "protected", true, 1524),
    new MM("instance`initializer", "public", true, 1525),
    new MM("createVisual", "protected", false, 1526),
    new MM("smallFont", "public", false, 1527),
    new MM("init`label:", "protected", true, 0),
    new MM("label", "protected", true, 0),
    new MM("init`action:", "protected", true, 0),
    new MM("action", "protected", true, 0),
    new MM("init`color:", "public", true, 0),
    new MM("color", "public", true, 0),
    new MM("color:", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$HyperlinkFragment = function ($l, $a) {
    let self = this;
    self.$super$HopscotchForHTML5$HyperlinkFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($l, $a) {
    let self = this;
    self._$superInit$HopscotchForHTML5$HyperlinkFragment($l, $a);
    self._$init$label$($l);
    self._$init$action$($a);
    self._$init$color$($0.$Color(self.$enclosingObjects$HopscotchForHTML5$HyperlinkFragment[0]).$r$g$b$(0, 0, 1));
    return self;
   };
   this.$createVisual = function () {
    let self = this;
    let $anchor = nil;
    $anchor = $0.$document(self.$enclosingObjects$HopscotchForHTML5$HyperlinkFragment[0]).$createElement$("a");
    $anchor.$at$put$("href", "#");
    $anchor.$appendChild$($0.$document(self.$enclosingObjects$HopscotchForHTML5$HyperlinkFragment[0]).$createTextNode$(self._$label()));
    $anchor.$at$put$("onclick", function ($event) {
     self._$action().$value();
     return false;
    });
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("textDecoration", "none");
     cascadeReceiver.$at$put$("overflow", "hidden");
     return cascadeReceiver.$setProperty$to$("white-space", "nowrap");
    })($anchor.$at$("style"));
    if (!self._$color().$isNil()) {
     $anchor.$at$("style").$setProperty$to$("color", self._$color().$asCSSString());
    };
    return $anchor;
   };
   this.$smallFont = function () {
    let self = this;
    self._$visual().$at$("style").$at$put$("font-size", "smaller");
    return self;
   };
   this.$init$label$ = function (v) {
    this.$label$slot = v;
    return this;
   };
   this.$label = function () {
    return this.$label$slot;
   };
   this.$init$action$ = function (v) {
    this.$action$slot = v;
    return this;
   };
   this.$action = function () {
    return this.$action$slot;
   };
   this.$init$color$ = function (v) {
    this.$color$slot = v;
    return this;
   };
   this.$color = function () {
    return this.$color$slot;
   };
   this.$color$ = function (v) {
    this.$color$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`HyperlinkFragment";
     this._$superInit$HopscotchForHTML5$HyperlinkFragment = $.$superInit$HopscotchForHTML5$HyperlinkFragment;
     this.$superInit$HopscotchForHTML5$HyperlinkFragment = dnuCatcher("$superInit$HopscotchForHTML5$HyperlinkFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this.$smallFont = this._$smallFont = $.$smallFont;
     this._$init$label$ = $.$init$label$;
     this.$init$label$ = dnuCatcher("$init$label$");
     this._$label = $.$label;
     this.$label = dnuCatcher("$label");
     this._$init$action$ = $.$init$action$;
     this.$init$action$ = dnuCatcher("$init$action$");
     this._$action = $.$action;
     this.$action = dnuCatcher("$action");
     this.$init$color$ = this._$init$color$ = $.$init$color$;
     this.$color = this._$color = $.$color;
     this.$color$ = this._$color$ = $.$color$;
     this.$enclosingObjects$HopscotchForHTML5$HyperlinkFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$HyperlinkFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`HyperlinkFragment"] = function () {
      superBasicNew.call(this);
      this.$label$slot = nil;
      this.$action$slot = nil;
      this.$color$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`HyperlinkFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`HyperlinkFragment";
    this.slots = [];
    this.methods = [new MM("label:action:", "public", true, 0)];
    this.nestedClasses = [];
    this.$label$action$ = function ($l, $a) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($l, $a);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`HyperlinkFragment";
      this.$label$action$ = this._$label$action$ = $.$label$action$;
      this.$enclosingObjects$HopscotchForHTML5$HyperlinkFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$HyperlinkFragment$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$HyperlinkImageFragment = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`HyperlinkImageFragment";
   this.name = "HopscotchForHTML5`HyperlinkImageFragment";
   this.header = 1528;
   this.slots = [
    new SM("image", "protected", false, false),
    new SM("action", "protected", false, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`HyperlinkImageFragment", "protected", true, 1529),
    new MM("instance`initializer", "public", true, 1530),
    new MM("createVisual", "protected", false, 1531),
    new MM("init`image:", "protected", true, 0),
    new MM("image", "protected", true, 0),
    new MM("init`action:", "protected", true, 0),
    new MM("action", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$HyperlinkImageFragment = function ($i, $a) {
    let self = this;
    self.$super$HopscotchForHTML5$HyperlinkImageFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($i, $a) {
    let self = this;
    self._$superInit$HopscotchForHTML5$HyperlinkImageFragment($i, $a);
    self._$init$image$($i);
    self._$init$action$($a);
    return self;
   };
   this.$createVisual = function () {
    let self = this;
    let $img = nil;
    $img = self._$image().$cloneNode$(false);
    $img.$at$put$("onclick", function ($event) {
     self._$action().$value();
     return false;
    });
    return $img;
   };
   this.$init$image$ = function (v) {
    this.$image$slot = v;
    return this;
   };
   this.$image = function () {
    return this.$image$slot;
   };
   this.$init$action$ = function (v) {
    this.$action$slot = v;
    return this;
   };
   this.$action = function () {
    return this.$action$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`HyperlinkImageFragment";
     this._$superInit$HopscotchForHTML5$HyperlinkImageFragment = $.$superInit$HopscotchForHTML5$HyperlinkImageFragment;
     this.$superInit$HopscotchForHTML5$HyperlinkImageFragment = dnuCatcher("$superInit$HopscotchForHTML5$HyperlinkImageFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this._$init$image$ = $.$init$image$;
     this.$init$image$ = dnuCatcher("$init$image$");
     this._$image = $.$image;
     this.$image = dnuCatcher("$image");
     this._$init$action$ = $.$init$action$;
     this.$init$action$ = dnuCatcher("$init$action$");
     this._$action = $.$action;
     this.$action = dnuCatcher("$action");
     this.$enclosingObjects$HopscotchForHTML5$HyperlinkImageFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$HyperlinkImageFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`HyperlinkImageFragment"] = function () {
      superBasicNew.call(this);
      this.$image$slot = nil;
      this.$action$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`HyperlinkImageFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`HyperlinkImageFragment";
    this.slots = [];
    this.methods = [new MM("image:action:", "public", true, 0)];
    this.nestedClasses = [];
    this.$image$action$ = function ($i, $a) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($i, $a);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`HyperlinkImageFragment";
      this.$image$action$ = this._$image$action$ = $.$image$action$;
      this.$enclosingObjects$HopscotchForHTML5$HyperlinkImageFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$HyperlinkImageFragment$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$ImageButtonFragment = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`ImageButtonFragment";
   this.name = "HopscotchForHTML5`ImageButtonFragment";
   this.header = 1532;
   this.slots = [
    new SM("action", "public", true, false),
    new SM("stateImages", "protected", false, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`ImageButtonFragment", "protected", true, 1533),
    new MM("instance`initializer", "public", true, 1534),
    new MM("createVisual", "protected", false, 1535),
    new MM("init`action:", "public", true, 0),
    new MM("action", "public", true, 0),
    new MM("action:", "public", true, 0),
    new MM("init`stateImages:", "protected", true, 0),
    new MM("stateImages", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$ImageButtonFragment = function ($imageArray) {
    let self = this;
    self.$super$HopscotchForHTML5$ImageButtonFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($imageArray) {
    let self = this;
    self._$superInit$HopscotchForHTML5$ImageButtonFragment($imageArray);
    self._$init$stateImages$($imageArray.$$comma(self._$Array().$new$(3)));
    return self;
   };
   this.$createVisual = function () {
    let self = this;
    let $div = nil;
    let $img = nil;
    $div = $0.$document(self.$enclosingObjects$HopscotchForHTML5$ImageButtonFragment[0]).$createElement$("div");
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("display", "flex");
     cascadeReceiver.$at$put$("flex-direction", "flex-column");
     return cascadeReceiver.$at$put$("align-items", "center");
    })($div.$at$("style"));
    $img = self._$stateImages().$at$(1).$cloneNode$(false);
    $img.$at$put$("onclick", function ($event) {
     self._$action().$value();
     return false;
    });
    $div.$appendChild$($img);
    return $div;
   };
   this.$init$action$ = function (v) {
    this.$action$slot = v;
    return this;
   };
   this.$action = function () {
    return this.$action$slot;
   };
   this.$action$ = function (v) {
    this.$action$slot = v;
    return this;
   };
   this.$init$stateImages$ = function (v) {
    this.$stateImages$slot = v;
    return this;
   };
   this.$stateImages = function () {
    return this.$stateImages$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`ImageButtonFragment";
     this._$superInit$HopscotchForHTML5$ImageButtonFragment = $.$superInit$HopscotchForHTML5$ImageButtonFragment;
     this.$superInit$HopscotchForHTML5$ImageButtonFragment = dnuCatcher("$superInit$HopscotchForHTML5$ImageButtonFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this.$init$action$ = this._$init$action$ = $.$init$action$;
     this.$action = this._$action = $.$action;
     this.$action$ = this._$action$ = $.$action$;
     this._$init$stateImages$ = $.$init$stateImages$;
     this.$init$stateImages$ = dnuCatcher("$init$stateImages$");
     this._$stateImages = $.$stateImages;
     this.$stateImages = dnuCatcher("$stateImages");
     this.$enclosingObjects$HopscotchForHTML5$ImageButtonFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$ImageButtonFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`ImageButtonFragment"] = function () {
      superBasicNew.call(this);
      this.$action$slot = nil;
      this.$stateImages$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`ImageButtonFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`ImageButtonFragment";
    this.slots = [];
    this.methods = [new MM("images:", "public", true, 0)];
    this.nestedClasses = [];
    this.$images$ = function ($imageArray) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($imageArray);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`ImageButtonFragment";
      this.$images$ = this._$images$ = $.$images$;
      this.$enclosingObjects$HopscotchForHTML5$ImageButtonFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$ImageButtonFragment$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$LeafFragment = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`LeafFragment";
   this.name = "HopscotchForHTML5`LeafFragment";
   this.header = 1536;
   this.slots = [];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`LeafFragment", "protected", true, 1537),
    new MM("instance`initializer", "public", true, 1538),
    new MM("childrenDo:", "public", false, 1539)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$LeafFragment = function () {
    let self = this;
    self.$super$HopscotchForHTML5$LeafFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$HopscotchForHTML5$LeafFragment();
    return self;
   };
   this.$childrenDo$ = function ($aBlock) {
    let self = this;
    return self;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`LeafFragment";
     this._$superInit$HopscotchForHTML5$LeafFragment = $.$superInit$HopscotchForHTML5$LeafFragment;
     this.$superInit$HopscotchForHTML5$LeafFragment = dnuCatcher("$superInit$HopscotchForHTML5$LeafFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$childrenDo$ = this._$childrenDo$ = $.$childrenDo$;
     this.$enclosingObjects$HopscotchForHTML5$LeafFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$LeafFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`LeafFragment"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["HopscotchForHTML5`LeafFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`LeafFragment";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`LeafFragment";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$HopscotchForHTML5$LeafFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$LeafFragment$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$LocalNavigationHistory = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`LocalNavigationHistory";
   this.name = "HopscotchForHTML5`LocalNavigationHistory";
   this.header = 1540;
   this.slots = [
    new SM("currentVisitSlot", "protected", true, false),
    new SM("allVisits", "public", true, false),
    new SM("past", "public", true, false),
    new SM("future", "public", true, false),
    new SM("transientTestBlock", "public", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`LocalNavigationHistory", "protected", true, 1541),
    new MM("instance`initializer", "public", true, 1542),
    new MM("current", "public", false, 1543),
    new MM("do:", "public", false, 1544),
    new MM("equalVisitOr:", "public", false, 1545),
    new MM("erase", "public", false, 1546),
    new MM("eraseEntry:", "public", false, 1547),
    new MM("eraseFuture", "protected", false, 1548),
    new MM("erasePast", "protected", false, 1549),
    new MM("goBack", "public", false, 1550),
    new MM("goForward", "public", false, 1551),
    new MM("goToFutureItem:", "public", false, 1552),
    new MM("goToPastItem:", "public", false, 1553),
    new MM("includesVisit:", "protected", false, 1554),
    new MM("isEmpty", "protected", false, 1555),
    new MM("isFutureEmpty", "public", false, 1556),
    new MM("isPastEmpty", "public", false, 1557),
    new MM("isTransient:", "protected", false, 1558),
    new MM("next", "protected", false, 1559),
    new MM("previous", "protected", false, 1560),
    new MM("replace:with:", "protected", false, 1561),
    new MM("replaceCurrentWith:", "public", false, 1562),
    new MM("visit:", "public", false, 1563),
    new MM("init`currentVisitSlot:", "protected", true, 0),
    new MM("currentVisitSlot", "protected", true, 0),
    new MM("currentVisitSlot:", "protected", true, 0),
    new MM("init`allVisits:", "public", true, 0),
    new MM("allVisits", "public", true, 0),
    new MM("allVisits:", "public", true, 0),
    new MM("init`past:", "public", true, 0),
    new MM("past", "public", true, 0),
    new MM("past:", "public", true, 0),
    new MM("init`future:", "public", true, 0),
    new MM("future", "public", true, 0),
    new MM("future:", "public", true, 0),
    new MM("init`transientTestBlock:", "public", true, 0),
    new MM("transientTestBlock", "public", true, 0),
    new MM("transientTestBlock:", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$LocalNavigationHistory = function () {
    let self = this;
    self.$super$HopscotchForHTML5$LocalNavigationHistory$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$HopscotchForHTML5$LocalNavigationHistory();
    self._$init$transientTestBlock$(function ($element) {
     return false;
    });
    self._$erase();
    return self;
   };
   this.$current = function () {
    let self = this;
    return self._$currentVisitSlot();
   };
   this.$do$ = function ($aBlock) {
    let self = this;
    if (self._$isTransient$(self._$currentVisitSlot())) {
     $aBlock.$value$(self._$currentVisitSlot());
    };
    self._$allVisits().$do$($aBlock);
    return self;
   };
   this.$equalVisitOr$ = function ($anObject) {
    let self = this;
    return self._$allVisits().$detect$ifNone$(function ($some) {
     return $some.$$equal($anObject);
    }, function () {
     return $anObject;
    });
   };
   this.$erase = function () {
    let self = this;
    self._$currentVisitSlot$(nil);
    self._$allVisits$($0.$List(self.$enclosingObjects$HopscotchForHTML5$LocalNavigationHistory[0]).$new());
    self._$erasePast();
    self._$eraseFuture();
    return self;
   };
   this.$eraseEntry$ = function ($anObject) {
    let self = this;
    self._$allVisits().$remove$($anObject);
    self._$past().$remove$ifAbsent$($anObject, function () {
     return nil;
    });
    self._$future().$remove$ifAbsent$($anObject, function () {
     return nil;
    });
    return self;
   };
   this.$eraseFuture = function () {
    let self = this;
    self._$future$($0.$List(self.$enclosingObjects$HopscotchForHTML5$LocalNavigationHistory[0]).$new());
    return self;
   };
   this.$erasePast = function () {
    let self = this;
    self._$past$($0.$List(self.$enclosingObjects$HopscotchForHTML5$LocalNavigationHistory[0]).$new());
    return self;
   };
   this.$goBack = function () {
    let self = this;
    if (!self._$isPastEmpty()) {
     if (!self._$isTransient$(self._$currentVisitSlot())) {
      self._$future().$addFirst$(self._$currentVisitSlot());
     };
     self._$currentVisitSlot$(self._$past().$removeLast());
    };
    return self;
   };
   this.$goForward = function () {
    let self = this;
    if (!self._$isFutureEmpty()) {
     if (!self._$isTransient$(self._$currentVisitSlot())) {
      self._$past().$addLast$(self._$currentVisitSlot());
     };
     self._$currentVisitSlot$(self._$future().$removeFirst());
    };
    return self;
   };
   this.$goToFutureItem$ = function ($anObject) {
    let self = this;
    {
     for (; !(self._$currentVisitSlot().$$equal($anObject) || self._$isFutureEmpty()); ) {
      self._$goForward();
     };
    };
    return self;
   };
   this.$goToPastItem$ = function ($anObject) {
    let self = this;
    {
     for (; !(self._$currentVisitSlot().$$equal($anObject) || self._$isPastEmpty()); ) {
      self._$goBack();
     };
    };
    return self;
   };
   this.$includesVisit$ = function ($anObject) {
    let self = this;
    return self._$allVisits().$includes$($anObject);
   };
   this.$isEmpty = function () {
    let self = this;
    return self._$allVisits().$isEmpty();
   };
   this.$isFutureEmpty = function () {
    let self = this;
    return self._$future().$isEmpty();
   };
   this.$isPastEmpty = function () {
    let self = this;
    return self._$past().$isEmpty();
   };
   this.$isTransient$ = function ($anObject) {
    let self = this;
    return self._$transientTestBlock().$value$($anObject);
   };
   this.$next = function () {
    let self = this;
    return self._$future().$first();
   };
   this.$previous = function () {
    let self = this;
    return self._$past().$last();
   };
   this.$replace$with$ = function ($anObject, $replacement) {
    let self = this;
    self._$allVisits().$remove$ifAbsent$($anObject, function () {
     return nil;
    });
    if (!self._$isTransient$($replacement)) {
     self._$allVisits().$add$($replacement);
    };
    if (self._$currentVisitSlot().$$equal($anObject)) {
     self._$currentVisitSlot$($replacement);
    };
    self._$past().$keysAndValuesDo$(function ($index, $each) {
     return $each.$$equal($anObject).$ifTrue$(function () {
      return self._$past().$at$put$($index, $replacement);
     });
    });
    self._$future().$keysAndValuesDo$(function ($index, $each) {
     return $each.$$equal($anObject).$ifTrue$(function () {
      return self._$future().$at$put$($index, $replacement);
     });
    });
    return self;
   };
   this.$replaceCurrentWith$ = function ($anObject) {
    let self = this;
    self._$replace$with$(self._$currentVisitSlot(), $anObject);
    return self;
   };
   this.$visit$ = function ($anObject) {
    let self = this;
    if (self._$currentVisitSlot().$$equal($anObject)) {
     return self;
    };
    if (nil.$$equal(self._$currentVisitSlot()).$not() && self._$isTransient$(self._$currentVisitSlot()).$not()) {
     self._$past().$addLast$(self._$currentVisitSlot());
    };
    self._$currentVisitSlot$($anObject);
    if (!self._$isTransient$($anObject)) {
     (function (cascadeReceiver) {
      cascadeReceiver.$remove$ifAbsent$($anObject, function () {
       return nil;
      });
      return cascadeReceiver.$add$($anObject);
     })(self._$allVisits());
    };
    if (self._$future().$isEmpty().$not()) {
     if (self._$future().$first().$$equal(self._$currentVisitSlot())) {
      self._$future().$removeFirst();
     } else {
      self._$eraseFuture();
     };
    };
    return self;
   };
   this.$init$currentVisitSlot$ = function (v) {
    this.$currentVisitSlot$slot = v;
    return this;
   };
   this.$currentVisitSlot = function () {
    return this.$currentVisitSlot$slot;
   };
   this.$currentVisitSlot$ = function (v) {
    this.$currentVisitSlot$slot = v;
    return this;
   };
   this.$init$allVisits$ = function (v) {
    this.$allVisits$slot = v;
    return this;
   };
   this.$allVisits = function () {
    return this.$allVisits$slot;
   };
   this.$allVisits$ = function (v) {
    this.$allVisits$slot = v;
    return this;
   };
   this.$init$past$ = function (v) {
    this.$past$slot = v;
    return this;
   };
   this.$past = function () {
    return this.$past$slot;
   };
   this.$past$ = function (v) {
    this.$past$slot = v;
    return this;
   };
   this.$init$future$ = function (v) {
    this.$future$slot = v;
    return this;
   };
   this.$future = function () {
    return this.$future$slot;
   };
   this.$future$ = function (v) {
    this.$future$slot = v;
    return this;
   };
   this.$init$transientTestBlock$ = function (v) {
    this.$transientTestBlock$slot = v;
    return this;
   };
   this.$transientTestBlock = function () {
    return this.$transientTestBlock$slot;
   };
   this.$transientTestBlock$ = function (v) {
    this.$transientTestBlock$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`LocalNavigationHistory";
     this._$superInit$HopscotchForHTML5$LocalNavigationHistory = $.$superInit$HopscotchForHTML5$LocalNavigationHistory;
     this.$superInit$HopscotchForHTML5$LocalNavigationHistory = dnuCatcher("$superInit$HopscotchForHTML5$LocalNavigationHistory");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$current = this._$current = $.$current;
     this.$do$ = this._$do$ = $.$do$;
     this.$equalVisitOr$ = this._$equalVisitOr$ = $.$equalVisitOr$;
     this.$erase = this._$erase = $.$erase;
     this.$eraseEntry$ = this._$eraseEntry$ = $.$eraseEntry$;
     this._$eraseFuture = $.$eraseFuture;
     this.$eraseFuture = dnuCatcher("$eraseFuture");
     this._$erasePast = $.$erasePast;
     this.$erasePast = dnuCatcher("$erasePast");
     this.$goBack = this._$goBack = $.$goBack;
     this.$goForward = this._$goForward = $.$goForward;
     this.$goToFutureItem$ = this._$goToFutureItem$ = $.$goToFutureItem$;
     this.$goToPastItem$ = this._$goToPastItem$ = $.$goToPastItem$;
     this._$includesVisit$ = $.$includesVisit$;
     this.$includesVisit$ = dnuCatcher("$includesVisit$");
     this._$isEmpty = $.$isEmpty;
     this.$isEmpty = dnuCatcher("$isEmpty");
     this.$isFutureEmpty = this._$isFutureEmpty = $.$isFutureEmpty;
     this.$isPastEmpty = this._$isPastEmpty = $.$isPastEmpty;
     this._$isTransient$ = $.$isTransient$;
     this.$isTransient$ = dnuCatcher("$isTransient$");
     this._$next = $.$next;
     this.$next = dnuCatcher("$next");
     this._$previous = $.$previous;
     this.$previous = dnuCatcher("$previous");
     this._$replace$with$ = $.$replace$with$;
     this.$replace$with$ = dnuCatcher("$replace$with$");
     this.$replaceCurrentWith$ = this._$replaceCurrentWith$ = $.$replaceCurrentWith$;
     this.$visit$ = this._$visit$ = $.$visit$;
     this._$init$currentVisitSlot$ = $.$init$currentVisitSlot$;
     this.$init$currentVisitSlot$ = dnuCatcher("$init$currentVisitSlot$");
     this._$currentVisitSlot = $.$currentVisitSlot;
     this.$currentVisitSlot = dnuCatcher("$currentVisitSlot");
     this._$currentVisitSlot$ = $.$currentVisitSlot$;
     this.$currentVisitSlot$ = dnuCatcher("$currentVisitSlot$");
     this.$init$allVisits$ = this._$init$allVisits$ = $.$init$allVisits$;
     this.$allVisits = this._$allVisits = $.$allVisits;
     this.$allVisits$ = this._$allVisits$ = $.$allVisits$;
     this.$init$past$ = this._$init$past$ = $.$init$past$;
     this.$past = this._$past = $.$past;
     this.$past$ = this._$past$ = $.$past$;
     this.$init$future$ = this._$init$future$ = $.$init$future$;
     this.$future = this._$future = $.$future;
     this.$future$ = this._$future$ = $.$future$;
     this.$init$transientTestBlock$ = this._$init$transientTestBlock$ = $.$init$transientTestBlock$;
     this.$transientTestBlock = this._$transientTestBlock = $.$transientTestBlock;
     this.$transientTestBlock$ = this._$transientTestBlock$ = $.$transientTestBlock$;
     this.$enclosingObjects$HopscotchForHTML5$LocalNavigationHistory = enclosingObjects;
     this.$super$HopscotchForHTML5$LocalNavigationHistory$slot = runtimeSuperclass;
     this["HopscotchForHTML5`LocalNavigationHistory"] = function () {
      superBasicNew.call(this);
      this.$currentVisitSlot$slot = nil;
      this.$allVisits$slot = nil;
      this.$past$slot = nil;
      this.$future$slot = nil;
      this.$transientTestBlock$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`LocalNavigationHistory"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`LocalNavigationHistory";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`LocalNavigationHistory";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$HopscotchForHTML5$LocalNavigationHistory = enclosingObjects;
      this.$super$HopscotchForHTML5$LocalNavigationHistory$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$NavigationHistory = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`NavigationHistory";
   this.name = "HopscotchForHTML5`NavigationHistory";
   this.header = 1564;
   this.slots = [
    new SM("nextId", "protected", true, false),
    new SM("ids", "protected", false, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`NavigationHistory", "protected", true, 1565),
    new MM("instance`initializer", "public", true, 1566),
    new MM("idFor:", "public", false, 1567),
    new MM("presenterFor:", "public", false, 1568),
    new MM("recordFirst:", "public", false, 1569),
    new MM("init`nextId:", "protected", true, 0),
    new MM("nextId", "protected", true, 0),
    new MM("nextId:", "protected", true, 0),
    new MM("init`ids:", "protected", true, 0),
    new MM("ids", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$NavigationHistory = function () {
    let self = this;
    self.$super$HopscotchForHTML5$NavigationHistory$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$HopscotchForHTML5$NavigationHistory();
    self._$init$nextId$(1);
    self._$init$ids$($0.$Map(self.$enclosingObjects$HopscotchForHTML5$NavigationHistory[0]).$new());
    return self;
   };
   this.$idFor$ = function ($presenter) {
    let self = this;
    return self._$ids().$at$ifAbsentPut$($presenter, function () {
     return (function ($setter_arg) {
      self._$nextId$($setter_arg);
      return $setter_arg;
     }).$value$(self._$nextId() + 1);
    });
   };
   this.$presenterFor$ = function ($id) {
    let self = this;
    let NLR = new Object();
    try {
     self._$ids().$keysAndValuesDo$(function ($key, $value) {
      return $value.$$equal($id).$ifTrue$(function () {
       {
        let t = $key;
        if (NLR === null) {
         self.cannotReturn(self, t);
        };
        NLR.value = t;
        throw NLR;
       };
      });
     });
     {
      let t = nil;
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$recordFirst$ = function ($presenter) {
    let self = this;
    self._$ids().$at$put$($presenter, nil);
    return self;
   };
   this.$init$nextId$ = function (v) {
    this.$nextId$slot = v;
    return this;
   };
   this.$nextId = function () {
    return this.$nextId$slot;
   };
   this.$nextId$ = function (v) {
    this.$nextId$slot = v;
    return this;
   };
   this.$init$ids$ = function (v) {
    this.$ids$slot = v;
    return this;
   };
   this.$ids = function () {
    return this.$ids$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`NavigationHistory";
     this._$superInit$HopscotchForHTML5$NavigationHistory = $.$superInit$HopscotchForHTML5$NavigationHistory;
     this.$superInit$HopscotchForHTML5$NavigationHistory = dnuCatcher("$superInit$HopscotchForHTML5$NavigationHistory");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$idFor$ = this._$idFor$ = $.$idFor$;
     this.$presenterFor$ = this._$presenterFor$ = $.$presenterFor$;
     this.$recordFirst$ = this._$recordFirst$ = $.$recordFirst$;
     this._$init$nextId$ = $.$init$nextId$;
     this.$init$nextId$ = dnuCatcher("$init$nextId$");
     this._$nextId = $.$nextId;
     this.$nextId = dnuCatcher("$nextId");
     this._$nextId$ = $.$nextId$;
     this.$nextId$ = dnuCatcher("$nextId$");
     this._$init$ids$ = $.$init$ids$;
     this.$init$ids$ = dnuCatcher("$init$ids$");
     this._$ids = $.$ids;
     this.$ids = dnuCatcher("$ids");
     this.$enclosingObjects$HopscotchForHTML5$NavigationHistory = enclosingObjects;
     this.$super$HopscotchForHTML5$NavigationHistory$slot = runtimeSuperclass;
     this["HopscotchForHTML5`NavigationHistory"] = function () {
      superBasicNew.call(this);
      this.$nextId$slot = nil;
      this.$ids$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`NavigationHistory"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`NavigationHistory";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`NavigationHistory";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$HopscotchForHTML5$NavigationHistory = enclosingObjects;
      this.$super$HopscotchForHTML5$NavigationHistory$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$PaddedFrameComposer = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`PaddedFrameComposer";
   this.name = "HopscotchForHTML5`PaddedFrameComposer";
   this.header = 1570;
   this.slots = [
    new SM("content", "protected", false, false),
    new SM("offsets", "protected", false, false),
    new SM("color", "public", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`PaddedFrameComposer", "protected", true, 1571),
    new MM("instance`initializer", "public", true, 1572),
    new MM("childrenDo:", "public", false, 1573),
    new MM("createVisual", "protected", false, 1574),
    new MM("init`content:", "protected", true, 0),
    new MM("content", "protected", true, 0),
    new MM("init`offsets:", "protected", true, 0),
    new MM("offsets", "protected", true, 0),
    new MM("init`color:", "public", true, 0),
    new MM("color", "public", true, 0),
    new MM("color:", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$PaddedFrameComposer = function ($c, $o) {
    let self = this;
    self.$super$HopscotchForHTML5$PaddedFrameComposer$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($c, $o) {
    let self = this;
    self._$superInit$HopscotchForHTML5$PaddedFrameComposer($c, $o);
    self._$init$content$($c);
    self._$init$offsets$($o);
    return self;
   };
   this.$childrenDo$ = function ($aBlock) {
    let self = this;
    if (!nil.$$equal(self._$content())) {
     $aBlock.$value$(self._$content());
    };
    return self;
   };
   this.$createVisual = function () {
    let self = this;
    let $div = nil;
    $div = $0.$document(self.$enclosingObjects$HopscotchForHTML5$PaddedFrameComposer[0]).$createElement$("div");
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("paddingLeft", self._$offsets().$at$(1).$printString().$$comma("px"));
     cascadeReceiver.$at$put$("paddingTop", self._$offsets().$at$(2).$printString().$$comma("px"));
     cascadeReceiver.$at$put$("paddingRight", self._$offsets().$at$(3).$printString().$$comma("px"));
     return cascadeReceiver.$at$put$("paddingBottom", self._$offsets().$at$(4).$printString().$$comma("px"));
    })($div.$at$("style"));
    if (!self._$color().$isNil()) {
     self._$color().$applyToStyle$($div.$at$("style"));
    };
    self._$content().$parent$(self);
    $div.$appendChild$(self._$content().$visual());
    return $div;
   };
   this.$init$content$ = function (v) {
    this.$content$slot = v;
    return this;
   };
   this.$content = function () {
    return this.$content$slot;
   };
   this.$init$offsets$ = function (v) {
    this.$offsets$slot = v;
    return this;
   };
   this.$offsets = function () {
    return this.$offsets$slot;
   };
   this.$init$color$ = function (v) {
    this.$color$slot = v;
    return this;
   };
   this.$color = function () {
    return this.$color$slot;
   };
   this.$color$ = function (v) {
    this.$color$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`PaddedFrameComposer";
     this._$superInit$HopscotchForHTML5$PaddedFrameComposer = $.$superInit$HopscotchForHTML5$PaddedFrameComposer;
     this.$superInit$HopscotchForHTML5$PaddedFrameComposer = dnuCatcher("$superInit$HopscotchForHTML5$PaddedFrameComposer");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$childrenDo$ = this._$childrenDo$ = $.$childrenDo$;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this._$init$content$ = $.$init$content$;
     this.$init$content$ = dnuCatcher("$init$content$");
     this._$content = $.$content;
     this.$content = dnuCatcher("$content");
     this._$init$offsets$ = $.$init$offsets$;
     this.$init$offsets$ = dnuCatcher("$init$offsets$");
     this._$offsets = $.$offsets;
     this.$offsets = dnuCatcher("$offsets");
     this.$init$color$ = this._$init$color$ = $.$init$color$;
     this.$color = this._$color = $.$color;
     this.$color$ = this._$color$ = $.$color$;
     this.$enclosingObjects$HopscotchForHTML5$PaddedFrameComposer = enclosingObjects;
     this.$super$HopscotchForHTML5$PaddedFrameComposer$slot = runtimeSuperclass;
     this["HopscotchForHTML5`PaddedFrameComposer"] = function () {
      superBasicNew.call(this);
      this.$content$slot = nil;
      this.$offsets$slot = nil;
      this.$color$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`PaddedFrameComposer"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`PaddedFrameComposer";
    this.slots = [];
    this.methods = [new MM("content:offsets:", "public", true, 0)];
    this.nestedClasses = [];
    this.$content$offsets$ = function ($c, $o) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($c, $o);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`PaddedFrameComposer";
      this.$content$offsets$ = this._$content$offsets$ = $.$content$offsets$;
      this.$enclosingObjects$HopscotchForHTML5$PaddedFrameComposer = enclosingObjects;
      this.$super$HopscotchForHTML5$PaddedFrameComposer$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$Presenter = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`Presenter";
   this.name = "HopscotchForHTML5`Presenter";
   this.header = 1575;
   this.slots = [
    new SM("subject", "public", true, false),
    new SM("substanceSlot", "protected", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`Presenter", "protected", true, 1576),
    new MM("instance`initializer", "public", true, 1577),
    new MM("alert:", "protected", false, 1578),
    new MM("blank:", "protected", false, 1579),
    new MM("button:action:", "protected", false, 1580),
    new MM("canvas:", "protected", false, 1581),
    new MM("childrenDo:", "public", false, 1582),
    new MM("codeMirror:", "protected", false, 1583),
    new MM("collapsed:expanded:", "protected", false, 1584),
    new MM("collapsed:expanded:initiallyExpanded:", "protected", false, 1585),
    new MM("column:", "protected", false, 1586),
    new MM("createVisual", "protected", false, 1587),
    new MM("deferred:", "protected", false, 1588),
    new MM("definition", "public", false, 1589),
    new MM("dropDownMenu:", "protected", false, 1590),
    new MM("dropDownMenu:alignment:", "protected", false, 1591),
    new MM("dropDownMenu:images:", "protected", false, 1592),
    new MM("dropDownMenu:images:alignment:", "protected", false, 1593),
    new MM("elastic:", "protected", false, 1594),
    new MM("ensureSubstance", "protected", false, 1595),
    new MM("enterSubject:", "protected", false, 1596),
    new MM("enterSubject:fromSnippet:", "protected", false, 1597),
    new MM("expanded:collapsed:", "protected", false, 1598),
    new MM("filler", "protected", false, 1599),
    new MM("holder:", "protected", false, 1600),
    new MM("image:", "protected", false, 1601),
    new MM("imageButton:action:", "protected", false, 1602),
    new MM("initially:deferred:", "protected", false, 1603),
    new MM("isTransient", "public", false, 1604),
    new MM("label:", "protected", false, 1605),
    new MM("link:action:", "protected", false, 1606),
    new MM("linkImage:action:", "protected", false, 1607),
    new MM("list", "protected", false, 1608),
    new MM("list:", "protected", false, 1609),
    new MM("mediumBlank", "protected", false, 1610),
    new MM("menuWithLabelsAndActions:", "protected", false, 1611),
    new MM("nothing", "protected", false, 1612),
    new MM("noticeSubstanceCreation", "protected", false, 1613),
    new MM("openMenu:", "protected", false, 1614),
    new MM("openMenuWithLabelsAndActions:", "protected", false, 1615),
    new MM("padded:with:", "protected", false, 1616),
    new MM("row:", "protected", false, 1617),
    new MM("schedule:", "protected", false, 1618),
    new MM("substance", "protected", false, 1619),
    new MM("text:", "protected", false, 1620),
    new MM("textDisplay:", "protected", false, 1621),
    new MM("textField:onAccept:", "protected", false, 1622),
    new MM("textString:", "protected", false, 1623),
    new MM("textString:properties:", "protected", false, 1624),
    new MM("title", "public", false, 1625),
    new MM("zebra:", "protected", false, 1626),
    new MM("init`subject:", "public", true, 0),
    new MM("subject", "public", true, 0),
    new MM("subject:", "public", true, 0),
    new MM("init`substanceSlot:", "protected", true, 0),
    new MM("substanceSlot", "protected", true, 0),
    new MM("substanceSlot:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$Presenter = function ($aSubject) {
    let self = this;
    self.$super$HopscotchForHTML5$Presenter$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($aSubject) {
    let self = this;
    self._$superInit$HopscotchForHTML5$Presenter($aSubject);
    self._$init$subject$($aSubject);
    return self;
   };
   this.$alert$ = function ($text) {
    let self = this;
    $0.$window(self.$enclosingObjects$HopscotchForHTML5$Presenter[0]).$alert$($text);
    return self;
   };
   this.$blank$ = function ($size) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$BlankFragment().$new().$size$($size);
   };
   this.$button$action$ = function ($label, $block) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$ButtonFragment().$label$action$($label, $block);
   };
   this.$canvas$ = function ($extent) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$CanvasFragment().$withExtent$($extent);
   };
   this.$childrenDo$ = function ($aBlock) {
    let self = this;
    if (!nil.$$equal(self._$substanceSlot())) {
     $aBlock.$value$(self._$substanceSlot());
    };
    return self;
   };
   this.$codeMirror$ = function ($t) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$CodeMirrorFragment().$onText$($t);
   };
   this.$collapsed$expanded$ = function ($collapsed, $expanded) {
    let self = this;
    return self._$collapsed$expanded$initiallyExpanded$($collapsed, $expanded, false);
   };
   this.$collapsed$expanded$initiallyExpanded$ = function ($collapsed, $expanded, $flag) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$ToggleComposer().$collapsedDefinition$expandedDefinition$initiallyExpanded$($collapsed, $expanded, $flag);
   };
   this.$column$ = function ($definitions) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$ColumnComposer().$definitions$($definitions);
   };
   this.$createVisual = function () {
    let self = this;
    self._$ensureSubstance();
    return self._$substanceSlot().$visual();
   };
   this.$deferred$ = function ($contentSource) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$DeferredContentComposer().$initialContent$contentSource$(self._$nothing(), $contentSource);
   };
   this.$definition = function () {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$dropDownMenu$ = function ($menu) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$DropDownMenuFragment().$menu$($menu);
   };
   this.$dropDownMenu$alignment$ = function ($menu, $side) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$DropDownMenuFragment().$menu$alignment$($menu, $side);
   };
   this.$dropDownMenu$images$ = function ($menu, $ims) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$DropDownMenuFragment().$menu$images$($menu, $ims);
   };
   this.$dropDownMenu$images$alignment$ = function ($menu, $ims, $side) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$DropDownMenuFragment().$menu$images$alignment$($menu, $ims, $side);
   };
   this.$elastic$ = function ($aFragment) {
    let self = this;
    $aFragment.$elasticity$(1);
    return $aFragment;
   };
   this.$ensureSubstance = function () {
    let self = this;
    if (nil.$$equal(self._$substanceSlot())) {
     self._$substanceSlot$(self._$definition());
     self._$substanceSlot().$parent$(self);
     self._$noticeSubstanceCreation();
    };
    return self;
   };
   this.$enterSubject$ = function ($s) {
    let self = this;
    return self._$shell().$enterSubject$($s);
   };
   this.$enterSubject$fromSnippet$ = function ($s, $snippet) {
    let self = this;
    return self._$shell().$enterSubject$fromSnippet$($s, $snippet);
   };
   this.$expanded$collapsed$ = function ($expanded, $collapsed) {
    let self = this;
    return self._$collapsed$expanded$initiallyExpanded$($collapsed, $expanded, true);
   };
   this.$filler = function () {
    let self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$expansibility$(1);
     return cascadeReceiver.$compressibility$(1);
    })(self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$BlankFragment().$new());
   };
   this.$holder$ = function ($def) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$HolderComposer().$withContent$($def);
   };
   this.$image$ = function ($image) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$StaticImageFragment().$image$($image);
   };
   this.$imageButton$action$ = function ($images, $block) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$ImageButtonFragment().$images$($images).$action$($block);
   };
   this.$initially$deferred$ = function ($initialContent, $contentSource) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$DeferredContentComposer().$initialContent$contentSource$($initialContent, $contentSource);
   };
   this.$isTransient = function () {
    let self = this;
    return false;
   };
   this.$label$ = function ($label) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$StaticLabelFragment().$text$($label);
   };
   this.$link$action$ = function ($label, $block) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$HyperlinkFragment().$label$action$($label, $block);
   };
   this.$linkImage$action$ = function ($image, $block) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$HyperlinkImageFragment().$image$action$($image, $block);
   };
   this.$list = function () {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$PresenterList().$new();
   };
   this.$list$ = function ($presenterSource) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$PresenterList().$new().$presenterSource$($presenterSource);
   };
   this.$mediumBlank = function () {
    let self = this;
    return self._$blank$(10);
   };
   this.$menuWithLabelsAndActions$ = function ($labelsAndActions) {
    let self = this;
    let $menu = nil;
    return $labelsAndActions;
   };
   this.$nothing = function () {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$BlankFragment().$new();
   };
   this.$noticeSubstanceCreation = function () {
    let self = this;
    return self;
   };
   this.$openMenu$ = function ($aMenu) {
    let self = this;
    let $menuContent = nil;
    $menuContent = self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$computeContentForMenu$(function () {
     return $aMenu;
    });
    $menuContent.$at$("style").$at$put$("display", "block");
    self._$visual().$appendChild$($menuContent);
    $menuContent.$addEventListener$action$("click", function ($event) {
     self._$visual().$removeChild$($menuContent);
     return nil;
    });
    return $menuContent;
   };
   this.$openMenuWithLabelsAndActions$ = function ($labelsAndActions) {
    let self = this;
    self._$openMenu$(self._$menuWithLabelsAndActions$($labelsAndActions));
    return self;
   };
   this.$padded$with$ = function ($def, $offsets) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$PaddedFrameComposer().$content$offsets$($def, $offsets);
   };
   this.$row$ = function ($definitions) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$RowComposer().$definitions$($definitions);
   };
   this.$schedule$ = function ($action) {
    let self = this;
    $0.$window(self.$enclosingObjects$HopscotchForHTML5$Presenter[0]).$setTimeout$with$(function () {
     $action.$value();
     return nil;
    }, 0);
    return self;
   };
   this.$substance = function () {
    let self = this;
    self._$ensureSubstance();
    return self._$substanceSlot();
   };
   this.$text$ = function ($t) {
    let self = this;
    let $subfragments = nil;
    if ($t.$isKindOfTextString()) {
     return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$TextStringFragment().$onText$($t);
    };
    $subfragments = $t.$textUnits().$collect$(function ($u) {
     return self._$text$($u);
    });
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$TextBlockFragment().$onText$subfragments$($t, $subfragments);
   };
   this.$textDisplay$ = function ($string) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$TextDisplayFragment().$text$($string);
   };
   this.$textField$onAccept$ = function ($initialText, $blk) {
    let self = this;
    return (function (cascadeReceiver) {
     cascadeReceiver.$text$($initialText);
     return cascadeReceiver.$acceptResponse$($blk);
    })(self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$fragments().$TextEditorFragment().$new());
   };
   this.$textString$ = function ($string) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$TextStringFragment().$forString$($string);
   };
   this.$textString$properties$ = function ($string, $tps) {
    let self = this;
    return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$TextStringFragment().$forString$properties$($string, $tps);
   };
   this.$title = function () {
    let self = this;
    return self._$subject().$title();
   };
   this.$zebra$ = function ($sequence) {
    let self = this;
    $sequence.$addDecorator$(self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$ZebraDecorator().$lighterColorFirst());
    return $sequence;
   };
   this.$init$subject$ = function (v) {
    this.$subject$slot = v;
    return this;
   };
   this.$subject = function () {
    return this.$subject$slot;
   };
   this.$subject$ = function (v) {
    this.$subject$slot = v;
    return this;
   };
   this.$init$substanceSlot$ = function (v) {
    this.$substanceSlot$slot = v;
    return this;
   };
   this.$substanceSlot = function () {
    return this.$substanceSlot$slot;
   };
   this.$substanceSlot$ = function (v) {
    this.$substanceSlot$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`Presenter";
     this._$superInit$HopscotchForHTML5$Presenter = $.$superInit$HopscotchForHTML5$Presenter;
     this.$superInit$HopscotchForHTML5$Presenter = dnuCatcher("$superInit$HopscotchForHTML5$Presenter");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$alert$ = $.$alert$;
     this.$alert$ = dnuCatcher("$alert$");
     this._$blank$ = $.$blank$;
     this.$blank$ = dnuCatcher("$blank$");
     this._$button$action$ = $.$button$action$;
     this.$button$action$ = dnuCatcher("$button$action$");
     this._$canvas$ = $.$canvas$;
     this.$canvas$ = dnuCatcher("$canvas$");
     this.$childrenDo$ = this._$childrenDo$ = $.$childrenDo$;
     this._$codeMirror$ = $.$codeMirror$;
     this.$codeMirror$ = dnuCatcher("$codeMirror$");
     this._$collapsed$expanded$ = $.$collapsed$expanded$;
     this.$collapsed$expanded$ = dnuCatcher("$collapsed$expanded$");
     this._$collapsed$expanded$initiallyExpanded$ = $.$collapsed$expanded$initiallyExpanded$;
     this.$collapsed$expanded$initiallyExpanded$ = dnuCatcher("$collapsed$expanded$initiallyExpanded$");
     this._$column$ = $.$column$;
     this.$column$ = dnuCatcher("$column$");
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this._$deferred$ = $.$deferred$;
     this.$deferred$ = dnuCatcher("$deferred$");
     this.$definition = this._$definition = $.$definition;
     this._$dropDownMenu$ = $.$dropDownMenu$;
     this.$dropDownMenu$ = dnuCatcher("$dropDownMenu$");
     this._$dropDownMenu$alignment$ = $.$dropDownMenu$alignment$;
     this.$dropDownMenu$alignment$ = dnuCatcher("$dropDownMenu$alignment$");
     this._$dropDownMenu$images$ = $.$dropDownMenu$images$;
     this.$dropDownMenu$images$ = dnuCatcher("$dropDownMenu$images$");
     this._$dropDownMenu$images$alignment$ = $.$dropDownMenu$images$alignment$;
     this.$dropDownMenu$images$alignment$ = dnuCatcher("$dropDownMenu$images$alignment$");
     this._$elastic$ = $.$elastic$;
     this.$elastic$ = dnuCatcher("$elastic$");
     this._$ensureSubstance = $.$ensureSubstance;
     this.$ensureSubstance = dnuCatcher("$ensureSubstance");
     this._$enterSubject$ = $.$enterSubject$;
     this.$enterSubject$ = dnuCatcher("$enterSubject$");
     this._$enterSubject$fromSnippet$ = $.$enterSubject$fromSnippet$;
     this.$enterSubject$fromSnippet$ = dnuCatcher("$enterSubject$fromSnippet$");
     this._$expanded$collapsed$ = $.$expanded$collapsed$;
     this.$expanded$collapsed$ = dnuCatcher("$expanded$collapsed$");
     this._$filler = $.$filler;
     this.$filler = dnuCatcher("$filler");
     this._$holder$ = $.$holder$;
     this.$holder$ = dnuCatcher("$holder$");
     this._$image$ = $.$image$;
     this.$image$ = dnuCatcher("$image$");
     this._$imageButton$action$ = $.$imageButton$action$;
     this.$imageButton$action$ = dnuCatcher("$imageButton$action$");
     this._$initially$deferred$ = $.$initially$deferred$;
     this.$initially$deferred$ = dnuCatcher("$initially$deferred$");
     this.$isTransient = this._$isTransient = $.$isTransient;
     this._$label$ = $.$label$;
     this.$label$ = dnuCatcher("$label$");
     this._$link$action$ = $.$link$action$;
     this.$link$action$ = dnuCatcher("$link$action$");
     this._$linkImage$action$ = $.$linkImage$action$;
     this.$linkImage$action$ = dnuCatcher("$linkImage$action$");
     this._$list = $.$list;
     this.$list = dnuCatcher("$list");
     this._$list$ = $.$list$;
     this.$list$ = dnuCatcher("$list$");
     this._$mediumBlank = $.$mediumBlank;
     this.$mediumBlank = dnuCatcher("$mediumBlank");
     this._$menuWithLabelsAndActions$ = $.$menuWithLabelsAndActions$;
     this.$menuWithLabelsAndActions$ = dnuCatcher("$menuWithLabelsAndActions$");
     this._$nothing = $.$nothing;
     this.$nothing = dnuCatcher("$nothing");
     this._$noticeSubstanceCreation = $.$noticeSubstanceCreation;
     this.$noticeSubstanceCreation = dnuCatcher("$noticeSubstanceCreation");
     this._$openMenu$ = $.$openMenu$;
     this.$openMenu$ = dnuCatcher("$openMenu$");
     this._$openMenuWithLabelsAndActions$ = $.$openMenuWithLabelsAndActions$;
     this.$openMenuWithLabelsAndActions$ = dnuCatcher("$openMenuWithLabelsAndActions$");
     this._$padded$with$ = $.$padded$with$;
     this.$padded$with$ = dnuCatcher("$padded$with$");
     this._$row$ = $.$row$;
     this.$row$ = dnuCatcher("$row$");
     this._$schedule$ = $.$schedule$;
     this.$schedule$ = dnuCatcher("$schedule$");
     this._$substance = $.$substance;
     this.$substance = dnuCatcher("$substance");
     this._$text$ = $.$text$;
     this.$text$ = dnuCatcher("$text$");
     this._$textDisplay$ = $.$textDisplay$;
     this.$textDisplay$ = dnuCatcher("$textDisplay$");
     this._$textField$onAccept$ = $.$textField$onAccept$;
     this.$textField$onAccept$ = dnuCatcher("$textField$onAccept$");
     this._$textString$ = $.$textString$;
     this.$textString$ = dnuCatcher("$textString$");
     this._$textString$properties$ = $.$textString$properties$;
     this.$textString$properties$ = dnuCatcher("$textString$properties$");
     this.$title = this._$title = $.$title;
     this._$zebra$ = $.$zebra$;
     this.$zebra$ = dnuCatcher("$zebra$");
     this.$init$subject$ = this._$init$subject$ = $.$init$subject$;
     this.$subject = this._$subject = $.$subject;
     this.$subject$ = this._$subject$ = $.$subject$;
     this._$init$substanceSlot$ = $.$init$substanceSlot$;
     this.$init$substanceSlot$ = dnuCatcher("$init$substanceSlot$");
     this._$substanceSlot = $.$substanceSlot;
     this.$substanceSlot = dnuCatcher("$substanceSlot");
     this._$substanceSlot$ = $.$substanceSlot$;
     this.$substanceSlot$ = dnuCatcher("$substanceSlot$");
     this.$enclosingObjects$HopscotchForHTML5$Presenter = enclosingObjects;
     this.$super$HopscotchForHTML5$Presenter$slot = runtimeSuperclass;
     this["HopscotchForHTML5`Presenter"] = function () {
      superBasicNew.call(this);
      this.$subject$slot = nil;
      this.$substanceSlot$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`Presenter"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`Presenter";
    this.slots = [];
    this.methods = [new MM("onSubject:", "public", true, 0)];
    this.nestedClasses = [];
    this.$onSubject$ = function ($aSubject) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($aSubject);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`Presenter";
      this.$onSubject$ = this._$onSubject$ = $.$onSubject$;
      this.$enclosingObjects$HopscotchForHTML5$Presenter = enclosingObjects;
      this.$super$HopscotchForHTML5$Presenter$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$PresenterList = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`PresenterList";
   this.name = "HopscotchForHTML5`PresenterList";
   this.header = 1627;
   this.slots = [
    new SM("presenterSourceX", "protected", true, false),
    new SM("presentersX", "protected", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`PresenterList", "protected", true, 1628),
    new MM("instance`initializer", "public", true, 1629),
    new MM("add:", "public", false, 1630),
    new MM("add:afterIndex:", "public", false, 1631),
    new MM("addAll:", "public", false, 1632),
    new MM("addFirst:", "public", false, 1633),
    new MM("childrenDo:", "public", false, 1634),
    new MM("color:", "public", false, 1635),
    new MM("createVisual", "protected", false, 1636),
    new MM("detectPresenter:", "public", false, 1637),
    new MM("detectPresenter:ifNone:", "public", false, 1638),
    new MM("findFirst:", "protected", false, 1639),
    new MM("findLast:", "protected", false, 1640),
    new MM("presenterSource:", "public", false, 1641),
    new MM("presenters", "public", false, 1642),
    new MM("presenters:", "public", false, 1643),
    new MM("refresh", "public", false, 1644),
    new MM("refreshPresenterList", "protected", false, 1645),
    new MM("refreshPresenters", "protected", false, 1646),
    new MM("remove:", "public", false, 1647),
    new MM("removeAt:", "public", false, 1648),
    new MM("replaceChild:with:", "protected", false, 1649),
    new MM("setPresenters:", "public", false, 1650),
    new MM("updateColumn", "protected", false, 1651),
    new MM("updateColumn:removingIndices:addingPresenters:", "protected", false, 1652),
    new MM("init`presenterSourceX:", "protected", true, 0),
    new MM("presenterSourceX", "protected", true, 0),
    new MM("presenterSourceX:", "protected", true, 0),
    new MM("init`presentersX:", "protected", true, 0),
    new MM("presentersX", "protected", true, 0),
    new MM("presentersX:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$PresenterList = function () {
    let self = this;
    self.$super$HopscotchForHTML5$PresenterList$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$HopscotchForHTML5$PresenterList();
    self._$init$presenterSourceX$($0.$List(self.$enclosingObjects$HopscotchForHTML5$PresenterList[0]).$new());
    return self;
   };
   this.$add$ = function ($aPresenter) {
    let self = this;
    let $newPresenters = nil;
    $newPresenters = $0.$List(self.$enclosingObjects$HopscotchForHTML5$PresenterList[0]).$withAll$(self._$presenters());
    if ($newPresenters.$includes$($aPresenter)) {
     $newPresenters.$remove$($aPresenter);
    };
    $newPresenters.$add$($aPresenter);
    self._$setPresenters$($newPresenters);
    return self;
   };
   this.$add$afterIndex$ = function ($aPresenter, $index) {
    let self = this;
    let $newList = nil;
    $newList = self._$presenters().$copy();
    $newList.$add$afterIndex$($aPresenter, $index);
    self._$presenters$($newList);
    return self;
   };
   this.$addAll$ = function ($additionalPresenters) {
    let self = this;
    let $newPresenters = nil;
    $newPresenters = $0.$List(self.$enclosingObjects$HopscotchForHTML5$PresenterList[0]).$withAll$(self._$presenters());
    $newPresenters.$addAll$($additionalPresenters);
    self._$setPresenters$($newPresenters);
    return self;
   };
   this.$addFirst$ = function ($aPresenter) {
    let self = this;
    let $newPresenters = nil;
    $newPresenters = $0.$List(self.$enclosingObjects$HopscotchForHTML5$PresenterList[0]).$withAll$(self._$presenters());
    if ($newPresenters.$includes$($aPresenter)) {
     $newPresenters.$remove$($aPresenter);
    };
    $newPresenters.$addFirst$($aPresenter);
    self._$setPresenters$($newPresenters);
    return self;
   };
   this.$childrenDo$ = function ($aBlock) {
    let self = this;
    if (!nil.$$equal(self._$presentersX())) {
     self._$presentersX().$do$($aBlock);
    };
    return self;
   };
   this.$color$ = function ($aColor) {
    let self = this;
    self._$addDecorator$(self.$enclosingObjects$HopscotchForHTML5$PresenterList[0]._$ColorDecorator().$new().$color$($aColor));
    return self;
   };
   this.$createVisual = function () {
    let self = this;
    let $column = nil;
    $column = self.$enclosingObjects$HopscotchForHTML5$PresenterList[0]._$ColumnComposer().$definitions$(self._$presenters());
    $column.$parent$(self);
    return $column.$visual();
   };
   this.$detectPresenter$ = function ($aBlock) {
    let self = this;
    return self._$presentersX().$detect$($aBlock);
   };
   this.$detectPresenter$ifNone$ = function ($aBlock, $noneBlock) {
    let self = this;
    return self._$presentersX().$detect$ifNone$($aBlock, $noneBlock);
   };
   this.$findFirst$ = function ($aBlock) {
    let self = this;
    return self._$presentersX().$findFirst$($aBlock);
   };
   this.$findLast$ = function ($aBlock) {
    let self = this;
    return self._$presentersX().$findLast$($aBlock);
   };
   this.$presenterSource$ = function ($niladicValuable) {
    let self = this;
    self._$presenterSourceX$($niladicValuable);
    if (!nil.$$equal(self._$presentersX())) {
     self._$refreshPresenterList();
    };
    return self;
   };
   this.$presenters = function () {
    let self = this;
    if (nil.$$equal(self._$presentersX())) {
     self._$setPresenters$(self._$presenterSourceX().$isKindOfClosure().$ifTrue$ifFalse$(function () {
      return self._$presenterSourceX().$value();
     }, function () {
      return self._$presenterSourceX();
     }));
    };
    return self._$presentersX();
   };
   this.$presenters$ = function ($newPresenterList) {
    let self = this;
    self._$presenterSource$($newPresenterList);
    return self;
   };
   this.$refresh = function () {
    let self = this;
    let $newPresenters = nil;
    $newPresenters = $0.$Set(self.$enclosingObjects$HopscotchForHTML5$PresenterList[0]).$withAll$(self._$refreshPresenterList());
    self._$presenters().$do$(function ($each) {
     return $newPresenters.$includes$($each).$ifFalse$(function () {
      return $each.$refresh();
     });
    });
    return self;
   };
   this.$refreshPresenterList = function () {
    let self = this;
    let $newPresenters = nil;
    $newPresenters = self._$presenterSourceX().$isKindOfClosure().$ifTrue$ifFalse$(function () {
     return self._$presenterSourceX().$value();
    }, function () {
     return self._$presenterSourceX();
    });
    return self._$setPresenters$($newPresenters);
   };
   this.$refreshPresenters = function () {
    let self = this;
    self._$presenters().$do$(function ($each) {
     return $each.$refresh();
    });
    return self;
   };
   this.$remove$ = function ($aPresenter) {
    let self = this;
    let $newPresenters = nil;
    $newPresenters = $0.$List(self.$enclosingObjects$HopscotchForHTML5$PresenterList[0]).$withAll$(self._$presenters());
    $newPresenters.$remove$($aPresenter);
    self._$setPresenters$($newPresenters);
    return self;
   };
   this.$removeAt$ = function ($index) {
    let self = this;
    let $copy = nil;
    $copy = self._$presenters().$copy();
    $copy.$removeAt$($index);
    self._$presenters$($copy);
    return self;
   };
   this.$replaceChild$with$ = function ($aFragment, $anotherFragment) {
    let self = this;
    let $index = nil;
    let $newPresenters = nil;
    if (self._$presentersX().$includes$($aFragment)) {
     $index = self._$presenters().$indexOf$($aFragment);
     $newPresenters = self._$presenters().$copy();
     $newPresenters.$at$put$($index, $anotherFragment);
     return self._$presenters$($newPresenters);
    };
    self._$error$("the fragment is not a child");
    return self;
   };
   this.$setPresenters$ = function ($newPresenterList) {
    let self = this;
    let $currentPresenters = nil;
    let $oldPresentersAndIndices = nil;
    let $removedPresenters = nil;
    let $removedIndices = nil;
    let $addedPresenters = nil;
    let $newFinalList = nil;
    $currentPresenters = nil.$$equal(self._$presentersX()).$ifTrue$ifFalse$(function () {
     return $0.$List(self.$enclosingObjects$HopscotchForHTML5$PresenterList[0]).$new();
    }, function () {
     return self._$presentersX();
    });
    $oldPresentersAndIndices = $0.$Map(self.$enclosingObjects$HopscotchForHTML5$PresenterList[0]).$new$($currentPresenters.$size());
    $currentPresenters.$keysAndValuesDo$(function ($index, $each) {
     return $oldPresentersAndIndices.$at$put$($each, $index);
    });
    $addedPresenters = $0.$List(self.$enclosingObjects$HopscotchForHTML5$PresenterList[0]).$new$($newPresenterList.$size());
    $newFinalList = $0.$List(self.$enclosingObjects$HopscotchForHTML5$PresenterList[0]).$new$($newPresenterList.$size());
    $newPresenterList.$do$(function ($each) {
     let $oldIndex = nil;
     $oldIndex = $oldPresentersAndIndices.$at$ifAbsent$($each, function () {
      return nil;
     });
     return nil.$$equal($oldIndex).$ifFalse$ifTrue$(function () {
      $newFinalList.$add$(self._$presenters().$at$($oldIndex));
      return $oldPresentersAndIndices.$removeKey$($each);
     }, function () {
      $newFinalList.$add$($each);
      return $addedPresenters.$add$($each);
     });
    });
    $removedPresenters = $oldPresentersAndIndices.$keys();
    self._$presentersX$($newFinalList);
    self._$presenterSourceX$($newFinalList);
    $addedPresenters.$do$(function ($each) {
     return $each.$parent$(self);
    });
    if (self._$hasVisual()) {
     self._$updateColumn();
    };
    return $addedPresenters;
   };
   this.$updateColumn = function () {
    let self = this;
    let $newVisual = nil;
    $newVisual = self._$createVisual();
    self._$visual().$at$("parentElement").$replaceChild$with$($newVisual, self._$visual());
    self._$visualX$($newVisual);
    return self;
   };
   this.$updateColumn$removingIndices$addingPresenters$ = function ($column, $indices, $newPresenters) {
    let self = this;
    $indices.$asSortedList().$reverseDo$(function ($each) {
     return $column.$removeAt$($each);
    });
    $newPresenters.$do$(function ($each) {
     return $column.$add$($each.$visual());
    });
    $column.$reorder$(self._$presenters().$collect$(function ($each) {
     return $each.$visual();
    }));
    return self;
   };
   this.$init$presenterSourceX$ = function (v) {
    this.$presenterSourceX$slot = v;
    return this;
   };
   this.$presenterSourceX = function () {
    return this.$presenterSourceX$slot;
   };
   this.$presenterSourceX$ = function (v) {
    this.$presenterSourceX$slot = v;
    return this;
   };
   this.$init$presentersX$ = function (v) {
    this.$presentersX$slot = v;
    return this;
   };
   this.$presentersX = function () {
    return this.$presentersX$slot;
   };
   this.$presentersX$ = function (v) {
    this.$presentersX$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`PresenterList";
     this._$superInit$HopscotchForHTML5$PresenterList = $.$superInit$HopscotchForHTML5$PresenterList;
     this.$superInit$HopscotchForHTML5$PresenterList = dnuCatcher("$superInit$HopscotchForHTML5$PresenterList");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$add$ = this._$add$ = $.$add$;
     this.$add$afterIndex$ = this._$add$afterIndex$ = $.$add$afterIndex$;
     this.$addAll$ = this._$addAll$ = $.$addAll$;
     this.$addFirst$ = this._$addFirst$ = $.$addFirst$;
     this.$childrenDo$ = this._$childrenDo$ = $.$childrenDo$;
     this.$color$ = this._$color$ = $.$color$;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this.$detectPresenter$ = this._$detectPresenter$ = $.$detectPresenter$;
     this.$detectPresenter$ifNone$ = this._$detectPresenter$ifNone$ = $.$detectPresenter$ifNone$;
     this._$findFirst$ = $.$findFirst$;
     this.$findFirst$ = dnuCatcher("$findFirst$");
     this._$findLast$ = $.$findLast$;
     this.$findLast$ = dnuCatcher("$findLast$");
     this.$presenterSource$ = this._$presenterSource$ = $.$presenterSource$;
     this.$presenters = this._$presenters = $.$presenters;
     this.$presenters$ = this._$presenters$ = $.$presenters$;
     this.$refresh = this._$refresh = $.$refresh;
     this._$refreshPresenterList = $.$refreshPresenterList;
     this.$refreshPresenterList = dnuCatcher("$refreshPresenterList");
     this._$refreshPresenters = $.$refreshPresenters;
     this.$refreshPresenters = dnuCatcher("$refreshPresenters");
     this.$remove$ = this._$remove$ = $.$remove$;
     this.$removeAt$ = this._$removeAt$ = $.$removeAt$;
     this._$replaceChild$with$ = $.$replaceChild$with$;
     this.$replaceChild$with$ = dnuCatcher("$replaceChild$with$");
     this.$setPresenters$ = this._$setPresenters$ = $.$setPresenters$;
     this._$updateColumn = $.$updateColumn;
     this.$updateColumn = dnuCatcher("$updateColumn");
     this._$updateColumn$removingIndices$addingPresenters$ = $.$updateColumn$removingIndices$addingPresenters$;
     this.$updateColumn$removingIndices$addingPresenters$ = dnuCatcher("$updateColumn$removingIndices$addingPresenters$");
     this._$init$presenterSourceX$ = $.$init$presenterSourceX$;
     this.$init$presenterSourceX$ = dnuCatcher("$init$presenterSourceX$");
     this._$presenterSourceX = $.$presenterSourceX;
     this.$presenterSourceX = dnuCatcher("$presenterSourceX");
     this._$presenterSourceX$ = $.$presenterSourceX$;
     this.$presenterSourceX$ = dnuCatcher("$presenterSourceX$");
     this._$init$presentersX$ = $.$init$presentersX$;
     this.$init$presentersX$ = dnuCatcher("$init$presentersX$");
     this._$presentersX = $.$presentersX;
     this.$presentersX = dnuCatcher("$presentersX");
     this._$presentersX$ = $.$presentersX$;
     this.$presentersX$ = dnuCatcher("$presentersX$");
     this.$enclosingObjects$HopscotchForHTML5$PresenterList = enclosingObjects;
     this.$super$HopscotchForHTML5$PresenterList$slot = runtimeSuperclass;
     this["HopscotchForHTML5`PresenterList"] = function () {
      superBasicNew.call(this);
      this.$presenterSourceX$slot = nil;
      this.$presentersX$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`PresenterList"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`PresenterList";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`PresenterList";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$HopscotchForHTML5$PresenterList = enclosingObjects;
      this.$super$HopscotchForHTML5$PresenterList$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$RowComposer = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`RowComposer";
   this.name = "HopscotchForHTML5`RowComposer";
   this.header = 1653;
   this.slots = [];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`RowComposer", "protected", true, 1654),
    new MM("instance`initializer", "public", true, 1655),
    new MM("flexDirection", "protected", false, 1656)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$RowComposer = function ($fs) {
    let self = this;
    self.$super$HopscotchForHTML5$RowComposer$slot._$instance$initializer.call(self, $fs);
    return self;
   };
   this.$instance$initializer = function ($fs) {
    let self = this;
    self._$superInit$HopscotchForHTML5$RowComposer($fs);
    return self;
   };
   this.$flexDirection = function () {
    let self = this;
    return "row";
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`RowComposer";
     this._$superInit$HopscotchForHTML5$RowComposer = $.$superInit$HopscotchForHTML5$RowComposer;
     this.$superInit$HopscotchForHTML5$RowComposer = dnuCatcher("$superInit$HopscotchForHTML5$RowComposer");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$flexDirection = $.$flexDirection;
     this.$flexDirection = dnuCatcher("$flexDirection");
     this.$enclosingObjects$HopscotchForHTML5$RowComposer = enclosingObjects;
     this.$super$HopscotchForHTML5$RowComposer$slot = runtimeSuperclass;
     this["HopscotchForHTML5`RowComposer"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["HopscotchForHTML5`RowComposer"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`RowComposer";
    this.slots = [];
    this.methods = [new MM("definitions:", "public", true, 0)];
    this.nestedClasses = [];
    this.$definitions$ = function ($fs) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($fs);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`RowComposer";
      this.$definitions$ = this._$definitions$ = $.$definitions$;
      this.$enclosingObjects$HopscotchForHTML5$RowComposer = enclosingObjects;
      this.$super$HopscotchForHTML5$RowComposer$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$SequenceComposer = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`SequenceComposer";
   this.name = "HopscotchForHTML5`SequenceComposer";
   this.header = 1657;
   this.slots = [
    new SM("definitions", "protected", false, false),
    new SM("color", "public", true, false),
    new SM("alignItems", "protected", true, false),
    new SM("childAlignSelf", "protected", true, false),
    new SM("justifyContent", "protected", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`SequenceComposer", "protected", true, 1658),
    new MM("instance`initializer", "public", true, 1659),
    new MM("childrenDo:", "public", false, 1660),
    new MM("createVisual", "protected", false, 1661),
    new MM("crossAxisAlignToCenter", "public", false, 1662),
    new MM("crossAxisAlignToEnd", "public", false, 1663),
    new MM("crossAxisAlignToStart", "public", false, 1664),
    new MM("crossAxisStretch", "public", false, 1665),
    new MM("mainAxisAlignToCenter", "public", false, 1666),
    new MM("mainAxisAlignToEnd", "public", false, 1667),
    new MM("mainAxisAlignToStart", "public", false, 1668),
    new MM("init`definitions:", "protected", true, 0),
    new MM("definitions", "protected", true, 0),
    new MM("init`color:", "public", true, 0),
    new MM("color", "public", true, 0),
    new MM("color:", "public", true, 0),
    new MM("init`alignItems:", "protected", true, 0),
    new MM("alignItems", "protected", true, 0),
    new MM("alignItems:", "protected", true, 0),
    new MM("init`childAlignSelf:", "protected", true, 0),
    new MM("childAlignSelf", "protected", true, 0),
    new MM("childAlignSelf:", "protected", true, 0),
    new MM("init`justifyContent:", "protected", true, 0),
    new MM("justifyContent", "protected", true, 0),
    new MM("justifyContent:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$SequenceComposer = function ($fs) {
    let self = this;
    self.$super$HopscotchForHTML5$SequenceComposer$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($fs) {
    let self = this;
    self._$superInit$HopscotchForHTML5$SequenceComposer($fs);
    self._$init$definitions$($fs);
    self._$init$alignItems$("center");
    self._$init$childAlignSelf$("center");
    self._$init$justifyContent$("flex-start");
    return self;
   };
   this.$childrenDo$ = function ($aBlock) {
    let self = this;
    self._$definitions().$do$($aBlock);
    return self;
   };
   this.$createVisual = function () {
    let self = this;
    let $container = nil;
    $container = $0.$document(self.$enclosingObjects$HopscotchForHTML5$SequenceComposer[0]).$createElement$("div");
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("overflow", "hidden");
     cascadeReceiver.$at$put$("display", "flex");
     cascadeReceiver.$at$put$("flex-direction", self._$flexDirection());
     cascadeReceiver.$at$put$("align-content", self._$alignItems());
     return cascadeReceiver.$at$put$("justify-content", self._$justifyContent());
    })($container.$at$("style"));
    if (!nil.$$equal(self._$color())) {
     self._$color().$applyToStyle$($container.$at$("style"));
    };
    self._$definitions().$do$(function ($fragment) {
     let $cell = nil;
     $fragment.$parent$(self);
     $cell = $fragment.$visual();
     (function (cascadeReceiver) {
      cascadeReceiver.$at$put$("overflow", "hidden");
      cascadeReceiver.$at$put$("align-self", self._$childAlignSelf());
      cascadeReceiver.$at$put$("flex-grow", $fragment.$expansibility());
      return cascadeReceiver.$at$put$("flex-shrink", $fragment.$compressibility());
     })($cell.$at$("style"));
     if (!nil.$$equal($fragment.$size())) {
      $cell.$at$("style").$at$put$("flex-basis", $fragment.$size().$printString().$$comma("px"));
     };
     return $container.$appendChild$($cell);
    });
    return $container;
   };
   this.$crossAxisAlignToCenter = function () {
    let self = this;
    self._$alignItems$("center");
    self._$childAlignSelf$("center");
    return self;
   };
   this.$crossAxisAlignToEnd = function () {
    let self = this;
    self._$alignItems$("flex-end");
    self._$childAlignSelf$(nil);
    return self;
   };
   this.$crossAxisAlignToStart = function () {
    let self = this;
    self._$alignItems$("flex-start");
    self._$childAlignSelf$(nil);
    return self;
   };
   this.$crossAxisStretch = function () {
    let self = this;
    self._$alignItems$("stretch");
    self._$childAlignSelf$(nil);
    return self;
   };
   this.$mainAxisAlignToCenter = function () {
    let self = this;
    self._$justifyContent$("center");
    return self;
   };
   this.$mainAxisAlignToEnd = function () {
    let self = this;
    self._$justifyContent$("flex-end");
    return self;
   };
   this.$mainAxisAlignToStart = function () {
    let self = this;
    self._$justifyContent$("flex-start");
    return self;
   };
   this.$init$definitions$ = function (v) {
    this.$definitions$slot = v;
    return this;
   };
   this.$definitions = function () {
    return this.$definitions$slot;
   };
   this.$init$color$ = function (v) {
    this.$color$slot = v;
    return this;
   };
   this.$color = function () {
    return this.$color$slot;
   };
   this.$color$ = function (v) {
    this.$color$slot = v;
    return this;
   };
   this.$init$alignItems$ = function (v) {
    this.$alignItems$slot = v;
    return this;
   };
   this.$alignItems = function () {
    return this.$alignItems$slot;
   };
   this.$alignItems$ = function (v) {
    this.$alignItems$slot = v;
    return this;
   };
   this.$init$childAlignSelf$ = function (v) {
    this.$childAlignSelf$slot = v;
    return this;
   };
   this.$childAlignSelf = function () {
    return this.$childAlignSelf$slot;
   };
   this.$childAlignSelf$ = function (v) {
    this.$childAlignSelf$slot = v;
    return this;
   };
   this.$init$justifyContent$ = function (v) {
    this.$justifyContent$slot = v;
    return this;
   };
   this.$justifyContent = function () {
    return this.$justifyContent$slot;
   };
   this.$justifyContent$ = function (v) {
    this.$justifyContent$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`SequenceComposer";
     this._$superInit$HopscotchForHTML5$SequenceComposer = $.$superInit$HopscotchForHTML5$SequenceComposer;
     this.$superInit$HopscotchForHTML5$SequenceComposer = dnuCatcher("$superInit$HopscotchForHTML5$SequenceComposer");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$childrenDo$ = this._$childrenDo$ = $.$childrenDo$;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this.$crossAxisAlignToCenter = this._$crossAxisAlignToCenter = $.$crossAxisAlignToCenter;
     this.$crossAxisAlignToEnd = this._$crossAxisAlignToEnd = $.$crossAxisAlignToEnd;
     this.$crossAxisAlignToStart = this._$crossAxisAlignToStart = $.$crossAxisAlignToStart;
     this.$crossAxisStretch = this._$crossAxisStretch = $.$crossAxisStretch;
     this.$mainAxisAlignToCenter = this._$mainAxisAlignToCenter = $.$mainAxisAlignToCenter;
     this.$mainAxisAlignToEnd = this._$mainAxisAlignToEnd = $.$mainAxisAlignToEnd;
     this.$mainAxisAlignToStart = this._$mainAxisAlignToStart = $.$mainAxisAlignToStart;
     this._$init$definitions$ = $.$init$definitions$;
     this.$init$definitions$ = dnuCatcher("$init$definitions$");
     this._$definitions = $.$definitions;
     this.$definitions = dnuCatcher("$definitions");
     this.$init$color$ = this._$init$color$ = $.$init$color$;
     this.$color = this._$color = $.$color;
     this.$color$ = this._$color$ = $.$color$;
     this._$init$alignItems$ = $.$init$alignItems$;
     this.$init$alignItems$ = dnuCatcher("$init$alignItems$");
     this._$alignItems = $.$alignItems;
     this.$alignItems = dnuCatcher("$alignItems");
     this._$alignItems$ = $.$alignItems$;
     this.$alignItems$ = dnuCatcher("$alignItems$");
     this._$init$childAlignSelf$ = $.$init$childAlignSelf$;
     this.$init$childAlignSelf$ = dnuCatcher("$init$childAlignSelf$");
     this._$childAlignSelf = $.$childAlignSelf;
     this.$childAlignSelf = dnuCatcher("$childAlignSelf");
     this._$childAlignSelf$ = $.$childAlignSelf$;
     this.$childAlignSelf$ = dnuCatcher("$childAlignSelf$");
     this._$init$justifyContent$ = $.$init$justifyContent$;
     this.$init$justifyContent$ = dnuCatcher("$init$justifyContent$");
     this._$justifyContent = $.$justifyContent;
     this.$justifyContent = dnuCatcher("$justifyContent");
     this._$justifyContent$ = $.$justifyContent$;
     this.$justifyContent$ = dnuCatcher("$justifyContent$");
     this.$enclosingObjects$HopscotchForHTML5$SequenceComposer = enclosingObjects;
     this.$super$HopscotchForHTML5$SequenceComposer$slot = runtimeSuperclass;
     this["HopscotchForHTML5`SequenceComposer"] = function () {
      superBasicNew.call(this);
      this.$definitions$slot = nil;
      this.$color$slot = nil;
      this.$alignItems$slot = nil;
      this.$childAlignSelf$slot = nil;
      this.$justifyContent$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`SequenceComposer"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`SequenceComposer";
    this.slots = [];
    this.methods = [new MM("definitions:", "public", true, 0)];
    this.nestedClasses = [];
    this.$definitions$ = function ($fs) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($fs);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`SequenceComposer";
      this.$definitions$ = this._$definitions$ = $.$definitions$;
      this.$enclosingObjects$HopscotchForHTML5$SequenceComposer = enclosingObjects;
      this.$super$HopscotchForHTML5$SequenceComposer$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$StaticImageFragment = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`StaticImageFragment";
   this.name = "HopscotchForHTML5`StaticImageFragment";
   this.header = 1669;
   this.slots = [new SM("image", "protected", false, false)];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`StaticImageFragment", "protected", true, 1670),
    new MM("instance`initializer", "public", true, 1671),
    new MM("createVisual", "protected", false, 1672),
    new MM("init`image:", "protected", true, 0),
    new MM("image", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$StaticImageFragment = function ($i) {
    let self = this;
    self.$super$HopscotchForHTML5$StaticImageFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($i) {
    let self = this;
    self._$superInit$HopscotchForHTML5$StaticImageFragment($i);
    self._$init$image$($i);
    return self;
   };
   this.$createVisual = function () {
    let self = this;
    let $div = nil;
    let $img = nil;
    $div = $0.$document(self.$enclosingObjects$HopscotchForHTML5$StaticImageFragment[0]).$createElement$("div");
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("display", "flex");
     cascadeReceiver.$at$put$("flex-direction", "flex-column");
     return cascadeReceiver.$at$put$("align-items", "center");
    })($div.$at$("style"));
    $img = self._$image().$cloneNode$(false);
    $div.$appendChild$($img);
    return $div;
   };
   this.$init$image$ = function (v) {
    this.$image$slot = v;
    return this;
   };
   this.$image = function () {
    return this.$image$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`StaticImageFragment";
     this._$superInit$HopscotchForHTML5$StaticImageFragment = $.$superInit$HopscotchForHTML5$StaticImageFragment;
     this.$superInit$HopscotchForHTML5$StaticImageFragment = dnuCatcher("$superInit$HopscotchForHTML5$StaticImageFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this._$init$image$ = $.$init$image$;
     this.$init$image$ = dnuCatcher("$init$image$");
     this._$image = $.$image;
     this.$image = dnuCatcher("$image");
     this.$enclosingObjects$HopscotchForHTML5$StaticImageFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$StaticImageFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`StaticImageFragment"] = function () {
      superBasicNew.call(this);
      this.$image$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`StaticImageFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`StaticImageFragment";
    this.slots = [];
    this.methods = [new MM("image:", "public", true, 0)];
    this.nestedClasses = [];
    this.$image$ = function ($i) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($i);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`StaticImageFragment";
      this.$image$ = this._$image$ = $.$image$;
      this.$enclosingObjects$HopscotchForHTML5$StaticImageFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$StaticImageFragment$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$StaticLabelFragment = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`StaticLabelFragment";
   this.name = "HopscotchForHTML5`StaticLabelFragment";
   this.header = 1673;
   this.slots = [
    new SM("textX", "protected", true, false),
    new SM("color", "public", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`StaticLabelFragment", "protected", true, 1674),
    new MM("instance`initializer", "public", true, 1675),
    new MM("createVisual", "protected", false, 1676),
    new MM("smallFont", "public", false, 1677),
    new MM("text", "public", false, 1678),
    new MM("text:", "public", false, 1679),
    new MM("init`textX:", "protected", true, 0),
    new MM("textX", "protected", true, 0),
    new MM("textX:", "protected", true, 0),
    new MM("init`color:", "public", true, 0),
    new MM("color", "public", true, 0),
    new MM("color:", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$StaticLabelFragment = function ($t) {
    let self = this;
    self.$super$HopscotchForHTML5$StaticLabelFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($t) {
    let self = this;
    self._$superInit$HopscotchForHTML5$StaticLabelFragment($t);
    self._$init$textX$($t);
    return self;
   };
   this.$createVisual = function () {
    let self = this;
    let $div = nil;
    $div = $0.$document(self.$enclosingObjects$HopscotchForHTML5$StaticLabelFragment[0]).$createElement$("div");
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("overflow", "hidden");
     return cascadeReceiver.$at$put$("white-space", "pre");
    })($div.$at$("style"));
    $div.$at$put$("textContent", self._$text());
    if (!nil.$$equal(self._$color())) {
     $div.$at$("style").$setProperty$to$("color", self._$color().$asCSSString());
    };
    return $div;
   };
   this.$smallFont = function () {
    let self = this;
    self._$visual().$at$("style").$at$put$("font-size", "smaller");
    return self;
   };
   this.$text = function () {
    let self = this;
    return self._$textX();
   };
   this.$text$ = function ($newText) {
    let self = this;
    self._$textX$($newText);
    if (self._$hasVisual()) {
     self._$visual().$at$put$("textContent", self._$textX());
    };
    return self;
   };
   this.$init$textX$ = function (v) {
    this.$textX$slot = v;
    return this;
   };
   this.$textX = function () {
    return this.$textX$slot;
   };
   this.$textX$ = function (v) {
    this.$textX$slot = v;
    return this;
   };
   this.$init$color$ = function (v) {
    this.$color$slot = v;
    return this;
   };
   this.$color = function () {
    return this.$color$slot;
   };
   this.$color$ = function (v) {
    this.$color$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`StaticLabelFragment";
     this._$superInit$HopscotchForHTML5$StaticLabelFragment = $.$superInit$HopscotchForHTML5$StaticLabelFragment;
     this.$superInit$HopscotchForHTML5$StaticLabelFragment = dnuCatcher("$superInit$HopscotchForHTML5$StaticLabelFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this.$smallFont = this._$smallFont = $.$smallFont;
     this.$text = this._$text = $.$text;
     this.$text$ = this._$text$ = $.$text$;
     this._$init$textX$ = $.$init$textX$;
     this.$init$textX$ = dnuCatcher("$init$textX$");
     this._$textX = $.$textX;
     this.$textX = dnuCatcher("$textX");
     this._$textX$ = $.$textX$;
     this.$textX$ = dnuCatcher("$textX$");
     this.$init$color$ = this._$init$color$ = $.$init$color$;
     this.$color = this._$color = $.$color;
     this.$color$ = this._$color$ = $.$color$;
     this.$enclosingObjects$HopscotchForHTML5$StaticLabelFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$StaticLabelFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`StaticLabelFragment"] = function () {
      superBasicNew.call(this);
      this.$textX$slot = nil;
      this.$color$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`StaticLabelFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`StaticLabelFragment";
    this.slots = [];
    this.methods = [new MM("text:", "public", true, 0)];
    this.nestedClasses = [];
    this.$text$ = function ($t) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($t);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`StaticLabelFragment";
      this.$text$ = this._$text$ = $.$text$;
      this.$enclosingObjects$HopscotchForHTML5$StaticLabelFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$StaticLabelFragment$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$Subject = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`Subject";
   this.name = "HopscotchForHTML5`Subject";
   this.header = 1680;
   this.slots = [
    new SM("model", "protected", true, false),
    new SM("presenterX", "protected", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`Subject", "protected", true, 1681),
    new MM("instance`initializer", "public", true, 1682),
    new MM("createPresenter", "public", false, 1683),
    new MM("presenter", "public", false, 1684),
    new MM("refreshmentSubject", "public", false, 1685),
    new MM("title", "public", false, 1686),
    new MM("init`model:", "protected", true, 0),
    new MM("model", "protected", true, 0),
    new MM("model:", "protected", true, 0),
    new MM("init`presenterX:", "protected", true, 0),
    new MM("presenterX", "protected", true, 0),
    new MM("presenterX:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$Subject = function ($aModel) {
    let self = this;
    self.$super$HopscotchForHTML5$Subject$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($aModel) {
    let self = this;
    self._$superInit$HopscotchForHTML5$Subject($aModel);
    self._$init$model$($aModel);
    return self;
   };
   this.$createPresenter = function () {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$presenter = function () {
    let self = this;
    if (self._$presenterX().$isNil()) {
     self._$presenterX$(self._$createPresenter());
    };
    return self._$presenterX();
   };
   this.$refreshmentSubject = function () {
    let self = this;
    return self._$class().$onModel$(self._$model());
   };
   this.$title = function () {
    let self = this;
    return self._$printString();
   };
   this.$init$model$ = function (v) {
    this.$model$slot = v;
    return this;
   };
   this.$model = function () {
    return this.$model$slot;
   };
   this.$model$ = function (v) {
    this.$model$slot = v;
    return this;
   };
   this.$init$presenterX$ = function (v) {
    this.$presenterX$slot = v;
    return this;
   };
   this.$presenterX = function () {
    return this.$presenterX$slot;
   };
   this.$presenterX$ = function (v) {
    this.$presenterX$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`Subject";
     this._$superInit$HopscotchForHTML5$Subject = $.$superInit$HopscotchForHTML5$Subject;
     this.$superInit$HopscotchForHTML5$Subject = dnuCatcher("$superInit$HopscotchForHTML5$Subject");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$createPresenter = this._$createPresenter = $.$createPresenter;
     this.$presenter = this._$presenter = $.$presenter;
     this.$refreshmentSubject = this._$refreshmentSubject = $.$refreshmentSubject;
     this.$title = this._$title = $.$title;
     this._$init$model$ = $.$init$model$;
     this.$init$model$ = dnuCatcher("$init$model$");
     this._$model = $.$model;
     this.$model = dnuCatcher("$model");
     this._$model$ = $.$model$;
     this.$model$ = dnuCatcher("$model$");
     this._$init$presenterX$ = $.$init$presenterX$;
     this.$init$presenterX$ = dnuCatcher("$init$presenterX$");
     this._$presenterX = $.$presenterX;
     this.$presenterX = dnuCatcher("$presenterX");
     this._$presenterX$ = $.$presenterX$;
     this.$presenterX$ = dnuCatcher("$presenterX$");
     this.$enclosingObjects$HopscotchForHTML5$Subject = enclosingObjects;
     this.$super$HopscotchForHTML5$Subject$slot = runtimeSuperclass;
     this["HopscotchForHTML5`Subject"] = function () {
      superBasicNew.call(this);
      this.$model$slot = nil;
      this.$presenterX$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`Subject"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`Subject";
    this.slots = [];
    this.methods = [new MM("onModel:", "public", true, 0)];
    this.nestedClasses = [];
    this.$onModel$ = function ($aModel) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($aModel);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`Subject";
      this.$onModel$ = this._$onModel$ = $.$onModel$;
      this.$enclosingObjects$HopscotchForHTML5$Subject = enclosingObjects;
      this.$super$HopscotchForHTML5$Subject$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$TextBlockFragment = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`TextBlockFragment";
   this.name = "HopscotchForHTML5`TextBlockFragment";
   this.header = 1687;
   this.slots = [new SM("subfragments", "protected", false, false)];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`TextBlockFragment", "protected", true, 1688),
    new MM("instance`initializer", "public", true, 1689),
    new MM("createVisual", "protected", false, 1690),
    new MM("cursorPosition", "public", false, 1691),
    new MM("cursorPosition:", "public", false, 1692),
    new MM("isKindOfTextBlockFragment", "public", false, 1693),
    new MM("init`subfragments:", "protected", true, 0),
    new MM("subfragments", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$TextBlockFragment = function ($t, $sfs) {
    let self = this;
    self.$super$HopscotchForHTML5$TextBlockFragment$slot._$instance$initializer.call(self, $t);
    return self;
   };
   this.$instance$initializer = function ($t, $sfs) {
    let self = this;
    self._$superInit$HopscotchForHTML5$TextBlockFragment($t, $sfs);
    self._$init$subfragments$($sfs);
    return self;
   };
   this.$createVisual = function () {
    let self = this;
    let $span = nil;
    $span = $0.$document(self.$enclosingObjects$HopscotchForHTML5$TextBlockFragment[0]).$createElement$("span");
    self._$text().$textProperties().$applyTo$($span);
    self._$subfragments().$do$(function ($u) {
     return $span.$insertAdjacentElement$into$("beforeEnd", $u.$visual());
    });
    return $span;
   };
   this.$cursorPosition = function () {
    let self = this;
    let NLR = new Object();
    try {
     let $ca = nil;
     let $sel = nil;
     let $focusNode = nil;
     let $sum = nil;
     $sel = $0.$window(self.$enclosingObjects$HopscotchForHTML5$TextBlockFragment[0]).$getSelection();
     $sum = 0;
     if (!$sel.$isNil()) {
      $focusNode = $sel.$at$("focusNode");
      $ca = $sel.$getRangeAt$(0).$at$("commonAncestorContainer");
      self._$subfragments().$do$(function ($sf) {
       if ($sf.$visual().$at$("firstChild").$$equal($focusNode)) {
        {
         let t = $sum + $sf.$cursorPosition();
         if (NLR === null) {
          self.cannotReturn(self, t);
         };
         NLR.value = t;
         throw NLR;
        };
       };
       return $sum = $sum + $sf.$visual().$at$("textContent").$size();
      });
     };
     {
      let t = nil;
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$cursorPosition$ = function ($position) {
    let self = this;
    let NLR = new Object();
    try {
     let $sum = nil;
     $sum = 0;
     self._$subfragments().$do$(function ($subfragment) {
      let $index = nil;
      $index = $position - $sum;
      $sum = $sum + $subfragment.$visual().$at$("textContent").$size();
      return $position.$$less$equal($sum).$ifTrue$(function () {
       $subfragment.$cursorPosition$($index);
       {
        let t = self;
        if (NLR === null) {
         self.cannotReturn(self, t);
        };
        NLR.value = t;
        throw NLR;
       };
      });
     });
     {
      let t = self;
      NLR = null;
      return t;
     };
    } catch (NLR_exception) {
     if (NLR === NLR_exception) {
      return NLR_exception.value;
     } else {
      throw NLR_exception;
     };
    };
   };
   this.$isKindOfTextBlockFragment = function () {
    let self = this;
    return true;
   };
   this.$init$subfragments$ = function (v) {
    this.$subfragments$slot = v;
    return this;
   };
   this.$subfragments = function () {
    return this.$subfragments$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`TextBlockFragment";
     this._$superInit$HopscotchForHTML5$TextBlockFragment = $.$superInit$HopscotchForHTML5$TextBlockFragment;
     this.$superInit$HopscotchForHTML5$TextBlockFragment = dnuCatcher("$superInit$HopscotchForHTML5$TextBlockFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this.$cursorPosition = this._$cursorPosition = $.$cursorPosition;
     this.$cursorPosition$ = this._$cursorPosition$ = $.$cursorPosition$;
     this.$isKindOfTextBlockFragment = this._$isKindOfTextBlockFragment = $.$isKindOfTextBlockFragment;
     this._$init$subfragments$ = $.$init$subfragments$;
     this.$init$subfragments$ = dnuCatcher("$init$subfragments$");
     this._$subfragments = $.$subfragments;
     this.$subfragments = dnuCatcher("$subfragments");
     this.$enclosingObjects$HopscotchForHTML5$TextBlockFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$TextBlockFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`TextBlockFragment"] = function () {
      superBasicNew.call(this);
      this.$subfragments$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`TextBlockFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`TextBlockFragment";
    this.slots = [];
    this.methods = [new MM("onText:subfragments:", "public", true, 0)];
    this.nestedClasses = [];
    this.$onText$subfragments$ = function ($t, $sfs) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($t, $sfs);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`TextBlockFragment";
      this.$onText$subfragments$ = this._$onText$subfragments$ = $.$onText$subfragments$;
      this.$enclosingObjects$HopscotchForHTML5$TextBlockFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$TextBlockFragment$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$TextDisplayFragment = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`TextDisplayFragment";
   this.name = "HopscotchForHTML5`TextDisplayFragment";
   this.header = 1694;
   this.slots = [new SM("textX", "protected", true, false)];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`TextDisplayFragment", "protected", true, 1695),
    new MM("instance`initializer", "public", true, 1696),
    new MM("createVisual", "protected", false, 1697),
    new MM("smallFont", "public", false, 1698),
    new MM("text", "public", false, 1699),
    new MM("text:", "public", false, 1700),
    new MM("init`textX:", "protected", true, 0),
    new MM("textX", "protected", true, 0),
    new MM("textX:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$TextDisplayFragment = function ($t) {
    let self = this;
    self.$super$HopscotchForHTML5$TextDisplayFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($t) {
    let self = this;
    self._$superInit$HopscotchForHTML5$TextDisplayFragment($t);
    self._$init$textX$($t);
    return self;
   };
   this.$createVisual = function () {
    let self = this;
    let $div = nil;
    $div = $0.$document(self.$enclosingObjects$HopscotchForHTML5$TextDisplayFragment[0]).$createElement$("div");
    $div.$at$("style").$setProperty$to$("white-space", "pre-wrap");
    $div.$at$put$("textContent", self._$textX());
    return $div;
   };
   this.$smallFont = function () {
    let self = this;
    self._$visual().$at$("style").$at$put$("font-size", "smaller");
    return self;
   };
   this.$text = function () {
    let self = this;
    return self._$textX();
   };
   this.$text$ = function ($newText) {
    let self = this;
    self._$textX$($newText);
    if (self._$hasVisual()) {
     self._$visual().$at$put$("textContent", self._$textX());
    };
    return self;
   };
   this.$init$textX$ = function (v) {
    this.$textX$slot = v;
    return this;
   };
   this.$textX = function () {
    return this.$textX$slot;
   };
   this.$textX$ = function (v) {
    this.$textX$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`TextDisplayFragment";
     this._$superInit$HopscotchForHTML5$TextDisplayFragment = $.$superInit$HopscotchForHTML5$TextDisplayFragment;
     this.$superInit$HopscotchForHTML5$TextDisplayFragment = dnuCatcher("$superInit$HopscotchForHTML5$TextDisplayFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this.$smallFont = this._$smallFont = $.$smallFont;
     this.$text = this._$text = $.$text;
     this.$text$ = this._$text$ = $.$text$;
     this._$init$textX$ = $.$init$textX$;
     this.$init$textX$ = dnuCatcher("$init$textX$");
     this._$textX = $.$textX;
     this.$textX = dnuCatcher("$textX");
     this._$textX$ = $.$textX$;
     this.$textX$ = dnuCatcher("$textX$");
     this.$enclosingObjects$HopscotchForHTML5$TextDisplayFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$TextDisplayFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`TextDisplayFragment"] = function () {
      superBasicNew.call(this);
      this.$textX$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`TextDisplayFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`TextDisplayFragment";
    this.slots = [];
    this.methods = [new MM("text:", "public", true, 0)];
    this.nestedClasses = [];
    this.$text$ = function ($t) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($t);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`TextDisplayFragment";
      this.$text$ = this._$text$ = $.$text$;
      this.$enclosingObjects$HopscotchForHTML5$TextDisplayFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$TextDisplayFragment$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$TextEditorFragment = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`TextEditorFragment";
   this.name = "HopscotchForHTML5`TextEditorFragment";
   this.header = 1701;
   this.slots = [
    new SM("textX", "protected", true, false),
    new SM("counterfactualBarX", "protected", true, false),
    new SM("editorX", "protected", true, false),
    new SM("textBeingAccepted", "public", true, false),
    new SM("isInEditState", "protected", true, false),
    new SM("changeResponse", "public", true, false),
    new SM("acceptResponse", "public", true, false),
    new SM("cancelResponse", "public", true, false),
    new SM("oldText", "public", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`TextEditorFragment", "protected", true, 1702),
    new MM("instance`initializer", "public", true, 1703),
    new MM("controlBarColor", "protected", false, 1704),
    new MM("createVisual", "protected", false, 1705),
    new MM("cursorPosition", "public", false, 1706),
    new MM("defaultAcceptResponse", "public", false, 1707),
    new MM("defaultCancelResponse", "protected", false, 1708),
    new MM("defaultChangeResponse", "protected", false, 1709),
    new MM("enterEditState", "public", false, 1710),
    new MM("leaveEditState", "public", false, 1711),
    new MM("reconstructText", "protected", false, 1712),
    new MM("reconstructTextForNode:", "protected", false, 1713),
    new MM("respondToAccept:", "protected", false, 1714),
    new MM("respondToCancel", "protected", false, 1715),
    new MM("respondToChange:", "protected", false, 1716),
    new MM("setCursor", "public", false, 1717),
    new MM("setCursor:", "public", false, 1718),
    new MM("setText:", "protected", false, 1719),
    new MM("setVisualText:", "protected", false, 1720),
    new MM("showMessage:", "public", false, 1721),
    new MM("text", "public", false, 1722),
    new MM("text:", "public", false, 1723),
    new MM("updateCursor", "public", false, 1724),
    new MM("init`textX:", "protected", true, 0),
    new MM("textX", "protected", true, 0),
    new MM("textX:", "protected", true, 0),
    new MM("init`counterfactualBarX:", "protected", true, 0),
    new MM("counterfactualBarX", "protected", true, 0),
    new MM("counterfactualBarX:", "protected", true, 0),
    new MM("init`editorX:", "protected", true, 0),
    new MM("editorX", "protected", true, 0),
    new MM("editorX:", "protected", true, 0),
    new MM("init`textBeingAccepted:", "public", true, 0),
    new MM("textBeingAccepted", "public", true, 0),
    new MM("textBeingAccepted:", "public", true, 0),
    new MM("init`isInEditState:", "protected", true, 0),
    new MM("isInEditState", "protected", true, 0),
    new MM("isInEditState:", "protected", true, 0),
    new MM("init`changeResponse:", "public", true, 0),
    new MM("changeResponse", "public", true, 0),
    new MM("changeResponse:", "public", true, 0),
    new MM("init`acceptResponse:", "public", true, 0),
    new MM("acceptResponse", "public", true, 0),
    new MM("acceptResponse:", "public", true, 0),
    new MM("init`cancelResponse:", "public", true, 0),
    new MM("cancelResponse", "public", true, 0),
    new MM("cancelResponse:", "public", true, 0),
    new MM("init`oldText:", "public", true, 0),
    new MM("oldText", "public", true, 0),
    new MM("oldText:", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$TextEditorFragment = function () {
    let self = this;
    self.$super$HopscotchForHTML5$TextEditorFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function () {
    let self = this;
    self._$superInit$HopscotchForHTML5$TextEditorFragment();
    self._$init$textX$("");
    self._$init$isInEditState$(false);
    return self;
   };
   this.$controlBarColor = function () {
    let self = this;
    return $0.$Color(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$r$g$b$((19/20), (99/125), (19/40));
   };
   this.$createVisual = function () {
    let self = this;
    let $frame = nil;
    let $editorWrapper = nil;
    let $accept = nil;
    let $cancel = nil;
    $frame = $0.$document(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$createElement$("div");
    $frame.$at$("style").$at$put$("display", "flex");
    self._$editorX$($0.$document(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$createElement$("div"));
    self._$editorX().$at$put$("contentEditable", "true");
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("borderStyle", "solid");
     cascadeReceiver.$at$put$("borderWidth", "1px");
     cascadeReceiver.$at$put$("borderColor", "gray");
     cascadeReceiver.$setProperty$to$("background-color", "white");
     cascadeReceiver.$at$put$("flex", 1);
     cascadeReceiver.$setProperty$to$("white-space", "pre-wrap");
     return cascadeReceiver.$at$put$("display", "block");
    })(self._$editorX().$at$("style"));
    self._$setText$(self._$textX());
    self._$editorX().$addEventListener$action$("input", function ($event) {
     self._$respondToChange$($event);
     return nil;
    });
    self._$counterfactualBarX$($0.$document(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$createElement$("span"));
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("backgroundColor", self._$controlBarColor().$asCSSString());
     return cascadeReceiver.$at$put$("flex", "none");
    })(self._$counterfactualBarX().$at$("style"));
    $accept = $0.$document(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$createElement$("img");
    $accept.$at$put$("src", $0.$accept16px(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$yourself().$at$("src"));
    $accept.$at$("style").$at$put$("margin", "3px");
    $accept.$at$put$("onclick", function ($event) {
     self._$respondToAccept$($event);
     return nil;
    });
    $cancel = $0.$document(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$createElement$("img");
    $cancel.$at$put$("src", $0.$cancel16px(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$yourself().$at$("src"));
    $cancel.$at$("style").$at$put$("margin", "3px");
    $cancel.$at$put$("onclick", function ($event) {
     self._$respondToCancel();
     return nil;
    });
    self._$counterfactualBarX().$appendChild$($accept);
    self._$counterfactualBarX().$appendChild$($cancel);
    $frame.$appendChild$(self._$editorX());
    return $frame;
   };
   this.$cursorPosition = function () {
    let self = this;
    let $oldString = nil;
    let $newString = nil;
    let $bound = nil;
    let $offset = nil;
    $offset = 0;
    $oldString = self._$textX().$text().$string();
    $newString = self._$textBeingAccepted();
    $bound = $newString.$size().$min$($oldString.$size());
    $offset = (-1).$max$(($newString.$size() - $oldString.$size()) - 1);
    "old: ".$$comma($oldString).$out();
    "new: ".$$comma($newString).$out();
    {
     let $i = nil;
     let $$limit = nil;
     nil;
     $i = 1;
     $$limit = $bound;
     for (; $$limit.$$greater$equal($i); ) {
      if (!$oldString.$at$($i).$$equal($newString.$at$($i))) {
       return $i + $offset;
      };
      $i = (1).$$plus($i);
     };
    };
    return $newString.$size();
   };
   this.$defaultAcceptResponse = function () {
    let self = this;
    self._$setVisualText$(self._$textBeingAccepted());
    self._$leaveEditState();
    return self;
   };
   this.$defaultCancelResponse = function () {
    let self = this;
    self._$setVisualText$(self._$textX());
    self._$leaveEditState();
    return self;
   };
   this.$defaultChangeResponse = function () {
    let self = this;
    self._$enterEditState();
    return self;
   };
   this.$enterEditState = function () {
    let self = this;
    if (!self._$isInEditState()) {
     self._$visual().$appendChild$(self._$counterfactualBarX());
     self._$isInEditState$(true);
    };
    self._$visual().$scrollIntoView$(true);
    return self;
   };
   this.$leaveEditState = function () {
    let self = this;
    if (self._$isInEditState()) {
     self._$visualX().$removeChild$(self._$counterfactualBarX());
     self._$isInEditState$(false);
    };
    return self;
   };
   this.$reconstructText = function () {
    let self = this;
    let $children = nil;
    let $numberOfChildren = nil;
    let $result = nil;
    $children = self._$editorX().$at$("children");
    $numberOfChildren = $children.$at$("length");
    if ($numberOfChildren.$$equal(0)) {
     return (function ($setter_arg) {
      self._$textBeingAccepted$($setter_arg);
      return $setter_arg;
     }).$value$(self._$editorX().$at$("textContent"));
    };
    $result = "";
    {
     let $i = nil;
     let $$limit = nil;
     nil;
     $i = 0;
     $$limit = $numberOfChildren - 1;
     for (; $$limit.$$greater$equal($i); ) {
      $result = $result.$$comma(self._$reconstructTextForNode$($children.$item$($i)));
      $i = (1).$$plus($i);
     };
    };
    return $result;
   };
   this.$reconstructTextForNode$ = function ($n) {
    let self = this;
    let $children = nil;
    let $numberOfChildren = nil;
    let $result = nil;
    $children = $n.$at$("children");
    $numberOfChildren = $children.$at$("length");
    $result = "";
    if ($numberOfChildren.$$equal(0)) {
     $result = $n.$at$("textContent");
    };
    {
     let $i = nil;
     let $$limit = nil;
     nil;
     $i = 0;
     $$limit = $numberOfChildren - 1;
     for (; $$limit.$$greater$equal($i); ) {
      $result = $result.$$comma(self._$reconstructTextForNode$($children.$item$($i)));
      $i = (1).$$plus($i);
     };
    };
    if ([
     "P",
     "BR",
     "DIV"
    ].$includes$($n.$at$("tagName"))) {
     $n.$at$("tagName").$out();
     $result = $result.$$comma(self._$String().$cr());
    };
    return $result;
   };
   this.$respondToAccept$ = function ($event) {
    let self = this;
    self._$textBeingAccepted$(self._$reconstructText());
    if (nil.$$equal(self._$acceptResponse())) {
     self._$defaultAcceptResponse();
    } else {
     self._$acceptResponse().$cull$cull$(self, $event);
    };
    return self;
   };
   this.$respondToCancel = function () {
    let self = this;
    if (nil.$$equal(self._$cancelResponse())) {
     self._$defaultCancelResponse();
    } else {
     self._$cancelResponse().$cull$(self);
    };
    return self;
   };
   this.$respondToChange$ = function ($event) {
    let self = this;
    self._$textBeingAccepted$(self._$reconstructText());
    if (nil.$$equal(self._$changeResponse())) {
     self._$defaultChangeResponse();
    } else {
     self._$changeResponse().$cull$cull$(self, $event);
    };
    return self;
   };
   this.$setCursor = function () {
    let self = this;
    let $sum = nil;
    let $cp = nil;
    $sum = 0;
    $cp = self._$cursorPosition();
    $cp.$out();
    self._$textX().$cursorPosition$(5);
    return self;
   };
   this.$setCursor$ = function ($position) {
    let self = this;
    let $sum = nil;
    $sum = 0;
    $position.$out();
    self._$textX().$cursorPosition$($position);
    return self;
   };
   this.$setText$ = function ($t) {
    let self = this;
    if ($t.$isKindOfString()) {
     self._$editorX().$at$put$("textContent", $t);
    } else {
     let $children = nil;
     $children = $0.$List(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$new();
     if (!self._$oldText().$isKindOfString()) {
      self._$editorX().$at$("childNodes").$forEach$(function ($n) {
       return $children.$add$($n);
      });
      $children.$do$(function ($n) {
       return self._$editorX().$removeChild$($n);
      });
     };
     self._$editorX().$appendChild$($t.$visual());
    };
    return self;
   };
   this.$setVisualText$ = function ($aText) {
    let self = this;
    if (self._$hasVisual()) {
     self._$setText$($aText);
    };
    return self;
   };
   this.$showMessage$ = function ($m) {
    let self = this;
    "BOGUS";
    $m.$out();
    return self;
   };
   this.$text = function () {
    let self = this;
    return self._$textX();
   };
   this.$text$ = function ($t) {
    let self = this;
    self._$oldText$(self._$textX());
    self._$textX$($t);
    self._$setVisualText$(self._$textX());
    return self;
   };
   this.$updateCursor = function () {
    let self = this;
    let $sum = nil;
    let $cp = nil;
    $sum = 0;
    $cp = self._$textX().$cursorPosition();
    self._$textX().$cursorPosition$($cp);
    return self;
   };
   this.$init$textX$ = function (v) {
    this.$textX$slot = v;
    return this;
   };
   this.$textX = function () {
    return this.$textX$slot;
   };
   this.$textX$ = function (v) {
    this.$textX$slot = v;
    return this;
   };
   this.$init$counterfactualBarX$ = function (v) {
    this.$counterfactualBarX$slot = v;
    return this;
   };
   this.$counterfactualBarX = function () {
    return this.$counterfactualBarX$slot;
   };
   this.$counterfactualBarX$ = function (v) {
    this.$counterfactualBarX$slot = v;
    return this;
   };
   this.$init$editorX$ = function (v) {
    this.$editorX$slot = v;
    return this;
   };
   this.$editorX = function () {
    return this.$editorX$slot;
   };
   this.$editorX$ = function (v) {
    this.$editorX$slot = v;
    return this;
   };
   this.$init$textBeingAccepted$ = function (v) {
    this.$textBeingAccepted$slot = v;
    return this;
   };
   this.$textBeingAccepted = function () {
    return this.$textBeingAccepted$slot;
   };
   this.$textBeingAccepted$ = function (v) {
    this.$textBeingAccepted$slot = v;
    return this;
   };
   this.$init$isInEditState$ = function (v) {
    this.$isInEditState$slot = v;
    return this;
   };
   this.$isInEditState = function () {
    return this.$isInEditState$slot;
   };
   this.$isInEditState$ = function (v) {
    this.$isInEditState$slot = v;
    return this;
   };
   this.$init$changeResponse$ = function (v) {
    this.$changeResponse$slot = v;
    return this;
   };
   this.$changeResponse = function () {
    return this.$changeResponse$slot;
   };
   this.$changeResponse$ = function (v) {
    this.$changeResponse$slot = v;
    return this;
   };
   this.$init$acceptResponse$ = function (v) {
    this.$acceptResponse$slot = v;
    return this;
   };
   this.$acceptResponse = function () {
    return this.$acceptResponse$slot;
   };
   this.$acceptResponse$ = function (v) {
    this.$acceptResponse$slot = v;
    return this;
   };
   this.$init$cancelResponse$ = function (v) {
    this.$cancelResponse$slot = v;
    return this;
   };
   this.$cancelResponse = function () {
    return this.$cancelResponse$slot;
   };
   this.$cancelResponse$ = function (v) {
    this.$cancelResponse$slot = v;
    return this;
   };
   this.$init$oldText$ = function (v) {
    this.$oldText$slot = v;
    return this;
   };
   this.$oldText = function () {
    return this.$oldText$slot;
   };
   this.$oldText$ = function (v) {
    this.$oldText$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`TextEditorFragment";
     this._$superInit$HopscotchForHTML5$TextEditorFragment = $.$superInit$HopscotchForHTML5$TextEditorFragment;
     this.$superInit$HopscotchForHTML5$TextEditorFragment = dnuCatcher("$superInit$HopscotchForHTML5$TextEditorFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this._$controlBarColor = $.$controlBarColor;
     this.$controlBarColor = dnuCatcher("$controlBarColor");
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this.$cursorPosition = this._$cursorPosition = $.$cursorPosition;
     this.$defaultAcceptResponse = this._$defaultAcceptResponse = $.$defaultAcceptResponse;
     this._$defaultCancelResponse = $.$defaultCancelResponse;
     this.$defaultCancelResponse = dnuCatcher("$defaultCancelResponse");
     this._$defaultChangeResponse = $.$defaultChangeResponse;
     this.$defaultChangeResponse = dnuCatcher("$defaultChangeResponse");
     this.$enterEditState = this._$enterEditState = $.$enterEditState;
     this.$leaveEditState = this._$leaveEditState = $.$leaveEditState;
     this._$reconstructText = $.$reconstructText;
     this.$reconstructText = dnuCatcher("$reconstructText");
     this._$reconstructTextForNode$ = $.$reconstructTextForNode$;
     this.$reconstructTextForNode$ = dnuCatcher("$reconstructTextForNode$");
     this._$respondToAccept$ = $.$respondToAccept$;
     this.$respondToAccept$ = dnuCatcher("$respondToAccept$");
     this._$respondToCancel = $.$respondToCancel;
     this.$respondToCancel = dnuCatcher("$respondToCancel");
     this._$respondToChange$ = $.$respondToChange$;
     this.$respondToChange$ = dnuCatcher("$respondToChange$");
     this.$setCursor = this._$setCursor = $.$setCursor;
     this.$setCursor$ = this._$setCursor$ = $.$setCursor$;
     this._$setText$ = $.$setText$;
     this.$setText$ = dnuCatcher("$setText$");
     this._$setVisualText$ = $.$setVisualText$;
     this.$setVisualText$ = dnuCatcher("$setVisualText$");
     this.$showMessage$ = this._$showMessage$ = $.$showMessage$;
     this.$text = this._$text = $.$text;
     this.$text$ = this._$text$ = $.$text$;
     this.$updateCursor = this._$updateCursor = $.$updateCursor;
     this._$init$textX$ = $.$init$textX$;
     this.$init$textX$ = dnuCatcher("$init$textX$");
     this._$textX = $.$textX;
     this.$textX = dnuCatcher("$textX");
     this._$textX$ = $.$textX$;
     this.$textX$ = dnuCatcher("$textX$");
     this._$init$counterfactualBarX$ = $.$init$counterfactualBarX$;
     this.$init$counterfactualBarX$ = dnuCatcher("$init$counterfactualBarX$");
     this._$counterfactualBarX = $.$counterfactualBarX;
     this.$counterfactualBarX = dnuCatcher("$counterfactualBarX");
     this._$counterfactualBarX$ = $.$counterfactualBarX$;
     this.$counterfactualBarX$ = dnuCatcher("$counterfactualBarX$");
     this._$init$editorX$ = $.$init$editorX$;
     this.$init$editorX$ = dnuCatcher("$init$editorX$");
     this._$editorX = $.$editorX;
     this.$editorX = dnuCatcher("$editorX");
     this._$editorX$ = $.$editorX$;
     this.$editorX$ = dnuCatcher("$editorX$");
     this.$init$textBeingAccepted$ = this._$init$textBeingAccepted$ = $.$init$textBeingAccepted$;
     this.$textBeingAccepted = this._$textBeingAccepted = $.$textBeingAccepted;
     this.$textBeingAccepted$ = this._$textBeingAccepted$ = $.$textBeingAccepted$;
     this._$init$isInEditState$ = $.$init$isInEditState$;
     this.$init$isInEditState$ = dnuCatcher("$init$isInEditState$");
     this._$isInEditState = $.$isInEditState;
     this.$isInEditState = dnuCatcher("$isInEditState");
     this._$isInEditState$ = $.$isInEditState$;
     this.$isInEditState$ = dnuCatcher("$isInEditState$");
     this.$init$changeResponse$ = this._$init$changeResponse$ = $.$init$changeResponse$;
     this.$changeResponse = this._$changeResponse = $.$changeResponse;
     this.$changeResponse$ = this._$changeResponse$ = $.$changeResponse$;
     this.$init$acceptResponse$ = this._$init$acceptResponse$ = $.$init$acceptResponse$;
     this.$acceptResponse = this._$acceptResponse = $.$acceptResponse;
     this.$acceptResponse$ = this._$acceptResponse$ = $.$acceptResponse$;
     this.$init$cancelResponse$ = this._$init$cancelResponse$ = $.$init$cancelResponse$;
     this.$cancelResponse = this._$cancelResponse = $.$cancelResponse;
     this.$cancelResponse$ = this._$cancelResponse$ = $.$cancelResponse$;
     this.$init$oldText$ = this._$init$oldText$ = $.$init$oldText$;
     this.$oldText = this._$oldText = $.$oldText;
     this.$oldText$ = this._$oldText$ = $.$oldText$;
     this.$enclosingObjects$HopscotchForHTML5$TextEditorFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$TextEditorFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`TextEditorFragment"] = function () {
      superBasicNew.call(this);
      this.$textX$slot = nil;
      this.$counterfactualBarX$slot = nil;
      this.$editorX$slot = nil;
      this.$textBeingAccepted$slot = nil;
      this.$isInEditState$slot = nil;
      this.$changeResponse$slot = nil;
      this.$acceptResponse$slot = nil;
      this.$cancelResponse$slot = nil;
      this.$oldText$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`TextEditorFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`TextEditorFragment";
    this.slots = [];
    this.methods = [new MM("new", "public", true, 0)];
    this.nestedClasses = [];
    this.$new = function () {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer();
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`TextEditorFragment";
      this.$new = this._$new = $.$new;
      this.$enclosingObjects$HopscotchForHTML5$TextEditorFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$TextEditorFragment$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$TextFragment = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`TextFragment";
   this.name = "HopscotchForHTML5`TextFragment";
   this.header = 1725;
   this.slots = [new SM("text", "public", false, false)];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`TextFragment", "protected", true, 1726),
    new MM("instance`initializer", "public", true, 1727),
    new MM("cursorPosition:", "public", false, 1728),
    new MM("isKindOfTextFragment", "public", false, 1729),
    new MM("init`text:", "public", true, 0),
    new MM("text", "public", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$TextFragment = function ($t) {
    let self = this;
    self.$super$HopscotchForHTML5$TextFragment$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($t) {
    let self = this;
    self._$superInit$HopscotchForHTML5$TextFragment($t);
    self._$init$text$($t);
    return self;
   };
   this.$cursorPosition$ = function ($position) {
    let self = this;
    self._$subclassResponsibility();
    return self;
   };
   this.$isKindOfTextFragment = function () {
    let self = this;
    return true;
   };
   this.$init$text$ = function (v) {
    this.$text$slot = v;
    return this;
   };
   this.$text = function () {
    return this.$text$slot;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`TextFragment";
     this._$superInit$HopscotchForHTML5$TextFragment = $.$superInit$HopscotchForHTML5$TextFragment;
     this.$superInit$HopscotchForHTML5$TextFragment = dnuCatcher("$superInit$HopscotchForHTML5$TextFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$cursorPosition$ = this._$cursorPosition$ = $.$cursorPosition$;
     this.$isKindOfTextFragment = this._$isKindOfTextFragment = $.$isKindOfTextFragment;
     this.$init$text$ = this._$init$text$ = $.$init$text$;
     this.$text = this._$text = $.$text;
     this.$enclosingObjects$HopscotchForHTML5$TextFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$TextFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`TextFragment"] = function () {
      superBasicNew.call(this);
      this.$text$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`TextFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`TextFragment";
    this.slots = [];
    this.methods = [new MM("onText:", "public", true, 0)];
    this.nestedClasses = [];
    this.$onText$ = function ($t) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($t);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`TextFragment";
      this.$onText$ = this._$onText$ = $.$onText$;
      this.$enclosingObjects$HopscotchForHTML5$TextFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$TextFragment$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$TextStringFragment = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`TextStringFragment";
   this.name = "HopscotchForHTML5`TextStringFragment";
   this.header = 1730;
   this.slots = [];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`TextStringFragment", "protected", true, 1731),
    new MM("instance`initializer", "public", true, 1732),
    new MM("createVisual", "public", false, 1733),
    new MM("cursorPosition", "public", false, 1734),
    new MM("cursorPosition:", "public", false, 1735),
    new MM("isKindOfTextStringFragment", "public", false, 1736)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$TextStringFragment = function ($t) {
    let self = this;
    self.$super$HopscotchForHTML5$TextStringFragment$slot._$instance$initializer.call(self, $t);
    return self;
   };
   this.$instance$initializer = function ($t) {
    let self = this;
    self._$superInit$HopscotchForHTML5$TextStringFragment($t);
    return self;
   };
   this.$createVisual = function () {
    let self = this;
    let $span = nil;
    $span = $0.$document(self.$enclosingObjects$HopscotchForHTML5$TextStringFragment[0]).$createElement$("span");
    self._$text().$textProperties().$applyTo$($span);
    $span.$at$put$("textContent", self._$text().$string());
    return $span;
   };
   this.$cursorPosition = function () {
    let self = this;
    let $sel = nil;
    $sel = $0.$window(self.$enclosingObjects$HopscotchForHTML5$TextStringFragment[0]).$getSelection();
    if (!$sel.$isNil()) {
     return $sel.$getRangeAt$(0).$at$("endOffset");
    };
    "textStringFragment cursorPosition is nil!".$out();
    return nil;
   };
   this.$cursorPosition$ = function ($position) {
    let self = this;
    let $textNode = nil;
    let $range = nil;
    $textNode = self._$visual().$at$("firstChild");
    $range = $0.$document(self.$enclosingObjects$HopscotchForHTML5$TextStringFragment[0]).$createRange();
    (function (cascadeReceiver) {
     cascadeReceiver.$setStart$to$($textNode, $position);
     return cascadeReceiver.$setEnd$to$($textNode, $position);
    })($range);
    (function (cascadeReceiver) {
     cascadeReceiver.$removeAllRanges();
     return cascadeReceiver.$addRange$($range);
    })($0.$window(self.$enclosingObjects$HopscotchForHTML5$TextStringFragment[0]).$getSelection());
    return self;
   };
   this.$isKindOfTextStringFragment = function () {
    let self = this;
    return true;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`TextStringFragment";
     this._$superInit$HopscotchForHTML5$TextStringFragment = $.$superInit$HopscotchForHTML5$TextStringFragment;
     this.$superInit$HopscotchForHTML5$TextStringFragment = dnuCatcher("$superInit$HopscotchForHTML5$TextStringFragment");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$createVisual = this._$createVisual = $.$createVisual;
     this.$cursorPosition = this._$cursorPosition = $.$cursorPosition;
     this.$cursorPosition$ = this._$cursorPosition$ = $.$cursorPosition$;
     this.$isKindOfTextStringFragment = this._$isKindOfTextStringFragment = $.$isKindOfTextStringFragment;
     this.$enclosingObjects$HopscotchForHTML5$TextStringFragment = enclosingObjects;
     this.$super$HopscotchForHTML5$TextStringFragment$slot = runtimeSuperclass;
     this["HopscotchForHTML5`TextStringFragment"] = function () {
      superBasicNew.call(this);
     };
     this.basicNew = this["HopscotchForHTML5`TextStringFragment"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`TextStringFragment";
    this.slots = [];
    this.methods = [
     new MM("onText:", "public", true, 0),
     new MM("forString:", "public", false, 1737),
     new MM("forString:properties:", "public", false, 1738)
    ];
    this.nestedClasses = [];
    this.$onText$ = function ($t) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($t);
     return t;
    };
    this.$forString$ = function ($s) {
     let self = this;
     return self._$onText$($0.$TextString(self.$enclosingObjects$HopscotchForHTML5$TextStringFragment[0]).$forString$properties$($s, $0.$TextProperties(self.$enclosingObjects$HopscotchForHTML5$TextStringFragment[0]).$new()));
    };
    this.$forString$properties$ = function ($s, $tps) {
     let self = this;
     return self._$onText$($0.$TextString(self.$enclosingObjects$HopscotchForHTML5$TextStringFragment[0]).$forString$properties$($s, $tps));
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`TextStringFragment";
      this.$onText$ = this._$onText$ = $.$onText$;
      this.$forString$ = this._$forString$ = $.$forString$;
      this.$forString$properties$ = this._$forString$properties$ = $.$forString$properties$;
      this.$enclosingObjects$HopscotchForHTML5$TextStringFragment = enclosingObjects;
      this.$super$HopscotchForHTML5$TextStringFragment$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$ToggleComposer = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`ToggleComposer";
   this.name = "HopscotchForHTML5`ToggleComposer";
   this.header = 1739;
   this.slots = [
    new SM("expandedDefinition", "protected", false, false),
    new SM("collapsedDefinition", "protected", false, false),
    new SM("isExpanded", "protected", true, false),
    new SM("expandedPresenter", "protected", true, false),
    new SM("collapsedPresenter", "protected", true, false),
    new SM("contentHolder", "protected", true, false),
    new SM("toggleWidget", "protected", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`ToggleComposer", "protected", true, 1740),
    new MM("instance`initializer", "public", true, 1741),
    new MM("childrenDo:", "public", false, 1742),
    new MM("collapse", "public", false, 1743),
    new MM("createVisual", "protected", false, 1744),
    new MM("expand", "public", false, 1745),
    new MM("installCollapsedPresenter", "protected", false, 1746),
    new MM("installContentVisual:", "protected", false, 1747),
    new MM("installExpandedPresenter", "protected", false, 1748),
    new MM("toggle", "public", false, 1749),
    new MM("init`expandedDefinition:", "protected", true, 0),
    new MM("expandedDefinition", "protected", true, 0),
    new MM("init`collapsedDefinition:", "protected", true, 0),
    new MM("collapsedDefinition", "protected", true, 0),
    new MM("init`isExpanded:", "protected", true, 0),
    new MM("isExpanded", "protected", true, 0),
    new MM("isExpanded:", "protected", true, 0),
    new MM("init`expandedPresenter:", "protected", true, 0),
    new MM("expandedPresenter", "protected", true, 0),
    new MM("expandedPresenter:", "protected", true, 0),
    new MM("init`collapsedPresenter:", "protected", true, 0),
    new MM("collapsedPresenter", "protected", true, 0),
    new MM("collapsedPresenter:", "protected", true, 0),
    new MM("init`contentHolder:", "protected", true, 0),
    new MM("contentHolder", "protected", true, 0),
    new MM("contentHolder:", "protected", true, 0),
    new MM("init`toggleWidget:", "protected", true, 0),
    new MM("toggleWidget", "protected", true, 0),
    new MM("toggleWidget:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$ToggleComposer = function ($collapsed, $expanded, $flag) {
    let self = this;
    self.$super$HopscotchForHTML5$ToggleComposer$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($collapsed, $expanded, $flag) {
    let self = this;
    self._$superInit$HopscotchForHTML5$ToggleComposer($collapsed, $expanded, $flag);
    self._$init$expandedDefinition$($expanded);
    self._$init$collapsedDefinition$($collapsed);
    self._$init$isExpanded$($flag);
    return self;
   };
   this.$childrenDo$ = function ($aBlock) {
    let self = this;
    if (!nil.$$equal(self._$collapsedPresenter())) {
     $aBlock.$value$(self._$collapsedPresenter());
    };
    if (!nil.$$equal(self._$expandedPresenter())) {
     $aBlock.$value$(self._$expandedPresenter());
    };
    return self;
   };
   this.$collapse = function () {
    let self = this;
    self._$isExpanded$(false);
    self._$installCollapsedPresenter();
    return self;
   };
   this.$createVisual = function () {
    let self = this;
    let $toggleDiv = nil;
    let $div = nil;
    self._$contentHolder$($0.$document(self.$enclosingObjects$HopscotchForHTML5$ToggleComposer[0]).$createElement$("div"));
    $toggleDiv = $0.$document(self.$enclosingObjects$HopscotchForHTML5$ToggleComposer[0]).$createElement$("div");
    self._$toggleWidget$($0.$document(self.$enclosingObjects$HopscotchForHTML5$ToggleComposer[0]).$createElement$("img"));
    self._$toggleWidget().$at$put$("onclick", function ($event) {
     self._$toggle();
     return nil;
    });
    $toggleDiv.$appendChild$(self._$toggleWidget());
    (function (cascadeReceiver) {
     cascadeReceiver.$setProperty$to$("flex-grow", 1);
     return cascadeReceiver.$setProperty$to$("flex-shrink", 1);
    })(self._$contentHolder().$at$("style"));
    (function (cascadeReceiver) {
     cascadeReceiver.$setProperty$to$("flex-grow", 0);
     cascadeReceiver.$setProperty$to$("flex-shrink", 0);
     cascadeReceiver.$at$put$("paddingTop", "2px");
     return cascadeReceiver.$at$put$("paddingRight", "3px");
    })($toggleDiv.$at$("style"));
    self._$toggleWidget().$at$put$("align", "top");
    if (self._$isExpanded()) {
     self._$installExpandedPresenter();
    } else {
     self._$installCollapsedPresenter();
    };
    $div = $0.$document(self.$enclosingObjects$HopscotchForHTML5$ToggleComposer[0]).$createElement$("div");
    (function (cascadeReceiver) {
     cascadeReceiver.$at$put$("display", "flex");
     return cascadeReceiver.$setProperty$to$("flex-direction", "row");
    })($div.$at$("style"));
    $div.$appendChild$($toggleDiv);
    $div.$appendChild$(self._$contentHolder());
    return $div;
   };
   this.$expand = function () {
    let self = this;
    self._$isExpanded$(true);
    self._$installExpandedPresenter();
    return self;
   };
   this.$installCollapsedPresenter = function () {
    let self = this;
    if (nil.$$equal(self._$collapsedPresenter())) {
     self._$collapsedPresenter$(self._$collapsedDefinition().$value());
     self._$collapsedPresenter().$parent$(self);
    };
    self._$installContentVisual$(self._$collapsedPresenter().$visual());
    self._$toggleWidget().$at$put$("src", $0.$disclosureClosedImage(self.$enclosingObjects$HopscotchForHTML5$ToggleComposer[0]).$at$("src"));
    return self;
   };
   this.$installContentVisual$ = function ($newVisual) {
    let self = this;
    if (self._$contentHolder().$hasChildNodes()) {
     let $oldVisual = nil;
     $oldVisual = self._$contentHolder().$at$("firstChild");
     self._$contentHolder().$replaceChild$with$($newVisual, $oldVisual);
    } else {
     self._$contentHolder().$appendChild$($newVisual);
    };
    return self;
   };
   this.$installExpandedPresenter = function () {
    let self = this;
    if (self._$expandedPresenter().$isNil()) {
     self._$expandedPresenter$(self._$expandedDefinition().$value());
     self._$expandedPresenter().$parent$(self);
    };
    self._$installContentVisual$(self._$expandedPresenter().$visual());
    self._$expandedPresenter().$noticeExposure();
    self._$toggleWidget().$at$put$("src", $0.$disclosureOpenImage(self.$enclosingObjects$HopscotchForHTML5$ToggleComposer[0]).$at$("src"));
    return self;
   };
   this.$toggle = function () {
    let self = this;
    self._$isExpanded$(self._$isExpanded().$not());
    if (self._$isExpanded()) {
     self._$installExpandedPresenter();
    } else {
     self._$installCollapsedPresenter();
    };
    return self;
   };
   this.$init$expandedDefinition$ = function (v) {
    this.$expandedDefinition$slot = v;
    return this;
   };
   this.$expandedDefinition = function () {
    return this.$expandedDefinition$slot;
   };
   this.$init$collapsedDefinition$ = function (v) {
    this.$collapsedDefinition$slot = v;
    return this;
   };
   this.$collapsedDefinition = function () {
    return this.$collapsedDefinition$slot;
   };
   this.$init$isExpanded$ = function (v) {
    this.$isExpanded$slot = v;
    return this;
   };
   this.$isExpanded = function () {
    return this.$isExpanded$slot;
   };
   this.$isExpanded$ = function (v) {
    this.$isExpanded$slot = v;
    return this;
   };
   this.$init$expandedPresenter$ = function (v) {
    this.$expandedPresenter$slot = v;
    return this;
   };
   this.$expandedPresenter = function () {
    return this.$expandedPresenter$slot;
   };
   this.$expandedPresenter$ = function (v) {
    this.$expandedPresenter$slot = v;
    return this;
   };
   this.$init$collapsedPresenter$ = function (v) {
    this.$collapsedPresenter$slot = v;
    return this;
   };
   this.$collapsedPresenter = function () {
    return this.$collapsedPresenter$slot;
   };
   this.$collapsedPresenter$ = function (v) {
    this.$collapsedPresenter$slot = v;
    return this;
   };
   this.$init$contentHolder$ = function (v) {
    this.$contentHolder$slot = v;
    return this;
   };
   this.$contentHolder = function () {
    return this.$contentHolder$slot;
   };
   this.$contentHolder$ = function (v) {
    this.$contentHolder$slot = v;
    return this;
   };
   this.$init$toggleWidget$ = function (v) {
    this.$toggleWidget$slot = v;
    return this;
   };
   this.$toggleWidget = function () {
    return this.$toggleWidget$slot;
   };
   this.$toggleWidget$ = function (v) {
    this.$toggleWidget$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`ToggleComposer";
     this._$superInit$HopscotchForHTML5$ToggleComposer = $.$superInit$HopscotchForHTML5$ToggleComposer;
     this.$superInit$HopscotchForHTML5$ToggleComposer = dnuCatcher("$superInit$HopscotchForHTML5$ToggleComposer");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$childrenDo$ = this._$childrenDo$ = $.$childrenDo$;
     this.$collapse = this._$collapse = $.$collapse;
     this._$createVisual = $.$createVisual;
     this.$createVisual = dnuCatcher("$createVisual");
     this.$expand = this._$expand = $.$expand;
     this._$installCollapsedPresenter = $.$installCollapsedPresenter;
     this.$installCollapsedPresenter = dnuCatcher("$installCollapsedPresenter");
     this._$installContentVisual$ = $.$installContentVisual$;
     this.$installContentVisual$ = dnuCatcher("$installContentVisual$");
     this._$installExpandedPresenter = $.$installExpandedPresenter;
     this.$installExpandedPresenter = dnuCatcher("$installExpandedPresenter");
     this.$toggle = this._$toggle = $.$toggle;
     this._$init$expandedDefinition$ = $.$init$expandedDefinition$;
     this.$init$expandedDefinition$ = dnuCatcher("$init$expandedDefinition$");
     this._$expandedDefinition = $.$expandedDefinition;
     this.$expandedDefinition = dnuCatcher("$expandedDefinition");
     this._$init$collapsedDefinition$ = $.$init$collapsedDefinition$;
     this.$init$collapsedDefinition$ = dnuCatcher("$init$collapsedDefinition$");
     this._$collapsedDefinition = $.$collapsedDefinition;
     this.$collapsedDefinition = dnuCatcher("$collapsedDefinition");
     this._$init$isExpanded$ = $.$init$isExpanded$;
     this.$init$isExpanded$ = dnuCatcher("$init$isExpanded$");
     this._$isExpanded = $.$isExpanded;
     this.$isExpanded = dnuCatcher("$isExpanded");
     this._$isExpanded$ = $.$isExpanded$;
     this.$isExpanded$ = dnuCatcher("$isExpanded$");
     this._$init$expandedPresenter$ = $.$init$expandedPresenter$;
     this.$init$expandedPresenter$ = dnuCatcher("$init$expandedPresenter$");
     this._$expandedPresenter = $.$expandedPresenter;
     this.$expandedPresenter = dnuCatcher("$expandedPresenter");
     this._$expandedPresenter$ = $.$expandedPresenter$;
     this.$expandedPresenter$ = dnuCatcher("$expandedPresenter$");
     this._$init$collapsedPresenter$ = $.$init$collapsedPresenter$;
     this.$init$collapsedPresenter$ = dnuCatcher("$init$collapsedPresenter$");
     this._$collapsedPresenter = $.$collapsedPresenter;
     this.$collapsedPresenter = dnuCatcher("$collapsedPresenter");
     this._$collapsedPresenter$ = $.$collapsedPresenter$;
     this.$collapsedPresenter$ = dnuCatcher("$collapsedPresenter$");
     this._$init$contentHolder$ = $.$init$contentHolder$;
     this.$init$contentHolder$ = dnuCatcher("$init$contentHolder$");
     this._$contentHolder = $.$contentHolder;
     this.$contentHolder = dnuCatcher("$contentHolder");
     this._$contentHolder$ = $.$contentHolder$;
     this.$contentHolder$ = dnuCatcher("$contentHolder$");
     this._$init$toggleWidget$ = $.$init$toggleWidget$;
     this.$init$toggleWidget$ = dnuCatcher("$init$toggleWidget$");
     this._$toggleWidget = $.$toggleWidget;
     this.$toggleWidget = dnuCatcher("$toggleWidget");
     this._$toggleWidget$ = $.$toggleWidget$;
     this.$toggleWidget$ = dnuCatcher("$toggleWidget$");
     this.$enclosingObjects$HopscotchForHTML5$ToggleComposer = enclosingObjects;
     this.$super$HopscotchForHTML5$ToggleComposer$slot = runtimeSuperclass;
     this["HopscotchForHTML5`ToggleComposer"] = function () {
      superBasicNew.call(this);
      this.$expandedDefinition$slot = nil;
      this.$collapsedDefinition$slot = nil;
      this.$isExpanded$slot = nil;
      this.$expandedPresenter$slot = nil;
      this.$collapsedPresenter$slot = nil;
      this.$contentHolder$slot = nil;
      this.$toggleWidget$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`ToggleComposer"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`ToggleComposer";
    this.slots = [];
    this.methods = [new MM("collapsedDefinition:expandedDefinition:initiallyExpanded:", "public", true, 0)];
    this.nestedClasses = [];
    this.$collapsedDefinition$expandedDefinition$initiallyExpanded$ = function ($collapsed, $expanded, $flag) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($collapsed, $expanded, $flag);
     return t;
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`ToggleComposer";
      this.$collapsedDefinition$expandedDefinition$initiallyExpanded$ = this._$collapsedDefinition$expandedDefinition$initiallyExpanded$ = $.$collapsedDefinition$expandedDefinition$initiallyExpanded$;
      this.$enclosingObjects$HopscotchForHTML5$ToggleComposer = enclosingObjects;
      this.$super$HopscotchForHTML5$ToggleComposer$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$ZebraDecorator = new function () {
   let $ = this;
   let $1 = this;
   this.debug = "Runtime mixin for HopscotchForHTML5`ZebraDecorator";
   this.name = "HopscotchForHTML5`ZebraDecorator";
   this.header = 1750;
   this.slots = [
    new SM("firstColor", "protected", true, false),
    new SM("secondColor", "protected", true, false),
    new SM("sequenceDefinition", "protected", true, false)
   ];
   this.methods = [
    new MM("superInit`HopscotchForHTML5`ZebraDecorator", "protected", true, 1751),
    new MM("instance`initializer", "public", true, 1752),
    new MM("decorate:", "public", false, 1753),
    new MM("init`firstColor:", "protected", true, 0),
    new MM("firstColor", "protected", true, 0),
    new MM("firstColor:", "protected", true, 0),
    new MM("init`secondColor:", "protected", true, 0),
    new MM("secondColor", "protected", true, 0),
    new MM("secondColor:", "protected", true, 0),
    new MM("init`sequenceDefinition:", "protected", true, 0),
    new MM("sequenceDefinition", "protected", true, 0),
    new MM("sequenceDefinition:", "protected", true, 0)
   ];
   this.nestedClasses = [];
   this.applications = [];
   this.$superInit$HopscotchForHTML5$ZebraDecorator = function ($color1, $color2) {
    let self = this;
    self.$super$HopscotchForHTML5$ZebraDecorator$slot._$instance$initializer.call(self);
    return self;
   };
   this.$instance$initializer = function ($color1, $color2) {
    let self = this;
    self._$superInit$HopscotchForHTML5$ZebraDecorator($color1, $color2);
    self._$init$firstColor$($color1);
    self._$init$secondColor$($color2);
    return self;
   };
   this.$decorate$ = function ($aVisual) {
    let self = this;
    let $odd = nil;
    let $children = nil;
    $odd = false;
    $children = $aVisual.$at$("children");
    {
     let $index = nil;
     let $$limit = nil;
     nil;
     $index = 0;
     $$limit = $children.$at$("length") - 1;
     for (; $$limit.$$greater$equal($index); ) {
      let $each = nil;
      let $c = nil;
      $each = $children.$item$($index);
      $c = $odd.$ifTrue$ifFalse$(function () {
       return self._$firstColor();
      }, function () {
       return self._$secondColor();
      });
      self._$assert$message$(function () {
       return $c.$isNil().$not();
      }, function () {
       return "nil color!";
      });
      $c.$applyToStyle$($each.$at$("style"));
      $odd = $odd.$not();
      $index = (1).$$plus($index);
     };
    };
    return $aVisual;
   };
   this.$init$firstColor$ = function (v) {
    this.$firstColor$slot = v;
    return this;
   };
   this.$firstColor = function () {
    return this.$firstColor$slot;
   };
   this.$firstColor$ = function (v) {
    this.$firstColor$slot = v;
    return this;
   };
   this.$init$secondColor$ = function (v) {
    this.$secondColor$slot = v;
    return this;
   };
   this.$secondColor = function () {
    return this.$secondColor$slot;
   };
   this.$secondColor$ = function (v) {
    this.$secondColor$slot = v;
    return this;
   };
   this.$init$sequenceDefinition$ = function (v) {
    this.$sequenceDefinition$slot = v;
    return this;
   };
   this.$sequenceDefinition = function () {
    return this.$sequenceDefinition$slot;
   };
   this.$sequenceDefinition$ = function (v) {
    this.$sequenceDefinition$slot = v;
    return this;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime class for HopscotchForHTML5`ZebraDecorator";
     this._$superInit$HopscotchForHTML5$ZebraDecorator = $.$superInit$HopscotchForHTML5$ZebraDecorator;
     this.$superInit$HopscotchForHTML5$ZebraDecorator = dnuCatcher("$superInit$HopscotchForHTML5$ZebraDecorator");
     this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
     this.$decorate$ = this._$decorate$ = $.$decorate$;
     this._$init$firstColor$ = $.$init$firstColor$;
     this.$init$firstColor$ = dnuCatcher("$init$firstColor$");
     this._$firstColor = $.$firstColor;
     this.$firstColor = dnuCatcher("$firstColor");
     this._$firstColor$ = $.$firstColor$;
     this.$firstColor$ = dnuCatcher("$firstColor$");
     this._$init$secondColor$ = $.$init$secondColor$;
     this.$init$secondColor$ = dnuCatcher("$init$secondColor$");
     this._$secondColor = $.$secondColor;
     this.$secondColor = dnuCatcher("$secondColor");
     this._$secondColor$ = $.$secondColor$;
     this.$secondColor$ = dnuCatcher("$secondColor$");
     this._$init$sequenceDefinition$ = $.$init$sequenceDefinition$;
     this.$init$sequenceDefinition$ = dnuCatcher("$init$sequenceDefinition$");
     this._$sequenceDefinition = $.$sequenceDefinition;
     this.$sequenceDefinition = dnuCatcher("$sequenceDefinition");
     this._$sequenceDefinition$ = $.$sequenceDefinition$;
     this.$sequenceDefinition$ = dnuCatcher("$sequenceDefinition$");
     this.$enclosingObjects$HopscotchForHTML5$ZebraDecorator = enclosingObjects;
     this.$super$HopscotchForHTML5$ZebraDecorator$slot = runtimeSuperclass;
     this["HopscotchForHTML5`ZebraDecorator"] = function () {
      superBasicNew.call(this);
      this.$firstColor$slot = nil;
      this.$secondColor$slot = nil;
      this.$sequenceDefinition$slot = nil;
     };
     this.basicNew = this["HopscotchForHTML5`ZebraDecorator"];
     this.basicNew.prototype = this;
     this.meta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
   this.meta = new function () {
    let $ = this;
    this.debug = "Runtime meta mixin for HopscotchForHTML5`ZebraDecorator";
    this.slots = [];
    this.methods = [
     new MM("firstColor:secondColor:", "public", true, 0),
     new MM("darkerColorFirst", "public", false, 1754),
     new MM("lighterColorFirst", "public", false, 1755)
    ];
    this.nestedClasses = [];
    this.$firstColor$secondColor$ = function ($color1, $color2) {
     let t = new this.nonMeta.basicNew();
     t.$instance$initializer($color1, $color2);
     return t;
    };
    this.$darkerColorFirst = function () {
     let self = this;
     return self._$firstColor$secondColor$($0.$Color(self.$enclosingObjects$HopscotchForHTML5$ZebraDecorator[0]).$gray$((97/100)), $0.$Color(self.$enclosingObjects$HopscotchForHTML5$ZebraDecorator[0]).$white());
    };
    this.$lighterColorFirst = function () {
     let self = this;
     return self._$firstColor$secondColor$($0.$Color(self.$enclosingObjects$HopscotchForHTML5$ZebraDecorator[0]).$white(), $0.$Color(self.$enclosingObjects$HopscotchForHTML5$ZebraDecorator[0]).$gray$((97/100)));
    };
    this.invoke = function (runtimeSuperclass, enclosingObjects) {
     function constructRuntimeClass (superBasicNew) {
      this.debug = "Runtime meta class for HopscotchForHTML5`ZebraDecorator";
      this.$firstColor$secondColor$ = this._$firstColor$secondColor$ = $.$firstColor$secondColor$;
      this.$darkerColorFirst = this._$darkerColorFirst = $.$darkerColorFirst;
      this.$lighterColorFirst = this._$lighterColorFirst = $.$lighterColorFirst;
      this.$enclosingObjects$HopscotchForHTML5$ZebraDecorator = enclosingObjects;
      this.$super$HopscotchForHTML5$ZebraDecorator$slot = runtimeSuperclass;
      this.basicNew = function () {
       superBasicNew.call(this);
      };
      this.basicNew.prototype = this;
      this.nonMeta = null;
      this.newspeakClass = null;
     };
     constructRuntimeClass.prototype = runtimeSuperclass;
     return new constructRuntimeClass(runtimeSuperclass.basicNew);
    };
   }();
   this.meta.nonMeta = this;
  }();
  this.$HopscotchForHTML5$BlankFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$ButtonFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$CanvasFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$CodeMirrorFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$ColorDecorator.enclosingMixin = this;
  this.$HopscotchForHTML5$ColumnComposer.enclosingMixin = this;
  this.$HopscotchForHTML5$Composer.enclosingMixin = this;
  this.$HopscotchForHTML5$Decorator.enclosingMixin = this;
  this.$HopscotchForHTML5$DeferredContentComposer.enclosingMixin = this;
  this.$HopscotchForHTML5$DropDownMenuFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$EmbeddedHopscotchWindow.enclosingMixin = this;
  this.$HopscotchForHTML5$Fragment.enclosingMixin = this;
  this.$HopscotchForHTML5$Gradient.enclosingMixin = this;
  this.$HopscotchForHTML5$HolderComposer.enclosingMixin = this;
  this.$HopscotchForHTML5$HopscotchShell.enclosingMixin = this;
  this.$HopscotchForHTML5$HopscotchWindow.enclosingMixin = this;
  this.$HopscotchForHTML5$HyperlinkFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$HyperlinkImageFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$ImageButtonFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$LeafFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$LocalNavigationHistory.enclosingMixin = this;
  this.$HopscotchForHTML5$NavigationHistory.enclosingMixin = this;
  this.$HopscotchForHTML5$PaddedFrameComposer.enclosingMixin = this;
  this.$HopscotchForHTML5$Presenter.enclosingMixin = this;
  this.$HopscotchForHTML5$PresenterList.enclosingMixin = this;
  this.$HopscotchForHTML5$RowComposer.enclosingMixin = this;
  this.$HopscotchForHTML5$SequenceComposer.enclosingMixin = this;
  this.$HopscotchForHTML5$StaticImageFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$StaticLabelFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$Subject.enclosingMixin = this;
  this.$HopscotchForHTML5$TextBlockFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$TextDisplayFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$TextEditorFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$TextFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$TextStringFragment.enclosingMixin = this;
  this.$HopscotchForHTML5$ToggleComposer.enclosingMixin = this;
  this.$HopscotchForHTML5$ZebraDecorator.enclosingMixin = this;
  this.invoke = function (runtimeSuperclass, enclosingObjects) {
   function constructRuntimeClass (superBasicNew) {
    this.debug = "Runtime class for HopscotchForHTML5";
    this._$superInit$HopscotchForHTML5 = $.$superInit$HopscotchForHTML5;
    this.$superInit$HopscotchForHTML5 = dnuCatcher("$superInit$HopscotchForHTML5");
    this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
    this._$computeContentForMenu$ = $.$computeContentForMenu$;
    this.$computeContentForMenu$ = dnuCatcher("$computeContentForMenu$");
    this._$contentFor$within$ = $.$contentFor$within$;
    this.$contentFor$within$ = dnuCatcher("$contentFor$within$");
    this._$deferAction$ = $.$deferAction$;
    this.$deferAction$ = dnuCatcher("$deferAction$");
    this._$nextDeferredAction = $.$nextDeferredAction;
    this.$nextDeferredAction = dnuCatcher("$nextDeferredAction");
    this._$nextFrameDo$ = $.$nextFrameDo$;
    this.$nextFrameDo$ = dnuCatcher("$nextFrameDo$");
    this._$sharedNavigator = $.$sharedNavigator;
    this.$sharedNavigator = dnuCatcher("$sharedNavigator");
    this._$BlankFragment = $.$BlankFragment;
    this.$BlankFragment = dnuCatcher("$BlankFragment");
    this._$ButtonFragment = $.$ButtonFragment;
    this.$ButtonFragment = dnuCatcher("$ButtonFragment");
    this._$CanvasFragment = $.$CanvasFragment;
    this.$CanvasFragment = dnuCatcher("$CanvasFragment");
    this.$CodeMirrorFragment = this._$CodeMirrorFragment = $.$CodeMirrorFragment;
    this._$ColorDecorator = $.$ColorDecorator;
    this.$ColorDecorator = dnuCatcher("$ColorDecorator");
    this._$ColumnComposer = $.$ColumnComposer;
    this.$ColumnComposer = dnuCatcher("$ColumnComposer");
    this._$Composer = $.$Composer;
    this.$Composer = dnuCatcher("$Composer");
    this.$Decorator = this._$Decorator = $.$Decorator;
    this._$DeferredContentComposer = $.$DeferredContentComposer;
    this.$DeferredContentComposer = dnuCatcher("$DeferredContentComposer");
    this._$DropDownMenuFragment = $.$DropDownMenuFragment;
    this.$DropDownMenuFragment = dnuCatcher("$DropDownMenuFragment");
    this.$EmbeddedHopscotchWindow = this._$EmbeddedHopscotchWindow = $.$EmbeddedHopscotchWindow;
    this._$Fragment = $.$Fragment;
    this.$Fragment = dnuCatcher("$Fragment");
    this.$Gradient = this._$Gradient = $.$Gradient;
    this._$HolderComposer = $.$HolderComposer;
    this.$HolderComposer = dnuCatcher("$HolderComposer");
    this._$HopscotchShell = $.$HopscotchShell;
    this.$HopscotchShell = dnuCatcher("$HopscotchShell");
    this.$HopscotchWindow = this._$HopscotchWindow = $.$HopscotchWindow;
    this._$HyperlinkFragment = $.$HyperlinkFragment;
    this.$HyperlinkFragment = dnuCatcher("$HyperlinkFragment");
    this._$HyperlinkImageFragment = $.$HyperlinkImageFragment;
    this.$HyperlinkImageFragment = dnuCatcher("$HyperlinkImageFragment");
    this._$ImageButtonFragment = $.$ImageButtonFragment;
    this.$ImageButtonFragment = dnuCatcher("$ImageButtonFragment");
    this._$LeafFragment = $.$LeafFragment;
    this.$LeafFragment = dnuCatcher("$LeafFragment");
    this._$LocalNavigationHistory = $.$LocalNavigationHistory;
    this.$LocalNavigationHistory = dnuCatcher("$LocalNavigationHistory");
    this._$NavigationHistory = $.$NavigationHistory;
    this.$NavigationHistory = dnuCatcher("$NavigationHistory");
    this._$PaddedFrameComposer = $.$PaddedFrameComposer;
    this.$PaddedFrameComposer = dnuCatcher("$PaddedFrameComposer");
    this.$Presenter = this._$Presenter = $.$Presenter;
    this._$PresenterList = $.$PresenterList;
    this.$PresenterList = dnuCatcher("$PresenterList");
    this._$RowComposer = $.$RowComposer;
    this.$RowComposer = dnuCatcher("$RowComposer");
    this._$SequenceComposer = $.$SequenceComposer;
    this.$SequenceComposer = dnuCatcher("$SequenceComposer");
    this._$StaticImageFragment = $.$StaticImageFragment;
    this.$StaticImageFragment = dnuCatcher("$StaticImageFragment");
    this._$StaticLabelFragment = $.$StaticLabelFragment;
    this.$StaticLabelFragment = dnuCatcher("$StaticLabelFragment");
    this.$Subject = this._$Subject = $.$Subject;
    this._$TextBlockFragment = $.$TextBlockFragment;
    this.$TextBlockFragment = dnuCatcher("$TextBlockFragment");
    this._$TextDisplayFragment = $.$TextDisplayFragment;
    this.$TextDisplayFragment = dnuCatcher("$TextDisplayFragment");
    this.$TextEditorFragment = this._$TextEditorFragment = $.$TextEditorFragment;
    this._$TextFragment = $.$TextFragment;
    this.$TextFragment = dnuCatcher("$TextFragment");
    this._$TextStringFragment = $.$TextStringFragment;
    this.$TextStringFragment = dnuCatcher("$TextStringFragment");
    this._$ToggleComposer = $.$ToggleComposer;
    this.$ToggleComposer = dnuCatcher("$ToggleComposer");
    this.$ZebraDecorator = this._$ZebraDecorator = $.$ZebraDecorator;
    this._$init$JSObject$ = $.$init$JSObject$;
    this.$init$JSObject$ = dnuCatcher("$init$JSObject$");
    this._$JSObject = $.$JSObject;
    this.$JSObject = dnuCatcher("$JSObject");
    this._$init$sharedNavigationHistory$ = $.$init$sharedNavigationHistory$;
    this.$init$sharedNavigationHistory$ = dnuCatcher("$init$sharedNavigationHistory$");
    this._$sharedNavigationHistory = $.$sharedNavigationHistory;
    this.$sharedNavigationHistory = dnuCatcher("$sharedNavigationHistory");
    this._$sharedNavigationHistory$ = $.$sharedNavigationHistory$;
    this.$sharedNavigationHistory$ = dnuCatcher("$sharedNavigationHistory$");
    this._$init$embeddedWindowMap$ = $.$init$embeddedWindowMap$;
    this.$init$embeddedWindowMap$ = dnuCatcher("$init$embeddedWindowMap$");
    this._$embeddedWindowMap = $.$embeddedWindowMap;
    this.$embeddedWindowMap = dnuCatcher("$embeddedWindowMap");
    this._$init$sharedBackButtonListener$ = $.$init$sharedBackButtonListener$;
    this.$init$sharedBackButtonListener$ = dnuCatcher("$init$sharedBackButtonListener$");
    this._$sharedBackButtonListener = $.$sharedBackButtonListener;
    this.$sharedBackButtonListener = dnuCatcher("$sharedBackButtonListener");
    this._$sharedBackButtonListener$ = $.$sharedBackButtonListener$;
    this.$sharedBackButtonListener$ = dnuCatcher("$sharedBackButtonListener$");
    this._$init$currentHopscotchWindow$ = $.$init$currentHopscotchWindow$;
    this.$init$currentHopscotchWindow$ = dnuCatcher("$init$currentHopscotchWindow$");
    this._$currentHopscotchWindow = $.$currentHopscotchWindow;
    this.$currentHopscotchWindow = dnuCatcher("$currentHopscotchWindow");
    this._$currentHopscotchWindow$ = $.$currentHopscotchWindow$;
    this.$currentHopscotchWindow$ = dnuCatcher("$currentHopscotchWindow$");
    this.$init$dropDownImage$ = this._$init$dropDownImage$ = $.$init$dropDownImage$;
    this.$dropDownImage = this._$dropDownImage = $.$dropDownImage;
    this.$init$dropDownOutImage$ = this._$init$dropDownOutImage$ = $.$init$dropDownOutImage$;
    this.$dropDownOutImage = this._$dropDownOutImage = $.$dropDownOutImage;
    this.$init$dropDownOverImage$ = this._$init$dropDownOverImage$ = $.$init$dropDownOverImage$;
    this.$dropDownOverImage = this._$dropDownOverImage = $.$dropDownOverImage;
    this.$init$core$ = this._$init$core$ = $.$init$core$;
    this.$core = this._$core = $.$core;
    this.$init$fragments$ = this._$init$fragments$ = $.$init$fragments$;
    this.$fragments = this._$fragments = $.$fragments;
    this.$init$HopscotchForHTML5$BlankFragment$ = this._$init$HopscotchForHTML5$BlankFragment$ = $.$init$HopscotchForHTML5$BlankFragment$;
    this.$HopscotchForHTML5$BlankFragment = this._$HopscotchForHTML5$BlankFragment = $.$HopscotchForHTML5$BlankFragment;
    this.$HopscotchForHTML5$BlankFragment$ = this._$HopscotchForHTML5$BlankFragment$ = $.$HopscotchForHTML5$BlankFragment$;
    this.$init$HopscotchForHTML5$ButtonFragment$ = this._$init$HopscotchForHTML5$ButtonFragment$ = $.$init$HopscotchForHTML5$ButtonFragment$;
    this.$HopscotchForHTML5$ButtonFragment = this._$HopscotchForHTML5$ButtonFragment = $.$HopscotchForHTML5$ButtonFragment;
    this.$HopscotchForHTML5$ButtonFragment$ = this._$HopscotchForHTML5$ButtonFragment$ = $.$HopscotchForHTML5$ButtonFragment$;
    this.$init$HopscotchForHTML5$CanvasFragment$ = this._$init$HopscotchForHTML5$CanvasFragment$ = $.$init$HopscotchForHTML5$CanvasFragment$;
    this.$HopscotchForHTML5$CanvasFragment = this._$HopscotchForHTML5$CanvasFragment = $.$HopscotchForHTML5$CanvasFragment;
    this.$HopscotchForHTML5$CanvasFragment$ = this._$HopscotchForHTML5$CanvasFragment$ = $.$HopscotchForHTML5$CanvasFragment$;
    this.$init$HopscotchForHTML5$CodeMirrorFragment$ = this._$init$HopscotchForHTML5$CodeMirrorFragment$ = $.$init$HopscotchForHTML5$CodeMirrorFragment$;
    this.$HopscotchForHTML5$CodeMirrorFragment = this._$HopscotchForHTML5$CodeMirrorFragment = $.$HopscotchForHTML5$CodeMirrorFragment;
    this.$HopscotchForHTML5$CodeMirrorFragment$ = this._$HopscotchForHTML5$CodeMirrorFragment$ = $.$HopscotchForHTML5$CodeMirrorFragment$;
    this.$init$HopscotchForHTML5$ColorDecorator$ = this._$init$HopscotchForHTML5$ColorDecorator$ = $.$init$HopscotchForHTML5$ColorDecorator$;
    this.$HopscotchForHTML5$ColorDecorator = this._$HopscotchForHTML5$ColorDecorator = $.$HopscotchForHTML5$ColorDecorator;
    this.$HopscotchForHTML5$ColorDecorator$ = this._$HopscotchForHTML5$ColorDecorator$ = $.$HopscotchForHTML5$ColorDecorator$;
    this.$init$HopscotchForHTML5$ColumnComposer$ = this._$init$HopscotchForHTML5$ColumnComposer$ = $.$init$HopscotchForHTML5$ColumnComposer$;
    this.$HopscotchForHTML5$ColumnComposer = this._$HopscotchForHTML5$ColumnComposer = $.$HopscotchForHTML5$ColumnComposer;
    this.$HopscotchForHTML5$ColumnComposer$ = this._$HopscotchForHTML5$ColumnComposer$ = $.$HopscotchForHTML5$ColumnComposer$;
    this.$init$HopscotchForHTML5$Composer$ = this._$init$HopscotchForHTML5$Composer$ = $.$init$HopscotchForHTML5$Composer$;
    this.$HopscotchForHTML5$Composer = this._$HopscotchForHTML5$Composer = $.$HopscotchForHTML5$Composer;
    this.$HopscotchForHTML5$Composer$ = this._$HopscotchForHTML5$Composer$ = $.$HopscotchForHTML5$Composer$;
    this.$init$HopscotchForHTML5$Decorator$ = this._$init$HopscotchForHTML5$Decorator$ = $.$init$HopscotchForHTML5$Decorator$;
    this.$HopscotchForHTML5$Decorator = this._$HopscotchForHTML5$Decorator = $.$HopscotchForHTML5$Decorator;
    this.$HopscotchForHTML5$Decorator$ = this._$HopscotchForHTML5$Decorator$ = $.$HopscotchForHTML5$Decorator$;
    this.$init$HopscotchForHTML5$DeferredContentComposer$ = this._$init$HopscotchForHTML5$DeferredContentComposer$ = $.$init$HopscotchForHTML5$DeferredContentComposer$;
    this.$HopscotchForHTML5$DeferredContentComposer = this._$HopscotchForHTML5$DeferredContentComposer = $.$HopscotchForHTML5$DeferredContentComposer;
    this.$HopscotchForHTML5$DeferredContentComposer$ = this._$HopscotchForHTML5$DeferredContentComposer$ = $.$HopscotchForHTML5$DeferredContentComposer$;
    this.$init$HopscotchForHTML5$DropDownMenuFragment$ = this._$init$HopscotchForHTML5$DropDownMenuFragment$ = $.$init$HopscotchForHTML5$DropDownMenuFragment$;
    this.$HopscotchForHTML5$DropDownMenuFragment = this._$HopscotchForHTML5$DropDownMenuFragment = $.$HopscotchForHTML5$DropDownMenuFragment;
    this.$HopscotchForHTML5$DropDownMenuFragment$ = this._$HopscotchForHTML5$DropDownMenuFragment$ = $.$HopscotchForHTML5$DropDownMenuFragment$;
    this.$init$HopscotchForHTML5$EmbeddedHopscotchWindow$ = this._$init$HopscotchForHTML5$EmbeddedHopscotchWindow$ = $.$init$HopscotchForHTML5$EmbeddedHopscotchWindow$;
    this.$HopscotchForHTML5$EmbeddedHopscotchWindow = this._$HopscotchForHTML5$EmbeddedHopscotchWindow = $.$HopscotchForHTML5$EmbeddedHopscotchWindow;
    this.$HopscotchForHTML5$EmbeddedHopscotchWindow$ = this._$HopscotchForHTML5$EmbeddedHopscotchWindow$ = $.$HopscotchForHTML5$EmbeddedHopscotchWindow$;
    this.$init$HopscotchForHTML5$Fragment$ = this._$init$HopscotchForHTML5$Fragment$ = $.$init$HopscotchForHTML5$Fragment$;
    this.$HopscotchForHTML5$Fragment = this._$HopscotchForHTML5$Fragment = $.$HopscotchForHTML5$Fragment;
    this.$HopscotchForHTML5$Fragment$ = this._$HopscotchForHTML5$Fragment$ = $.$HopscotchForHTML5$Fragment$;
    this.$init$HopscotchForHTML5$Gradient$ = this._$init$HopscotchForHTML5$Gradient$ = $.$init$HopscotchForHTML5$Gradient$;
    this.$HopscotchForHTML5$Gradient = this._$HopscotchForHTML5$Gradient = $.$HopscotchForHTML5$Gradient;
    this.$HopscotchForHTML5$Gradient$ = this._$HopscotchForHTML5$Gradient$ = $.$HopscotchForHTML5$Gradient$;
    this.$init$HopscotchForHTML5$HolderComposer$ = this._$init$HopscotchForHTML5$HolderComposer$ = $.$init$HopscotchForHTML5$HolderComposer$;
    this.$HopscotchForHTML5$HolderComposer = this._$HopscotchForHTML5$HolderComposer = $.$HopscotchForHTML5$HolderComposer;
    this.$HopscotchForHTML5$HolderComposer$ = this._$HopscotchForHTML5$HolderComposer$ = $.$HopscotchForHTML5$HolderComposer$;
    this.$init$HopscotchForHTML5$HopscotchShell$ = this._$init$HopscotchForHTML5$HopscotchShell$ = $.$init$HopscotchForHTML5$HopscotchShell$;
    this.$HopscotchForHTML5$HopscotchShell = this._$HopscotchForHTML5$HopscotchShell = $.$HopscotchForHTML5$HopscotchShell;
    this.$HopscotchForHTML5$HopscotchShell$ = this._$HopscotchForHTML5$HopscotchShell$ = $.$HopscotchForHTML5$HopscotchShell$;
    this.$init$HopscotchForHTML5$HopscotchWindow$ = this._$init$HopscotchForHTML5$HopscotchWindow$ = $.$init$HopscotchForHTML5$HopscotchWindow$;
    this.$HopscotchForHTML5$HopscotchWindow = this._$HopscotchForHTML5$HopscotchWindow = $.$HopscotchForHTML5$HopscotchWindow;
    this.$HopscotchForHTML5$HopscotchWindow$ = this._$HopscotchForHTML5$HopscotchWindow$ = $.$HopscotchForHTML5$HopscotchWindow$;
    this.$init$HopscotchForHTML5$HyperlinkFragment$ = this._$init$HopscotchForHTML5$HyperlinkFragment$ = $.$init$HopscotchForHTML5$HyperlinkFragment$;
    this.$HopscotchForHTML5$HyperlinkFragment = this._$HopscotchForHTML5$HyperlinkFragment = $.$HopscotchForHTML5$HyperlinkFragment;
    this.$HopscotchForHTML5$HyperlinkFragment$ = this._$HopscotchForHTML5$HyperlinkFragment$ = $.$HopscotchForHTML5$HyperlinkFragment$;
    this.$init$HopscotchForHTML5$HyperlinkImageFragment$ = this._$init$HopscotchForHTML5$HyperlinkImageFragment$ = $.$init$HopscotchForHTML5$HyperlinkImageFragment$;
    this.$HopscotchForHTML5$HyperlinkImageFragment = this._$HopscotchForHTML5$HyperlinkImageFragment = $.$HopscotchForHTML5$HyperlinkImageFragment;
    this.$HopscotchForHTML5$HyperlinkImageFragment$ = this._$HopscotchForHTML5$HyperlinkImageFragment$ = $.$HopscotchForHTML5$HyperlinkImageFragment$;
    this.$init$HopscotchForHTML5$ImageButtonFragment$ = this._$init$HopscotchForHTML5$ImageButtonFragment$ = $.$init$HopscotchForHTML5$ImageButtonFragment$;
    this.$HopscotchForHTML5$ImageButtonFragment = this._$HopscotchForHTML5$ImageButtonFragment = $.$HopscotchForHTML5$ImageButtonFragment;
    this.$HopscotchForHTML5$ImageButtonFragment$ = this._$HopscotchForHTML5$ImageButtonFragment$ = $.$HopscotchForHTML5$ImageButtonFragment$;
    this.$init$HopscotchForHTML5$LeafFragment$ = this._$init$HopscotchForHTML5$LeafFragment$ = $.$init$HopscotchForHTML5$LeafFragment$;
    this.$HopscotchForHTML5$LeafFragment = this._$HopscotchForHTML5$LeafFragment = $.$HopscotchForHTML5$LeafFragment;
    this.$HopscotchForHTML5$LeafFragment$ = this._$HopscotchForHTML5$LeafFragment$ = $.$HopscotchForHTML5$LeafFragment$;
    this.$init$HopscotchForHTML5$LocalNavigationHistory$ = this._$init$HopscotchForHTML5$LocalNavigationHistory$ = $.$init$HopscotchForHTML5$LocalNavigationHistory$;
    this.$HopscotchForHTML5$LocalNavigationHistory = this._$HopscotchForHTML5$LocalNavigationHistory = $.$HopscotchForHTML5$LocalNavigationHistory;
    this.$HopscotchForHTML5$LocalNavigationHistory$ = this._$HopscotchForHTML5$LocalNavigationHistory$ = $.$HopscotchForHTML5$LocalNavigationHistory$;
    this.$init$HopscotchForHTML5$NavigationHistory$ = this._$init$HopscotchForHTML5$NavigationHistory$ = $.$init$HopscotchForHTML5$NavigationHistory$;
    this.$HopscotchForHTML5$NavigationHistory = this._$HopscotchForHTML5$NavigationHistory = $.$HopscotchForHTML5$NavigationHistory;
    this.$HopscotchForHTML5$NavigationHistory$ = this._$HopscotchForHTML5$NavigationHistory$ = $.$HopscotchForHTML5$NavigationHistory$;
    this.$init$HopscotchForHTML5$PaddedFrameComposer$ = this._$init$HopscotchForHTML5$PaddedFrameComposer$ = $.$init$HopscotchForHTML5$PaddedFrameComposer$;
    this.$HopscotchForHTML5$PaddedFrameComposer = this._$HopscotchForHTML5$PaddedFrameComposer = $.$HopscotchForHTML5$PaddedFrameComposer;
    this.$HopscotchForHTML5$PaddedFrameComposer$ = this._$HopscotchForHTML5$PaddedFrameComposer$ = $.$HopscotchForHTML5$PaddedFrameComposer$;
    this.$init$HopscotchForHTML5$Presenter$ = this._$init$HopscotchForHTML5$Presenter$ = $.$init$HopscotchForHTML5$Presenter$;
    this.$HopscotchForHTML5$Presenter = this._$HopscotchForHTML5$Presenter = $.$HopscotchForHTML5$Presenter;
    this.$HopscotchForHTML5$Presenter$ = this._$HopscotchForHTML5$Presenter$ = $.$HopscotchForHTML5$Presenter$;
    this.$init$HopscotchForHTML5$PresenterList$ = this._$init$HopscotchForHTML5$PresenterList$ = $.$init$HopscotchForHTML5$PresenterList$;
    this.$HopscotchForHTML5$PresenterList = this._$HopscotchForHTML5$PresenterList = $.$HopscotchForHTML5$PresenterList;
    this.$HopscotchForHTML5$PresenterList$ = this._$HopscotchForHTML5$PresenterList$ = $.$HopscotchForHTML5$PresenterList$;
    this.$init$HopscotchForHTML5$RowComposer$ = this._$init$HopscotchForHTML5$RowComposer$ = $.$init$HopscotchForHTML5$RowComposer$;
    this.$HopscotchForHTML5$RowComposer = this._$HopscotchForHTML5$RowComposer = $.$HopscotchForHTML5$RowComposer;
    this.$HopscotchForHTML5$RowComposer$ = this._$HopscotchForHTML5$RowComposer$ = $.$HopscotchForHTML5$RowComposer$;
    this.$init$HopscotchForHTML5$SequenceComposer$ = this._$init$HopscotchForHTML5$SequenceComposer$ = $.$init$HopscotchForHTML5$SequenceComposer$;
    this.$HopscotchForHTML5$SequenceComposer = this._$HopscotchForHTML5$SequenceComposer = $.$HopscotchForHTML5$SequenceComposer;
    this.$HopscotchForHTML5$SequenceComposer$ = this._$HopscotchForHTML5$SequenceComposer$ = $.$HopscotchForHTML5$SequenceComposer$;
    this.$init$HopscotchForHTML5$StaticImageFragment$ = this._$init$HopscotchForHTML5$StaticImageFragment$ = $.$init$HopscotchForHTML5$StaticImageFragment$;
    this.$HopscotchForHTML5$StaticImageFragment = this._$HopscotchForHTML5$StaticImageFragment = $.$HopscotchForHTML5$StaticImageFragment;
    this.$HopscotchForHTML5$StaticImageFragment$ = this._$HopscotchForHTML5$StaticImageFragment$ = $.$HopscotchForHTML5$StaticImageFragment$;
    this.$init$HopscotchForHTML5$StaticLabelFragment$ = this._$init$HopscotchForHTML5$StaticLabelFragment$ = $.$init$HopscotchForHTML5$StaticLabelFragment$;
    this.$HopscotchForHTML5$StaticLabelFragment = this._$HopscotchForHTML5$StaticLabelFragment = $.$HopscotchForHTML5$StaticLabelFragment;
    this.$HopscotchForHTML5$StaticLabelFragment$ = this._$HopscotchForHTML5$StaticLabelFragment$ = $.$HopscotchForHTML5$StaticLabelFragment$;
    this.$init$HopscotchForHTML5$Subject$ = this._$init$HopscotchForHTML5$Subject$ = $.$init$HopscotchForHTML5$Subject$;
    this.$HopscotchForHTML5$Subject = this._$HopscotchForHTML5$Subject = $.$HopscotchForHTML5$Subject;
    this.$HopscotchForHTML5$Subject$ = this._$HopscotchForHTML5$Subject$ = $.$HopscotchForHTML5$Subject$;
    this.$init$HopscotchForHTML5$TextBlockFragment$ = this._$init$HopscotchForHTML5$TextBlockFragment$ = $.$init$HopscotchForHTML5$TextBlockFragment$;
    this.$HopscotchForHTML5$TextBlockFragment = this._$HopscotchForHTML5$TextBlockFragment = $.$HopscotchForHTML5$TextBlockFragment;
    this.$HopscotchForHTML5$TextBlockFragment$ = this._$HopscotchForHTML5$TextBlockFragment$ = $.$HopscotchForHTML5$TextBlockFragment$;
    this.$init$HopscotchForHTML5$TextDisplayFragment$ = this._$init$HopscotchForHTML5$TextDisplayFragment$ = $.$init$HopscotchForHTML5$TextDisplayFragment$;
    this.$HopscotchForHTML5$TextDisplayFragment = this._$HopscotchForHTML5$TextDisplayFragment = $.$HopscotchForHTML5$TextDisplayFragment;
    this.$HopscotchForHTML5$TextDisplayFragment$ = this._$HopscotchForHTML5$TextDisplayFragment$ = $.$HopscotchForHTML5$TextDisplayFragment$;
    this.$init$HopscotchForHTML5$TextEditorFragment$ = this._$init$HopscotchForHTML5$TextEditorFragment$ = $.$init$HopscotchForHTML5$TextEditorFragment$;
    this.$HopscotchForHTML5$TextEditorFragment = this._$HopscotchForHTML5$TextEditorFragment = $.$HopscotchForHTML5$TextEditorFragment;
    this.$HopscotchForHTML5$TextEditorFragment$ = this._$HopscotchForHTML5$TextEditorFragment$ = $.$HopscotchForHTML5$TextEditorFragment$;
    this.$init$HopscotchForHTML5$TextFragment$ = this._$init$HopscotchForHTML5$TextFragment$ = $.$init$HopscotchForHTML5$TextFragment$;
    this.$HopscotchForHTML5$TextFragment = this._$HopscotchForHTML5$TextFragment = $.$HopscotchForHTML5$TextFragment;
    this.$HopscotchForHTML5$TextFragment$ = this._$HopscotchForHTML5$TextFragment$ = $.$HopscotchForHTML5$TextFragment$;
    this.$init$HopscotchForHTML5$TextStringFragment$ = this._$init$HopscotchForHTML5$TextStringFragment$ = $.$init$HopscotchForHTML5$TextStringFragment$;
    this.$HopscotchForHTML5$TextStringFragment = this._$HopscotchForHTML5$TextStringFragment = $.$HopscotchForHTML5$TextStringFragment;
    this.$HopscotchForHTML5$TextStringFragment$ = this._$HopscotchForHTML5$TextStringFragment$ = $.$HopscotchForHTML5$TextStringFragment$;
    this.$init$HopscotchForHTML5$ToggleComposer$ = this._$init$HopscotchForHTML5$ToggleComposer$ = $.$init$HopscotchForHTML5$ToggleComposer$;
    this.$HopscotchForHTML5$ToggleComposer = this._$HopscotchForHTML5$ToggleComposer = $.$HopscotchForHTML5$ToggleComposer;
    this.$HopscotchForHTML5$ToggleComposer$ = this._$HopscotchForHTML5$ToggleComposer$ = $.$HopscotchForHTML5$ToggleComposer$;
    this.$init$HopscotchForHTML5$ZebraDecorator$ = this._$init$HopscotchForHTML5$ZebraDecorator$ = $.$init$HopscotchForHTML5$ZebraDecorator$;
    this.$HopscotchForHTML5$ZebraDecorator = this._$HopscotchForHTML5$ZebraDecorator = $.$HopscotchForHTML5$ZebraDecorator;
    this.$HopscotchForHTML5$ZebraDecorator$ = this._$HopscotchForHTML5$ZebraDecorator$ = $.$HopscotchForHTML5$ZebraDecorator$;
    this.$enclosingObjects$HopscotchForHTML5 = enclosingObjects;
    this.$super$HopscotchForHTML5$slot = runtimeSuperclass;
    this.HopscotchForHTML5 = function () {
     superBasicNew.call(this);
     this.$Color$slot = nil;
     this.$Context$slot = nil;
     this.$Timer$slot = nil;
     this.$List$slot = nil;
     this.$Map$slot = nil;
     this.$Set$slot = nil;
     this.$TextBlock$slot = nil;
     this.$TextProperties$slot = nil;
     this.$TextString$slot = nil;
     this.$window$slot = nil;
     this.$document$slot = nil;
     this.$JSObject$slot = nil;
     this.$CodeMirror$slot = nil;
     this.$body$slot = nil;
     this.$history$slot = nil;
     this.$sharedNavigationHistory$slot = nil;
     this.$embeddedWindowMap$slot = nil;
     this.$sharedBackButtonListener$slot = nil;
     this.$currentHopscotchWindow$slot = nil;
     this.$accept16px$slot = nil;
     this.$cancel16px$slot = nil;
     this.$disclosureClosedImage$slot = nil;
     this.$disclosureTransitionImage$slot = nil;
     this.$disclosureOpenImage$slot = nil;
     this.$dropDownImage$slot = nil;
     this.$dropDownOutImage$slot = nil;
     this.$dropDownOverImage$slot = nil;
     this.$deferredContentQueue$slot = nil;
     this.$core$slot = nil;
     this.$fragments$slot = nil;
     this.$HopscotchForHTML5$BlankFragment$slot = nil;
     this.$HopscotchForHTML5$ButtonFragment$slot = nil;
     this.$HopscotchForHTML5$CanvasFragment$slot = nil;
     this.$HopscotchForHTML5$CodeMirrorFragment$slot = nil;
     this.$HopscotchForHTML5$ColorDecorator$slot = nil;
     this.$HopscotchForHTML5$ColumnComposer$slot = nil;
     this.$HopscotchForHTML5$Composer$slot = nil;
     this.$HopscotchForHTML5$Decorator$slot = nil;
     this.$HopscotchForHTML5$DeferredContentComposer$slot = nil;
     this.$HopscotchForHTML5$DropDownMenuFragment$slot = nil;
     this.$HopscotchForHTML5$EmbeddedHopscotchWindow$slot = nil;
     this.$HopscotchForHTML5$Fragment$slot = nil;
     this.$HopscotchForHTML5$Gradient$slot = nil;
     this.$HopscotchForHTML5$HolderComposer$slot = nil;
     this.$HopscotchForHTML5$HopscotchShell$slot = nil;
     this.$HopscotchForHTML5$HopscotchWindow$slot = nil;
     this.$HopscotchForHTML5$HyperlinkFragment$slot = nil;
     this.$HopscotchForHTML5$HyperlinkImageFragment$slot = nil;
     this.$HopscotchForHTML5$ImageButtonFragment$slot = nil;
     this.$HopscotchForHTML5$LeafFragment$slot = nil;
     this.$HopscotchForHTML5$LocalNavigationHistory$slot = nil;
     this.$HopscotchForHTML5$NavigationHistory$slot = nil;
     this.$HopscotchForHTML5$PaddedFrameComposer$slot = nil;
     this.$HopscotchForHTML5$Presenter$slot = nil;
     this.$HopscotchForHTML5$PresenterList$slot = nil;
     this.$HopscotchForHTML5$RowComposer$slot = nil;
     this.$HopscotchForHTML5$SequenceComposer$slot = nil;
     this.$HopscotchForHTML5$StaticImageFragment$slot = nil;
     this.$HopscotchForHTML5$StaticLabelFragment$slot = nil;
     this.$HopscotchForHTML5$Subject$slot = nil;
     this.$HopscotchForHTML5$TextBlockFragment$slot = nil;
     this.$HopscotchForHTML5$TextDisplayFragment$slot = nil;
     this.$HopscotchForHTML5$TextEditorFragment$slot = nil;
     this.$HopscotchForHTML5$TextFragment$slot = nil;
     this.$HopscotchForHTML5$TextStringFragment$slot = nil;
     this.$HopscotchForHTML5$ToggleComposer$slot = nil;
     this.$HopscotchForHTML5$ZebraDecorator$slot = nil;
    };
    this.basicNew = this.HopscotchForHTML5;
    this.basicNew.prototype = this;
    this.meta = null;
    this.newspeakClass = null;
   };
   constructRuntimeClass.prototype = runtimeSuperclass;
   return new constructRuntimeClass(runtimeSuperclass.basicNew);
  };
  this.meta = new function () {
   let $ = this;
   this.debug = "Runtime meta mixin for HopscotchForHTML5";
   this.slots = [];
   this.methods = [new MM("usingPlatform:images:", "public", true, 0)];
   this.nestedClasses = [];
   this.$usingPlatform$images$ = function ($p, $images) {
    let t = new this.nonMeta.basicNew();
    t.$instance$initializer($p, $images);
    return t;
   };
   this.invoke = function (runtimeSuperclass, enclosingObjects) {
    function constructRuntimeClass (superBasicNew) {
     this.debug = "Runtime meta class for HopscotchForHTML5";
     this.$usingPlatform$images$ = this._$usingPlatform$images$ = $.$usingPlatform$images$;
     this.$enclosingObjects$HopscotchForHTML5 = enclosingObjects;
     this.$super$HopscotchForHTML5$slot = runtimeSuperclass;
     this.basicNew = function () {
      superBasicNew.call(this);
     };
     this.basicNew.prototype = this;
     this.nonMeta = null;
     this.newspeakClass = null;
    };
    constructRuntimeClass.prototype = runtimeSuperclass;
    return new constructRuntimeClass(runtimeSuperclass.basicNew);
   };
  }();
  this.meta.nonMeta = this;
 }();
}();


var vmmirror = new function(){

	this.ImplementationBase$slot = new function(){
		this.debug = "ImplementationBase";
		this.$runtimeClass$slot = new function(){
			this.debug = "Runtime class for ImplementationBase";
			this.basicNew = function(){ this.hashCode = 0; };
			this.$instance$initializer = function(){};
			this._$instance$initializer = function(){};
			this.toString = function(){ return this.$printString(); }
		};
	};
	this.$ImplementationBase = function(){return this.ImplementationBase$slot;};
	this.$Array = function(){return Array;};
	this.$String = function(){return String;};
	this.$printString = function(){return "VMMirrorForV8"};

	this.createKernel = function(){

		var enclosingObjects = ["patch me with kernel", "patch me with nil"];
		var enclosingObjects2 = ["patch me with nil"];

		var Object$runtimeClass = mixins.$KernelForV8.$KernelForV8$Object.invoke(this.$ImplementationBase().$runtimeClass$slot, enclosingObjects);
		var Class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Class.invoke(Object$runtimeClass, enclosingObjects);
		var Metaclass$runtimeClass = mixins.$KernelForV8.$KernelForV8$Metaclass.invoke(Object$runtimeClass, enclosingObjects);
		var Mixin$runtimeClass = mixins.$KernelForV8.$KernelForV8$Mixin.invoke(Object$runtimeClass, enclosingObjects);
		var UndefinedObject$runtimeClass = mixins.$KernelForV8.$KernelForV8$UndefinedObject.invoke(Object$runtimeClass, enclosingObjects);
		var Kernel$runtimeClass = mixins.$KernelForV8.invoke(Object$runtimeClass, enclosingObjects2);

		var Object$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Object.meta.invoke(Class$runtimeClass, enclosingObjects);
		var Class$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Class.meta.invoke(Class$runtimeClass, enclosingObjects);
		var Metaclass$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Metaclass.meta.invoke(Class$runtimeClass, enclosingObjects);
		var Mixin$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Mixin.meta.invoke(Class$runtimeClass, enclosingObjects);
		var UndefinedObject$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$UndefinedObject.meta.invoke(Class$runtimeClass, enclosingObjects);
		var Kernel$class$runtimeClass = mixins.$KernelForV8.meta.invoke(Class$runtimeClass, enclosingObjects2);

		Object$runtimeClass.meta = Object$class$runtimeClass;
		Class$runtimeClass.meta = Class$class$runtimeClass;
		Metaclass$runtimeClass.meta = Metaclass$class$runtimeClass;
		Mixin$runtimeClass.meta = Mixin$class$runtimeClass;
		UndefinedObject$runtimeClass.meta = UndefinedObject$class$runtimeClass;
		Kernel$runtimeClass.meta = Kernel$class$runtimeClass;

		Object$class$runtimeClass.nonMeta = Object$runtimeClass;
		Class$class$runtimeClass.nonMeta = Class$runtimeClass;
		Metaclass$class$runtimeClass.nonMeta = Metaclass$runtimeClass;
		Mixin$class$runtimeClass.nonMeta = Mixin$runtimeClass;
		UndefinedObject$class$runtimeClass.nonMeta = UndefinedObject$runtimeClass;
		Kernel$class$runtimeClass.nonMeta = Kernel$runtimeClass;

		nil = new UndefinedObject$runtimeClass.basicNew();

		var Object = new Object$class$runtimeClass.basicNew();
		var Class = new Class$class$runtimeClass.basicNew();
		var Metaclass = new Metaclass$class$runtimeClass.basicNew();
		var Mixin = new Mixin$class$runtimeClass.basicNew();
		var UndefinedObject = new UndefinedObject$class$runtimeClass.basicNew();
		var Kernel = new Kernel$class$runtimeClass.basicNew();

		var Object$class = new Metaclass$runtimeClass.basicNew();
		var Class$class = new Metaclass$runtimeClass.basicNew();
		var Metaclass$class = new Metaclass$runtimeClass.basicNew();
		var Mixin$class = new Metaclass$runtimeClass.basicNew();
		var UndefinedObject$class = new Metaclass$runtimeClass.basicNew();
		var Kernel$class = new Metaclass$runtimeClass.basicNew();

		Object$class$runtimeClass.newspeakClass = Object$class;
		Class$class$runtimeClass.newspeakClass = Class$class;
		Metaclass$class$runtimeClass.newspeakClass = Metaclass$class;
		Mixin$class$runtimeClass.newspeakClass = Mixin$class;
		UndefinedObject$class$runtimeClass.newspeakClass = UndefinedObject$class;
		Kernel$class$runtimeClass.newspeakClass = Kernel$class;

		Object$runtimeClass.newspeakClass = Object;
		Class$runtimeClass.newspeakClass = Class;
		Metaclass$runtimeClass.newspeakClass = Metaclass;
		Mixin$runtimeClass.newspeakClass = Mixin;
		UndefinedObject$runtimeClass.newspeakClass = UndefinedObject;
		Kernel$runtimeClass.newspeakClass = Kernel;

		var kernel = Kernel.$usingVmMirror$(this);

		//superclass$slot
		Object.$superclass$slot = nil;
		Class.$superclass$slot = Object;
		Metaclass.$superclass$slot = Object;
		Mixin.$superclass$slot = Object;
		UndefinedObject.$superclass$slot = Object;
		Kernel.$superclass$slot = Object;

		Object$class.$superclass$slot = Class;
		Class$class.$superclass$slot = Class;
		Metaclass$class.$superclass$slot = Class;
		Mixin$class.$superclass$slot = Class;
		UndefinedObject$class.$superclass$slot = Class;
		Kernel$class.$superclass$slot = Class;

		//mixin$slot
		Object.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Object);
		Class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Class);
		Metaclass.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Metaclass);
		Mixin.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Mixin);
		UndefinedObject.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$UndefinedObject);
		Kernel.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8);

		Object$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Object.meta);
		Class$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Class.meta);
		Metaclass$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Metaclass.meta);
		Mixin$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Mixin.meta);
		UndefinedObject$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$UndefinedObject.meta);
		Kernel$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.meta);

		//enclosingObject$slot
		Object.$enclosingObject$slot = kernel;
		Class.$enclosingObject$slot = kernel;
		Metaclass.$enclosingObject$slot = kernel;
		Mixin.$enclosingObject$slot = kernel;
		UndefinedObject.$enclosingObject$slot = kernel;
		Kernel.$enclosingObject$slot = nil;

		Object$class.$enclosingObject$slot = kernel;
		Class$class.$enclosingObject$slot = kernel;
		Metaclass$class.$enclosingObject$slot = kernel;
		Mixin$class.$enclosingObject$slot = kernel;
		UndefinedObject$class.$enclosingObject$slot = kernel;
		Kernel$class.$enclosingObject$slot = nil;

		enclosingObjects[0] = kernel;
		enclosingObjects[1] = nil;
		enclosingObjects2[0] = nil;

		//name$slot
		Object.$name$slot = "Object";
		Class.$name$slot = "Class";
		Metaclass.$name$slot = "Metaclass";
		Mixin.$name$slot = "Mixin";
		UndefinedObject.$name$slot = "UndefinedObject";
		Kernel.$name$slot = "Kernel";

		Object$class.$name$slot = "Object class";
		Class$class.$name$slot = "Class class";
		Metaclass$class.$name$slot = "Metaclass class";
		Mixin$class.$name$slot = "Mixin class";
		UndefinedObject$class.$name$slot = "UndefinedObject class";
		Kernel$class.$name$slot = "Kernel class";

		//runtimeClass
		Object.runtimeClass = Object$runtimeClass;
		Class.runtimeClass = Class$runtimeClass;
		Metaclass.runtimeClass = Metaclass$runtimeClass;
		Mixin.runtimeClass = Mixin$runtimeClass;
		UndefinedObject.runtimeClass = UndefinedObject$runtimeClass;
		Kernel.runtimeClass = Kernel$runtimeClass;

		Object$class.runtimeClass = Metaclass$runtimeClass;
		Class$class.runtimeClass = Metaclass$runtimeClass;
		Metaclass$class.runtimeClass = Metaclass$runtimeClass;
		Mixin$class.runtimeClass = Metaclass$runtimeClass;
		UndefinedObject$class.runtimeClass = Metaclass$runtimeClass;
		Kernel$class.runtimeClass = Metaclass$runtimeClass;

		//thisClass$slot
		Object$class.$thisClass$slot = Object;
		Class$class.$thisClass$slot = Class;
		Metaclass$class.$thisClass$slot = Metaclass;
		Mixin$class.$thisClass$slot = Mixin;
		UndefinedObject$class.$thisClass$slot = UndefinedObject;
		Kernel$class.$thisClass$slot = Kernel;

		kernel.$KernelForV8$Object$slot = Object;
		kernel.$KernelForV8$Class$slot = Class;
		kernel.$KernelForV8$Metaclass$slot = Metaclass;
		kernel.$KernelForV8$Mixin$slot = Mixin;
		kernel.$KernelForV8$UndefinedObject$slot = UndefinedObject;

		return kernel;
	};
	this.kernel = this.createKernel();

	this.applyTopLevelMixin = function(runtimeMixin){
		return this.$applyMixin$toSuperclass$withEnclosingObjects$(runtimeMixin, this.kernel._$Object(), [nil]);
	};

	this.$applyMixin$toSuperclass$withEnclosingObjects$ = function(runtimeMixin, newspeakSuperclass, enclosingObjects){
		var Class = this.kernel.$Class();
		var Metaclass = this.kernel.$Metaclass();
		var Mixin = this.kernel.$Mixin();
		
		if (newspeakSuperclass.newspeakClass === Metaclass)
			this.kernel.$Error().$signal("Invalid superclass");  // [newspeakClass] is a Metaclass
		if (newspeakSuperclass.newspeakClass.newspeakClass !== Metaclass)
			this.kernel.$Error().$signal("Invalid superclass");  // [newspeakClass] is an instance

		var runtimeSuperclass = newspeakSuperclass.runtimeClass;
		var runtimeClass = runtimeMixin.invoke(runtimeSuperclass, enclosingObjects);
		var runtimeMetaclass = runtimeMixin.meta.invoke(Class.runtimeClass, enclosingObjects);
		runtimeClass.meta = runtimeMetaclass;
		runtimeMetaclass.nonMeta = runtimeClass;

		var newspeakMetaclass = Metaclass.$new();
		var newspeakClass = new runtimeMetaclass.basicNew();

		runtimeClass.newspeakClass = newspeakClass;
		runtimeMetaclass.newspeakClass = newspeakMetaclass;//Class;

		newspeakMetaclass.$superclass$slot = Class;
		newspeakMetaclass.$mixin$slot = Mixin.$fromRuntimeMixin$(runtimeMixin.meta);
		newspeakMetaclass.$enclosingObject$slot = enclosingObjects[0];
		newspeakMetaclass.$enclosingObjects$slot = enclosingObjects;
		newspeakMetaclass.$name$slot = runtimeMixin.name + " class";
		newspeakMetaclass.$thisClass$slot = newspeakClass;
		newspeakMetaclass.runtimeClass = runtimeMetaclass;

		newspeakClass.$superclass$slot = newspeakSuperclass;
		newspeakClass.$mixin$slot = Mixin.$fromRuntimeMixin$(runtimeMixin);
		newspeakClass.$enclosingObject$slot = enclosingObjects[0];
		newspeakClass.$enclosingObjects$slot = enclosingObjects;
		newspeakClass.$name$slot = runtimeMixin.name;
		newspeakClass.runtimeClass = runtimeClass;

		runtimeMixin.applications.push(runtimeClass);
		return newspeakClass;
	};

	var specialCharacters = new Object();
	specialCharacters["plus"] = "+";
	specialCharacters["minus"] = "-";
	specialCharacters["times"] = "*";
	specialCharacters["over"] = "/";
	specialCharacters["back"] = "\\";
	specialCharacters["less"] = "<";
	specialCharacters["greater"] = ">";
	specialCharacters["tilde"] = "~";
	specialCharacters["equal"] = "=";
	specialCharacters["at"] = "@";
	specialCharacters["percent"] = "%";
	specialCharacters["pipe"] = "|";
	specialCharacters["amp"] = "&";
	specialCharacters["question"] = "?";
	specialCharacters["bang"] = "!";
	specialCharacters["comma"] = ",";

	this.$unmangleSelector$ = function(s) {
		if(s[0] != "$") return "<jsSelector:"+s+">";
		if(s[s.length-1] == "$")
			// Keyword
			return s.substring(1).replace(/\$/g,":");
		if(s[1] == "$")
			// Binary
			return s.substring(2).split("$").map(function(x) {return specialCharacters[x];}).join("");
		// Unary / qualified
	   	return s.substring(1).replace(/\$/g,"`");
	};

	this.$mangleSelector$ = function(s) {
		return "$" + s.replace(/\:/g,"$").replace(/\`/g,"$");
	};
};
;

let ns = new function () {
 this.$RuntimeForV8$slot = vmmirror.applyTopLevelMixin(mixins.$RuntimeForV8);
 this.$KernelForV8$slot = vmmirror.applyTopLevelMixin(mixins.$KernelForV8);
 this.$ActorsForV8$slot = vmmirror.applyTopLevelMixin(mixins.$ActorsForV8);
 this.$AliensForV8$slot = vmmirror.applyTopLevelMixin(mixins.$AliensForV8);
 this.$Collections$slot = vmmirror.applyTopLevelMixin(mixins.$Collections);
 this.$MirrorsForV8$slot = vmmirror.applyTopLevelMixin(mixins.$MirrorsForV8);
 this.$MirrorGroups$slot = vmmirror.applyTopLevelMixin(mixins.$MirrorGroups);
 this.$Streams$slot = vmmirror.applyTopLevelMixin(mixins.$Streams);
 this.$Particles$slot = vmmirror.applyTopLevelMixin(mixins.$Particles);
 this.$HopscotchForHTML5Runtime$slot = vmmirror.applyTopLevelMixin(mixins.$HopscotchForHTML5Runtime);
 this.$GraphicsForHTML5$slot = vmmirror.applyTopLevelMixin(mixins.$GraphicsForHTML5);
 this.$TextModule$slot = vmmirror.applyTopLevelMixin(mixins.$TextModule);
 this.$HopscotchForHTML5$slot = vmmirror.applyTopLevelMixin(mixins.$HopscotchForHTML5);
 this.$RuntimeForV8 = function () {
  return this.$RuntimeForV8$slot;
 };
 this.$KernelForV8 = function () {
  return this.$KernelForV8$slot;
 };
 this.$ActorsForV8 = function () {
  return this.$ActorsForV8$slot;
 };
 this.$AliensForV8 = function () {
  return this.$AliensForV8$slot;
 };
 this.$Collections = function () {
  return this.$Collections$slot;
 };
 this.$MirrorsForV8 = function () {
  return this.$MirrorsForV8$slot;
 };
 this.$MirrorGroups = function () {
  return this.$MirrorGroups$slot;
 };
 this.$Streams = function () {
  return this.$Streams$slot;
 };
 this.$Particles = function () {
  return this.$Particles$slot;
 };
 this.$HopscotchForHTML5Runtime = function () {
  return this.$HopscotchForHTML5Runtime$slot;
 };
 this.$GraphicsForHTML5 = function () {
  return this.$GraphicsForHTML5$slot;
 };
 this.$TextModule = function () {
  return this.$TextModule$slot;
 };
 this.$HopscotchForHTML5 = function () {
  return this.$HopscotchForHTML5$slot;
 };
 this.$accept16px = function () {
  return vmmirror.kernel.$Future().$computing$(
		function(){return vmmirror.platform.$js().$yourself()._$alienate$(
			function(){ var i = new Image(); i.src ="accept16px.png"; return i;}() );});
 };
 this.$cancel16px = function () {
  return vmmirror.kernel.$Future().$computing$(
		function(){return vmmirror.platform.$js().$yourself()._$alienate$(
			function(){ var i = new Image(); i.src ="cancel16px.png"; return i;}() );});
 };
 this.$disclosureClosedImage = function () {
  return vmmirror.kernel.$Future().$computing$(
		function(){return vmmirror.platform.$js().$yourself()._$alienate$(
			function(){ var i = new Image(); i.src ="disclosureClosedImage.png"; return i;}() );});
 };
 this.$disclosureTransitionImage = function () {
  return vmmirror.kernel.$Future().$computing$(
		function(){return vmmirror.platform.$js().$yourself()._$alienate$(
			function(){ var i = new Image(); i.src ="disclosureTransitionImage.png"; return i;}() );});
 };
 this.$disclosureOpenImage = function () {
  return vmmirror.kernel.$Future().$computing$(
		function(){return vmmirror.platform.$js().$yourself()._$alienate$(
			function(){ var i = new Image(); i.src ="disclosureOpenImage.png"; return i;}() );});
 };
 this.$hsDropdownImage = function () {
  return vmmirror.kernel.$Future().$computing$(
		function(){return vmmirror.platform.$js().$yourself()._$alienate$(
			function(){ var i = new Image(); i.src ="hsDropdownImage.png"; return i;}() );});
 };
 this.$hsDropdownOutImage = function () {
  return vmmirror.kernel.$Future().$computing$(
		function(){return vmmirror.platform.$js().$yourself()._$alienate$(
			function(){ var i = new Image(); i.src ="hsDropdownOutImage.png"; return i;}() );});
 };
 this.$hsDropdownOverImage = function () {
  return vmmirror.kernel.$Future().$computing$(
		function(){return vmmirror.platform.$js().$yourself()._$alienate$(
			function(){ var i = new Image(); i.src ="hsDropdownOverImage.png"; return i;}() );});
 };
}();

function installDnuHandlersOn (p) {
 [
  "$$plus",
  "$$comma",
  "$$over$over",
  "$$less",
  "$$less$equal",
  "$$equal",
  "$$greater",
  "$$greater$equal",
  "$$at",
  "$AbstractClassHeaderMirror",
  "$AbstractList",
  "$Actors",
  "$ActorsForV8",
  "$AddableList",
  "$Alien",
  "$Aliens",
  "$AliensForV8",
  "$Array",
  "$Association",
  "$Atom",
  "$BasicIExStream",
  "$BasicInputStream",
  "$BasicOutputReadStream",
  "$BasicOutputStream",
  "$BasicReadStream",
  "$BasicReadWriteStream",
  "$BlankFragment",
  "$Boolean",
  "$ButtonFragment",
  "$ByteArray",
  "$CanvasFragment",
  "$Character",
  "$CharacterConverterWithOutput",
  "$CharacterIStream",
  "$CharacterInput",
  "$CharacterInputConverter",
  "$CharacterOStream",
  "$CharacterOutput",
  "$ClassDeclarationBuilder",
  "$ClassDeclarationMirror",
  "$ClassHeaderMirror",
  "$ClassMirror",
  "$Closure",
  "$CodeMirror",
  "$CodeMirrorFragment",
  "$Collection",
  "$Collections",
  "$Color",
  "$ColorDecorator",
  "$ColumnComposer",
  "$CombinatorialParsing",
  "$Compilation",
  "$Compiler",
  "$Composer",
  "$Context",
  "$DOMActor",
  "$Decorator",
  "$DeferredContentComposer",
  "$DropDownMenuFragment",
  "$EIOStream",
  "$EIStream",
  "$EOStream",
  "$Error",
  "$EventualSendReactor",
  "$Exception",
  "$Expat",
  "$ExternalInputStream",
  "$ExternalOutputStream",
  "$ExternalReadStream",
  "$ExternalStream",
  "$Fragment",
  "$Future",
  "$Graphics",
  "$GraphicsForHTML5",
  "$HashedCollection",
  "$HolderComposer",
  "$Hopscotch",
  "$HopscotchForHTML5",
  "$HopscotchForHTML5Runtime",
  "$HopscotchShell",
  "$HopscotchWindow",
  "$HyperlinkFragment",
  "$HyperlinkImageFragment",
  "$IRBasedClassDeclarationBuilder",
  "$IdentityMap",
  "$IdentityMutableHashedMap",
  "$ImageButtonFragment",
  "$Images",
  "$ImmutableMirrorGroup",
  "$ImplementationBase",
  "$InternalActor",
  "$InternalBrokenRef",
  "$InternalFarReference",
  "$InternalLocalPromise",
  "$InternalNearRef",
  "$InternalRef",
  "$InternalRemotePromise",
  "$Interval",
  "$JSObject",
  "$JavascriptGeneration",
  "$KernelForV8",
  "$LeafFragment",
  "$List",
  "$ListReadStream",
  "$ListReadWriteStream",
  "$LocalNavigationHistory",
  "$Map",
  "$Math",
  "$Message",
  "$MessageNotUnderstood",
  "$MethodBuilder",
  "$MethodMirror",
  "$MirrorGroups",
  "$Mirrors",
  "$MirrorsForV8",
  "$Mixin",
  "$MixinBasedClassDeclarationBuilder",
  "$MixinBuilder",
  "$MixinMirror",
  "$MutableAddableList",
  "$MutableArrayList",
  "$MutableHashedMap",
  "$MutableList",
  "$MutableMethodGroup",
  "$MutableMirrorGroup",
  "$MutableNestedClassGroup",
  "$NavigationHistory",
  "$NewspeakASTs",
  "$NewspeakGrammar",
  "$NewspeakParsing",
  "$Number",
  "$Object",
  "$ObjectMirror",
  "$OutputInputConverter",
  "$PaddedFrameComposer",
  "$PendingDelivery",
  "$Platform",
  "$PlatformWithHopscotch",
  "$Point",
  "$Presenter",
  "$PresenterList",
  "$Promise",
  "$PromiseUtils",
  "$ReadExternalOutputStream",
  "$Rectangle",
  "$RedirectReactor",
  "$Ref",
  "$Resolver",
  "$RowComposer",
  "$SeqCltnReadStream",
  "$SeqCltnReadWriteStream",
  "$SequenceComposer",
  "$Set",
  "$SlotDeclarationMirror",
  "$SortedList",
  "$SourceBasedClassHeaderMirror",
  "$StaticImageFragment",
  "$StaticLabelFragment",
  "$Streams",
  "$String",
  "$StringBuilder",
  "$Subject",
  "$Text",
  "$TextBlock",
  "$TextBlockFragment",
  "$TextDisplayFragment",
  "$TextEditorFragment",
  "$TextFragment",
  "$TextModule",
  "$TextProperties",
  "$TextString",
  "$TextStringFragment",
  "$ThreadMirror",
  "$Timer",
  "$ToggleComposer",
  "$WeakArray",
  "$WeakMap",
  "$WhenReactor",
  "$World",
  "$WorldPresenter",
  "$WorldSubject",
  "$Writer",
  "$ZebraDecorator",
  "$$back$back",
  "$__duration$callback$repeating$",
  "$__owner",
  "$__owner$",
  "$_targetActor$",
  "$_targetPromise$",
  "$abs",
  "$accept16px",
  "$acceptResponse",
  "$acceptResponse$",
  "$accessModifier",
  "$accumulateUntil$",
  "$action",
  "$action$",
  "$actors",
  "$actualAtEnd",
  "$actualContent",
  "$actualContent$",
  "$actualNext",
  "$actualPosition",
  "$actualPosition$",
  "$actualPosition_slot",
  "$actualPosition_slot$",
  "$add$",
  "$add$afterIndex$",
  "$add$beforeIndex$",
  "$addAll$",
  "$addDecorator$",
  "$addEventListener$action$",
  "$addFirst$",
  "$addLast$",
  "$addMirror$",
  "$addRange$",
  "$addReactor$",
  "$advanceAmount",
  "$advanceBuffer",
  "$advanceBufferLocation",
  "$after$do$",
  "$alert$",
  "$alien",
  "$alienate$",
  "$alignItems",
  "$alignItems$",
  "$alignment",
  "$allSuperclasses",
  "$allVisits",
  "$allVisits$",
  "$alpha",
  "$anyOne",
  "$appendChild$",
  "$applyConstructorUsingEval$",
  "$applyMixin$toSuperclass$withEnclosingObjects$",
  "$applyStyle$",
  "$applyStyles",
  "$applyTo$",
  "$applyTo$withName$",
  "$applyToStyle$",
  "$arc$with$with$with$with$",
  "$arcAt$radius$from$to$",
  "$arguments",
  "$arrangeForFinalization",
  "$asArray",
  "$asBuilder",
  "$asCSSString",
  "$asFloat",
  "$asInteger",
  "$asInternalRef$",
  "$asMutableArrayList",
  "$asSet",
  "$asSortedList",
  "$asString",
  "$asciiValue",
  "$assert$",
  "$assert$message$",
  "$associationAt$ifAbsent$",
  "$associationsDo$",
  "$asts",
  "$at$",
  "$at$ifAbsent$",
  "$at$ifAbsentPut$",
  "$at$ifPresent$ifAbsentPut$",
  "$at$put$",
  "$at$put$ifNew$",
  "$at$putUnicode$",
  "$atEnd",
  "$atEndOrPeekIs$",
  "$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$",
  "$atoms",
  "$augment$withPropertiesOf$",
  "$augmentPrototypes",
  "$beginPath",
  "$between$and$",
  "$binarySearchFor$between$and$toCompare$",
  "$binaryStream",
  "$binaryStream$",
  "$bitAnd$",
  "$bitShift$",
  "$bitXor$",
  "$blank$",
  "$blockOrValue000",
  "$blockOrValue000$",
  "$blue",
  "$body",
  "$bottomColor",
  "$break$",
  "$buffer",
  "$buffer$",
  "$bufferNumElements",
  "$bufferNumElements$",
  "$bufferOrigin",
  "$bufferOrigin$",
  "$bufferSize",
  "$bufferSize$",
  "$buildValForKey$element$",
  "$byteAt$",
  "$cancel16px",
  "$cancelResponse",
  "$cancelled",
  "$cancelled$",
  "$canvas$",
  "$ceiling",
  "$changeResponse",
  "$checkCurrentActor",
  "$checkCycle",
  "$childAlignSelf",
  "$childAlignSelf$",
  "$childrenDo$",
  "$class",
  "$classComment",
  "$classHeader",
  "$classMixinOf$",
  "$classOf$",
  "$classSide",
  "$classSideSlot",
  "$classSideSlot$",
  "$clone",
  "$cloneNode$",
  "$cloneWithDefaultProperties$",
  "$close",
  "$coerce$",
  "$collapsed$expanded$initiallyExpanded$",
  "$collapsedDefinition",
  "$collapsedDefinition$expandedDefinition$initiallyExpanded$",
  "$collapsedPresenter",
  "$collapsedPresenter$",
  "$collect$",
  "$collectUsingAdd$",
  "$collectUsingAtPut$",
  "$collection",
  "$collection$",
  "$collection$matchesElementsAt$",
  "$collections",
  "$collideWith$",
  "$color",
  "$color$",
  "$column$",
  "$compilation",
  "$compileClassSource$within$",
  "$compileExpression$with$",
  "$compileExpressionSource$inMixin$withScope$",
  "$compileMethodSource$within$",
  "$compiler",
  "$compressibility",
  "$compressibility$",
  "$computeClassDeclIR",
  "$computeClassSide",
  "$computeContentForMenu$",
  "$computeInstanceSide",
  "$computeMirrorGroup$",
  "$computing$",
  "$content",
  "$content$offsets$",
  "$contentFor$within$",
  "$contentFragment",
  "$contentFragment$",
  "$contentHolder",
  "$contentHolder$",
  "$contentSource",
  "$contents",
  "$contents$",
  "$contentsDo$",
  "$contentsRemaining",
  "$contentsWritten",
  "$context",
  "$controlBarColor",
  "$copy",
  "$copyFrom$to$",
  "$copyReplaceAll$with$",
  "$copyReplaceFrom$to$with$",
  "$copyUntilFirstColon$",
  "$copyWithSize$",
  "$core",
  "$corner",
  "$corner$",
  "$cos",
  "$counterfactualBar",
  "$counterfactualBar$",
  "$counterfactualBarX",
  "$counterfactualBarX$",
  "$cr",
  "$crTab$",
  "$createElement$",
  "$createFarReferenceTo$in$for$",
  "$createFirstTable",
  "$createPresenter",
  "$createRange",
  "$createTextNode$",
  "$createVisual",
  "$crossAxisStretch",
  "$cull$",
  "$cull$cull$",
  "$cumulativeMillis",
  "$cumulativeMillis$",
  "$current",
  "$currentActor",
  "$currentHopscotchWindow",
  "$currentHopscotchWindow$",
  "$currentMonotonicMillis",
  "$currentPresenter",
  "$currentPresenterX",
  "$currentPresenterX$",
  "$currentVisitSlot",
  "$currentVisitSlot$",
  "$cursorPosition",
  "$cursorPosition$",
  "$data",
  "$declaration",
  "$declarationData",
  "$decorate$",
  "$decorators",
  "$decorators$",
  "$defaultAcceptResponse",
  "$defaultActor",
  "$defaultCancelResponse",
  "$defaultCapacity",
  "$defaultChangeResponse",
  "$defaultExpected",
  "$defaultMedianOf$and$and$",
  "$defaultSort$to$",
  "$defaultSortBlock",
  "$deferAction$",
  "$deferredContentQueue",
  "$definingMixin",
  "$definingMixinX",
  "$definition",
  "$definitions",
  "$definitions$",
  "$deleted",
  "$deleted$",
  "$deletedClassMethods$",
  "$deletedInstanceMethods$",
  "$deliverIn$",
  "$descriptor",
  "$descriptor$",
  "$destinationActor",
  "$detect$",
  "$detect$ifNone$",
  "$dirty",
  "$dirty$",
  "$disclosureClosedImage",
  "$disclosureOpenImage",
  "$disclosureTransitionImage",
  "$displayPresenter$",
  "$dnuHandlers",
  "$do$",
  "$do$separatedBy$",
  "$doClose",
  "$document",
  "$doesNotUnderstand$",
  "$drawOn$",
  "$dropDownImage",
  "$dropDownOutImage",
  "$dropDownOverImage",
  "$editor",
  "$editor$",
  "$editorX",
  "$editorX$",
  "$elapsedMilliseconds",
  "$elasticity$",
  "$elementFor$",
  "$elementForCopy$",
  "$elementaryTextUnits",
  "$embeddedWindowMap",
  "$enabled",
  "$enclosingClass",
  "$enclosingObject",
  "$enclosingObjects",
  "$end",
  "$endGap",
  "$enqueueMessage$",
  "$ensureSubstance",
  "$enterEditState",
  "$enterPresenter$",
  "$enterSubject$",
  "$enterSubject$fromSnippet$",
  "$erase",
  "$eraseFuture",
  "$erasePast",
  "$error$",
  "$evaluate$with$",
  "$eventualSend$arguments$",
  "$eventualSendTo$selector$arguments$",
  "$every$do$",
  "$expandedDefinition",
  "$expandedPresenter",
  "$expandedPresenter$",
  "$expansibility",
  "$expansibility$",
  "$expatriate$",
  "$expatriateBlock$",
  "$extent",
  "$externalFlush",
  "$externalRef",
  "$factory",
  "$fill",
  "$fillBuffer",
  "$fillStyle$",
  "$fillText$with$with$",
  "$find$in$",
  "$findFirst$",
  "$findLast$",
  "$findMirrorNamed$",
  "$first",
  "$firstColor",
  "$firstColor$secondColor$",
  "$firstIndex",
  "$firstTableSize",
  "$flatMap$",
  "$flatten",
  "$flexDirection",
  "$floor",
  "$flush",
  "$flushIfFail$",
  "$font",
  "$font$",
  "$for$classDeclaration$existingMixin$",
  "$forEach$",
  "$forExistingMixin$within$",
  "$forString$",
  "$forString$properties$",
  "$fragments",
  "$from$",
  "$from$to$",
  "$from$to$by$",
  "$from$to$resolver$",
  "$fromCharCode$",
  "$fromIR$existingMixin$within$",
  "$fromRuntimeMixin$",
  "$fromTextArea$with$",
  "$fromUnitSource$",
  "$fulfill$",
  "$fullyQualifiedNameToSimple$",
  "$function",
  "$future",
  "$future$",
  "$generateSourceFor$on$",
  "$generation",
  "$getClass",
  "$getContext$",
  "$getRangeAt$",
  "$getSelection",
  "$getValue",
  "$global",
  "$goBack",
  "$goForward",
  "$goodBufferOriginForPosition$",
  "$grammar",
  "$graphics",
  "$gray$",
  "$green",
  "$group$",
  "$group$within$",
  "$growIfNeeded",
  "$growTable",
  "$halt",
  "$hasChildNodes",
  "$hasVisual",
  "$hash",
  "$hashAt$",
  "$hashFor$",
  "$havePeeked",
  "$havePeeked$",
  "$havePeeked_0",
  "$havePeeked_0$",
  "$header",
  "$headerSource",
  "$history",
  "$hopscotch",
  "$hopscotchRuntime",
  "$hsDropdownImage",
  "$hsDropdownOutImage",
  "$hsDropdownOverImage",
  "$idFor$",
  "$ident$",
  "$identityHash",
  "$identityHashOf$",
  "$ids",
  "$ifFalse$",
  "$ifFalse$ifTrue$",
  "$ifNotNil$",
  "$ifTrue$",
  "$ifTrue$ifFalse$",
  "$image",
  "$image$",
  "$image$action$",
  "$images",
  "$images$",
  "$immediateSend$",
  "$immediateTextUnits",
  "$include$",
  "$include$ifNew$",
  "$includeAll$",
  "$includes$",
  "$includesIndex$",
  "$includesKey$",
  "$includesMirrorNamed$",
  "$increment",
  "$indexFor$",
  "$indexOf$",
  "$indexOf$ifAbsent$",
  "$indexOf$tableMask$",
  "$indexOfSubCollection$startingAt$ifAbsent$",
  "$indicesOfSubCollection$",
  "$indicesOfSubCollection$startingAt$",
  "$initBinaryStream$",
  "$initBuffer",
  "$initBuffer$",
  "$initCapacity$",
  "$initCollection$",
  "$initDescriptor$",
  "$init$Actors$",
  "$init$Aliens$",
  "$init$BasicIExStream$",
  "$init$BasicOutputReadStream$",
  "$init$CharacterConverterWithOutput$",
  "$init$CharacterIStream$",
  "$init$CharacterOStream$",
  "$init$CodeMirror$",
  "$init$Collection$",
  "$init$Collections$",
  "$init$Color$",
  "$init$Context$",
  "$init$EIOStream$",
  "$init$EIStream$",
  "$init$EOStream$",
  "$init$Graphics$",
  "$init$Hopscotch$",
  "$init$ImmutableMirrorGroup$",
  "$init$JSObject$",
  "$init$Kernel$",
  "$init$List$",
  "$init$ListReadStream$",
  "$init$ListReadWriteStream$",
  "$init$Map$",
  "$init$Math$",
  "$init$Message$",
  "$init$MirrorGroups$",
  "$init$Mirrors$",
  "$init$Mixin$",
  "$init$MutableAddableList$",
  "$init$OutputInputConverter$",
  "$init$Point$",
  "$init$Presenter$",
  "$init$Promise$",
  "$init$ReadExternalOutputStream$",
  "$init$Set$",
  "$init$Streams$",
  "$init$StringBuilder$",
  "$init$Subject$",
  "$init$TextBlock$",
  "$init$TextModule$",
  "$init$TextProperties$",
  "$init$TextString$",
  "$init$Timer$",
  "$init$WeakArray$",
  "$init$WeakMap$",
  "$init$__owner$",
  "$init$accept16px$",
  "$init$accessModifier$",
  "$init$action$",
  "$init$actors$",
  "$init$actualPosition_slot$",
  "$init$alien$",
  "$init$alignItems$",
  "$init$alignment$",
  "$init$alpha$",
  "$init$arguments$",
  "$init$asts$",
  "$init$atoms$",
  "$init$blockOrValue000$",
  "$init$blue$",
  "$init$body$",
  "$init$bottomColor$",
  "$init$cancel16px$",
  "$init$cancelled$",
  "$init$childAlignSelf$",
  "$init$classSide$",
  "$init$collapsedDefinition$",
  "$init$collections$",
  "$init$color$",
  "$init$compilation$",
  "$init$compiler$",
  "$init$compressibility$",
  "$init$content$",
  "$init$contentHolder$",
  "$init$contentSource$",
  "$init$core$",
  "$init$corner$",
  "$init$cumulativeMillis$",
  "$init$data$",
  "$init$declaration$",
  "$init$defaultActor$",
  "$init$deferredContentQueue$",
  "$init$definingMixin$",
  "$init$definingMixinX$",
  "$init$definitions$",
  "$init$destinationActor$",
  "$init$dirty$",
  "$init$disclosureClosedImage$",
  "$init$disclosureOpenImage$",
  "$init$disclosureTransitionImage$",
  "$init$document$",
  "$init$dropDownImage$",
  "$init$dropDownOutImage$",
  "$init$dropDownOverImage$",
  "$init$embeddedWindowMap$",
  "$init$enabled$",
  "$init$enclosingClass$",
  "$init$expandedDefinition$",
  "$init$expansibility$",
  "$init$extent$",
  "$init$firstColor$",
  "$init$fragments$",
  "$init$generation$",
  "$init$global$",
  "$init$grammar$",
  "$init$graphics$",
  "$init$green$",
  "$init$havePeeked_0$",
  "$init$history$",
  "$init$hopscotch$",
  "$init$hopscotchRuntime$",
  "$init$ids$",
  "$init$image$",
  "$init$images$",
  "$init$increment$",
  "$init$initialContent$",
  "$init$instanceSide$",
  "$init$internalActor$",
  "$init$internalRef$",
  "$init$internalRefs$",
  "$init$internalResolver$",
  "$init$isExpanded$",
  "$init$isInEditState$",
  "$init$isMutable$",
  "$init$js$",
  "$init$justifyContent$",
  "$init$kernel$",
  "$init$key$",
  "$init$label$",
  "$init$localNavigator$",
  "$init$m$",
  "$init$mangledSelector$",
  "$init$menuActive$",
  "$init$menuSupplier$",
  "$init$message$",
  "$init$methods$",
  "$init$mirrors$",
  "$init$mixinMirror$",
  "$init$model$",
  "$init$name$",
  "$init$navigator$",
  "$init$nestedClasses$",
  "$init$nextId$",
  "$init$offsets$",
  "$init$onError$",
  "$init$onValue$",
  "$init$origin$",
  "$init$parserLib$",
  "$init$parsing$",
  "$init$parts$",
  "$init$platform$",
  "$init$presenterSourceX$",
  "$init$problem$",
  "$init$promise$",
  "$init$prvtExistingMixin$",
  "$init$prvtIR$",
  "$init$r$",
  "$init$receiver$",
  "$init$red$",
  "$init$reflectee$",
  "$init$reflecteeX$",
  "$init$resolver$",
  "$init$result$",
  "$init$secondColor$",
  "$init$selector$",
  "$init$size$",
  "$init$sizeX$",
  "$init$slots$",
  "$init$source$",
  "$init$sourceActor$",
  "$init$sourceIndex$",
  "$init$start$",
  "$init$state000$",
  "$init$state$",
  "$init$stateImages$",
  "$init$stop$",
  "$init$streams$",
  "$init$string$",
  "$init$styles$",
  "$init$subfragments$",
  "$init$subject$",
  "$init$target$",
  "$init$targetsActor$",
  "$init$tau$",
  "$init$text$",
  "$init$textProperties$",
  "$init$textSlot$",
  "$init$textUnits$",
  "$init$textX$",
  "$init$topColor$",
  "$init$transientTestBlock$",
  "$init$value$",
  "$init$vmmirror$",
  "$init$vx$",
  "$init$vy$",
  "$init$window$",
  "$init$x$",
  "$init$y$",
  "$initialContent",
  "$initialContent$contentSource$",
  "$inject$into$",
  "$insertAdjacentElement$into$",
  "$installCollapsedPresenter",
  "$installContentVisual$",
  "$installExpandedPresenter",
  "$instanceSide",
  "$instanceSideSlot",
  "$instanceSideSlot$",
  "$instance$initializer",
  "$internalActor",
  "$internalIndexIsValid$",
  "$internalRangeCheck$",
  "$internalRef",
  "$internalRefs",
  "$internalResolve$",
  "$internalResolver",
  "$into$openSubject$",
  "$isAlien",
  "$isBehavior",
  "$isCharacter",
  "$isEmpty",
  "$isExpanded",
  "$isExpanded$",
  "$isExpat",
  "$isFutureEmpty",
  "$isInEditState",
  "$isInEditState$",
  "$isInternalRef",
  "$isKindOfClassMirror",
  "$isKindOfClosure",
  "$isKindOfCollection",
  "$isKindOfFuture",
  "$isKindOfIntermediateMixin",
  "$isKindOfObjectMirror",
  "$isKindOfString",
  "$isKindOfText",
  "$isKindOfTextString",
  "$isMeta",
  "$isNil",
  "$isNumber",
  "$isPastEmpty",
  "$isPoint",
  "$isProtected",
  "$isPublic",
  "$isRectangle",
  "$isRef$",
  "$isSortedBy$",
  "$isString",
  "$isSynthetic",
  "$isTransient",
  "$isTransient$",
  "$isUndefined",
  "$isValueObject$",
  "$item$",
  "$js",
  "$justifyContent",
  "$justifyContent$",
  "$kernel",
  "$key",
  "$key$matches$",
  "$key$value$",
  "$keyFor$",
  "$keys",
  "$keysAndValuesDo$",
  "$keysDo$",
  "$label",
  "$label$action$",
  "$last",
  "$lastIndex",
  "$lastIndex$",
  "$leaveEditState",
  "$lf",
  "$lighterColorFirst",
  "$lineTo$with$",
  "$link$action$",
  "$listenForBackButton",
  "$literal$",
  "$localNavigator",
  "$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$",
  "$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$",
  "$m",
  "$makeSpace$beforeIndex$",
  "$makeSpaceAtStart$",
  "$mangle$",
  "$mangleProtected$",
  "$manglePublic$",
  "$mangleSelector$",
  "$mangledSelector",
  "$mangledSelector$arguments$",
  "$markDeleted$",
  "$markText$to$style$",
  "$max$",
  "$maxPrintElements",
  "$menu$",
  "$menu$alignment$",
  "$menu$images$",
  "$menu$images$alignment$",
  "$menuActive",
  "$menuActive$",
  "$menuSupplier",
  "$menuWithLabelsAndActions$",
  "$mergeSortFrom$to$by$",
  "$mergeSortFrom$to$src$dst$by$",
  "$message",
  "$messageText",
  "$messageText$",
  "$methods",
  "$min$",
  "$minTableSize",
  "$minTableSizeForCapacity$",
  "$mirrors",
  "$mirrors$",
  "$mixin",
  "$mixinApply$",
  "$mixinMirror",
  "$model",
  "$moveTo$with$",
  "$name",
  "$name$accessModifier$isMutable$mixin$",
  "$name$accessModifier$mixin$source$",
  "$named$",
  "$names",
  "$navigationHistory",
  "$navigator",
  "$needSpaceAtEnd$",
  "$needSpaceAtStart$",
  "$nestedClassBuilderFor$within$",
  "$nestedClasses",
  "$new",
  "$new$",
  "$new$sortBlock$",
  "$new$withAll$",
  "$newBuildStream",
  "$newCollectionOfSize$",
  "$newCopyOfSize$thatCanAlsoHoldElementsOf$",
  "$newForCollectUsingAdd$",
  "$newForCollectUsingAtPut$",
  "$newTableWithSize$",
  "$next",
  "$next$",
  "$nextBufferPosition",
  "$nextBufferPosition$",
  "$nextDeferredAction",
  "$nextFrameDo$",
  "$nextFromPeek",
  "$nextId",
  "$nextId$",
  "$nextIfAbsent$",
  "$nextPut$",
  "$nextPutAll$",
  "$noPeekVal",
  "$not",
  "$notTopLevel",
  "$nothing",
  "$noticeExposure",
  "$noticeSubstanceCreation",
  "$numCharsUpToAscii$",
  "$objToIncludeFor$withExisting$",
  "$occupied",
  "$offsets",
  "$oldText",
  "$oldText$",
  "$on$",
  "$on$do$",
  "$on$numElements$",
  "$on$respondToChange$",
  "$onError",
  "$onModel$",
  "$onSubject$",
  "$onText$",
  "$onText$subfragments$",
  "$onValue",
  "$onValue$onError$resolver$",
  "$openMenu$",
  "$openSubject$",
  "$operatingSystem",
  "$origin",
  "$origin$corner$",
  "$origin$extent$",
  "$out",
  "$over$",
  "$packageUsing$",
  "$parent",
  "$parent$",
  "$parseString$",
  "$parser",
  "$parserLib",
  "$parsing",
  "$parts",
  "$pass",
  "$past",
  "$past$",
  "$peek",
  "$peekIfAbsent$",
  "$peekVal",
  "$peekVal$",
  "$platform",
  "$platform$",
  "$pointSize",
  "$pointSize$",
  "$posFromIndex$",
  "$position",
  "$position$",
  "$postCopy",
  "$postedTo$",
  "$presenter",
  "$presenterFor$",
  "$presenterSource$",
  "$presenterSourceX",
  "$presenterSourceX$",
  "$presenterX",
  "$presenterX$",
  "$presenters",
  "$presenters$",
  "$presentersX",
  "$presentersX$",
  "$print$",
  "$printCharacter",
  "$printElementsDo$",
  "$printOn$",
  "$printString",
  "$problem",
  "$problem$__owner$",
  "$process",
  "$process$",
  "$promise",
  "$propertyOf$at$",
  "$prvtExistingMixin",
  "$prvtExistingMixin$",
  "$prvtIR",
  "$pushState$title$",
  "$qualifiedName",
  "$quo$",
  "$r",
  "$r$g$b$",
  "$r$g$b$a$",
  "$random",
  "$reactBroken$",
  "$reactMoreResolved$",
  "$reactResolved$",
  "$reactors",
  "$reactors$",
  "$readAt$ifFail$",
  "$readWriteStream",
  "$receiver",
  "$receiver$message$",
  "$receiver$selector$arguments$resolver$",
  "$reconstructText",
  "$reconstructTextForNode$",
  "$recordFirst$",
  "$rect$with$with$with$",
  "$rectangle$",
  "$red",
  "$redirectFrom$to$resolving$",
  "$reduce$ifEmpty$",
  "$refPrintOn$",
  "$reflectee",
  "$reflecteeX",
  "$reflecting$",
  "$reflecting$in$source$",
  "$refresh",
  "$refreshPresenterList",
  "$refreshmentSubject",
  "$reject$",
  "$remove$",
  "$remove$at$",
  "$remove$ifAbsent$",
  "$removeAllRanges",
  "$removeAt$",
  "$removeChild$",
  "$removeContent",
  "$removeEvery$startingAt$",
  "$removeFirst",
  "$removeKey$",
  "$removeKey$ifAbsent$",
  "$removeLast",
  "$removeMirror$",
  "$removeMirrorNamed$",
  "$reorder$",
  "$replace$with$",
  "$replaceAll$with$",
  "$replaceChild$from$",
  "$replaceChild$with$",
  "$replaceFrom$to$with$",
  "$replaceFrom$to$with$startingAt$",
  "$repositioningAt$",
  "$requestAnimationFrame$",
  "$resolution",
  "$resolution$",
  "$resolve",
  "$resolver",
  "$respondToAccept$",
  "$respondToCancel",
  "$respondToChange$",
  "$reverse",
  "$reverseDo$",
  "$runtimeMixin",
  "$scaledR$g$b$a$",
  "$schedule$after$",
  "$schedule$every$",
  "$scrollIntoView$",
  "$secondColor",
  "$select$",
  "$select$thenDo$",
  "$selector",
  "$selector$arguments$",
  "$selector$arguments$resolver$",
  "$sendTo$",
  "$setEnd$to$",
  "$setPresenters$",
  "$setProperty$to$",
  "$setStart$to$",
  "$setTable$",
  "$setText$",
  "$setTimeout$with$",
  "$setToEnd",
  "$setValue$",
  "$setVisualText$",
  "$sharedBackButtonListener",
  "$sharedBackButtonListener$",
  "$sharedNavigationHistory",
  "$sharedNavigationHistory$",
  "$sharedNavigator",
  "$shell",
  "$shouldNotHappen",
  "$sign",
  "$signal",
  "$signal$",
  "$simpleName",
  "$sin",
  "$size",
  "$size$",
  "$sizeX",
  "$sizeX$",
  "$size_0",
  "$size_0$",
  "$skipTo$",
  "$slots",
  "$sort",
  "$sort$to$using$",
  "$sortBlock",
  "$sortBlock$",
  "$sortBlock_private",
  "$sortBlock_private$",
  "$source",
  "$sourceActor",
  "$sourceIndex",
  "$sourceIndexForMethod$ofMixin$",
  "$space",
  "$splitBy$",
  "$sqrt",
  "$squeak",
  "$start",
  "$startGap",
  "$startGap$",
  "$startMillis",
  "$startMillis$",
  "$startsWith$",
  "$state",
  "$state000",
  "$state000$",
  "$state$",
  "$state$result$",
  "$stateImages",
  "$stop",
  "$stop5",
  "$streams",
  "$strikeThrough",
  "$strikeThrough$",
  "$string",
  "$stroke",
  "$style",
  "$styles",
  "$styles$",
  "$subclassResponsibility",
  "$subfragments",
  "$subject",
  "$substanceSlot",
  "$substanceSlot$",
  "$superConstructorCall",
  "$superInit$ActorsForV8",
  "$superInit$ActorsForV8$Actor",
  "$superInit$ActorsForV8$DOMActor",
  "$superInit$ActorsForV8$EventualSendReactor",
  "$superInit$ActorsForV8$InternalActor",
  "$superInit$ActorsForV8$InternalBrokenRef",
  "$superInit$ActorsForV8$InternalFarReference",
  "$superInit$ActorsForV8$InternalLocalPromise",
  "$superInit$ActorsForV8$InternalNearRef",
  "$superInit$ActorsForV8$InternalRef",
  "$superInit$ActorsForV8$InternalRemotePromise",
  "$superInit$ActorsForV8$PendingDelivery",
  "$superInit$ActorsForV8$PromiseUtils",
  "$superInit$ActorsForV8$RedirectReactor",
  "$superInit$ActorsForV8$Ref",
  "$superInit$ActorsForV8$Resolver",
  "$superInit$ActorsForV8$Scheduler",
  "$superInit$ActorsForV8$Timer",
  "$superInit$ActorsForV8$WhenReactor",
  "$superInit$AliensForV8",
  "$superInit$AliensForV8$Alien",
  "$superInit$AliensForV8$Expat",
  "$superInit$Collections",
  "$superInit$Collections$AbstractList",
  "$superInit$Collections$AddableList",
  "$superInit$Collections$Association",
  "$superInit$Collections$Collection",
  "$superInit$Collections$HashedCollection",
  "$superInit$Collections$IdentityMutableHashedMap",
  "$superInit$Collections$IdentitySet",
  "$superInit$Collections$Interval",
  "$superInit$Collections$MutableArrayList",
  "$superInit$Collections$MutableHashedMap",
  "$superInit$Collections$MutableList",
  "$superInit$Collections$Set",
  "$superInit$Collections$SortedList",
  "$superInit$GraphicsForHTML5",
  "$superInit$GraphicsForHTML5$Canvas",
  "$superInit$GraphicsForHTML5$Color",
  "$superInit$GraphicsForHTML5$Context",
  "$superInit$GraphicsForHTML5$Point",
  "$superInit$GraphicsForHTML5$Rectangle",
  "$superInit$HopscotchForHTML5",
  "$superInit$HopscotchForHTML5Runtime",
  "$superInit$HopscotchForHTML5Runtime$Images",
  "$superInit$HopscotchForHTML5Runtime$PlatformWithHopscotch",
  "$superInit$HopscotchForHTML5$BlankFragment",
  "$superInit$HopscotchForHTML5$ButtonFragment",
  "$superInit$HopscotchForHTML5$CanvasFragment",
  "$superInit$HopscotchForHTML5$CodeMirrorFragment",
  "$superInit$HopscotchForHTML5$ColorDecorator",
  "$superInit$HopscotchForHTML5$ColumnComposer",
  "$superInit$HopscotchForHTML5$Composer",
  "$superInit$HopscotchForHTML5$Decorator",
  "$superInit$HopscotchForHTML5$DeferredContentComposer",
  "$superInit$HopscotchForHTML5$DropDownMenuFragment",
  "$superInit$HopscotchForHTML5$EmbeddedHopscotchWindow",
  "$superInit$HopscotchForHTML5$Fragment",
  "$superInit$HopscotchForHTML5$Gradient",
  "$superInit$HopscotchForHTML5$HolderComposer",
  "$superInit$HopscotchForHTML5$HopscotchShell",
  "$superInit$HopscotchForHTML5$HopscotchWindow",
  "$superInit$HopscotchForHTML5$HyperlinkFragment",
  "$superInit$HopscotchForHTML5$HyperlinkImageFragment",
  "$superInit$HopscotchForHTML5$ImageButtonFragment",
  "$superInit$HopscotchForHTML5$LeafFragment",
  "$superInit$HopscotchForHTML5$LocalNavigationHistory",
  "$superInit$HopscotchForHTML5$NavigationHistory",
  "$superInit$HopscotchForHTML5$PaddedFrameComposer",
  "$superInit$HopscotchForHTML5$Presenter",
  "$superInit$HopscotchForHTML5$PresenterList",
  "$superInit$HopscotchForHTML5$RowComposer",
  "$superInit$HopscotchForHTML5$SequenceComposer",
  "$superInit$HopscotchForHTML5$StaticImageFragment",
  "$superInit$HopscotchForHTML5$StaticLabelFragment",
  "$superInit$HopscotchForHTML5$Subject",
  "$superInit$HopscotchForHTML5$TextBlockFragment",
  "$superInit$HopscotchForHTML5$TextDisplayFragment",
  "$superInit$HopscotchForHTML5$TextEditorFragment",
  "$superInit$HopscotchForHTML5$TextFragment",
  "$superInit$HopscotchForHTML5$TextStringFragment",
  "$superInit$HopscotchForHTML5$ToggleComposer",
  "$superInit$HopscotchForHTML5$ZebraDecorator",
  "$superInit$KernelForV8",
  "$superInit$KernelForV8$Array",
  "$superInit$KernelForV8$Boolean",
  "$superInit$KernelForV8$ByteArray",
  "$superInit$KernelForV8$Class",
  "$superInit$KernelForV8$Closure",
  "$superInit$KernelForV8$Exception",
  "$superInit$KernelForV8$Future",
  "$superInit$KernelForV8$Message",
  "$superInit$KernelForV8$MessageNotUnderstood",
  "$superInit$KernelForV8$Metaclass",
  "$superInit$KernelForV8$Mixin",
  "$superInit$KernelForV8$Number",
  "$superInit$KernelForV8$Object",
  "$superInit$KernelForV8$Stopwatch",
  "$superInit$KernelForV8$String",
  "$superInit$KernelForV8$StringBuilder",
  "$superInit$KernelForV8$UndefinedObject",
  "$superInit$MirrorGroups",
  "$superInit$MirrorGroups$ImmutableMirrorGroup",
  "$superInit$MirrorGroups$MirrorGroup",
  "$superInit$MirrorsForV8",
  "$superInit$MirrorsForV8$AbstractClassHeaderMirror",
  "$superInit$MirrorsForV8$ClassDeclarationBuilder",
  "$superInit$MirrorsForV8$ClassDeclarationMirror",
  "$superInit$MirrorsForV8$ClassHeaderMirror",
  "$superInit$MirrorsForV8$ClassMirror",
  "$superInit$MirrorsForV8$IRBasedClassDeclarationBuilder",
  "$superInit$MirrorsForV8$MethodBuilder",
  "$superInit$MirrorsForV8$MethodMirror",
  "$superInit$MirrorsForV8$MixinBasedClassDeclarationBuilder",
  "$superInit$MirrorsForV8$MixinBuilder",
  "$superInit$MirrorsForV8$MixinMirror",
  "$superInit$MirrorsForV8$MutableMethodGroup",
  "$superInit$MirrorsForV8$MutableMirrorGroup",
  "$superInit$MirrorsForV8$MutableNestedClassGroup",
  "$superInit$MirrorsForV8$ObjectMirror",
  "$superInit$MirrorsForV8$SlotDeclarationMirror",
  "$superInit$MirrorsForV8$SourceBasedClassHeaderMirror",
  "$superInit$MirrorsForV8$ThreadMirror",
  "$superInit$Particles",
  "$superInit$Particles$World",
  "$superInit$Particles$World$Atom",
  "$superInit$Particles$World$World",
  "$superInit$Particles$World$WorldPresenter",
  "$superInit$Particles$World$WorldSubject",
  "$superInit$RuntimeForV8",
  "$superInit$RuntimeForV8$Platform",
  "$superInit$Streams",
  "$superInit$Streams$BasicInputStream",
  "$superInit$Streams$BasicOutputStream",
  "$superInit$Streams$BasicReadStream",
  "$superInit$Streams$BasicReadWriteStream",
  "$superInit$Streams$CharacterInput",
  "$superInit$Streams$CharacterInputConverter",
  "$superInit$Streams$CharacterInputOutputConverter",
  "$superInit$Streams$CharacterOutput",
  "$superInit$Streams$CharacterOutputConverter",
  "$superInit$Streams$CharacterReadConverter",
  "$superInit$Streams$ExternalInputStream",
  "$superInit$Streams$ExternalOutputStream",
  "$superInit$Streams$ExternalReadStream",
  "$superInit$Streams$ExternalReadWriteStream",
  "$superInit$Streams$ExternalStream",
  "$superInit$Streams$SeqCltnReadStream",
  "$superInit$Streams$SeqCltnReadWriteStream",
  "$superInit$Streams$TempTranscript",
  "$superInit$TextModule",
  "$superInit$TextModule$Text",
  "$superInit$TextModule$TextBlock",
  "$superInit$TextModule$TextProperties",
  "$superInit$TextModule$TextString",
  "$superclass",
  "$supplyDefaultsFor$",
  "$tab",
  "$table",
  "$table$",
  "$tableAt$put$ifNew$",
  "$tableAt$put$inDeletedSlot$",
  "$tableAt$put$inEmptySlot$",
  "$tableAt$put$inMatchingSlot$value$",
  "$tableAt$put$inUnusedSlot$",
  "$tableSizeForCapacity$",
  "$table_0",
  "$table_0$",
  "$target",
  "$target$targetsActor$__owner$",
  "$targetsActor",
  "$tau",
  "$terminate",
  "$text",
  "$text$",
  "$textBeingAccepted",
  "$textBeingAccepted$",
  "$textProperties",
  "$textSlot",
  "$textSlot$",
  "$textUnits",
  "$textX",
  "$textX$",
  "$tick",
  "$title",
  "$toggle",
  "$toggleContent",
  "$toggleWidget",
  "$toggleWidget$",
  "$topColor",
  "$transientTestBlock",
  "$truncated",
  "$underline",
  "$underline$",
  "$unicodeValue",
  "$unimplemented",
  "$units$",
  "$units$properties$",
  "$unmangleSelector$",
  "$unsignedByteAt$",
  "$unsignedByteAt$put$",
  "$upTo$",
  "$updateApplicationsOf$from$by$",
  "$updateBufferLocationAfterFlush",
  "$updateColumn",
  "$updateContent",
  "$updateHeaderSourceForNewRuntimeMixin$from$",
  "$updateInstanceMixin$from$by$",
  "$updateMetaMixin$from$by$",
  "$updateMixin$from$by$",
  "$updateMixinFrom$with$",
  "$updateSourceIndicesOfNewRuntimeMixin$from$",
  "$userBack$",
  "$usesDefaultSortBlock",
  "$usesDefaultSortBlock_private",
  "$usesDefaultSortBlock_private$",
  "$using$",
  "$usingCrLfConvention",
  "$usingLib$",
  "$usingPlatform$",
  "$usingPlatform$asts$parsing$generation$",
  "$usingPlatform$grammar$asts$",
  "$usingPlatform$images$",
  "$usingPlatform$parsers$",
  "$usingPlatform$runtime$vmMirror$",
  "$usingVmMirror$",
  "$valAt$ifAbsent$",
  "$value",
  "$value$",
  "$value$value$",
  "$valueWithArguments$",
  "$visit$",
  "$visual",
  "$visualX",
  "$visualX$",
  "$vmmirror",
  "$vx",
  "$vx$",
  "$vy",
  "$vy$",
  "$warnObsolete",
  "$weight",
  "$weight$",
  "$whenFulfilled$whenBroken$",
  "$white",
  "$window",
  "$with$",
  "$withAll$",
  "$withContent$",
  "$withExtent$",
  "$wrapArgument$from$to$",
  "$wrapArguments$from$to$",
  "$wrapFor$",
  "$wrapping$",
  "$wrapping$__owner$",
  "$write$at$ifFail$",
  "$writeBuffer",
  "$writeIfNeededBeforePositionChange",
  "$writeln$",
  "$x",
  "$x$",
  "$x$y$",
  "$y",
  "$y$",
  "$yourself",
  "$$tilde$equal"
 ].forEach(function (sel) {
  p["_" + sel] = dnuCatcher(sel);
  p[sel] = dnuCatcher(sel);
  Object.defineProperty(p, "_" + sel, {
   "enumerable": false
  });
  Object.defineProperty(p, sel, {
   "enumerable": false
  });
 });
};

var runtime = ns.$RuntimeForV8().$packageUsing$(ns);
vmmirror.platform = runtime.$using$(vmmirror);
var app = ns.$Particles().$packageUsing$(ns);
app.$main$args$(vmmirror.platform, []);